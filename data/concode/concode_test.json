[
    {
        "question_id": 1,
        "intent": "Generate mappings for each Function node and parameters and variables names associated with it .",
        "snippet": "void function ( ScriptOrFnNode arg0 ) { int loc0 = - 1 ; concodefunc_collectFuncNodes ( arg0 , loc0 , null ) ; }"
    },
    {
        "question_id": 2,
        "intent": "Returns a hash of the given files contents . Reads the file fully into memory before hashing so only use with small files .",
        "snippet": "Sha256Hash function ( File arg0 ) { FileInputStream loc0 = new FileInputStream ( arg0 ) ; try { return concodefunc_create ( ByteStreams . toByteArray ( loc0 ) ) ; } finally { loc0 . close ( ) ; } }"
    },
    {
        "question_id": 3,
        "intent": "Obtains the ID of an object and returns it as a String . If canCreate is true it will try to create a new ID for the object if it has none .",
        "snippet": "String function ( Object arg0 , boolean arg1 ) { String loc0 = concodefunc_readObjectID ( arg0 ) ; if ( loc0 == null && arg1 ) { loc0 = concodefunc_createObjectID ( arg0 ) ; } return loc0 ; }"
    },
    {
        "question_id": 4,
        "intent": "Creates a matcher of Comparable object that matches when the examined object isgreater than the specified value , as reported by the compareTo method of the examined object . For example : assertThat 2 , greaterThan 1",
        "snippet": "Matcher < T > function ( T arg0 ) { return ComparatorMatcherBuilder . < T > usingNaturalOrdering ( ) . greaterThan ( arg0 ) ; }"
    },
    {
        "question_id": 5,
        "intent": "Returns denominator",
        "snippet": "int function ( ) { return concodeclass_denom ; }"
    },
    {
        "question_id": 6,
        "intent": "Not required",
        "snippet": "GenericJSONBuilder function ( String arg0 ) { concodeclass_image = arg0 ; return this ; }"
    },
    {
        "question_id": 7,
        "intent": "Implements BundleActivator.stop . Does nothing since the framework will automatically unregister any registered services .",
        "snippet": "void function ( BundleContext arg0 ) { for ( AutoSIMConnectionConfig loc0 : concodeclass_config . connections ) { concodeclass_environments . deregisterConnectionFactory ( loc0 . name ) ; concodeclass_factories . remove ( loc0 . name ) ; } }"
    },
    {
        "question_id": 8,
        "intent": "Tests for the BufferedBlockInStream #seek long method .",
        "snippet": "void function ( ) { concodeclass_mTestStream . seek ( 10 ) ; Assert . assertEquals ( 10 , concodeclass_mTestStream . read ( ) ) ; concodeclass_mTestStream . seek ( 2 ) ; Assert . assertEquals ( 2 , concodeclass_mTestStream . read ( ) ) ; concodeclass_mTestStream . seek ( concodeclass_mBlockSize ) ; Assert . assertEquals ( - 1 , concodeclass_mTestStream . read ( ) ) ; }"
    },
    {
        "question_id": 9,
        "intent": "Tries to perform a `` full '' garbage collection cycle including processing of weak references and invocation of finalize methods and waits for it to complete . Ensures that at least one weak reference has been cleared and one finalize method has been run before thismethod returns . This method may be useful when testing the garbage collection mechanism itself , or inhibiting a spontaneous GC initiation in subsequent code . In contrast , a plain call to java.lang.System #gc does not ensure finalizationprocessing and may run concurrently , for example , if the JVM flag - XX : + ExplicitGCInvokesConcurrent is used.Whenever possible , it is preferable to test directly for some observable change resulting from GC , as with #awaitClear . Because there are no guarantees for the order of GC finalization processing , there may still be some unfinished work for the GC to do after this method returns . This method does not create any memory pressure as would be required to cause soft references to be processed .",
        "snippet": "void function ( ) { final CountDownLatch loc0 = new CountDownLatch ( 1 ) ; WeakReference < Object > loc1 = new WeakReference < Object > ( new Object ( ) { @ Override protected void finalize ( ) { loc0 . countDown ( ) ; } } ) ; concodefunc_await ( loc0 ) ; concodefunc_awaitClear ( loc1 ) ; System . runFinalization ( ) ; }"
    },
    {
        "question_id": 10,
        "intent": "Sets the properties and configuration before each test runs .",
        "snippet": "void function ( ) { concodeclass_mManager = Mockito . mock ( TransferManager . class ) ; Upload loc0 = Mockito . mock ( Upload . class ) ; Mockito . when ( concodeclass_mManager . upload ( Mockito . any ( PutObjectRequest . class ) ) ) . thenReturn ( loc0 ) ; concodeclass_mStream = new S3ADirectOutputStream ( concodeclass_BUCKET_NAME , concodeclass_KEY , concodeclass_mManager ) ; }"
    },
    {
        "question_id": 11,
        "intent": "This function returns the documentation in C-style comment format .",
        "snippet": "String function ( Object arg0 , String arg1 ) { return getDocs ( arg0 , arg1 , \"srini_string\" , \"srini_string\" , \"srini_string\" ) ; }"
    },
    {
        "question_id": 12,
        "intent": "Get the log level for reporting the selection of the new alternative address or endpoint",
        "snippet": "Level function ( ) { return Level . WARNING ; }"
    },
    {
        "question_id": 13,
        "intent": "function to search for a word",
        "snippet": "boolean function ( String arg0 ) { return search ( concodeclass_root , arg0 . toCharArray ( ) , 0 ) ; }"
    },
    {
        "question_id": 14,
        "intent": "Closes the current scans .",
        "snippet": "void function ( ) { concodeclass_prodscan . close ( ) ; }"
    },
    {
        "question_id": 15,
        "intent": "Convert a given String propertyName #propertyValue to a Map",
        "snippet": "Map < String , String > function ( PropertyDTO [ ] arg0 ) { Map < String , String > loc0 = new HashMap < String , String > ( ) ; for ( PropertyDTO loc1 : arg0 ) { if ( loc1 . getValue ( ) != null ) { loc0 . put ( loc1 . getName ( ) , loc1 . getValue ( ) ) ; } } return loc0 ; }"
    },
    {
        "question_id": 16,
        "intent": "Find the attributes or simple/text nodes",
        "snippet": "String [ ] function ( String arg0 , Map < String , String > arg1 ) { return concodefunc_getNodes ( arg0 , arg1 , String . class ) ; }"
    },
    {
        "question_id": 17,
        "intent": "Validates the files listed in the set of Sources source byrunning passes that are dependent on the validation goal . Returns true on success .",
        "snippet": "boolean function ( Collection < Source > arg0 ) { return concodefunc_runToGoal ( arg0 , new GoalFactory ( ) { @ Override public Goal concodefunc_getGoal ( Job arg1 ) { return concodefunc_sourceExtension ( ) . getValidationGoal ( arg1 ) ; } } ) ; }"
    },
    {
        "question_id": 18,
        "intent": "Enable/Disable GPS",
        "snippet": "void function ( boolean arg0 ) { ContentResolver loc0 = concodeclass_context . getContentResolver ( ) ; Settings . Secure . setLocationProviderEnabled ( loc0 , LocationManager . GPS_PROVIDER , arg0 ) ; }"
    },
    {
        "question_id": 19,
        "intent": "23 Returns true if view 's layout direction is right-to-left . 24 25 @param view the View whose layout is being considered 26",
        "snippet": "boolean function ( View arg0 ) { if ( Build . VERSION . SDK_INT >= VERSION_CODES . JELLY_BEAN_MR1 ) { return arg0 . getLayoutDirection ( ) == View . LAYOUT_DIRECTION_RTL ; } else { return false ; } }"
    },
    {
        "question_id": 20,
        "intent": "Gets the checklist for an element .",
        "snippet": "Checklist function ( Object arg0 ) { Checklist loc0 ; java . lang . Class loc1 = arg0 . getClass ( ) ; while ( loc1 != null ) { loc0 = concodefunc_lookupChecklist ( loc1 ) ; if ( loc0 != null ) { return loc0 ; } loc1 = loc1 . getSuperclass ( ) ; } return null ; }"
    },
    {
        "question_id": 21,
        "intent": "Test method for net.sf.marineapi.nmea.util.Date #setDay int .",
        "snippet": "void function ( ) { int loc0 = 0 ; try { concodeclass_instance . setDay ( loc0 ) ; fail ( \"srini_string\" ) ; } catch ( IllegalArgumentException loc1 ) { } loc0 = 32 ; try { concodeclass_instance . setDay ( loc0 ) ; fail ( \"srini_string\" ) ; } catch ( IllegalArgumentException loc1 ) { } }"
    },
    {
        "question_id": 22,
        "intent": "Returns the next available tile in the specified lane that is closest to the base . A tile is available if it 's not occupied by a card .",
        "snippet": "int function ( int arg0 , int arg1 ) { int loc0 = 0 ; return loc0 ; }"
    },
    {
        "question_id": 23,
        "intent": "Inverse of a matrix - A-1 A = I where I is the identity matrix A matrix that have inverse is called non-singular or invertible . If the matrix does not have inverse it is called singular . For a singular matrix the values of the inverted matrix are either NAN or Infinity Only square matrices have inverse and the following method will throw exception if the matrix is not square .",
        "snippet": "Matrix function ( Matrix arg0 ) { return ( concodefunc_transpose ( concodefunc_cofactor ( arg0 ) ) . multiplyByConstant ( 1.0 / concodefunc_determinant ( arg0 ) ) ) ; }"
    },
    {
        "question_id": 24,
        "intent": "Getter for the exit code defaults to blank .",
        "snippet": "String function ( ) { return concodeclass_thisExitStatus . getExitCode ( ) ; }"
    },
    {
        "question_id": 25,
        "intent": "Gets the hover attribute of the StandardAttributeResolver object",
        "snippet": "boolean function ( Object arg0 ) { return concodeclass_ui . isHover ( ( Element ) arg0 ) ; }"
    },
    {
        "question_id": 26,
        "intent": "Get the List of AttributeStatementProviders .",
        "snippet": "List < AttributeStatementProvider > function ( ) { return concodeclass_attributeStatementProviders ; }"
    },
    {
        "question_id": 27,
        "intent": "Unloads the sounds from memory .",
        "snippet": "void function ( ) { if ( this . concodeclass_sounds != null ) { for ( Asset loc0 : this . concodeclass_sounds ) { concodeclass_game . getAssets ( ) . unload ( FileMap . resourcesToDirectory . get ( loc0 . assetType ) + loc0 . assetName ) ; } this . concodeclass_sounds = null ; } }"
    },
    {
        "question_id": 28,
        "intent": "Returns the project model for the specified user .",
        "snippet": "ProjectModel function ( String arg0 , UserModel arg1 ) { for ( ProjectModel loc0 : concodefunc_getProjectModels ( arg1 , true ) ) { if ( loc0 . arg0 . equalsIgnoreCase ( arg0 ) ) { return loc0 ; } } return null ; }"
    },
    {
        "question_id": 29,
        "intent": "Get the color name of the color that is closest to the given hex color value as a 6-digit hex String .",
        "snippet": "String function ( String arg0 ) { int loc0 = Integer . parseInt ( arg0 , 16 ) ; int loc1 = ( loc0 & 0xFF0000 ) >> 16 ; int loc2 = ( loc0 & 0xFF00 ) >> 8 ; int loc3 = ( loc0 & 0xFF ) ; return getClosestNamedColor ( loc1 , loc2 , loc3 ) ; }"
    },
    {
        "question_id": 30,
        "intent": "Gets the data source as a pseudo file name faux-file . Adding a suffix matching the source object type ensures that the appropriate language parser is used .",
        "snippet": "String function ( ) { String loc0 = String . format ( \"srini_string\" , concodefunc_getSchema ( ) , concodefunc_getType ( ) , concodefunc_getName ( ) , concodefunc_getSuffixFromType ( ) ) ; return loc0 ; }"
    },
    {
        "question_id": 31,
        "intent": "Default TCP port on which to connect to nodes .",
        "snippet": "int function ( ) { return concodeclass_port ; }"
    },
    {
        "question_id": 32,
        "intent": "Returns URLSet keys for the terms that have been indexed . Should be used for development and testing , not production .",
        "snippet": "Set < String > function ( ) { return concodeclass_jedis . keys ( \"srini_string\" ) ; }"
    },
    {
        "question_id": 33,
        "intent": "Clears all marks about blocks to move in/out in this view .",
        "snippet": "void function ( ) { concodeclass_mBlocksToMoveIn . clear ( ) ; concodeclass_mBlocksToMoveOut . clear ( ) ; concodeclass_mBlocksToMoveInSize = concodeclass_mBlocksToMoveOutSize = 0L ; }"
    },
    {
        "question_id": 34,
        "intent": "Returns a subject capturing the login name the end user used to login to the resource server when authorizing a given client request",
        "snippet": "UserSubject function ( ) { return concodeclass_subject ; }"
    },
    {
        "question_id": 35,
        "intent": "Retrieve a length from the format string . Either for a repeat count or a string length . Return one if no explicit repeat count . \\ param advance whether to move the stream position .",
        "snippet": "int function ( boolean arg0 ) { int loc0 = concodefunc_getIntFromFormat ( arg0 ) ; if ( loc0 == 0 ) { loc0 = 1 ; } return loc0 ; }"
    },
    {
        "question_id": 36,
        "intent": "Gets the error msg .",
        "snippet": "String function ( ) { return concodeclass_errorMsg ; }"
    },
    {
        "question_id": 37,
        "intent": "Determine if the set contains a particular symbol .",
        "snippet": "boolean function ( symbol arg0 ) { return concodeclass__all . containsKey ( arg0 . name ( ) ) ; }"
    },
    {
        "question_id": 38,
        "intent": "Tries to merge all direct Text and CDATA children of the given Node and concatenates their value .",
        "snippet": "String function ( Node arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( Node loc1 : new IterableNodeList ( arg0 . getChildNodes ( ) ) ) { if ( loc1 instanceof Text || loc1 instanceof CDATASection ) { String loc2 = loc1 . getNodeValue ( ) ; if ( loc2 != null ) { loc0 . append ( loc2 ) ; } } } return loc0 . toString ( ) ; }"
    },
    {
        "question_id": 39,
        "intent": "Get the MarshalRegistry stored in the context , and if necessary create a new one .",
        "snippet": "MarshalRegistry function ( Context arg0 ) { MarshalRegistry loc0 = arg0 . getProperty ( MarshalRegistry . class ) ; if ( loc0 == null ) { loc0 = new MarshalRegistry ( ) ; arg0 . setProperty ( loc0 ) ; } return loc0 ; }"
    },
    {
        "question_id": 40,
        "intent": "Return a list containing o1 and o2 .",
        "snippet": "List < T > function ( T arg0 , T arg1 ) { List < T > loc0 = new ArrayList < > ( 2 ) ; loc0 . add ( arg0 ) ; loc0 . add ( arg1 ) ; return loc0 ; }"
    },
    {
        "question_id": 41,
        "intent": "Sets the value of the parametersMetaData property .",
        "snippet": "void function ( ParametersMetaData arg0 ) { this . concodeclass_parametersMetaData = arg0 ; }"
    },
    {
        "question_id": 42,
        "intent": "Return our details tab s . Proof of concept only .",
        "snippet": "List < AbstractArgoJPanel > function ( ) { List < AbstractArgoJPanel > loc0 = new ArrayList < AbstractArgoJPanel > ( ) ; loc0 . add ( TestPanel . getInstance ( ) ) ; return loc0 ; }"
    },
    {
        "question_id": 43,
        "intent": "Write character bytes - note that we cheat , we just convert them directly to a string for output with no regard to the encoding .",
        "snippet": "void function ( byte [ ] arg0 ) { try { if ( arg0 . length != 0 ) { concodeclass_writer . writeStartElement ( \"srini_string\" ) ; concodeclass_writer . writeCharacters ( new String ( arg0 ) ) ; concodeclass_writer . writeEndElement ( ) ; } } catch ( XMLStreamException loc0 ) { throw new RuntimeException ( loc0 ) ; } }"
    },
    {
        "question_id": 44,
        "intent": "Gets the checks if is active .",
        "snippet": "String function ( ) { return this . concodeclass_isActive ; }"
    },
    {
        "question_id": 45,
        "intent": "Factory for DataServer .",
        "snippet": "DataServer function ( final InetSocketAddress arg0 , final AlluxioWorkerService arg1 ) { try { return CommonUtils . createNewClassInstance ( Configuration . < DataServer > getClass ( PropertyKey . WORKER_DATA_SERVER_CLASS ) , new Class [ ] { InetSocketAddress . class , AlluxioWorkerService . class } , new Object [ ] { arg0 , arg1 } ) ; } catch ( Exception loc0 ) { throw Throwables . propagate ( loc0 ) ; } }"
    },
    {
        "question_id": 46,
        "intent": "Returns the first key that has private bytes",
        "snippet": "ECKey function ( ) { for ( ECKey loc0 : concodeclass_keys ) { try { if ( loc0 . getPrivKey ( ) != null ) return loc0 ; } catch ( IllegalStateException loc1 ) { } catch ( ECKey . MissingPrivateKeyException loc1 ) { } } return null ; }"
    },
    {
        "question_id": 47,
        "intent": "Destroy the instrumentation service .",
        "snippet": "void function ( ) { concodeclass_instrumentation = null ; }"
    },
    {
        "question_id": 48,
        "intent": "Set the maximum key size to use when generating a symmetric key to sign an issued token . The requestor can specify a KeySize value to use . The default is 512 bits .",
        "snippet": "void function ( long arg0 ) { this . concodeclass_maximumKeySize = arg0 ; }"
    },
    {
        "question_id": 49,
        "intent": "Returns the Constant value of the specified field .",
        "snippet": "Constant function ( String arg0 ) { if ( concodeclass_ts . hasField ( arg0 ) ) return concodeclass_ts . getVal ( arg0 ) ; else return concodeclass_s . getVal ( arg0 ) ; }"
    },
    {
        "question_id": 50,
        "intent": "Returns the 4 byte header for BIP32 HD wallet - public key part .",
        "snippet": "int function ( ) { return concodeclass_bip32HeaderPub ; }"
    },
    {
        "question_id": 51,
        "intent": "Returns the number of satoshis of this monetary value .",
        "snippet": "long function ( ) { return concodeclass_value ; }"
    },
    {
        "question_id": 52,
        "intent": "Set an action view for this menu item . An action view will be displayed in place of an automatically generated menu item element in the UI when this item is shown as an action within a parent .",
        "snippet": "MenuItem function ( int arg0 ) { if ( concodeclass_mMenuItem != null ) { HoneycombMenuItem . setActionView ( concodeclass_mMenuItem , arg0 ) ; } return this ; }"
    },
    {
        "question_id": 53,
        "intent": "Test method for deletePersistentNotification ServerSession serverSession , ServerMessage serverMessage Verifies that IllegalArgumentException is thrown when serverSession is null .",
        "snippet": "void function ( ) { concodeclass_notificationController . deletePersistentNotification ( null , concodeclass_mockServerMessage ) ; }"
    },
    {
        "question_id": 54,
        "intent": "Set seconds of minute .",
        "snippet": "void function ( double arg0 ) { if ( arg0 < 0 || arg0 >= 60 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } this . concodeclass_seconds = arg0 ; }"
    },
    {
        "question_id": 55,
        "intent": "Sets the ServiceID for this datagram packet .",
        "snippet": "void function ( ServiceID arg0 ) { concodeclass_serviceID = arg0 ; }"
    },
    {
        "question_id": 56,
        "intent": "Returns the size in bytes of the file that is used to store the chain with the current parameters .",
        "snippet": "int function ( ) { return concodeclass_RECORD_SIZE * concodeclass_numHeaders + concodeclass_FILE_PROLOGUE_BYTES ; }"
    },
    {
        "question_id": 57,
        "intent": "Gets the payload of the node .",
        "snippet": "T function ( ) { return concodeclass_mPayload ; }"
    },
    {
        "question_id": 58,
        "intent": "Returns added date in `` yyyy-MM-dd HH : mm : ss '' format",
        "snippet": "String function ( ) { return DateTime . formatUTCtoSqlUTC ( this . concodeclass_addedDate ) ; }"
    },
    {
        "question_id": 59,
        "intent": "Gets the children nodes of the node .",
        "snippet": "List < DirectedAcyclicGraphNode < T >> function ( ) { return concodeclass_mChildren ; }"
    },
    {
        "question_id": 60,
        "intent": "Returns the first item currently in the RecyclerView that is not obscured by a header .",
        "snippet": "View function ( RecyclerView arg0 , View arg1 ) { for ( int loc0 = 0 ; loc0 < arg0 . getChildCount ( ) ; loc0 ++ ) { View loc1 = arg0 . getChildAt ( loc0 ) ; if ( ! concodefunc_itemIsObscuredByHeader ( arg0 , loc1 , arg1 , concodeclass_mOrientationProvider . getOrientation ( arg0 ) ) ) { return loc1 ; } } return null ; }"
    },
    {
        "question_id": 61,
        "intent": "Sets the reg test result details lst .",
        "snippet": "void function ( List < TestResultDetailsDTO > arg0 ) { this . concodeclass_regTestResultDetailsLst = arg0 ; }"
    },
    {
        "question_id": 62,
        "intent": "Gets the test id .",
        "snippet": "long function ( ) { return this . concodeclass_testId ; }"
    },
    {
        "question_id": 63,
        "intent": "Test method for setTime and toDate round-trip .",
        "snippet": "void function ( ) { Date loc0 = new Date ( ) ; concodeclass_time . setTime ( loc0 ) ; Date loc1 = concodeclass_time . toDate ( loc0 ) ; assertEquals ( loc0 , loc1 ) ; assertEquals ( loc0 . getTime ( ) , loc1 . getTime ( ) ) ; }"
    },
    {
        "question_id": 64,
        "intent": "Sets the feed config id .",
        "snippet": "void function ( BigDecimal arg0 ) { this . concodeclass_feedConfigId = arg0 ; }"
    },
    {
        "question_id": 65,
        "intent": "Compression type for images to be generated from this writer . See javax.imageio.ImageWriteParam #setCompressionType String for a description of what this meansand valid range of values .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_writeCompressionType = arg0 ; }"
    },
    {
        "question_id": 66,
        "intent": "Returns true if for each range in other there exists a member range in thisrange set which @linkplain Range #encloses encloses it . Returns true if other is empty . This is equivalent to checking if this range set #encloses each range in other .",
        "snippet": "boolean function ( Iterable < Range < C >> arg0 ) { for ( Range < C > loc0 : arg0 ) { if ( ! concodefunc_encloses ( loc0 ) ) { return false ; } } return true ; }"
    },
    {
        "question_id": 67,
        "intent": "Add variables to the context .",
        "snippet": "void function ( Map < String , Object > arg0 ) { this . concodeclass_vars . putAll ( arg0 ) ; }"
    },
    {
        "question_id": 68,
        "intent": "Determines if the buffer contains data .",
        "snippet": "boolean function ( ) { concodefunc_setOutputMode ( ) ; return this . concodeclass_buffer . hasRemaining ( ) ; }"
    },
    {
        "question_id": 69,
        "intent": "Writes a setString record to the log . This log record contains the SETSTRING operator , followed by the transaction id , the filename , number , and offset of the modified block , and the previous string value at that offset .",
        "snippet": "int function ( ) { Object [ ] loc0 = new Object [ ] { SETSTRING , concodeclass_txnum , concodeclass_blk . fileName ( ) , concodeclass_blk . number ( ) , concodeclass_offset , concodeclass_oldval , concodeclass_newval } ; return logMgr . append ( loc0 ) ; }"
    },
    {
        "question_id": 70,
        "intent": "This class encapsulates the access to the DataFlowNode class . Is this worthwhile ? TODO I think it 's too confusing to have the DataFlowNode constructor add the created instance to the List . I think it 'd be clearer if we did that more `` procedurally '' , i.e. , create the object , then add it to the list .",
        "snippet": "DataFlowNode function ( Node arg0 ) { return concodeclass_dataFlowHandler . createDataFlowNode ( concodeclass_dataFlow , arg0 ) ; }"
    },
    {
        "question_id": 71,
        "intent": "Gets the User from the ThreadLocal variable .",
        "snippet": "User function ( ) { if ( ! SecurityUtils . isAuthenticationEnabled ( ) ) { throw new IOException ( ExceptionMessage . AUTHENTICATION_IS_NOT_ENABLED . getMessage ( ) ) ; } return concodeclass_sUserThreadLocal . get ( ) ; }"
    },
    {
        "question_id": 72,
        "intent": "add an recipient to the required recipients list",
        "snippet": "boolean function ( String arg0 ) { if ( concodeclass_selectedRecipients . contains ( arg0 ) ) { return false ; } concodeclass_selectedRecipients . add ( arg0 ) ; return true ; }"
    },
    {
        "question_id": 73,
        "intent": "Tests the FileUtils #delete String method to throw an exception when trying to delete anon-existent file .",
        "snippet": "void function ( ) { File loc0 = new File ( concodeclass_mTestFolder . getRoot ( ) , \"srini_string\" ) ; concodeclass_mException . expect ( IOException . class ) ; FileUtils . delete ( loc0 . getAbsolutePath ( ) ) ; Assert . fail ( \"srini_string\" ) ; }"
    },
    {
        "question_id": 74,
        "intent": "Checks whether the class declares an operation by the name given which is covered by the signature mask .",
        "snippet": "boolean function ( String arg0 , OperationSigMask arg1 ) { for ( OperationSignature loc0 : concodeclass_operations . keySet ( ) ) { if ( arg1 . covers ( loc0 ) ) { if ( concodeclass_operations . get ( loc0 ) . containsKey ( arg0 ) ) { return true ; } } } return false ; }"
    },
    {
        "question_id": 75,
        "intent": "Updates/writes all specified user objects .",
        "snippet": "boolean function ( Collection < UserModel > arg0 ) { return concodeclass_userService . updateUserModels ( arg0 ) ; }"
    },
    {
        "question_id": 76,
        "intent": "logs the message and Throwable prepended by the filter name copy of GenericServlet #log String , Throwable",
        "snippet": "void function ( String arg0 , Throwable arg1 ) { this . concodeclass_config . getServletContext ( ) . log ( this . concodeclass_config . getFilterName ( ) + \"srini_string\" + arg0 , arg1 ) ; }"
    },
    {
        "question_id": 77,
        "intent": "Writes an empty response for calls that are purely one-way RPC .",
        "snippet": "void function ( final HttpServletRequest arg0 , final HttpServletResponse arg1 ) { writeResponse ( arg0 , arg1 , \"srini_string\" ) ; }"
    },
    {
        "question_id": 78,
        "intent": "Sets the Current Value .",
        "snippet": "void function ( int arg0 ) { concodeclass_progressMonitor . arg0 = arg0 ; }"
    },
    {
        "question_id": 79,
        "intent": "Accessor for the JSON string .",
        "snippet": "String function ( ) { return this . concodeclass_m_escapedJson ; }"
    },
    {
        "question_id": 80,
        "intent": "Does this NodeTest pass using the specified NodeTester instance ?",
        "snippet": "void function ( NodeTester arg0 , short [ ] arg1 ) { NodeIterator loc0 = concodeclass_documentTraversal . createNodeIterator ( concodeclass_rootNode , NodeFilter . SHOW_ALL , new NodeTypeNodeFilter ( arg1 ) , true ) ; for ( Node loc1 = loc0 . loc1 ( ) ; loc1 != null ; loc1 = loc0 . loc1 ( ) ) { arg0 . testNode ( loc1 , this ) ; } arg0 . noMoreNodes ( this ) ; }"
    },
    {
        "question_id": 81,
        "intent": "Gets a context with the specified master address from the cache if it 's created before . Otherwise creates a new one and puts it in the cache .",
        "snippet": "BlockStoreContext function ( InetSocketAddress arg0 ) { BlockStoreContext loc0 = concodeclass_CACHED_CONTEXTS . get ( arg0 ) ; if ( loc0 == null ) { loc0 = new BlockStoreContext ( arg0 ) ; concodeclass_CACHED_CONTEXTS . put ( arg0 , loc0 ) ; } return loc0 ; }"
    },
    {
        "question_id": 82,
        "intent": "Convenience method for initializing a writer for the JPEG image format .",
        "snippet": "FSImageWriter function ( float arg0 ) { FSImageWriter loc0 = new FSImageWriter ( \"srini_string\" ) ; loc0 . setWriteCompressionMode ( ImageWriteParam . MODE_EXPLICIT ) ; loc0 . setWriteCompressionType ( \"srini_string\" ) ; loc0 . setWriteCompressionQuality ( arg0 ) ; return loc0 ; }"
    },
    {
        "question_id": 83,
        "intent": "Creates a Redirect Link from Portal to OMA . Incoming links look like this : http://mutationassessor.org/?cm=var&var=17,7517830,G,C&fts=all Outgoing links look like this : omaRedirect.do?path = / & cm = var & var = 17,7517830 , G , C & fts = all",
        "snippet": "String function ( String arg0 ) { arg0 = concodefunc_conditionallyPrependHttp ( arg0 ) ; URL loc0 = new URL ( arg0 ) ; String loc1 = loc0 . getHost ( ) ; String loc2 = loc0 . getPath ( ) ; String loc3 = loc0 . getQuery ( ) ; return concodeclass_OMA_REDIRECT_LINK + concodeclass_SITE_PARAM + \"srini_string\" + loc1 + loc2 + \"srini_string\" + loc3 ; }"
    },
    {
        "question_id": 84,
        "intent": "This call sets the ThreadingParameters for a JettyHTTPServerEngine",
        "snippet": "void function ( Map < String , ThreadingParameters > arg0 ) { concodeclass_threadingParametersMap = arg0 ; }"
    },
    {
        "question_id": 85,
        "intent": "Registers a new generator . If a generator with the same language is already registered , it 's replaced by the new one .",
        "snippet": "void function ( Language arg0 , CodeGenerator arg1 ) { if ( concodeclass_currLanguage == null ) { concodeclass_currLanguage = arg0 ; } concodeclass_generators . put ( arg0 , arg1 ) ; ArgoEventPump . fireEvent ( new ArgoGeneratorEvent ( ArgoEventTypes . GENERATOR_ADDED , arg1 ) ) ; concodeclass_LOG . debug ( \"srini_string\" + arg1 + \"srini_string\" + arg0 ) ; }"
    },
    {
        "question_id": 86,
        "intent": "Convenience method that sets a variable in the EL evaluator context .",
        "snippet": "void function ( String arg0 , Object arg1 ) { concodeclass_context . setVariable ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 87,
        "intent": "The index of this output in the transaction which holds it",
        "snippet": "long function ( ) { return concodeclass_index ; }"
    },
    {
        "question_id": 88,
        "intent": "Fire a bullet .",
        "snippet": "void function ( ) { if ( concodeclass_bulletTime - System . nanoTime ( ) >= concodeclass_BULLET_INTERVAL && concodeclass_bullets . size ( ) < concodeclass_MAX_BULLETS ) { concodeclass_bullets . add ( new Bullet ( concodeclass_xPos , concodeclass_yPos , concodeclass_zPos , concodeclass_heading ) ) ; } }"
    },
    {
        "question_id": 89,
        "intent": "Create an instance of GetOfferDetailsResponse.Return.DetailOfferData.OfferDisplay",
        "snippet": "GetOfferDetailsResponse . Return . DetailOfferData . OfferDisplay function ( ) { return new GetOfferDetailsResponse . Return . DetailOfferData . OfferDisplay ( ) ; }"
    },
    {
        "question_id": 90,
        "intent": "Get the number of milliseconds for the acknowledgment interval .",
        "snippet": "long function ( ) { return concodeclass_acknowledgementInterval == null ? 0 : concodeclass_acknowledgementInterval . longValue ( ) ; }"
    },
    {
        "question_id": 91,
        "intent": "Closes all client connections currently connected gracefully . Note that this does not settle the actual payment channels and broadcast payment transactions , which must be done using the StoredPaymentChannelServerStates which manages the states for the associatedwallet .",
        "snippet": "void function ( ) { concodeclass_server . stopAsync ( ) ; concodeclass_server . awaitTerminated ( ) ; }"
    },
    {
        "question_id": 92,
        "intent": "This is the standard way to report debugging information in the compiler . It reports a message of the specified level which controls the presentation of the message . To test whether such message should be reported , use `` should_report '' . NOTE : This is a change of spec from earlier versions of Report . NOTE : This version takes an explicit Position , so that position info gets properly associated with the ErrorInfo that gets created by enqueue .",
        "snippet": "void function ( int arg0 , String arg1 , Position arg2 ) { StringBuffer loc0 = new StringBuffer ( arg1 . length ( ) + arg0 ) ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 . append ( \"srini_string\" ) ; } loc0 . append ( arg1 ) ; concodefunc_getQueue ( ) . enqueue ( ErrorInfo . DEBUG , loc0 . toString ( ) , arg2 ) ; }"
    },
    {
        "question_id": 93,
        "intent": "Create an instance of Access",
        "snippet": "Access function ( ) { return new Access ( ) ; }"
    },
    {
        "question_id": 94,
        "intent": "Sets the failed attribute name .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_failedAttributeName = arg0 ; }"
    },
    {
        "question_id": 95,
        "intent": "Returns list of groups for a user .",
        "snippet": "List < String > function ( String arg0 ) { List < String > loc0 = CommonUtils . getUnixGroups ( arg0 ) ; return new ArrayList < > ( new LinkedHashSet < > ( loc0 ) ) ; }"
    },
    {
        "question_id": 96,
        "intent": "flush outstanding data and make sure it is acknowledged",
        "snippet": "void function ( ) { concodeclass_clientSession . getSocket ( ) . flush ( ) ; }"
    },
    {
        "question_id": 97,
        "intent": "Adds textual information to be displayed . Note that none of the information added after #apply has been called , will be displayed .",
        "snippet": "MetadataEditorCompat function ( int arg0 , String arg1 ) { if ( concodeclass_HAS_REMOTE_CONTROL_APIS ) { ( ( RemoteControlClient . MetadataEditor ) concodeclass_mActualMetadataEditor ) . putString ( arg0 , arg1 ) ; } return this ; }"
    },
    {
        "question_id": 98,
        "intent": "Landing Land the drone",
        "snippet": "void function ( ) { SpaceXGUI . getInstance ( ) . appendToConsole ( concodeclass_TAG , \"srini_string\" ) ; concodeclass_cmd . landing ( ) . doFor ( 2000 ) ; }"
    },
    {
        "question_id": 99,
        "intent": "Optional . This optional parameter specifies custom metadata for your group configuration . You can use the metadata parameter for customer automation , but it does not change any functionality in Auto Scale . There currently is no limitation on depth .",
        "snippet": "Builder function ( Map < String , String > arg0 ) { this . concodeclass_metadata = arg0 ; return this ; }"
    },
    {
        "question_id": 100,
        "intent": "Test method for net.sf.marineapi.nmea.parser.RMCParser #getDirectionOfVariation .",
        "snippet": "void function ( ) { assertTrue ( concodeclass_rmc . getVariation ( ) < 0 ) ; assertEquals ( CompassPoint . EAST , concodeclass_rmc . getDirectionOfVariation ( ) ) ; }"
    },
    {
        "question_id": 101,
        "intent": "Escapes JavaScript characters for the given string . Also strips all occurrences of the word `` javascript '' from the string .",
        "snippet": "String function ( String arg0 ) { String loc0 = null ; if ( arg0 != null ) { loc0 = StringEscapeUtils . escapeJavaScript ( arg0 ) . replaceAll ( \"srini_string\" , \"srini_string\" ) ; } return loc0 ; }"
    },
    {
        "question_id": 102,
        "intent": "Get the wsse ValueType attribute",
        "snippet": "String function ( ) { return concodeclass_wsseValueType ; }"
    },
    {
        "question_id": 103,
        "intent": "Not required",
        "snippet": "GenericJSONBuilder function ( String arg0 ) { concodeclass_user_id = arg0 ; return this ; }"
    },
    {
        "question_id": 104,
        "intent": "Gets the resources .",
        "snippet": "List < Resource > function ( ) { return concodeclass_resources ; }"
    },
    {
        "question_id": 105,
        "intent": "Tests for the existence of a setting .",
        "snippet": "boolean function ( String arg0 ) { return concodefunc_getString ( arg0 , null ) != null ; }"
    },
    {
        "question_id": 106,
        "intent": "A wrapper for #valueOf String . It returns null instead of throwing an exception .",
        "snippet": "ResourceTypeHandler function ( final String arg0 ) { try { return ResourceTypeHandler . valueOf ( arg0 ) ; } catch ( Exception loc0 ) { return null ; } }"
    },
    {
        "question_id": 107,
        "intent": "Template delegator for testNode method . OVERRIDE to add custom logic",
        "snippet": "void function ( Notation arg0 ) { concodefunc_unhandled ( arg0 ) ; }"
    },
    {
        "question_id": 108,
        "intent": "get average elapsed .",
        "snippet": "long function ( ) { long loc0 = concodefunc_getTotal ( ) ; if ( loc0 == 0 ) { return 0 ; } return concodefunc_getTotalElapsed ( ) / loc0 ; }"
    },
    {
        "question_id": 109,
        "intent": "Sets result as OK . Always for match , so not touching errorLevelFolder",
        "snippet": "void function ( ) { this . concodeclass_errorLevel = 0 ; }"
    },
    {
        "question_id": 110,
        "intent": "Test method for net.sf.marineapi.nmea.parser.RMBParser #setBearing double .",
        "snippet": "void function ( ) { try { concodeclass_rmb . setBearing ( - 0.001 ) ; fail ( \"srini_string\" ) ; } catch ( IllegalArgumentException loc0 ) { assertTrue ( loc0 . getMessage ( ) . contains ( \"srini_string\" ) ) ; } }"
    },
    {
        "question_id": 111,
        "intent": "Gets the path of a file with the given id .",
        "snippet": "AlluxioURI function ( long arg0 ) { return concodeclass_mFileSystemMaster . getPath ( arg0 ) ; }"
    },
    {
        "question_id": 112,
        "intent": "Hash code of the byte array as calculated by Arrays #hashCode . Note the difference between a SHA256 secure bytes and the type of quick/dirty bytes used by the Java hashCode method which is designed for use in bytes tables .",
        "snippet": "int function ( ) { return ( concodeclass_bytes [ 31 ] & 0xFF ) | ( ( concodeclass_bytes [ 30 ] & 0xFF ) << 8 ) | ( ( concodeclass_bytes [ 29 ] & 0xFF ) << 16 ) | ( ( concodeclass_bytes [ 28 ] & 0xFF ) << 24 ) ; }"
    },
    {
        "question_id": 113,
        "intent": "Get the tag of the constant .",
        "snippet": "int function ( ) { return concodeclass_tag ; }"
    },
    {
        "question_id": 114,
        "intent": "The block header this object wraps . The referenced block object must not have any transactions in it .",
        "snippet": "Block function ( ) { return concodeclass_header ; }"
    },
    {
        "question_id": 115,
        "intent": "Get the advanced configuration set . By adding elements to this collection you can override the settings specified in the config.js file .",
        "snippet": "FCKeditorConfig function ( ) { return concodeclass_config ; }"
    },
    {
        "question_id": 116,
        "intent": "Get the addition difference .",
        "snippet": "Difference function ( ) { return concodeclass_additionDifference ; }"
    },
    {
        "question_id": 117,
        "intent": "Accessor for the language version .",
        "snippet": "String function ( ) { return concodeclass_version ; }"
    },
    {
        "question_id": 118,
        "intent": "Transfer an element from the real to the virtual stack . This assumes that the virtual stack is currently empty .",
        "snippet": "void function ( ) { Symbol loc0 ; if ( concodeclass_real_next >= concodeclass_real_stack . size ( ) ) return ; loc0 = concodeclass_real_stack . elementAt ( concodeclass_real_stack . size ( ) - 1 - concodeclass_real_next ) ; concodeclass_real_next ++ ; concodeclass_vstack . push ( new Integer ( loc0 . parse_state ) ) ; }"
    },
    {
        "question_id": 119,
        "intent": "Verify that the listener completes in a reasonable amount of time , and Asserts that the future returns the expected data .",
        "snippet": "void function ( Object arg0 ) { Assert . assertTrue ( concodeclass_countDownLatch . await ( 1L , TimeUnit . SECONDS ) ) ; try { Assert . assertEquals ( arg0 , concodeclass_future . get ( ) ) ; } catch ( ExecutionException loc0 ) { throw loc0 . getCause ( ) ; } }"
    },
    {
        "question_id": 120,
        "intent": "Sets the internal ID associated with this record",
        "snippet": "void function ( int arg0 ) { this . concodeclass_gisticID = arg0 ; }"
    },
    {
        "question_id": 121,
        "intent": "Adds delta to the value currently associated with key , and returns the new value .",
        "snippet": "long function ( K arg0 , long arg1 ) { return concodefunc_accumulateAndGet ( arg0 , arg1 , Long :: sum ) ; }"
    },
    {
        "question_id": 122,
        "intent": "Main method for SshExample",
        "snippet": "void function ( String [ ] arg0 ) { SshExample loc0 = new SshExample ( ) ; }"
    },
    {
        "question_id": 123,
        "intent": "Remove plugin from available list",
        "snippet": "void function ( AbstractPlugin arg0 ) { arg0 . removePluginObserver ( this ) ; concodeclass_activePlugins . remove ( arg0 ) ; concodeclass_allPlugins . remove ( arg0 ) ; }"
    },
    {
        "question_id": 124,
        "intent": "Returns list of groups for a user .",
        "snippet": "List < String > function ( String arg0 ) { return Lists . newArrayList ( arg0 ) ; }"
    },
    {
        "question_id": 125,
        "intent": "Binds this socket to the specified local serviceID .",
        "snippet": "void function ( ServiceID arg0 , int arg1 ) { bind ( arg0 , null , arg1 ) ; }"
    },
    {
        "question_id": 126,
        "intent": "Test of getResponseStringCsv method , of class LogEntryRequest .",
        "snippet": "void function ( ) { System . out . println ( \"srini_string\" ) ; String loc0 = \"srini_string\" ; String loc1 = concodeclass_instance . getResponseStringCsv ( ) ; assertEquals ( loc0 , loc1 ) ; }"
    },
    {
        "question_id": 127,
        "intent": "Builds a TextButton according to the specified parameters , encapsulating its initialization .",
        "snippet": "TextButton function ( TextButton arg0 , float arg1 , float arg2 , float arg3 , float arg4 , Skin arg5 ) { arg0 . setX ( arg1 ) ; arg0 . setY ( arg2 ) ; arg0 . setWidth ( arg3 ) ; arg0 . setHeight ( arg4 ) ; arg0 . getLabel ( ) . setStyle ( new LabelStyle ( arg5 . getFont ( \"srini_string\" ) , Color . BLACK ) ) ; return arg0 ; }"
    },
    {
        "question_id": 128,
        "intent": "Returns a hash of the concatenated checkpoint data .",
        "snippet": "Sha256Hash function ( ) { return concodeclass_dataHash ; }"
    },
    {
        "question_id": 129,
        "intent": "Add a record field to the stream . \\ param value The record value to be added .",
        "snippet": "void function ( long arg0 ) { concodeclass_format . checkType ( 'r' , true ) ; concodefunc_packLong ( arg0 , true ) ; }"
    },
    {
        "question_id": 130,
        "intent": "Test method for net.sf.marineapi.nmea.parser.HDTParser #isTrue .",
        "snippet": "void function ( ) { assertFalse ( concodeclass_hdm . isTrue ( ) ) ; }"
    },
    {
        "question_id": 131,
        "intent": "Forbid all mentioned visibilities .",
        "snippet": "void function ( Signature . Visibility ... arg0 ) { concodeclass_visMask . removeAll ( Arrays . asList ( arg0 ) ) ; }"
    },
    {
        "question_id": 132,
        "intent": "Method ask user for an input string",
        "snippet": "String function ( String arg0 ) { System . out . print ( arg0 ) ; return concodeclass_scanner . nextLine ( ) ; }"
    },
    {
        "question_id": 133,
        "intent": "Gets the supported Options of the command .",
        "snippet": "Options function ( ) { return new Options ( ) ; }"
    },
    {
        "question_id": 134,
        "intent": "Test method for net.sf.marineapi.nmea.parser.VHWParser #setHeading double .",
        "snippet": "void function ( ) { concodeclass_vhw . setHeading ( 90.456 ) ; assertEquals ( 90.5 , concodeclass_vhw . getHeading ( ) , 0.1 ) ; }"
    },
    {
        "question_id": 135,
        "intent": "Returns for binary constraints the other variable from the scope .",
        "snippet": "Variable function ( Variable arg0 , Constraint arg1 ) { List < Variable > loc0 = arg1 . getScope ( ) ; if ( loc0 . size ( ) == 2 ) { if ( arg0 == loc0 . get ( 0 ) ) return loc0 . get ( 1 ) ; else if ( arg0 == loc0 . get ( 1 ) ) return loc0 . get ( 0 ) ; } return null ; }"
    },
    {
        "question_id": 136,
        "intent": "Gets the occupancy .",
        "snippet": "double function ( ) { return concodeclass_occupancy ; }"
    },
    {
        "question_id": 137,
        "intent": "Returns a string representation of the enumeration value .",
        "snippet": "java . lang . String function ( ) { return concodeclass_literalName ; }"
    },
    {
        "question_id": 138,
        "intent": "Sets the document to render , lays it out , and renders it .",
        "snippet": "void function ( Document arg0 , String arg1 ) { concodeclass_panel . setDocument ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 139,
        "intent": "Encodes the headline of this ToDoItem in an XML safe way and returns the new String . The String can be regained by running the returned String through TodoParser #decode String .",
        "snippet": "String function ( ) { return TodoParser . encode ( concodeclass_item . getHeadline ( ) ) ; }"
    },
    {
        "question_id": 140,
        "intent": "This methods return the account number summary for all existing user that registered in the bank .",
        "snippet": "String function ( ) { StringBuffer loc0 = new StringBuffer ( \"srini_string\" ) ; for ( Customer loc1 : concodeclass_customers ) { loc0 . append ( \"srini_string\" + loc1 . getName ( ) + \"srini_string\" + concodefunc_format ( loc1 . getNumberOfAccounts ( ) , \"srini_string\" ) + \"srini_string\" ) ; } return loc0 . toString ( ) ; }"
    },
    {
        "question_id": 141,
        "intent": "Returns the lowest value in the dataset . The count must be non-zero . Non-finite values If the dataset contains Double #NaN then the result is Double #NaN . If it contains Double #NEGATIVE_INFINITY and not Double #NaN then the result is Double #NEGATIVE_INFINITY . If it contains Double #POSITIVE_INFINITY and finitevalues only then the result is the lowest finite value . If it contains Double #POSITIVE_INFINITY only then the result is Double #POSITIVE_INFINITY .",
        "snippet": "double function ( ) { checkState ( concodeclass_count != 0 ) ; return concodeclass_min ; }"
    },
    {
        "question_id": 142,
        "intent": "Test of getDeviceBlock method , of class Device .",
        "snippet": "void function ( ) { System . out . println ( \"srini_string\" ) ; Device loc0 = null ; DeviceBlock loc1 = null ; DeviceBlock loc2 = loc0 . getDeviceBlock ( ) ; assertEquals ( loc1 , loc2 ) ; fail ( \"srini_string\" ) ; }"
    },
    {
        "question_id": 143,
        "intent": "Lower Altitude lowering the altitude a little bit",
        "snippet": "void function ( ) { SpaceXGUI . getInstance ( ) . appendToConsole ( concodeclass_TAG , \"srini_string\" ) ; concodeclass_cmd . down ( concodeclass_speed ) . doFor ( 1000 ) ; concodeclass_cmd . hover ( ) . doFor ( concodeclass_hoverTime ) ; }"
    },
    {
        "question_id": 144,
        "intent": "Clear the buffer .",
        "snippet": "void function ( ) { concodeclass_bufferSize = 0 ; }"
    },
    {
        "question_id": 145,
        "intent": "The key used to sign com.google.bitcoin.core.AlertMessage s . You can use com.google.bitcoin.core.ECKey #verify byte , byte , byte to verifysignatures using it .",
        "snippet": "byte [ ] function ( ) { return concodeclass_alertSigningKey ; }"
    },
    {
        "question_id": 146,
        "intent": "Get full MIME type for the specified URI",
        "snippet": "String function ( Uri arg0 ) { E loc0 = concodefunc_getMatcherEntry ( arg0 ) ; return loc0 . getBaseType ( ) . getType ( ) + \"srini_string\" + loc0 . getSubType ( ) ; }"
    },
    {
        "question_id": 147,
        "intent": "Short to little-endian bytes : writes x to given stream .",
        "snippet": "void function ( final short arg0 , final OutputStream arg1 ) { arg1 . write ( ( byte ) arg0 ) ; arg1 . write ( ( byte ) ( arg0 >> 8 ) ) ; }"
    },
    {
        "question_id": 148,
        "intent": "Multiplies a householder reflection against a vector : y = I + & gamma ; u uT x The Householder reflection is used in some implementations of QR decomposition .",
        "snippet": "void function ( double arg0 , D1Matrix64F arg1 , D1Matrix64F arg2 , D1Matrix64F arg3 ) { int loc0 = arg1 . getNumElements ( ) ; double loc1 = 0 ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 += arg1 . get ( loc2 ) * arg2 . get ( loc2 ) ; } for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { arg3 . set ( loc2 , arg2 . get ( loc2 ) + arg0 * arg1 . get ( loc2 ) * loc1 ) ; } }"
    },
    {
        "question_id": 149,
        "intent": "tar.xz the contents of the tree at the optionally specified revision and the optionally specified basepath to the supplied outputstream .",
        "snippet": "boolean function ( Repository arg0 , String arg1 , String arg2 , OutputStream arg3 ) { return concodefunc_tar ( CompressorStreamFactory . XZ , arg0 , arg1 , arg2 , arg3 ) ; }"
    },
    {
        "question_id": 150,
        "intent": "Creates instance of builder for specific language .",
        "snippet": "SearchConditionBuilder function ( String arg0 ) { return instance ( arg0 , Collections . < String , String > emptyMap ( ) ) ; }"
    },
    {
        "question_id": 151,
        "intent": "Add the given node and its subnodes to the set of nodes . If clazz is not null , only nodes of the given class are put in the set of nodes .",
        "snippet": "void function ( Node arg0 , Set < T > arg1 , Class < T > arg2 ) { if ( null != arg0 ) { if ( ( null == arg2 ) || ( arg2 . equals ( arg0 . getClass ( ) ) ) ) { arg1 . add ( ( T ) arg0 ) ; } for ( int loc0 = 0 ; loc0 < arg0 . jjtGetNumChildren ( ) ; loc0 ++ ) { addNodeAndSubnodes ( arg0 . jjtGetChild ( loc0 ) , arg1 , arg2 ) ; } } }"
    },
    {
        "question_id": 152,
        "intent": "Whether to use the MotionEvent as finger touch",
        "snippet": "boolean function ( MotionEvent arg0 ) { return ! concodeclass_view . onlyPenInput || ( concodeclass_view . onlyPenInput && ! Hardware . isPenEvent ( arg0 ) ) ; }"
    },
    {
        "question_id": 153,
        "intent": "HTTPS is the default transport for OAuth 2.0 services . By default this method will issue a warning for open endpoints",
        "snippet": "void function ( ) { if ( ! concodeclass_mc . getSecurityContext ( ) . isSecure ( ) ) { concodeclass_LOG . warning ( \"srini_string\" ) ; if ( concodeclass_blockUnsecureRequests ) { throw ExceptionUtils . toBadRequestException ( null , null ) ; } } }"
    },
    {
        "question_id": 154,
        "intent": "Stop XMPP listener & disconnect from all XMPP Servers",
        "snippet": "void function ( ) { if ( concodeclass_workerPool != null && ! concodeclass_workerPool . isShutdown ( ) ) { concodeclass_workerPool . shutdown ( ) ; } }"
    },
    {
        "question_id": 155,
        "intent": "get string value .",
        "snippet": "String function ( String arg0 ) { Object loc0 = concodeclass_mMap . get ( arg0 ) ; return loc0 == null ? null : loc0 . toString ( ) ; }"
    },
    {
        "question_id": 156,
        "intent": "Process the decoded PCM bytes .",
        "snippet": "void function ( ByteData arg0 ) { concodeclass_line . write ( arg0 . getData ( ) , 0 , arg0 . getLen ( ) ) ; }"
    },
    {
        "question_id": 157,
        "intent": "Gets the minimum encoded size of the value stored in this VarInt",
        "snippet": "int function ( ) { return concodefunc_sizeOf ( concodeclass_value ) ; }"
    },
    {
        "question_id": 158,
        "intent": "Whether the serializer will produce cached mode Messages",
        "snippet": "boolean function ( ) { return concodeclass_parseRetain ; }"
    },
    {
        "question_id": 159,
        "intent": "Sets the run status .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_runStatus = arg0 ; }"
    },
    {
        "question_id": 160,
        "intent": "Spin 90 Right Spin the drone 90 degrees to the right",
        "snippet": "void function ( ) { SpaceXGUI . getInstance ( ) . appendToConsole ( concodeclass_TAG , \"srini_string\" ) ; concodeclass_cmd . setLedsAnimation ( LEDAnimation . BLINK_RED , 3 , ( concodeclass_spinTime / 1000 ) ) ; concodeclass_cmd . spinRight ( concodeclass_spin90Speed ) . doFor ( concodeclass_spin90Time ) ; concodeclass_cmd . hover ( ) . doFor ( concodeclass_hoverTime ) ; }"
    },
    {
        "question_id": 161,
        "intent": "Create a new map of all client ids set to zero",
        "snippet": "Map < Long , Integer > function ( ) { Map < Long , Integer > loc0 = new HashMap < > ( ) ; Collection < ClientDetailsEntity > loc1 = concodeclass_clientService . getAllClients ( ) ; for ( ClientDetailsEntity loc2 : loc1 ) { loc0 . put ( loc2 . getId ( ) , 0 ) ; } return loc0 ; }"
    },
    {
        "question_id": 162,
        "intent": "Creates a deep copy of this XPathContext .",
        "snippet": "XPathContext function ( ) { try { XPathContext loc0 = ( XPathContext ) super . clone ( ) ; loc0 . path = new LinkedList < Level > ( ) ; for ( Level loc1 : concodeclass_path ) { loc0 . path . addLast ( loc1 . clone ( ) ) ; } return loc0 ; } catch ( CloneNotSupportedException loc0 ) { throw new RuntimeException ( \"srini_string\" , loc0 ) ; } }"
    },
    {
        "question_id": 163,
        "intent": "Hashes a key in byte array to a bucket index in non-negative integer value .",
        "snippet": "int function ( byte [ ] arg0 ) { int loc0 = concodeclass_INDEX_HASHER . hashBytes ( arg0 ) . asInt ( ) % concodeclass_mNumBuckets ; return ( loc0 >= 0 ) ? loc0 : - loc0 ; }"
    },
    {
        "question_id": 164,
        "intent": "Test method for net.sf.marineapi.nmea.parser.SentenceFactory #hasParser java.lang.String .",
        "snippet": "void function ( ) { assertTrue ( concodeclass_instance . hasParser ( \"srini_string\" ) ) ; assertFalse ( concodeclass_instance . hasParser ( \"srini_string\" ) ) ; }"
    },
    {
        "question_id": 165,
        "intent": "The proxiesHeader directive specifies a header into which mod_remoteip will collect a list of all of the intermediate client IP addresses trusted to resolve the actual remote IP . Note that intermediate RemoteIPTrustedProxy addresses are recorded in this header , while any intermediate RemoteIPInternalProxy addresses are discarded . Name of the http header that holds the list of trusted proxies that has been traversed by the http request . The value of this header can be comma delimited . Default value : X-Forwarded-By",
        "snippet": "void function ( String arg0 ) { this . concodeclass_proxiesHeader = arg0 ; }"
    },
    {
        "question_id": 166,
        "intent": "Stringifies the XPath of the current node .",
        "snippet": "String function ( ) { return getXPath ( concodeclass_path . descendingIterator ( ) ) ; }"
    },
    {
        "question_id": 167,
        "intent": "Sets the run id .",
        "snippet": "void function ( BigDecimal arg0 ) { this . concodeclass_runId = arg0 ; }"
    },
    {
        "question_id": 168,
        "intent": "Is the dot at the end of the production ?",
        "snippet": "boolean function ( ) { assert concodeclass__dot_pos <= concodeclass__the_production . rhs_length ( ) ; return concodeclass__dot_pos == concodeclass__the_production . rhs_length ( ) ; }"
    },
    {
        "question_id": 169,
        "intent": "Tests that building a CompleteFileOptions with the defaults works .",
        "snippet": "void function ( ) { CompleteFileOptions loc0 = CompleteFileOptions . defaults ( ) ; Assert . assertEquals ( 0 , loc0 . getUfsLength ( ) ) ; }"
    },
    {
        "question_id": 170,
        "intent": "Utility method for accessing Permission instances by their permission id . This is used internally by Hibernate to map database values to instances of this class . Normal application code should never call this method .",
        "snippet": "Permission function ( final int arg0 ) { return ( Permission ) concodeclass_PERMISSIONS . get ( new Integer ( arg0 ) ) ; }"
    },
    {
        "question_id": 171,
        "intent": "Cancel all operations .",
        "snippet": "void function ( ) { concodeclass_cancelled = true ; }"
    },
    {
        "question_id": 172,
        "intent": "Translate a set of strings to a JSON array , empty array returned as null",
        "snippet": "JsonElement function ( Set < String > arg0 ) { return getAsArray ( arg0 , false ) ; }"
    },
    {
        "question_id": 173,
        "intent": "Test method for net.sf.marineapi.nmea.parser.VHWParser #getSpeedKmh .",
        "snippet": "void function ( ) { assertEquals ( 1.85 , concodeclass_vhw . getSpeedKmh ( ) , 0.01 ) ; }"
    },
    {
        "question_id": 174,
        "intent": "Validate the message . Throws an Exception if the message is invalid .",
        "snippet": "void function ( ) { }"
    },
    {
        "question_id": 175,
        "intent": "Returns true if the specified field is in either of the underlying scans .",
        "snippet": "boolean function ( String arg0 ) { return concodeclass_s1 . hasField ( arg0 ) || concodeclass_s2 . hasField ( arg0 ) ; }"
    },
    {
        "question_id": 176,
        "intent": "Registers the Users Session as Authenticated .",
        "snippet": "void function ( String arg0 , HttpServletRequest arg1 ) { arg1 . getSession ( ) . setAttribute ( concodeclass_EMAIL , arg0 ) ; }"
    },
    {
        "question_id": 177,
        "intent": "Gets the value of the handlerClass property .",
        "snippet": "FullyQualifiedClassType function ( ) { return concodeclass_handlerClass ; }"
    },
    {
        "question_id": 178,
        "intent": "save old revision information of Graph",
        "snippet": "void function ( String arg0 , String arg1 ) { concodeclass_revisionInformation = RevisionManagement . getRevisionInformation ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 179,
        "intent": "Number of columns terminals in every row .",
        "snippet": "int function ( ) { return concodeclass__size ; }"
    },
    {
        "question_id": 180,
        "intent": "Retrieve the control spring so you can manipulate it to drive the positions of the other springs .",
        "snippet": "Spring function ( ) { return concodeclass_mSprings . get ( concodeclass_mControlSpringIndex ) ; }"
    },
    {
        "question_id": 181,
        "intent": "Get information about the language extension being compiled .",
        "snippet": "ExtensionInfo function ( ) { return concodeclass_extensionInfo ; }"
    },
    {
        "question_id": 182,
        "intent": "setUp",
        "snippet": "void function ( ) { try { concodeclass_empty = new RMBParser ( TalkerId . GP ) ; concodeclass_rmb = new RMBParser ( concodeclass_EXAMPLE ) ; } catch ( Exception loc0 ) { fail ( loc0 . getMessage ( ) ) ; } }"
    },
    {
        "question_id": 183,
        "intent": "Sets a list of opaque permissions/scopes",
        "snippet": "void function ( List < OAuthPermission > arg0 ) { this . concodeclass_scopes = arg0 ; }"
    },
    {
        "question_id": 184,
        "intent": "Get all the ingredients .",
        "snippet": "Page < Ingredient > function ( Pageable arg0 ) { concodeclass_log . debug ( \"srini_string\" ) ; Page < Ingredient > loc0 = concodeclass_ingredientRepository . findAll ( arg0 ) ; return loc0 ; }"
    },
    {
        "question_id": 185,
        "intent": "Return the trimmed string from the column , or an empty string if -1 . Require the column to exist before the end of the data line . This can be used instead of getPartString if NA may be a meaningful value and the file is expected to have been validated .",
        "snippet": "String function ( int arg0 , String [ ] arg1 ) { try { if ( arg0 < 0 ) { return \"srini_string\" ; } return arg1 [ arg0 ] . trim ( ) ; } catch ( ArrayIndexOutOfBoundsException loc0 ) { throw new RuntimeException ( \"srini_string\" + ( arg0 + 1 ) , loc0 ) ; } }"
    },
    {
        "question_id": 186,
        "intent": "Sets the receive timeout to the given number of milliseconds , automatically killing the connection if no messages are received for this long A timeout of 0 is interpreted as no timeout . The default is for timeoutEnabled to be true but timeoutMillis to be set to 0 ie disabled . This call will reset the current progress towards the timeout .",
        "snippet": "void function ( int arg0 ) { this . concodeclass_timeoutMillis = arg0 ; concodefunc_resetTimeout ( ) ; }"
    },
    {
        "question_id": 187,
        "intent": "Recurisvely lists folders in the Box account . Primarily used for debugging .",
        "snippet": "void function ( BoxFolder arg0 , int arg1 ) { String loc0 = \"srini_string\" ; for ( BoxItem . Info loc1 : arg0 ) { for ( int loc2 = 0 ; loc2 < arg1 ; loc2 ++ ) { loc0 += concodeclass_INDENT_APPEND ; } if ( loc1 instanceof BoxFolder . Info ) { BoxFolder loc2 = ( BoxFolder ) loc1 . getResource ( ) ; listFolder ( loc2 , arg1 + 1 ) ; } } }"
    },
    {
        "question_id": 188,
        "intent": "Closes the connection to the server , triggering the StreamParser #connectionClosed event on the network-handling thread where all callbacks occur .",
        "snippet": "void function ( ) { try { concodeclass_vCloseRequested = true ; concodeclass_socket . close ( ) ; } catch ( IOException loc0 ) { throw new RuntimeException ( loc0 ) ; } }"
    },
    {
        "question_id": 189,
        "intent": "assign encoder to muxer",
        "snippet": "int function ( final MediaFormat arg0 ) { if ( concodeclass_mIsStarted ) throw new IllegalStateException ( \"srini_string\" ) ; final int loc0 = concodeclass_mMediaMuxer . addTrack ( arg0 ) ; if ( concodeclass_DEBUG ) Log . i ( concodeclass_TAG , \"srini_string\" + concodeclass_mEncoderCount + \"srini_string\" + loc0 + \"srini_string\" + arg0 ) ; return loc0 ; }"
    },
    {
        "question_id": 190,
        "intent": "Returns where the scroll will end . Valid only for `` fling '' scrolls .",
        "snippet": "float function ( ) { return concodeclass_mFinal ; }"
    },
    {
        "question_id": 191,
        "intent": "Assert that a Map has entries ; that is , it must not be null and must have at least one entry . Assert.notEmpty map ;",
        "snippet": "void function ( Map arg0 ) { notEmpty ( arg0 , \"srini_string\" ) ; }"
    },
    {
        "question_id": 192,
        "intent": "Test method for NotificationController #registerUserSession ServerSession , ServerMessage . Verifies that method throws NullPointerException when ServerSession is null .",
        "snippet": "void function ( ) { concodeclass_notificationController . registerUserSession ( null , concodeclass_mockServerMessage ) ; }"
    },
    {
        "question_id": 193,
        "intent": "Undo the action done after the given step . For example , when the given step is 0 , nothing was done , so nothing can be undone ; and when the given step is 1 , undo the first action . Undo allows users to work part way through fixing a problem , see the partial result , and explore a different alternative .",
        "snippet": "void function ( int arg0 ) { }"
    },
    {
        "question_id": 194,
        "intent": "Compares this tag to the specified tag . The tag comparison is based on a comparison of key and value in that order .",
        "snippet": "int function ( Tag arg0 ) { int loc0 ; loc0 = this . concodeclass_key . compareTo ( arg0 . key ) ; if ( loc0 != 0 ) { return loc0 ; } return this . concodeclass_value . compareTo ( arg0 . value ) ; }"
    },
    {
        "question_id": 195,
        "intent": "Set a default spacing value . This is used as a fallback when no spacing has been set for a particular direction .",
        "snippet": "boolean function ( int arg0 , float arg1 ) { if ( concodeclass_mDefaultSpacing == null ) { concodeclass_mDefaultSpacing = concodefunc_newSpacingResultArray ( ) ; } if ( ! FloatUtil . floatsEqual ( concodeclass_mDefaultSpacing [ arg0 ] , arg1 ) ) { concodeclass_mDefaultSpacing [ arg0 ] = arg1 ; return true ; } return false ; }"
    },
    {
        "question_id": 196,
        "intent": "Scans list of base packages for all resources with the given extension .",
        "snippet": "List < URL > function ( String arg0 , String arg1 ) { return findResources ( arg0 , arg1 , null ) ; }"
    },
    {
        "question_id": 197,
        "intent": "Adds knowledge about a single attribute of the current node .",
        "snippet": "void function ( QName arg0 ) { Level loc0 = concodeclass_path . getLast ( ) ; loc0 . attributes . put ( arg0 , new Level ( concodeclass_ATTR + concodefunc_getName ( arg0 ) ) ) ; }"
    },
    {
        "question_id": 198,
        "intent": "Determine the content type of the given message . This method will try the registered rules in turn until the first rule matches .",
        "snippet": "ContentTypeInfo function ( Message arg0 ) { for ( ContentTypeRule loc0 : concodeclass_rules ) { ContentTypeInfo loc1 = loc0 . getContentType ( arg0 ) ; if ( loc1 != null ) { return loc1 ; } } return null ; }"
    },
    {
        "question_id": 199,
        "intent": "Create an instance of GetOfferDetailsResponse.Return.DetailOfferData.FulfillmentPartner",
        "snippet": "GetOfferDetailsResponse . Return . DetailOfferData . FulfillmentPartner function ( ) { return new GetOfferDetailsResponse . Return . DetailOfferData . FulfillmentPartner ( ) ; }"
    },
    {
        "question_id": 200,
        "intent": "Sets the items .",
        "snippet": "void function ( ItemList < T > arg0 ) { this . concodeclass_items = arg0 ; }"
    },
    {
        "question_id": 201,
        "intent": "Checks if a given payload is in a root of the DAG .",
        "snippet": "boolean function ( T arg0 ) { if ( ! concodefunc_contains ( arg0 ) ) { return false ; } return concodeclass_mRoots . contains ( concodeclass_mIndex . get ( arg0 ) ) ; }"
    },
    {
        "question_id": 202,
        "intent": "Return the len of a file .",
        "snippet": "long function ( String arg0 ) { long loc0 = - 1 ; FileStatus loc1 = concodefunc_getFileStatus ( arg0 ) ; if ( loc1 != null ) { loc0 = loc1 . getLen ( ) ; } return loc0 ; }"
    },
    {
        "question_id": 203,
        "intent": "Test method for net.sf.marineapi.nmea.parser.SentenceFactory #createParser TalkerId , SentenceId .",
        "snippet": "void function ( ) { List < String > loc0 = concodeclass_instance . listParsers ( ) ; assertEquals ( SentenceId . values ( ) . length , loc0 . size ( ) ) ; for ( SentenceId loc1 : SentenceId . values ( ) ) { assertTrue ( loc0 . contains ( loc1 . name ( ) ) ) ; } }"
    },
    {
        "question_id": 204,
        "intent": "Gets the Global Chromosomal Stop .",
        "snippet": "long function ( ) { return concodeclass_tStop ; }"
    },
    {
        "question_id": 205,
        "intent": "Returns the starting count number for the count down animation .",
        "snippet": "int function ( ) { return concodeclass_mStartCount ; }"
    },
    {
        "question_id": 206,
        "intent": "Estimates the number of output records in the join . The formula is : R indexjoin p1 , p2 , idx = R p1 R idx",
        "snippet": "int function ( ) { return concodeclass_p1 . recordsOutput ( ) * concodeclass_ii . recordsOutput ( ) ; }"
    },
    {
        "question_id": 207,
        "intent": "Returns a list of space-separated strings from the specified key .",
        "snippet": "List < String > function ( ) { return getStrings ( \"srini_string\" ) ; }"
    },
    {
        "question_id": 208,
        "intent": "Clears the list of collected events .",
        "snippet": "void function ( ) { concodeclass_events . clear ( ) ; }"
    },
    {
        "question_id": 209,
        "intent": "Sets up the constructors before a test run .",
        "snippet": "void function ( ) { concodeclass_mClientRWLock = new ClientRWLock ( ) ; concodeclass_mReadLock = concodeclass_mClientRWLock . readLock ( ) ; concodeclass_mWriteLock = concodeclass_mClientRWLock . writeLock ( ) ; }"
    },
    {
        "question_id": 210,
        "intent": "Set the hour of day .",
        "snippet": "void function ( int arg0 ) { if ( arg0 < 0 || arg0 > 23 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } this . concodeclass_hour = arg0 ; }"
    },
    {
        "question_id": 211,
        "intent": "Factory for Evictor .",
        "snippet": "Evictor function ( BlockMetadataManagerView arg0 , Allocator arg1 ) { try { return CommonUtils . createNewClassInstance ( Configuration . < Evictor > getClass ( PropertyKey . WORKER_EVICTOR_CLASS ) , new Class [ ] { BlockMetadataManagerView . class , Allocator . class } , new Object [ ] { arg0 , arg1 } ) ; } catch ( Exception loc0 ) { throw Throwables . propagate ( loc0 ) ; } }"
    },
    {
        "question_id": 212,
        "intent": "Returns the time in seconds when this token was issued at",
        "snippet": "long function ( ) { return concodeclass_issuedAt ; }"
    },
    {
        "question_id": 213,
        "intent": "Turns the iterable into a list .",
        "snippet": "List < E > function ( Iterable < E > arg0 ) { ArrayList < E > loc0 = new ArrayList < E > ( ) ; for ( E loc1 : arg0 ) { loc0 . add ( loc1 ) ; } return loc0 ; }"
    },
    {
        "question_id": 214,
        "intent": "Implementation of PortalUserDAO",
        "snippet": "UserAuthorities function ( final String arg0 ) { if ( concodeclass_log . isDebugEnabled ( ) ) { concodeclass_log . debug ( \"srini_string\" + arg0 ) ; } Collection < String > loc0 = concodefunc_getUserAuthorities ( arg0 ) ; return ( loc0 . size ( ) > 0 ) ? new UserAuthorities ( arg0 , loc0 ) : null ; }"
    },
    {
        "question_id": 215,
        "intent": "Returns an EigenDecomposition that has been optimized for the specified matrix size.If the input matrix is symmetric within tolerance then the symmetric algorithm will be used , otherwise a general purpose eigenvalue decomposition is used .",
        "snippet": "EigenDecomposition < DenseMatrix64F > function ( int arg0 , boolean arg1 ) { return new SwitchingEigenDecomposition ( arg0 , arg1 , 1e-8 ) ; }"
    },
    {
        "question_id": 216,
        "intent": "Registers a listener that is notified of each comparison .",
        "snippet": "void function ( ComparisonListener arg0 ) { concodeclass_compListeners . add ( arg0 ) ; }"
    },
    {
        "question_id": 217,
        "intent": "Returns the int identifier of the type . Note : This is only used for getting the int representation of the type for alluxio.worker.DataServerMessage , since that class needs to manually encode all messages . alluxio.worker.DataServerMessage and this method should no longer be neededwhen the client is converted to use Netty .",
        "snippet": "int function ( ) { return concodeclass_mId ; }"
    },
    {
        "question_id": 218,
        "intent": "The cofactor of a matrix",
        "snippet": "Matrix function ( Matrix arg0 ) { Matrix loc0 = new Matrix ( arg0 . getNrows ( ) , arg0 . getNcols ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0 . getNrows ( ) ; loc1 ++ ) { for ( int loc2 = 0 ; loc2 < arg0 . getNcols ( ) ; loc2 ++ ) { loc0 . setValueAt ( loc1 , loc2 , concodefunc_changeSign ( loc1 ) * concodefunc_changeSign ( loc2 ) * concodefunc_determinant ( concodefunc_createSubMatrix ( arg0 , loc1 , loc2 ) ) ) ; } } return loc0 ; }"
    },
    {
        "question_id": 219,
        "intent": "Configure if the client should cache tokens locally or not",
        "snippet": "void function ( boolean arg0 ) { this . concodeclass_cacheTokens = arg0 ; }"
    },
    {
        "question_id": 220,
        "intent": "Handy method to find a certain pattern into a file . While this method lives in the FileUtils , it was designed with with unit test in mind to check result redirected into a file",
        "snippet": "boolean function ( final File arg0 , final String arg1 ) { Pattern loc0 = Pattern . compile ( arg1 ) ; Matcher loc1 = loc0 . loc1 ( \"srini_string\" ) ; FileIterable loc2 = new FileIterable ( arg0 ) ; for ( String loc3 : loc2 ) { loc1 . reset ( loc3 ) ; if ( loc1 . find ( ) ) { return true ; } } return false ; }"
    },
    {
        "question_id": 221,
        "intent": "Return the ServletConfig associated with this instance .",
        "snippet": "ServletConfig function ( ) { return ( this . concodeclass_config ) ; }"
    },
    {
        "question_id": 222,
        "intent": "Returns the schema of the sorted table , which is the same as in the underlying query .",
        "snippet": "Schema function ( ) { return concodeclass_sch ; }"
    },
    {
        "question_id": 223,
        "intent": "Test of setDuration method , of class LogEntryRequest .",
        "snippet": "void function ( ) { System . out . println ( \"srini_string\" ) ; long loc0 = 100L ; concodeclass_instance . setDuration ( loc0 ) ; }"
    },
    {
        "question_id": 224,
        "intent": "Moves the scan to the next record . The method moves to the next index record , if possible . Otherwise , it moves to the next LHS record and the first index record . If there are no more LHS records , the method returns false .",
        "snippet": "boolean function ( ) { while ( true ) { if ( concodeclass_idx . next ( ) ) { concodeclass_ts . moveToRid ( concodeclass_idx . getDataRid ( ) ) ; return true ; } if ( ! concodeclass_s . next ( ) ) return false ; concodefunc_resetIndex ( ) ; } }"
    },
    {
        "question_id": 225,
        "intent": "Returns the population covariance of the values . The count must be non-zero . This is guaranteed to return zero if the dataset contains a single pair of finite values . It is not guaranteed to return zero when the dataset consists of the same pair of values multiple times , due to numerical errors . Non-finite values If the dataset contains any non-finite values Double #POSITIVE_INFINITY , Double #NEGATIVE_INFINITY , or Double #NaN then the result is Double #NaN .",
        "snippet": "double function ( ) { checkState ( concodefunc_count ( ) != 0 ) ; return concodeclass_sumOfProductsOfDeltas / concodefunc_count ( ) ; }"
    },
    {
        "question_id": 226,
        "intent": "Test method for net.sf.marineapi.nmea.parser.ZDAParser #getLocalZoneMinutes .",
        "snippet": "void function ( ) { assertEquals ( 0 , concodeclass_zda . getLocalZoneMinutes ( ) ) ; }"
    },
    {
        "question_id": 227,
        "intent": "Sets the start time .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_startTime = arg0 ; }"
    },
    {
        "question_id": 228,
        "intent": "Returns true if the specified field is in the schema",
        "snippet": "boolean function ( String arg0 ) { return concodefunc_fields ( ) . contains ( arg0 ) ; }"
    },
    {
        "question_id": 229,
        "intent": "Compares to a specific object .",
        "snippet": "boolean function ( Object arg0 ) { if ( this == arg0 ) { return true ; } if ( ! ( arg0 instanceof TtlBucket ) ) { return false ; } TtlBucket loc0 = ( TtlBucket ) arg0 ; return concodeclass_mTtlIntervalStartTimeMs == loc0 . mTtlIntervalStartTimeMs ; }"
    },
    {
        "question_id": 230,
        "intent": "Returns the number of eigenvalues/eigenvectors . This is the matrix 's dimension .",
        "snippet": "int function ( ) { return concodeclass_eig . getNumberOfEigenvalues ( ) ; }"
    },
    {
        "question_id": 231,
        "intent": "Create an instance of CheckServiceAccessRequest",
        "snippet": "CheckServiceAccessRequest function ( ) { return new CheckServiceAccessRequest ( ) ; }"
    },
    {
        "question_id": 232,
        "intent": "Sets the feed id .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_feedId = arg0 ; }"
    },
    {
        "question_id": 233,
        "intent": "Invoked to request the service to stop . By default this method does nothing .",
        "snippet": "void function ( ) { }"
    },
    {
        "question_id": 234,
        "intent": "Returns gammas from the householder operations for the U matrix .",
        "snippet": "double [ ] function ( ) { return gammasU ; }"
    },
    {
        "question_id": 235,
        "intent": "Retrieve the physical transformed bounds geom + effect + clip + transform of a Node .",
        "snippet": "Bounds function ( Node arg0 ) { return arg0 . getBoundsInParent ( ) ; }"
    },
    {
        "question_id": 236,
        "intent": "Sets the value of the mapType property .",
        "snippet": "void function ( MapType arg0 ) { this . concodeclass_mapType = arg0 ; }"
    },
    {
        "question_id": 237,
        "intent": "Check whether the value is greater than or equals 0 .",
        "snippet": "int function ( int arg0 , String arg1 ) { if ( arg0 <= 0 ) { throw new IllegalArgumentException ( XLog . format ( \"srini_string\" , arg1 , arg0 ) ) ; } return arg0 ; }"
    },
    {
        "question_id": 238,
        "intent": "Tests the CustomAuthenticationProvider #CustomAuthenticationProvider String constructor to throw an exception when the class can not be found .",
        "snippet": "void function ( ) { String loc0 = \"srini_string\" ; concodeclass_mThrown . expect ( RuntimeException . class ) ; concodeclass_mThrown . expectMessage ( loc0 + \"srini_string\" ) ; new CustomAuthenticationProvider ( loc0 ) ; }"
    },
    {
        "question_id": 239,
        "intent": "Tests a null return .",
        "snippet": "void function ( ) { SpringBolt loc0 = new SpringBolt ( TestBean . class , \"srini_string\" , \"srini_string\" ) ; loc0 . setScatterOutput ( true ) ; concodefunc_run ( loc0 ) ; verify ( concodeclass_outputCollectorMock ) . ack ( concodeclass_tupleMock ) ; verifyNoMoreInteractions ( concodeclass_outputCollectorMock ) ; }"
    },
    {
        "question_id": 240,
        "intent": "Returns an Escaper instance that escapes strings so they can be safely included inURL path segments . The returned escaper escapes all non-ASCII characters , even though many of these are accepted in modern URLs . If the escaper were to leave these characters unescaped , they would be escaped by the consumer at parse time , anyway . Additionally , the escaper escapes the slash character '' / '' . While slashes are acceptable in URL paths , they are considered by the specification to be separators between `` path segments . '' This implies that , if you wish for your path to contain slashes , you must escape each segment separately and then join them . When escaping a String , the following rules apply : The alphanumeric characters `` a '' through `` z '' , `` A '' through `` Z '' and `` 0 '' through `` 9 '' remain the same . The unreserved characters '' . '' , '' - '' , '' ~ '' , and '' _ '' remain the same . The general delimiters '' @ '' and '' : '' remain the same . The subdelimiters '' ! '' , `` $ '' , '' & '' , '' ' '' , '' '' , '' '' , '' '' , '' + '' , '' , '' , '' ; '' , and '' = '' remain the same . The space character '' '' is converted into % 20 . All other characters are converted into one or more bytes using UTF-8 encoding and each byte is then represented by the 3-character string '' % XY '' , where `` XY '' is the two-digit , uppercase , hexadecimal representation of the byte value . Note : Unlike other escapers , URL escapers produce uppercase hexadecimal sequences .",
        "snippet": "Escaper function ( ) { return concodeclass_URL_PATH_SEGMENT_ESCAPER ; }"
    },
    {
        "question_id": 241,
        "intent": "Gets the seq no .",
        "snippet": "Long function ( ) { return concodeclass_seqNo ; }"
    },
    {
        "question_id": 242,
        "intent": "Write 24-bit of the given value in big-endian order to the buffer",
        "snippet": "BufferedByteWriter function ( byte arg0 ) { concodefunc_ensureCapacity ( 3 ) ; concodeclass_mWriter . putShort ( ( short ) 0 ) ; concodeclass_mWriter . put ( arg0 ) ; return this ; }"
    },
    {
        "question_id": 243,
        "intent": "Frees Database Connection .",
        "snippet": "void function ( Class arg0 , Connection arg1 , PreparedStatement arg2 , ResultSet arg3 ) { closeAll ( arg0 . getName ( ) , arg1 , arg3 ) ; }"
    },
    {
        "question_id": 244,
        "intent": "Add an uplink to this node .",
        "snippet": "void function ( ClassdiagramNode arg0 ) { concodeclass_uplinks . add ( arg0 ) ; }"
    },
    {
        "question_id": 245,
        "intent": "Tests the StorageTierView #getDirViews method .",
        "snippet": "void function ( ) { Assert . assertEquals ( TieredBlockStoreTestUtils . TIER_PATH [ concodeclass_TEST_TIER_LEVEL ] . length , concodeclass_mTestTierView . getDirViews ( ) . size ( ) ) ; }"
    },
    {
        "question_id": 246,
        "intent": "Check if this itemset appears in a given period",
        "snippet": "boolean function ( int arg0 ) { return concodeclass_periodsElements [ arg0 ] != null && concodeclass_periodsElements [ arg0 ] . size ( ) != 0 ; }"
    },
    {
        "question_id": 247,
        "intent": "Returns true if this registration represents the result data sent by a pulling Gitblit instance .",
        "snippet": "boolean function ( ) { return ! concodeclass_url . toLowerCase ( ) . startsWith ( \"srini_string\" ) && ! concodeclass_url . toLowerCase ( ) . startsWith ( \"srini_string\" ) ; }"
    },
    {
        "question_id": 248,
        "intent": "Creates a scriptPubKey that encodes payment to the given raw public key .",
        "snippet": "Script function ( ECKey arg0 ) { return new ScriptBuilder ( ) . data ( arg0 . getPubKey ( ) ) . op ( OP_CHECKSIG ) . build ( ) ; }"
    },
    {
        "question_id": 249,
        "intent": "Adds an array of Cookie HTTP cookies . Cookies are added individually and in the given array order . If any of the given cookies has already expired it will not be added , but existing values will still be removed .",
        "snippet": "void function ( Cookie [ ] arg0 ) { if ( arg0 != null ) { for ( Cookie loc0 : arg0 ) { this . concodefunc_addCookie ( loc0 ) ; } } }"
    },
    {
        "question_id": 250,
        "intent": "Returns the X coordinate of this Point2D in double precision .",
        "snippet": "double function ( ) { return concodeclass_x ; }"
    },
    {
        "question_id": 251,
        "intent": "Converts a list of objects to a string .",
        "snippet": "String function ( List < T > arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( T loc1 : arg0 ) { if ( loc0 . length ( ) != 0 ) { loc0 . append ( \"srini_string\" ) ; } loc0 . append ( loc1 ) ; } return loc0 . toString ( ) ; }"
    },
    {
        "question_id": 252,
        "intent": "Returns the current number of entries in the map .",
        "snippet": "int function ( ) { return concodeclass__size ; }"
    },
    {
        "question_id": 253,
        "intent": "Get the array of items stored in the original Q-matrix",
        "snippet": "int [ ] function ( ) { return concodeclass_originalMatrix . itemNames ; }"
    },
    {
        "question_id": 254,
        "intent": "Release the underlying buffer of previous/current read response .",
        "snippet": "void function ( ) { if ( concodeclass_mReadResponse != null ) { concodeclass_mReadResponse . getPayloadDataBuffer ( ) . release ( ) ; concodeclass_mReadResponse = null ; } }"
    },
    {
        "question_id": 255,
        "intent": "Returns whether the EntityAIBase should begin execution .",
        "snippet": "boolean function ( EntityMobWithInventory arg0 ) { if ( concodeclass_theTarget == null ) { return false ; } if ( concodeclass_theTarget . getEntityId ( ) == arg0 . getEntityId ( ) ) { arg0 . setAttackTarget ( null ) ; return false ; } if ( arg0 . getDistanceToEntity ( concodeclass_theTarget ) > 30.0D ) { return false ; } return true ; }"
    },
    {
        "question_id": 256,
        "intent": "Perform a shift in a random direction that is of the same magnitude as the elements in the matrix .",
        "snippet": "void function ( ) { concodeclass_numExceptional ++ ; double loc0 = 0.05 * concodeclass_numExceptional ; if ( loc0 > 1.0 ) loc0 = 1.0 ; double loc1 = 2.0 * ( concodeclass_rand . nextDouble ( ) - 0.5 ) * loc0 ; concodefunc_performImplicitSingleStep ( loc1 , true ) ; concodeclass_lastExceptional = concodeclass_steps ; }"
    },
    {
        "question_id": 257,
        "intent": "Does the set contain a particular item ?",
        "snippet": "boolean function ( lalr_item arg0 ) { return concodeclass__all . containsKey ( arg0 ) ; }"
    },
    {
        "question_id": 258,
        "intent": "Factory for RemoteBlockWriter .",
        "snippet": "RemoteBlockWriter function ( ) { try { return CommonUtils . createNewClassInstance ( Configuration . < RemoteBlockWriter > getClass ( PropertyKey . USER_BLOCK_REMOTE_WRITER_CLASS ) , null , null ) ; } catch ( Exception loc0 ) { throw Throwables . propagate ( loc0 ) ; } }"
    },
    {
        "question_id": 259,
        "intent": "Returns true if two doubles are considered equal . Tests if the absolute difference between the two doubles has a difference less then a given double epsilon . Determining the given epsilon is highly dependant on the precision of the doubles that are being compared .",
        "snippet": "boolean function ( double arg0 , double arg1 , double arg2 ) { return arg0 == arg1 ? true : Math . abs ( arg0 - arg1 ) < arg2 ; }"
    },
    {
        "question_id": 260,
        "intent": "Gets the value of the chain property .",
        "snippet": "CertificateChainInfo function ( ) { return concodeclass_chain ; }"
    },
    {
        "question_id": 261,
        "intent": "Compatible with the equals implementation .",
        "snippet": "int function ( ) { return concodefunc_toString ( ) . hashCode ( ) ; }"
    },
    {
        "question_id": 262,
        "intent": "Determines whether a specified US-ASCII character is an HTTP whitespace character Space or Horizontal tab",
        "snippet": "boolean function ( byte arg0 ) { return arg0 == concodeclass_SPACE || arg0 == concodeclass_HT ; }"
    },
    {
        "question_id": 263,
        "intent": "get instance of EaseUI",
        "snippet": "EaseUI function ( ) { if ( concodeclass_instance == null ) { concodeclass_instance = new EaseUI ( ) ; } return concodeclass_instance ; }"
    },
    {
        "question_id": 264,
        "intent": "Frees a Hessian 2.0 serializer",
        "snippet": "void function ( Hessian2Output arg0 ) { if ( arg0 == null ) { return ; } arg0 . free ( ) ; concodeclass__freeHessian2Output . free ( arg0 ) ; }"
    },
    {
        "question_id": 265,
        "intent": "Gets the date at which the access token expires .",
        "snippet": "Date function ( ) { return this . concodeclass_expires ; }"
    },
    {
        "question_id": 266,
        "intent": "Makes sure that an IllegalArgumentException is thrown when the message isnot a alluxio.network.protocol.RPCResponse .",
        "snippet": "void function ( ) { final RPCMessage loc0 = new RPCBlockReadRequest ( 0 , 0 , 0 , 0 , 0 ) ; concodeclass_mThrown . expect ( IllegalArgumentException . class ) ; concodeclass_mThrown . expectMessage ( ExceptionMessage . NO_RPC_HANDLER . getMessage ( loc0 . getType ( ) ) ) ; concodeclass_mHandler . channelRead0 ( concodeclass_mContext , loc0 ) ; }"
    },
    {
        "question_id": 267,
        "intent": "Returns the path of the proposals folder . This method checks to see if Gitblit is running on a cloud service and may return an adjusted path .",
        "snippet": "File function ( ) { return concodeclass_runtimeManager . getFileOrFolder ( Keys . federation . proposalsFolder , \"srini_string\" ) ; }"
    },
    {
        "question_id": 268,
        "intent": "Gets the bus",
        "snippet": "Bus function ( ) { return concodeclass_bus ; }"
    },
    {
        "question_id": 269,
        "intent": "Create an evaluator to be used in resolving configuration vars and frequency constant/functions used in Stage 1",
        "snippet": "ELEvaluator function ( Configuration arg0 , String arg1 ) { ELEvaluator loc0 = Services . get ( ) . get ( ELService . class ) . createEvaluator ( arg1 ) ; concodefunc_setConfigToEval ( loc0 , arg0 ) ; return loc0 ; }"
    },
    {
        "question_id": 270,
        "intent": "Computes the value of a metric for an operation .",
        "snippet": "double function ( Metrics . ClassMetricKey arg0 , ASTClassOrInterfaceDeclaration arg1 , boolean arg2 ) { Double loc0 = concodeclass_memo . get ( arg0 ) ; if ( ! arg2 && loc0 != null ) { return loc0 ; } ClassMetric loc1 = arg0 . getCalculator ( ) ; double loc2 = loc1 . computeFor ( arg1 , Metrics . getTopLevelPackageStats ( ) ) ; concodeclass_memo . put ( arg0 , loc2 ) ; return loc2 ; }"
    },
    {
        "question_id": 271,
        "intent": "Retuen the Phone Number of the Sender",
        "snippet": "String function ( ) { return concodeclass_sender ; }"
    },
    {
        "question_id": 272,
        "intent": "Adds a commit to the activity object as long as the commit is not a duplicate .",
        "snippet": "RepositoryCommit function ( String arg0 , String arg1 , RevCommit arg2 ) { RepositoryCommit loc0 = new RepositoryCommit ( arg0 , arg1 , arg2 ) ; return addCommit ( loc0 ) ; }"
    },
    {
        "question_id": 273,
        "intent": "Check if this path contains the given step",
        "snippet": "boolean function ( int arg0 , int arg1 ) { return concodeclass_steps . contains ( new Step ( arg0 , arg1 ) , false ) ; }"
    },
    {
        "question_id": 274,
        "intent": "Add an integer field to the stream . \\ param value The integer value to be added .",
        "snippet": "void function ( int arg0 ) { concodeclass_format . checkType ( 'i' , true ) ; concodefunc_packLong ( arg0 , true ) ; }"
    },
    {
        "question_id": 275,
        "intent": "Destroy the Purge Jobs Service .",
        "snippet": "void function ( ) { }"
    },
    {
        "question_id": 276,
        "intent": "Deserialize only an i32 field addressed by recursively using field id from a byte record .",
        "snippet": "Integer function ( byte [ ] arg0 , TFieldIdEnum arg1 , TFieldIdEnum ... arg2 ) { return ( Integer ) concodefunc_partialDeserializeField ( TType . I32 , arg0 , arg1 , arg2 ) ; }"
    },
    {
        "question_id": 277,
        "intent": "Set the index of the current task .",
        "snippet": "void function ( int arg0 ) { concodeclass_taskMode = arg0 ; }"
    },
    {
        "question_id": 278,
        "intent": "Check if the client requested a date-based conditional operation .",
        "snippet": "Date function ( ) { String loc0 = \"srini_string\" ; if ( this . concodeclass_request . getHeader ( loc0 ) == null ) return null ; return new Date ( this . concodeclass_request . getDateHeader ( loc0 ) ) ; }"
    },
    {
        "question_id": 279,
        "intent": "Specifies that the current interceptor needs to be added to the interceptor chain after the specified collection of interceptors .",
        "snippet": "void function ( Collection < String > arg0 ) { concodeclass_after . addAll ( arg0 ) ; }"
    },
    {
        "question_id": 280,
        "intent": "Sets the to address of this message .",
        "snippet": "void function ( String arg0 ) { concodeclass_to = arg0 ; }"
    },
    {
        "question_id": 281,
        "intent": "Set the target to run away from .",
        "snippet": "void function ( Entity arg0 ) { this . concodeclass_source = arg0 ; }"
    },
    {
        "question_id": 282,
        "intent": "Tests BaseKeyValuePartitionWriter #close after BaseKeyValuePartitionWriter #close , expecting a close is a no-op after the previous close .",
        "snippet": "void function ( ) { concodeclass_mWriter . close ( ) ; Assert . assertTrue ( concodeclass_mOutStream . isClosed ( ) ) ; Assert . assertFalse ( concodeclass_mOutStream . isCanceled ( ) ) ; concodeclass_mWriter . close ( ) ; Assert . assertTrue ( concodeclass_mOutStream . isClosed ( ) ) ; Assert . assertFalse ( concodeclass_mOutStream . isCanceled ( ) ) ; }"
    },
    {
        "question_id": 283,
        "intent": "Creates a android.media.RemoteControlClient.MetadataEditor .",
        "snippet": "MetadataEditorCompat function ( boolean arg0 ) { Object loc0 ; if ( concodeclass_HAS_REMOTE_CONTROL_APIS ) { loc0 = ( ( RemoteControlClient ) concodeclass_mActualRemoteControlClient ) . editMetadata ( arg0 ) ; } else { loc0 = null ; } return new MetadataEditorCompat ( loc0 ) ; }"
    },
    {
        "question_id": 284,
        "intent": "Given a persons blogs updates the naive bayes map of word probabilities",
        "snippet": "void function ( PersonBlogs arg0 , HashMap < String , HashMap < String , Integer >> arg1 ) { String loc0 = arg0 . getBloggerAgeClass ( ) ; for ( int loc1 = 0 ; loc1 < arg0 . getPosts ( ) . size ( ) ; loc1 ++ ) { String loc2 = arg0 . getPosts ( ) . get ( loc1 ) ; String [ ] loc3 = NaiveBayesTrain . cleanPost ( loc2 ) ; concodefunc_updateNaiveBayesMapForSinglePost ( loc3 , arg1 , loc0 ) ; } }"
    },
    {
        "question_id": 285,
        "intent": "Formats time elapsed since the given start time in nanoseconds .",
        "snippet": "String function ( long arg0 , String arg1 ) { return arg1 + \"srini_string\" + ( System . nanoTime ( ) - arg0 ) + \"srini_string\" ; }"
    },
    {
        "question_id": 286,
        "intent": "Prints request headers .",
        "snippet": "void function ( final HttpServletRequest arg0 ) { concodeclass_LOG . debug ( concodefunc_getRequestHeaders ( arg0 ) . toString ( ) ) ; }"
    },
    {
        "question_id": 287,
        "intent": "Loads and optionally processes the journal checkpoint file .",
        "snippet": "void function ( boolean arg0 ) { concodeclass_LOG . info ( \"srini_string\" , concodeclass_mMaster . getName ( ) , concodeclass_mJournal . getCheckpointFilePath ( ) ) ; JournalInputStream loc0 = concodeclass_mReader . getCheckpointInputStream ( ) ; if ( arg0 ) { concodeclass_mMaster . processJournalCheckpoint ( loc0 ) ; } concodeclass_mLatestSequenceNumber = loc0 . getLatestSequenceNumber ( ) ; loc0 . close ( ) ; }"
    },
    {
        "question_id": 288,
        "intent": "Return the time difference in milliseconds between the previous accepted GestureDetector event and the current GestureDetector event .",
        "snippet": "long function ( ) { return concodeclass_mTimeDelta ; }"
    },
    {
        "question_id": 289,
        "intent": "sends the given data asynchronously",
        "snippet": "void function ( byte [ ] arg0 ) { concodeclass_clientSession . getSocket ( ) . doWrite ( arg0 ) ; }"
    },
    {
        "question_id": 290,
        "intent": "Test method for net.sf.marineapi.nmea.parser.GSAParser #setSatellitesIds String .",
        "snippet": "void function ( ) { String [ ] loc0 = { \"srini_string\" , \"srini_string\" , \"srini_string\" , \"srini_string\" , \"srini_string\" , \"srini_string\" } ; concodeclass_instance . setSatelliteIds ( loc0 ) ; String [ ] loc1 = concodeclass_instance . getSatelliteIds ( ) ; assertEquals ( loc0 . length , loc1 . length ) ; int loc2 = 0 ; for ( String loc3 : loc0 ) { assertEquals ( loc3 , loc1 [ loc2 ++ ] ) ; } }"
    },
    {
        "question_id": 291,
        "intent": "establishes a connection to the given server . Starts the sender thread .",
        "snippet": "void function ( String arg0 , int arg1 ) { connect ( InetAddress . getByName ( arg0 ) , arg1 ) ; }"
    },
    {
        "question_id": 292,
        "intent": "The index of this output in the transaction which holds it .",
        "snippet": "long function ( ) { return concodeclass_index ; }"
    },
    {
        "question_id": 293,
        "intent": "Returns the dataval component of the entry",
        "snippet": "Constant function ( ) { return concodeclass_dataval ; }"
    },
    {
        "question_id": 294,
        "intent": "Set the wsse ValueType attribute",
        "snippet": "void function ( String arg0 ) { this . concodeclass_wsseValueType = arg0 ; }"
    },
    {
        "question_id": 295,
        "intent": "Read a HashMap from a Parcel , class of key and value are both String",
        "snippet": "Map < String , String > function ( Parcel arg0 ) { if ( arg0 == null ) { return null ; } int loc0 = arg0 . readInt ( ) ; if ( loc0 == - 1 ) { return null ; } Map < String , String > loc1 = new HashMap < String , String > ( ) ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { String loc3 = arg0 . readString ( ) ; loc1 . put ( loc3 , arg0 . readString ( ) ) ; } return loc1 ; }"
    },
    {
        "question_id": 296,
        "intent": "A = H + lambdaI where I is an identity matrix .",
        "snippet": "void function ( DenseMatrix64F arg0 , DenseMatrix64F arg1 , double arg2 ) { final int loc0 = concodeclass_param . getNumElements ( ) ; arg0 . set ( arg1 ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { arg0 . set ( loc1 , loc1 , arg0 . get ( loc1 , loc1 ) + arg2 ) ; } }"
    },
    {
        "question_id": 297,
        "intent": "Sets the value of the singleNestedComplexNode property .",
        "snippet": "void function ( ComplexNode arg0 ) { this . concodeclass_singleNestedComplexNode = arg0 ; }"
    },
    {
        "question_id": 298,
        "intent": "Returns a specific folder in the Box account",
        "snippet": "BoxFolder function ( String arg0 ) { return this . getFolder ( concodeclass_rootFolder , arg0 ) ; }"
    },
    {
        "question_id": 299,
        "intent": "Sets the units of measurement .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_units = arg0 ; }"
    },
    {
        "question_id": 300,
        "intent": "Returns the uint32 encoded form of the path element , including the most significant bit .",
        "snippet": "int function ( ) { return concodeclass_i ; }"
    },
    {
        "question_id": 301,
        "intent": "Loads the specified URL",
        "snippet": "void function ( String arg0 ) { concodeclass_webEngine . load ( arg0 ) ; }"
    },
    {
        "question_id": 302,
        "intent": "Add PropertyChangeListener .",
        "snippet": "void function ( PropertyChangeListener arg0 ) { concodeclass_propertyChangeSupport . addPropertyChangeListener ( arg0 ) ; }"
    },
    {
        "question_id": 303,
        "intent": "Get the xmi.id for the reference . This must be unique within the given XMI file system ID , but is not guaranteed to be globally unique .",
        "snippet": "String function ( ) { return concodeclass_xmiId ; }"
    },
    {
        "question_id": 304,
        "intent": "Validate the incoming request for mandatory parameters .",
        "snippet": "boolean function ( ActivityRequest arg0 ) { if ( arg0 == null ) { return false ; } if ( arg0 . getFeedId ( ) == null ) { return false ; } return arg0 . getConfigProperties ( ) != null ; }"
    },
    {
        "question_id": 305,
        "intent": "Checks to see if the journal checkpoint has not been updated . If it has been updated since the creation of this reader , this reader is no longer valid .",
        "snippet": "boolean function ( ) { return concodeclass_mCheckpointRead && ( concodeclass_mCheckpointOpenedTime == concodeclass_mCheckpointLastModifiedTime ) ; }"
    },
    {
        "question_id": 306,
        "intent": "Test method for net.sf.marineapi.nmea.parser.RMCParser #getTime .",
        "snippet": "void function ( ) { Time loc0 = concodeclass_rmc . getTime ( ) ; assertNotNull ( loc0 ) ; assertEquals ( 12 , loc0 . getHour ( ) ) ; assertEquals ( 0 , loc0 . getMinutes ( ) ) ; assertEquals ( 44.567 , loc0 . getSeconds ( ) , 0.001 ) ; }"
    },
    {
        "question_id": 307,
        "intent": "Load the necessary state to perform an eager precondition check . This implementation does a NOP . Subclasses should override this method and load the state needed to do an eager precondition check . A trivial implementation is calling link #loadState .",
        "snippet": "void function ( ) { }"
    },
    {
        "question_id": 308,
        "intent": "Inform the listener of a group end .",
        "snippet": "void function ( ) { concodefunc_handleCharacterData ( ) ; concodeclass_listener . processGroupEnd ( ) ; concodeclass_groupDepth -- ; }"
    },
    {
        "question_id": 309,
        "intent": "Backup all notebooks",
        "snippet": "void function ( ) { File loc0 = concodeclass_storage . getBackupDir ( ) ; if ( loc0 == null ) return ; backup ( loc0 ) ; }"
    },
    {
        "question_id": 310,
        "intent": "Inserts the specified record into the index . The method first traverses the directory to find the appropriate leaf page ; then it inserts the record into the leaf . If the insertion causes the leaf to split , then the method calls insert on the root , passing it the directory entry of the new leaf page . If the root node splits , then makeNewRoot is called .",
        "snippet": "void function ( Constant arg0 , RID arg1 ) { concodefunc_beforeFirst ( arg0 ) ; DirEntry loc0 = concodeclass_leaf . insert ( arg1 ) ; concodeclass_leaf . close ( ) ; if ( loc0 == null ) return ; BTreeDir loc1 = new BTreeDir ( concodeclass_rootblk , concodeclass_dirTi , concodeclass_tx ) ; DirEntry loc2 = loc1 . insert ( loc0 ) ; if ( loc2 != null ) loc1 . makeNewRoot ( loc2 ) ; loc1 . close ( ) ; }"
    },
    {
        "question_id": 311,
        "intent": "Return a map of all the short names of classes we maintain mappings for . The names are keyed by the classes themselves .",
        "snippet": "Map < Class < ? > , String > function ( ) { Map < Class < ? > , String > loc0 = new HashMap < > ( ) ; loc0 . putAll ( concodeclass_PRIMITIVE_TYPE_NAMES . asInverseWithShortName ( ) ) ; loc0 . putAll ( concodeclass_TYPES_BY_NAME . asInverseWithShortName ( ) ) ; return loc0 ; }"
    },
    {
        "question_id": 312,
        "intent": "Set whether Entropy is returned to the client or not",
        "snippet": "void function ( boolean arg0 ) { this . concodeclass_returnEntropy = arg0 ; }"
    },
    {
        "question_id": 313,
        "intent": "Return the path originally requested by the client .",
        "snippet": "String function ( ) { return this . concodeclass_request . getMethod ( ) ; }"
    },
    {
        "question_id": 314,
        "intent": "Internal engine method to return serial number for generated classes to ensure name uniqueness .",
        "snippet": "int function ( ) { return ++ concodeclass_generatedClassSerial ; }"
    },
    {
        "question_id": 315,
        "intent": "Index of this symbol terminal or non terminal in the parse tables . Note : indexes are unique among terminals and unique among non terminals , however , a terminal may have the same index as a non-terminal , etc. .",
        "snippet": "int function ( ) { return concodeclass__index ; }"
    },
    {
        "question_id": 316,
        "intent": "Select a folder open a folder chooser GUI",
        "snippet": "String function ( String arg0 ) { return selectile ( arg0 , new ArrayList < > ( ) , \"srini_string\" ) ; }"
    },
    {
        "question_id": 317,
        "intent": "Obtains value of the CoreProtocolPNames #HTTP_CONTENT_CHARSET parameter.If not set , defaults to ISO-8859-1 .",
        "snippet": "String function ( final HttpParams arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } String loc0 = ( String ) arg0 . getParameter ( CoreProtocolPNames . HTTP_CONTENT_CHARSET ) ; if ( loc0 == null ) { loc0 = HTTP . DEFAULT_CONTENT_CHARSET ; } return loc0 ; }"
    },
    {
        "question_id": 318,
        "intent": "Process an RTF command parameter representing a Unicode character .",
        "snippet": "void function ( int arg0 ) { if ( arg0 < 0 ) { arg0 += 65536 ; } concodefunc_processCharacter ( ( char ) arg0 ) ; concodeclass_skipBytes = concodeclass_state . unicodeAlternateSkipCount ; }"
    },
    {
        "question_id": 319,
        "intent": "Test method for ActivityController #registerUserSession ServerSession , ServerMessage . Verifies that method throws NullPointerException when ServerSession is null .",
        "snippet": "void function ( ) { concodeclass_acitivityController . registerUserSession ( null , concodeclass_mockServerMessage ) ; }"
    },
    {
        "question_id": 320,
        "intent": "Writes a SOAP 1.1 ref attribute .",
        "snippet": "void function ( MessageWriter arg0 , String arg1 ) { if ( arg1 == null ) { throw new NullPointerException ( \"srini_string\" ) ; } concodefunc_writeAttribute ( arg0 , concodeclass_SOAP_ENCODING_REF_1_1 , arg1 ) ; }"
    },
    {
        "question_id": 321,
        "intent": "Gets Full Content retrieved from the CGDS .",
        "snippet": "String function ( ) { return this . concodeclass_content ; }"
    },
    {
        "question_id": 322,
        "intent": "Sets the value of the config property .",
        "snippet": "void function ( Config arg0 ) { this . concodeclass_config = arg0 ; }"
    },
    {
        "question_id": 323,
        "intent": "All get methods",
        "snippet": "Integer function ( ) { return this . concodeclass__id ; }"
    },
    {
        "question_id": 324,
        "intent": "Create an instance of BrowseOffersResponse.Return",
        "snippet": "BrowseOffersResponse . Return function ( ) { return new BrowseOffersResponse . Return ( ) ; }"
    },
    {
        "question_id": 325,
        "intent": "Sets the type of the object for the LikeView",
        "snippet": "Builder function ( final String arg0 ) { this . concodeclass_objectType = arg0 ; return this ; }"
    },
    {
        "question_id": 326,
        "intent": "Creates a scriptPubKey that sends to the given script hash . Read BIP 16 to learn more about this kind of script .",
        "snippet": "Script function ( byte [ ] arg0 ) { checkArgument ( arg0 . length == 20 ) ; return new ScriptBuilder ( ) . op ( OP_HASH160 ) . data ( arg0 ) . op ( OP_EQUAL ) . build ( ) ; }"
    },
    {
        "question_id": 327,
        "intent": "Returns the access token validator class name",
        "snippet": "String function ( ) { return concodefunc_getOAuthServerConfiguration ( ) . getOpenIDConnectUserInfoEndpointAccessTokenValidator ( ) ; }"
    },
    {
        "question_id": 328,
        "intent": "Tries to determine ResourceType from string and return #FILE ifprovided string is invalid .",
        "snippet": "ResourceTypeHandler function ( final String arg0 ) { ResourceTypeHandler loc0 = concodefunc_getResourceType ( arg0 ) ; return loc0 == null ? concodeclass_FILE : loc0 ; }"
    },
    {
        "question_id": 329,
        "intent": "Add a single value to the pending animation queue .",
        "snippet": "void function ( Double arg0 ) { concodeclass_mPendingQueue . add ( arg0 ) ; concodefunc_runIfIdle ( ) ; }"
    },
    {
        "question_id": 330,
        "intent": "Gets the current panel of your stack .",
        "snippet": "JPanel function ( ) { return concodeclass_uiStack . getLastElement ( ) ; }"
    },
    {
        "question_id": 331,
        "intent": "Linear solver which uses QR pivot decomposition . These solvers can handle singular systems and should never fail . For singular systems , the solution might not be as accurate as a pseudo inverse that uses SVD . For singular systems there are multiple correct solutions . The optimal 2-norm solution is the solution vector with the minimal 2-norm and is unique . If the optimal solution is not computed then the basic solution is returned . See org.ejml.alg.dense.linsol.qr.BaseLinearSolverQrp for details . There is only a runtime difference for small matrices , 2-norm solution is slower . Two different solvers are available . Compute Q will compute the Q matrix once then use it multiple times . If the solution for a single vector is being found then this should be set to false . If the pseudo inverse is being found or the solution matrix has more than one columns AND solve is being called numerous multiples times then this should be set to true .",
        "snippet": "LinearSolver < DenseMatrix64F > function ( boolean arg0 , boolean arg1 ) { QRColPivDecompositionHouseholderColumn_D64 loc0 = new QRColPivDecompositionHouseholderColumn_D64 ( ) ; if ( arg1 ) return new SolvePseudoInverseQrp ( loc0 , arg0 ) ; else return new LinearSolverQrpHouseCol ( loc0 , arg0 ) ; }"
    },
    {
        "question_id": 332,
        "intent": "Get the list of accepted c14n algorithms . A request can contain a wst : CanonicalizationAlgorithm uri to use for c14n in an issued token . The algorithm specified must be contained in this list . The default algorithms are C14N_EXCL_OMIT_COMMENTS .",
        "snippet": "List < String > function ( ) { return concodeclass_acceptedC14nAlgorithms ; }"
    },
    {
        "question_id": 333,
        "intent": "Gets the successor id .",
        "snippet": "BigDecimal function ( ) { return this . concodeclass_successorId ; }"
    },
    {
        "question_id": 334,
        "intent": "Gets the feed id .",
        "snippet": "String function ( ) { return concodeclass_feedId ; }"
    },
    {
        "question_id": 335,
        "intent": "Get all of the registered notations .",
        "snippet": "List < NotationName > function ( ) { return Collections . unmodifiableList ( concodeclass_notations ) ; }"
    },
    {
        "question_id": 336,
        "intent": "Retrieves a byte array field from the stream . \\ param dest The byte array where the returned value will be stored . \\ param off Offset into the destination buffer to start copying into . \\ param len The length should be large enough to store the entire data item , if it is not , a truncated value will be returned .",
        "snippet": "void function ( byte [ ] arg0 , int arg1 , int arg2 ) { concodeclass_format . checkType ( 'U' , false ) ; concodefunc_getByteArrayInternal ( concodefunc_getByteArrayLength ( ) , arg0 , arg1 , arg2 ) ; }"
    },
    {
        "question_id": 337,
        "intent": "Checks for a card on the enemy hand .",
        "snippet": "boolean function ( String arg0 ) { boolean loc0 = false ; for ( Card loc1 : concodeclass_enemyHandCards ) { if ( loc1 . getName ( ) . equals ( arg0 ) ) { loc0 = true ; } } return loc0 ; }"
    },
    {
        "question_id": 338,
        "intent": "Gets the receipt date type .",
        "snippet": "String function ( ) { return this . concodeclass_receiptDateType ; }"
    },
    {
        "question_id": 339,
        "intent": "Waits the given int attempts for the event queue of JavaFX Application Thread to becompleted , as well as any new events triggered on it .",
        "snippet": "void function ( int arg0 ) { for ( int loc0 = 0 ; loc0 < arg0 ; loc0 ++ ) { concodefunc_blockFxThreadWithSemaphore ( ) ; concodefunc_sleep ( concodeclass_SEMAPHORE_SLEEP_IN_MILLIS , MILLISECONDS ) ; } }"
    },
    {
        "question_id": 340,
        "intent": "Get the lifetime of the Token to be returned in seconds",
        "snippet": "long function ( ) { return concodeclass_lifetime ; }"
    },
    {
        "question_id": 341,
        "intent": "Check the internal JSONObject for a key",
        "snippet": "boolean function ( String arg0 ) { return this . concodeclass_json . has ( arg0 ) ; }"
    },
    {
        "question_id": 342,
        "intent": "Draw this ball at its current position onto the canvas .",
        "snippet": "void function ( ) { concodeclass_canvas . setForegroundColor ( concodeclass_color ) ; concodeclass_canvas . fillCircle ( concodeclass_xPosition , concodeclass_yPosition , concodeclass_diameter ) ; }"
    },
    {
        "question_id": 343,
        "intent": "Initialize the Model subsystem with the MDR ModelImplementation .",
        "snippet": "void function ( ) { concodefunc_initializeModelImplementation ( \"srini_string\" ) ; }"
    },
    {
        "question_id": 344,
        "intent": "A very simple bit permutation to mask a simple incrementer .",
        "snippet": "int function ( final int arg0 , final int arg1 ) { short loc0 = concodefunc_hi16 ( arg1 ) ; short loc1 = concodefunc_lo16 ( arg1 ) ; loc0 += ( ( loc1 << 2 ) + 0 ^ loc1 ) + ( arg0 ^ ( loc1 >>> 3 ) ) + 1 ; loc1 += ( ( loc0 << 2 ) + 2 ^ loc0 ) + ( arg0 ^ ( loc0 >>> 3 ) ) + 3 ; return concodefunc_result ( loc0 , loc1 ) ; }"
    },
    {
        "question_id": 345,
        "intent": "See a parameter used for the transformation",
        "snippet": "Object function ( String arg0 ) { return concodeclass_parameters . get ( arg0 ) ; }"
    },
    {
        "question_id": 346,
        "intent": "Gets the created by .",
        "snippet": "String function ( ) { return this . concodeclass_createdBy ; }"
    },
    {
        "question_id": 347,
        "intent": "Returns true of the mob is currently building a structure . This is mainly used to prevent a mob from starting to mine or farm when it has not finished building a structure .",
        "snippet": "boolean function ( ) { if ( concodeclass_shortmine . isBuilding ( ) || concodeclass_longmine . isBuilding ( ) || concodeclass_smallfarm . isBuilding ( ) || concodeclass_largefarm . isBuilding ( ) || concodeclass_smallhouse . isBuilding ( ) || concodeclass_largehouse . isBuilding ( ) ) { return true ; } return false ; }"
    },
    {
        "question_id": 348,
        "intent": "If this chunk is an OP_N opcode returns the equivalent integer value .",
        "snippet": "int function ( ) { checkState ( concodefunc_isOpCode ( ) ) ; return Script . decodeFromOpN ( concodeclass_opcode ) ; }"
    },
    {
        "question_id": 349,
        "intent": "Save a book .",
        "snippet": "Book function ( Book arg0 ) { concodeclass_log . debug ( \"srini_string\" , arg0 ) ; Book loc0 = concodeclass_bookRepository . save ( arg0 ) ; return loc0 ; }"
    },
    {
        "question_id": 350,
        "intent": "Starts the video stream",
        "snippet": "void function ( ) { URLConnection loc0 = null ; concodeclass_url = new URL ( concodefunc_composeURL ( \"srini_string\" ) ) ; loc0 = concodeclass_url . openConnection ( ) ; loc0 . connect ( ) ; DataInputStream loc1 = new DataInputStream ( new BufferedInputStream ( loc0 . getInputStream ( ) ) ) ; }"
    },
    {
        "question_id": 351,
        "intent": "Adds a rule to the perspective that will generate child nodes for any given parent node .",
        "snippet": "void function ( TreeModel arg0 ) { if ( concodeclass_goRules . contains ( arg0 ) ) { return ; } concodeclass_goRules . add ( arg0 ) ; }"
    },
    {
        "question_id": 352,
        "intent": "Sets the result message .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_resultMessage = arg0 ; }"
    },
    {
        "question_id": 353,
        "intent": "Gets the sessionId of the worker making the request . Make sure the message is ready before calling this method .",
        "snippet": "long function ( ) { concodefunc_checkReady ( ) ; return concodeclass_mSessionId ; }"
    },
    {
        "question_id": 354,
        "intent": "Tests the Mode #toString method .",
        "snippet": "void function ( ) { Assert . assertEquals ( \"srini_string\" , new Mode ( ( short ) 0777 ) . toString ( ) ) ; Assert . assertEquals ( \"srini_string\" , new Mode ( ( short ) 0640 ) . toString ( ) ) ; Assert . assertEquals ( \"srini_string\" , new Mode ( ( short ) 0600 ) . toString ( ) ) ; Assert . assertEquals ( \"srini_string\" , new Mode ( ( short ) 0000 ) . toString ( ) ) ; }"
    },
    {
        "question_id": 355,
        "intent": "Performs a rank one update on matrix A using vectors u and w . The results are stored in A . A = A + & gamma ; u wT This is called a rank1 update because the matrix u wT has a rank of 1 .",
        "snippet": "void function ( double arg0 , DenseMatrix64F arg1 , DenseMatrix64F arg2 , DenseMatrix64F arg3 ) { int loc0 = arg2 . getNumElements ( ) ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { double loc3 = arg2 . data [ loc2 ] ; for ( int loc4 = 0 ; loc4 < loc0 ; loc4 ++ ) { arg1 . data [ loc1 ++ ] += arg0 * loc3 * arg3 . data [ loc4 ] ; } } }"
    },
    {
        "question_id": 356,
        "intent": "Test method for net.sf.marineapi.provider.AbstractProvider #sentenceRead net.sf.marineapi.nmea.event.SentenceEvent .",
        "snippet": "void function ( ) { Sentence loc0 = concodeclass_factory . createParser ( HDGTest . EXAMPLE ) ; assertNull ( concodeclass_event ) ; concodeclass_instance . sentenceRead ( new SentenceEvent ( this , loc0 ) ) ; assertNotNull ( concodeclass_event ) ; assertEquals ( 123.4 , concodeclass_event . getHeading ( ) , 0.1 ) ; assertFalse ( concodeclass_event . isTrue ( ) ) ; }"
    },
    {
        "question_id": 357,
        "intent": "Set the c14n algorithm to use",
        "snippet": "void function ( String arg0 ) { this . concodeclass_c14nAlgorithm = arg0 ; }"
    },
    {
        "question_id": 358,
        "intent": "Creates an error response using the given message .",
        "snippet": "Response function ( String arg0 ) { return Response . serverError ( ) . entity ( arg0 ) . build ( ) ; }"
    },
    {
        "question_id": 359,
        "intent": "Turns an iterable into its type-safe cousin .",
        "snippet": "Iterable < E > function ( final Iterable arg0 ) { return concodefunc_map ( arg0 , new Mapper < Object , E > ( ) { public E apply ( Object arg1 ) { return ( E ) arg1 ; } } ) ; }"
    },
    {
        "question_id": 360,
        "intent": "Get the map of properties which affect the responses only . These additional properties may be optionally set after a proxy or WebClient has been created .",
        "snippet": "Map < String , Object > function ( ) { return concodeclass_responseContext ; }"
    },
    {
        "question_id": 361,
        "intent": "Calculates the one-time hash of contents and returns it as a new wrapped hash .",
        "snippet": "Sha256Hash function ( byte [ ] arg0 ) { try { MessageDigest loc0 = MessageDigest . getInstance ( \"srini_string\" ) ; return new Sha256Hash ( loc0 . loc0 ( arg0 ) ) ; } catch ( NoSuchAlgorithmException loc0 ) { throw new RuntimeException ( loc0 ) ; } }"
    },
    {
        "question_id": 362,
        "intent": "Return a service by its public interface .",
        "snippet": "T function ( Class < T > arg0 ) { return ( T ) concodeclass_services . get ( arg0 ) ; }"
    },
    {
        "question_id": 363,
        "intent": "Get the row that was last edited",
        "snippet": "int function ( ) { return concodeclass_row ; }"
    },
    {
        "question_id": 364,
        "intent": "getZip returns a String < / code representing the postal zone in a UBL address .",
        "snippet": "String function ( ) { String loc0 = \"srini_string\" ; try { loc0 = concodeclass_address . getPostalZone ( ) . getValue ( ) ; } catch ( NullPointerException loc1 ) { } return loc0 ; }"
    },
    {
        "question_id": 365,
        "intent": "Popup an SQL error",
        "snippet": "void function ( String arg0 , String arg1 , Exception arg2 ) { concodefunc_popupError ( Inter . get ( \"srini_string\" ) + \"srini_string\" + arg0 + \"srini_string\" + arg1 + \"srini_string\" + arg2 . toString ( ) ) ; }"
    },
    {
        "question_id": 366,
        "intent": "the CSS condition : lang Xx",
        "snippet": "void function ( String arg0 ) { concodeclass__specificityC ++ ; concodefunc_addCondition ( Condition . createLangCondition ( arg0 ) ) ; }"
    },
    {
        "question_id": 367,
        "intent": "Return a long value from a JSONObject .",
        "snippet": "long function ( JSONObject arg0 , String arg1 ) { Long loc0 = ( Long ) arg0 . get ( arg1 ) ; return ( loc0 != null ) ? loc0 : 0 ; }"
    },
    {
        "question_id": 368,
        "intent": "Sets the Experiment Types .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_experimentTypes = arg0 ; }"
    },
    {
        "question_id": 369,
        "intent": "Gets the value of the passwordCredentials property .",
        "snippet": "PasswordCredentials function ( ) { return concodeclass_passwordCredentials ; }"
    },
    {
        "question_id": 370,
        "intent": "Gets the reason .",
        "snippet": "String function ( ) { return concodeclass_reason ; }"
    },
    {
        "question_id": 371,
        "intent": "Checks to see that it only accepts input matrices that have compatible shapes",
        "snippet": "void function ( ) { CheckMatrixMultShape loc0 = new CheckMatrixMultShape ( MatrixMatrixMult . class ) ; loc0 . checkAll ( ) ; }"
    },
    {
        "question_id": 372,
        "intent": "Revert all settings to their default value .",
        "snippet": "void function ( ) { for ( int loc0 = 0 ; loc0 < concodeclass_PROPS . size ( ) ; loc0 ++ ) ( ( AbstractSettings ) concodeclass_PROPS . get ( loc0 ) ) . revertToDefault ( ) ; }"
    },
    {
        "question_id": 373,
        "intent": "Handle firing a diagram appearance event .",
        "snippet": "void function ( ArgoDiagramAppearanceEvent arg0 , ArgoDiagramAppearanceEventListener arg1 ) { switch ( arg0 . getEventType ( ) ) { case ArgoEventTypes . DIAGRAM_FONT_CHANGED : arg1 . diagramFontChanged ( arg0 ) ; break ; default : concodeclass_LOG . error ( \"srini_string\" + arg0 . getEventType ( ) ) ; break ; } }"
    },
    {
        "question_id": 374,
        "intent": "Checks to see if the specified off diagonal element is zero using a relative metric .",
        "snippet": "boolean function ( int arg0 ) { double loc0 = Math . abs ( diag [ arg0 ] ) + Math . abs ( diag [ arg0 + 1 ] ) ; return ( Math . abs ( off [ arg0 ] ) <= loc0 * UtilEjml . EPS ) ; }"
    },
    {
        "question_id": 375,
        "intent": "Displays the contents of the specified input stream as text .",
        "snippet": "void function ( InputStream arg0 ) { BufferedReader loc0 = new BufferedReader ( new InputStreamReader ( arg0 ) ) ; while ( true ) { String loc1 = loc0 . readLine ( ) ; if ( loc1 == null ) break ; System . out . println ( \"srini_string\" + loc1 ) ; } System . out . println ( ) ; }"
    },
    {
        "question_id": 376,
        "intent": "Determine if the current message is a partial response .",
        "snippet": "boolean function ( Message arg0 ) { return Boolean . TRUE . equals ( arg0 . get ( Message . PARTIAL_RESPONSE_MESSAGE ) ) ; }"
    },
    {
        "question_id": 377,
        "intent": "Registers the #getOutputFields output field names .",
        "snippet": "void function ( OutputFieldsDeclarer arg0 ) { String loc0 = concodefunc_getOutputStreamId ( ) ; Fields loc1 = new Fields ( concodeclass_outputFields ) ; concodeclass_logger . info ( \"srini_string\" , new Object [ ] { this , loc1 , loc0 } ) ; arg0 . declareStream ( loc0 , loc1 ) ; }"
    },
    {
        "question_id": 378,
        "intent": "Tests the StorageTierView #getDirView int method .",
        "snippet": "void function ( ) { for ( int loc0 = 0 ; loc0 < TieredBlockStoreTestUtils . TIER_PATH [ concodeclass_TEST_TIER_LEVEL ] . length ; loc0 ++ ) { Assert . assertEquals ( loc0 , concodeclass_mTestTierView . getDirView ( loc0 ) . getDirViewIndex ( ) ) ; } }"
    },
    {
        "question_id": 379,
        "intent": "Convenience method that returns the result of the transformation as a Document .",
        "snippet": "Document function ( ) { DOMResult loc0 = new DOMResult ( ) ; concodefunc_transformTo ( loc0 ) ; return ( Document ) loc0 . getNode ( ) ; }"
    },
    {
        "question_id": 380,
        "intent": "Gets URI for connecting to remote server .",
        "snippet": "URI function ( ) { return this . concodeclass_uri ; }"
    },
    {
        "question_id": 381,
        "intent": "Acquire a resource of type code T from the pool .",
        "snippet": "T function ( ) { try { return acquire ( 100 , TimeUnit . DAYS ) ; } catch ( TimeoutException loc0 ) { throw Throwables . propagate ( loc0 ) ; } }"
    },
    {
        "question_id": 382,
        "intent": "Closes the underlying open streams .",
        "snippet": "void function ( ) { if ( concodeclass_mIn != null ) { concodeclass_mIn . close ( ) ; } if ( concodeclass_mOut != null ) { concodeclass_mOut . close ( ) ; } }"
    },
    {
        "question_id": 383,
        "intent": "The column where the problem occured or #UNKNOWN UNKNOWN .",
        "snippet": "int function ( ) { return concodeclass_column ; }"
    },
    {
        "question_id": 384,
        "intent": "Adds and verifies a number sent by a player after its corresponding hash was sent",
        "snippet": "void function ( byte [ ] arg0 ) { if ( arg0 . length != concodeclass_mixednumber . length ) throw new IllegalArgumentException ( \"srini_string\" ) ; for ( int loc0 = 0 ; loc0 < concodeclass_mixednumber . length ; loc0 ++ ) concodeclass_mixednumber [ loc0 ] ^= arg0 [ loc0 ] ; }"
    },
    {
        "question_id": 385,
        "intent": "Computes the value of a metric for an operation .",
        "snippet": "double function ( Metrics . OperationMetricKey arg0 , ASTMethodOrConstructorDeclaration arg1 , boolean arg2 ) { QualifiedName loc0 = arg1 . getQualifiedName ( ) ; ClassStats loc1 = concodefunc_getClassStats ( loc0 , false ) ; return loc1 == null ? Double . NaN : loc1 . compute ( arg0 , arg1 , loc0 . getOperation ( ) , arg2 ) ; }"
    },
    {
        "question_id": 386,
        "intent": "Tests the method for handling an input stream from Yahoo .",
        "snippet": "void function ( ) { concodefunc_runTest ( \"srini_string\" , new YahooImageFactory ( null ) , 763 ) ; }"
    },
    {
        "question_id": 387,
        "intent": "Delete the certificate with the given alias",
        "snippet": "void function ( String arg0 ) { if ( concodeclass_ALIAS_PATTERN . matcher ( arg0 ) . matches ( ) ) { arg0 = arg0 . substring ( concodeclass_ALIAS_PREFIX . length ( ) ) ; StrongSwanApplication . getContext ( ) . deleteFile ( concodeclass_FILE_PREFIX + arg0 ) ; } }"
    },
    {
        "question_id": 388,
        "intent": "Checks whether Alluxio is running in secure mode , such as AuthType #SIMPLE , AuthType #KERBEROS , AuthType #CUSTOM .",
        "snippet": "void function ( AuthType arg0 ) { if ( arg0 != AuthType . SIMPLE && arg0 != AuthType . CUSTOM ) { throw new UnsupportedOperationException ( \"srini_string\" + arg0 . getAuthName ( ) + \"srini_string\" ) ; } }"
    },
    {
        "question_id": 389,
        "intent": "Adds/registers RemoteControlClient with the MediaRouter",
        "snippet": "void function ( MediaRouter arg0 ) { if ( concodeclass_mActualRemoteControlClient != null ) { arg0 . addRemoteControlClient ( concodeclass_mActualRemoteControlClient ) ; } }"
    },
    {
        "question_id": 390,
        "intent": "Initialize the Model subsystem with the MDR ModelImplementation .",
        "snippet": "void function ( ) { concodefunc_initializeModelImplementation ( \"srini_string\" ) ; }"
    },
    {
        "question_id": 391,
        "intent": "Checks if the AI is on the building spot .",
        "snippet": "boolean function ( ) { return ( concodeclass_mob . getPositionVector ( ) . distanceTo ( concodeclass_buildingSpot ) < 1 ) ; }"
    },
    {
        "question_id": 392,
        "intent": "k is initialised as 2 and increased by 1 each time the number is fed back",
        "snippet": "long function ( ) { return concodeclass_k ; }"
    },
    {
        "question_id": 393,
        "intent": "Returns the current number of entries in the map .",
        "snippet": "int function ( ) { return concodeclass__size ; }"
    },
    {
        "question_id": 394,
        "intent": "Return an list of ABIs we supported on this device ordered according to preference . Use a separate inner class to isolate the version-dependent call where it wo n't cause the whole class to fail preverification .",
        "snippet": "String [ ] function ( ) { if ( Build . VERSION . SDK_INT < Build . VERSION_CODES . LOLLIPOP ) { return new String [ ] { Build . CPU_ABI , Build . CPU_ABI2 } ; } else { return LollipopSysdeps . getSupportedAbis ( ) ; } }"
    },
    {
        "question_id": 395,
        "intent": "Pausa o servidor",
        "snippet": "void function ( ) { concodeclass_server . stop ( ) ; }"
    },
    {
        "question_id": 396,
        "intent": "Returns the connection headers as a Map",
        "snippet": "Map < String , String > function ( ) { return concodeclass_headers ; }"
    },
    {
        "question_id": 397,
        "intent": "This method removes a extension from the list of known extensions .",
        "snippet": "void function ( String arg0 ) { for ( Iterator loc0 = concodeclass_resourceExtensions . iterator ( ) ; loc0 . hasNext ( ) ; ) { String loc1 = ( String ) loc0 . next ( ) ; if ( loc1 . equals ( arg0 ) ) { concodeclass_resourceExtensions . remove ( loc1 ) ; break ; } } }"
    },
    {
        "question_id": 398,
        "intent": "Provides access to the factory . Implemented with lazy instantiation .",
        "snippet": "SearchFactory function ( ) { if ( concodeclass_instance == null ) concodeclass_instance = new SearchFactory ( ) ; return concodeclass_instance ; }"
    },
    {
        "question_id": 399,
        "intent": "Test of listComPorts method , of class ComPortController .",
        "snippet": "void function ( ) { System . out . println ( \"srini_string\" ) ; ComPortController . listComPorts ( ) ; fail ( \"srini_string\" ) ; }"
    },
    {
        "question_id": 400,
        "intent": "Tests the CustomAuthenticationProvider #CustomAuthenticationProvider String constructor to throw an exception when the class is not a provider .",
        "snippet": "void function ( ) { String loc0 = CustomAuthenticationProviderTest . class . getName ( ) ; concodeclass_mThrown . expect ( RuntimeException . class ) ; concodeclass_mThrown . expectMessage ( loc0 + \"srini_string\" ) ; new CustomAuthenticationProvider ( loc0 ) ; }"
    },
    {
        "question_id": 401,
        "intent": "Sets the error description",
        "snippet": "void function ( String arg0 ) { this . concodeclass_errorDescription = arg0 ; }"
    },
    {
        "question_id": 402,
        "intent": "Returns true if the specified field is in either of the underlying scans .",
        "snippet": "boolean function ( String arg0 ) { return concodeclass_prodscan . hasField ( arg0 ) ; }"
    },
    {
        "question_id": 403,
        "intent": "Checks whether this result object contains a sink with the given method signature",
        "snippet": "boolean function ( String arg0 ) { return ! concodefunc_findSinkByMethodSignature ( arg0 ) . isEmpty ( ) ; }"
    },
    {
        "question_id": 404,
        "intent": "Test for non-password protectedness .",
        "snippet": "void function ( ) { URL loc0 = ClassLoader . getSystemResource ( \"srini_string\" ) ; PSTFile loc1 = new PSTFile ( new File ( loc0 . toURI ( ) ) ) ; Assert . assertEquals ( \"srini_string\" , loc1 . getMessageStore ( ) . isPasswordProtected ( ) , false ) ; }"
    },
    {
        "question_id": 405,
        "intent": "Defines the position of a location within the map . Using this method , one location should be selected as reference position dist = 0 and dir = 0 and all the other location should be placed relative to it .",
        "snippet": "void function ( String arg0 , double arg1 , int arg2 ) { Point2D loc0 = new Point2D ( - Math . sin ( arg2 * Math . PI / 180.0 ) * arg1 , Math . cos ( arg2 * Math . PI / 180.0 ) * arg1 ) ; concodeclass_links . addVertex ( arg0 ) ; concodeclass_locationPositions . put ( arg0 , loc0 ) ; }"
    },
    {
        "question_id": 406,
        "intent": "Get the mnemonic code , or null if unknown .",
        "snippet": "List < String > function ( ) { return concodeclass_mnemonicCode ; }"
    },
    {
        "question_id": 407,
        "intent": "Returns the offset of a specified field within a record",
        "snippet": "int function ( String arg0 ) { return concodeclass_offsets . get ( arg0 ) ; }"
    },
    {
        "question_id": 408,
        "intent": "Implements BundleActivator.stop . Does nothing since the framework will automatically unregister any registered services .",
        "snippet": "void function ( BundleContext arg0 ) { for ( AutoSIMDeviceConfig loc0 : concodeclass_config . devices ) { concodeclass_environments . deregisterConnectionFactory ( loc0 . name ) ; concodeclass_factories . remove ( loc0 . name ) ; } }"
    },
    {
        "question_id": 409,
        "intent": "Checks if there 's an output file with given file id .",
        "snippet": "boolean function ( long arg0 ) { return concodeclass_mOutputFileIndex . containsKey ( arg0 ) ; }"
    },
    {
        "question_id": 410,
        "intent": "Step execution implementation",
        "snippet": "RepeatStatus function ( StepContribution arg0 , ChunkContext arg1 ) { JobExitStatus loc0 = concodeclass_fetcherExecutionContextImpl . captureSourceMetadata ( ) ; arg0 . setExitStatus ( loc0 . getExitStatus ( ) ) ; return RepeatStatus . FINISHED ; }"
    },
    {
        "question_id": 411,
        "intent": "Returns the adapter position of the last visible view . This position does not include adapter changes that were dispatched after the last layout pass .",
        "snippet": "int function ( ) { final View loc0 = concodefunc_findOneVisibleChild ( concodeclass_layoutManager . getChildCount ( ) - 1 , - 1 , false , true ) ; return loc0 == null ? RecyclerView . NO_POSITION : concodeclass_recyclerView . getChildAdapterPosition ( loc0 ) ; }"
    },
    {
        "question_id": 412,
        "intent": "Returns the string value of a configuration property .",
        "snippet": "String function ( ConfigurationKey arg0 , String arg1 ) { return concodeclass_config . getString ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 413,
        "intent": "Writes a setstring record to the log , and returns its lsn . Updates to temporary files are not logged ; instead , a `` dummy '' negative lsn is returned .",
        "snippet": "int function ( Buffer arg0 , int arg1 , String arg2 , String arg3 ) { Block loc0 = arg0 . block ( ) ; if ( concodefunc_isTempBlock ( loc0 ) ) return - 1 ; else return new SetStringRecord ( concodeclass_txnum , loc0 , arg1 , arg2 , arg3 ) . writeToLog ( ) ; }"
    },
    {
        "question_id": 414,
        "intent": "Not required",
        "snippet": "GenericJSONBuilder function ( String arg0 ) { concodeclass_place_name = arg0 ; return this ; }"
    },
    {
        "question_id": 415,
        "intent": "Will remove all comment-Tags '' < ! -- Comment -- > '' from test - and control-XML before comparing .",
        "snippet": "DiffBuilder function ( ) { concodeclass_ignoreComments = true ; return this ; }"
    },
    {
        "question_id": 416,
        "intent": "DELETE / dish-collections / : id : delete the `` id '' dishCollection .",
        "snippet": "ResponseEntity < Void > function ( @ PathVariable String arg0 ) { concodeclass_log . debug ( \"srini_string\" , arg0 ) ; concodeclass_dishCollectionService . delete ( arg0 ) ; return ResponseEntity . ok ( ) . headers ( HeaderUtil . createEntityDeletionAlert ( \"srini_string\" , arg0 . toString ( ) ) ) . build ( ) ; }"
    },
    {
        "question_id": 417,
        "intent": "The LIKELIHOOD-WEIGHTING algorithm in Figure 14.15 . For answering queries given evidence in a Bayesian Network .",
        "snippet": "CategoricalDistribution function ( RandomVariable [ ] arg0 , AssignmentProposition [ ] arg1 , BayesianNetwork arg2 , int arg3 ) { double [ ] loc0 = new double [ ProbUtil . expectedSizeOfCategoricalDistribution ( arg0 ) ] ; for ( int loc1 = 0 ; loc1 < arg3 ; loc1 ++ ) { Pair < Map < RandomVariable , Object > , Double > loc2 = concodefunc_weightedSample ( arg2 , arg1 ) ; loc0 [ ProbUtil . indexOf ( arg0 , loc2 . getFirst ( ) ) ] += loc2 . getSecond ( ) ; } return new ProbabilityTable ( loc0 , arg0 ) . normalize ( ) ; }"
    },
    {
        "question_id": 418,
        "intent": "Puts a new value in the property table with the appropriate flags",
        "snippet": "int function ( Object arg0 ) { int loc0 = concodeclass__prime ; int loc1 = concodefunc_hashCode ( arg0 ) % loc0 ; final Object [ ] loc2 = concodeclass__keys ; while ( true ) { Object loc3 = loc2 [ loc1 ] ; if ( loc3 == null ) { return concodeclass_NULL ; } else if ( loc3 == arg0 ) { return concodeclass__values [ loc1 ] ; } loc1 = ( loc1 + 1 ) % loc0 ; } }"
    },
    {
        "question_id": 419,
        "intent": "Retrieves a byte array field from the stream . Creates a new byte array that is the size of the object being retrieved .",
        "snippet": "byte [ ] function ( ) { int loc0 = concodefunc_getByteArrayLength ( ) ; byte [ ] loc1 = new byte [ loc0 ] ; concodefunc_getByteArrayInternal ( loc0 , loc1 , 0 , loc0 ) ; return loc1 ; }"
    },
    {
        "question_id": 420,
        "intent": "Invalidates the SSO session for the given session ID",
        "snippet": "SAMLSSOReqValidationResponseDTO function ( String arg0 ) { SPInitLogoutRequestProcessor loc0 = new SPInitLogoutRequestProcessor ( ) ; SAMLSSOReqValidationResponseDTO loc1 = loc0 . process ( null , arg0 , null ) ; return loc1 ; }"
    },
    {
        "question_id": 421,
        "intent": "Initialise the appropriate model change listeners for the given modelelement to the given listener . Overrule this when you need more than listening to all events from the base modelelement .",
        "snippet": "void function ( PropertyChangeListener arg0 , Object arg1 ) { concodefunc_addElementListener ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 422,
        "intent": "Gets the Global Chromosomal strt .",
        "snippet": "long function ( ) { return concodeclass_tStart ; }"
    },
    {
        "question_id": 423,
        "intent": "Create an instance of RegistrationRequest",
        "snippet": "RegistrationRequest function ( ) { return new RegistrationRequest ( ) ; }"
    },
    {
        "question_id": 424,
        "intent": "Tells if the filename matches one of the given suffixes .",
        "snippet": "boolean function ( Object arg0 , SuffixFilter [ ] arg1 ) { if ( ! ( arg0 instanceof File ) ) { return false ; } String loc0 = ( ( File ) arg0 ) . getName ( ) ; if ( arg1 != null ) { for ( int loc1 = 0 ; loc1 < arg1 . length ; loc1 ++ ) { if ( loc0 . endsWith ( arg1 [ loc1 ] . getSuffix ( ) ) ) { return true ; } } } return false ; }"
    },
    {
        "question_id": 425,
        "intent": "Get the signature Crypto object",
        "snippet": "Crypto function ( ) { return concodeclass_signatureCrypto ; }"
    },
    {
        "question_id": 426,
        "intent": "Reset the maximum amount of memory recorded .",
        "snippet": "void function ( ) { concodeclass_maxMemory = 0 ; }"
    },
    {
        "question_id": 427,
        "intent": "Set the File associated with the current source file . While this may be set to null , the exclude/include facilities will not work properly without a File .",
        "snippet": "void function ( File arg0 ) { this . concodeclass_sourceCodeFile = arg0 ; }"
    },
    {
        "question_id": 428,
        "intent": "Remove a node from the closed list",
        "snippet": "void function ( Node arg0 ) { concodeclass_closed . removeValue ( arg0 , false ) ; }"
    },
    {
        "question_id": 429,
        "intent": "Gets the message body , as a string . The string will be decoded as UTF-16LE , with no byte-order-mark . This is mostly useful after receiving a message . If the message body is not a legal UTF-16LE bytestream , then this method will return a rubbish string .",
        "snippet": "String function ( ) { return new String ( concodeclass__messageBody , concodeclass__encoding ) ; }"
    },
    {
        "question_id": 430,
        "intent": "Method called only from the Viewer . Sends the move command in a designated path from input to the Model and triggers an interactive event , if possible .",
        "snippet": "void function ( Path arg0 , int [ ] arg1 ) { concodeclass_model . moveCharacter ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 431,
        "intent": "Gets the configuration whether to skip failing rules true or whether to throw a a RuntimeException and abort the processing for the first failing rule .",
        "snippet": "boolean function ( ) { return concodeclass_ignoreExceptions ; }"
    },
    {
        "question_id": 432,
        "intent": "Only appends delimiter if the accumulated string is non-empty . Note : this is n't a candidate implementation for Joiner since it fails on leading empty components .",
        "snippet": "int function ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { StringBuilder loc2 = new StringBuilder ( ) ; for ( String loc3 : concodeclass_components ) { if ( loc2 . length ( ) > 0 ) { loc2 . append ( concodeclass_DELIMITER_STRING ) ; } loc2 . append ( loc3 ) ; } loc0 ^= loc2 . toString ( ) . length ( ) ; } return loc0 ; }"
    },
    {
        "question_id": 433,
        "intent": "Convenience method to merge a Map > .",
        "snippet": "void function ( Map < String , List < String >> arg0 ) { for ( String loc0 : arg0 . keySet ( ) ) { SortedSet < String > loc1 = concodefunc_get ( loc0 ) ; if ( loc1 == null ) { loc1 = new TreeSet < String > ( ) ; concodefunc_put ( loc0 , loc1 ) ; } loc1 . addAll ( arg0 . get ( loc0 ) ) ; } }"
    },
    {
        "question_id": 434,
        "intent": "The hashcode of a GroupValue object is the sum of the hashcodes of its field values .",
        "snippet": "int function ( ) { int loc0 = 0 ; for ( Constant loc1 : concodeclass_vals . values ( ) ) loc0 += loc1 . hashCode ( ) ; return loc0 ; }"
    },
    {
        "question_id": 435,
        "intent": "Returns the next available tile in the specified lane that is furthest from the base . A tile is available if it 's not occupied by a card .",
        "snippet": "int function ( int arg0 , int arg1 ) { int loc0 = 0 ; return loc0 ; }"
    },
    {
        "question_id": 436,
        "intent": "Get the identifier corresponding to a transformed version of this token",
        "snippet": "String function ( ) { return concodeclass_transformedTokenIdentifier ; }"
    },
    {
        "question_id": 437,
        "intent": "Sets the loaded in cats .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_loadedInCats = arg0 ; }"
    },
    {
        "question_id": 438,
        "intent": "Provide number of decisions made by this MutationFilter .",
        "snippet": "int function ( ) { return this . concodeclass_decisions ; }"
    },
    {
        "question_id": 439,
        "intent": "Format UTC dateTime to local dateTime in SQL format",
        "snippet": "String function ( Date arg0 ) { return concodefunc_formatUTC ( arg0 , DateTimeFormat . SQL , true ) ; }"
    },
    {
        "question_id": 440,
        "intent": "get stack size .",
        "snippet": "int function ( ) { return concodeclass_mSize ; }"
    },
    {
        "question_id": 441,
        "intent": "Sets the last version recorded as having run to the currently running version .",
        "snippet": "void function ( ) { final Preferences loc0 = Preferences . userRoot ( ) ; loc0 . putDouble ( PrefKeys . LAST_VERSION , concodefunc_getVersion ( ) ) ; }"
    },
    {
        "question_id": 442,
        "intent": "Return the hostname the servlet container is bound to .",
        "snippet": "String function ( ) { return concodeclass_host ; }"
    },
    {
        "question_id": 443,
        "intent": "Adds a commit to the push entry object as long as the commit is not a duplicate .",
        "snippet": "RepositoryCommit function ( RepositoryCommit arg0 ) { if ( concodeclass_commits . add ( arg0 ) ) { concodeclass_authorCount = - 1 ; return arg0 ; } return null ; }"
    },
    {
        "question_id": 444,
        "intent": "Test method for net.sf.marineapi.nmea.util.Date #getMonth .",
        "snippet": "void function ( ) { assertEquals ( concodeclass_cal . get ( Calendar . MONTH ) + 1 , concodeclass_instance . getMonth ( ) ) ; }"
    },
    {
        "question_id": 445,
        "intent": "Estimates the number of block accesses required to find all index records having a particular search key . The method uses the table 's metadata to estimate the size of the index file and the number of index records per block . It then passes this information to the traversalCost method of the appropriate index type , which provides the estimate .",
        "snippet": "int function ( ) { TableInfo loc0 = new TableInfo ( \"srini_string\" , concodefunc_schema ( ) ) ; int loc1 = BLOCK_SIZE / loc0 . recordLength ( ) ; int loc2 = concodeclass_si . recordsOutput ( ) / loc1 ; return HashIndex . searchCost ( loc2 , loc1 ) ; }"
    },
    {
        "question_id": 446,
        "intent": "Apply the RuleChain to the given Nodes using the given RuleContext , for those rules using the given Language .",
        "snippet": "void function ( List < Node > arg0 , RuleContext arg1 , Language arg2 ) { RuleChainVisitor loc0 = concodefunc_getRuleChainVisitor ( arg2 ) ; if ( loc0 != null ) { loc0 . visitAll ( arg0 , arg1 ) ; } }"
    },
    {
        "question_id": 447,
        "intent": "Gets a Builder configured as this object .",
        "snippet": "Builder function ( ) { return new Builder ( ) . fromAddressPair ( this ) ; }"
    },
    {
        "question_id": 448,
        "intent": "Sets an error number with a custom message .",
        "snippet": "void function ( int arg0 , String arg1 ) { if ( concodeclass_errorElement == null ) { concodeclass_errorElement = concodeclass_document . createElement ( \"srini_string\" ) ; concodeclass_document . getDocumentElement ( ) . appendChild ( concodeclass_errorElement ) ; } concodeclass_errorElement . setAttribute ( \"srini_string\" , String . valueOf ( arg0 ) ) ; if ( Utils . isNotEmpty ( arg1 ) ) concodeclass_errorElement . setAttribute ( \"srini_string\" , arg1 ) ; }"
    },
    {
        "question_id": 449,
        "intent": "Set the unique name of the editor",
        "snippet": "void function ( final String arg0 ) { this . concodeclass_instanceName = arg0 ; }"
    },
    {
        "question_id": 450,
        "intent": "Returns whether or not to rebuild the hudson.model.Run If thecombination is not in the database , the method returns true , meaning the run will build .",
        "snippet": "boolean function ( Combination arg0 ) { if ( concodeclass_configurations . containsKey ( arg0 . toString ( ) ) ) { return concodeclass_configurations . get ( arg0 . toString ( ) ) ; } return false ; }"
    },
    {
        "question_id": 451,
        "intent": "Sets Console Flag . When set to true Progress Monitor Messages are displayed to System.out .",
        "snippet": "void function ( boolean arg0 ) { concodeclass_progressMonitor . consoleMode = arg0 ; }"
    },
    {
        "question_id": 452,
        "intent": "Find the raw query string parameter indicated and append it to the string builder . The appended value will be in the form ` paramName = paramValue ' minus the quotes .",
        "snippet": "boolean function ( StringBuilder arg0 , String arg1 , String arg2 ) { String loc0 = HTTPTransportUtils . getRawQueryStringParameter ( arg1 , arg2 ) ; if ( loc0 == null ) { return false ; } if ( arg0 . length ( ) > 0 ) { arg0 . append ( '&' ) ; } arg0 . append ( loc0 ) ; return true ; }"
    },
    {
        "question_id": 453,
        "intent": "Get the named property . Handles the `` dim '' property and returns NOT_FOUND for all other names .",
        "snippet": "Object function ( String arg0 , Scriptable arg1 ) { if ( arg0 . equals ( \"srini_string\" ) ) return new Integer ( concodeclass_dim ) ; return NOT_FOUND ; }"
    },
    {
        "question_id": 454,
        "intent": "Get all features not in the source .",
        "snippet": "Vector function ( ) { return new Vector ( concodeclass_newFeatures ) ; }"
    },
    {
        "question_id": 455,
        "intent": "Finds a ClassStats in the direct children of this class . This can only be a directly nested class , for example in the following snippet , A can get B and B can get C but A can not get C without asking B. class MyClass / / ClassStats A class MyNested / / ClassStats B class MyDeeplyNested / / ClassStats C",
        "snippet": "ClassStats function ( String arg0 , boolean arg1 ) { if ( arg1 && ! concodeclass_nestedClasses . containsKey ( arg0 ) ) { concodeclass_nestedClasses . put ( arg0 , new ClassStats ( ) ) ; } return concodeclass_nestedClasses . get ( arg0 ) ; }"
    },
    {
        "question_id": 456,
        "intent": "Sets the Gene Symbol .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_gene = arg0 ; }"
    },
    {
        "question_id": 457,
        "intent": "Adds a location path to the list of known locations . Locations are searched in the order they are added , so for best performance add the most likely locations first .",
        "snippet": "void function ( String arg0 ) { if ( ! concodefunc_containsLocation ( arg0 ) ) { concodeclass_resourceLocations . add ( arg0 ) ; } }"
    },
    {
        "question_id": 458,
        "intent": "Writes an entry to the checkpoint file . The entry should not have its sequence number set . This method will add the proper sequence number to the passed in entry .",
        "snippet": "void function ( JournalEntry arg0 ) { if ( concodeclass_mIsClosed ) { throw new IOException ( ExceptionMessage . JOURNAL_WRITE_AFTER_CLOSE . getMessage ( ) ) ; } concodeclass_mJournal . getJournalFormatter ( ) . serialize ( arg0 . toBuilder ( ) . setSequenceNumber ( concodeclass_mNextEntrySequenceNumber ++ ) . build ( ) , concodeclass_mOutputStream ) ; }"
    },
    {
        "question_id": 459,
        "intent": "Determines whether a specified US-ASCII character is an HTTP control character",
        "snippet": "boolean function ( byte arg0 ) { return concodeclass_HTTP_CONTROLS [ arg0 ] ; }"
    },
    {
        "question_id": 460,
        "intent": "Registers a CookieSpecFactory with the given identifier.If a specification with the given name already exists it will be overridden . This nameis the same one used to retrieve the CookieSpecFactory from #getCookieSpec String .",
        "snippet": "void function ( final String arg0 , final CookieSpecFactory arg1 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } if ( arg1 == null ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } concodeclass_registeredSpecs . put ( arg0 . toLowerCase ( Locale . ENGLISH ) , arg1 ) ; }"
    },
    {
        "question_id": 461,
        "intent": "Adjusts the box so that the result is the intersection of both boxes .",
        "snippet": "BoundingBox function ( BoundingBox arg0 ) { concodeclass_latMin = Math . max ( concodeclass_latMin , arg0 . latMin ) ; concodeclass_lonMin = Math . max ( concodeclass_lonMin , arg0 . lonMin ) ; concodeclass_latMax = Math . min ( concodeclass_latMax , arg0 . latMax ) ; concodeclass_lonMax = Math . min ( concodeclass_lonMax , arg0 . lonMax ) ; return this ; }"
    },
    {
        "question_id": 462,
        "intent": "The component we are decorating .",
        "snippet": "ExtensionMechanismsHelper function ( ) { return concodeclass_impl ; }"
    },
    {
        "question_id": 463,
        "intent": "Returns everything between the endpoints relative to the specified comparator , with the specified endpoint behavior .",
        "snippet": "GeneralRange < T > function ( Comparator < ? super T > arg0 , @ Nullable T arg1 , BoundType arg2 , @ Nullable T arg3 , BoundType arg4 ) { return new GeneralRange < T > ( arg0 , true , arg1 , arg2 , true , arg3 , arg4 ) ; }"
    },
    {
        "question_id": 464,
        "intent": "Processes the input stream against a rule set using the given input encoding .",
        "snippet": "void function ( InputStream arg0 , RuleSets arg1 , RuleContext arg2 ) { try { processSourceCode ( new InputStreamReader ( arg0 , concodeclass_configuration . getSourceEncoding ( ) ) , arg1 , arg2 ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new PMDException ( \"srini_string\" + loc0 . getMessage ( ) ) ; } }"
    },
    {
        "question_id": 465,
        "intent": "Test clearing approved sites for a client that does n't have any stored approved sites . Ensure that the repository 's remove method is never called in this case .",
        "snippet": "void function ( ) { String loc0 = \"srini_string\" ; concodeclass_client . setClientId ( loc0 ) ; concodeclass_service . clearApprovedSitesForClient ( concodeclass_client ) ; Mockito . when ( concodeclass_repository . getByClientId ( loc0 ) ) . thenReturn ( new HashSet < ApprovedSite > ( ) ) ; Mockito . verify ( concodeclass_repository , never ( ) ) . remove ( any ( ApprovedSite . class ) ) ; }"
    },
    {
        "question_id": 466,
        "intent": "Method startPrefixMapping .",
        "snippet": "void function ( String arg0 , String arg1 ) { concodeclass_mapping . put ( arg0 , arg1 ) ; try { concodeclass_writer . setPrefix ( arg0 , arg1 ) ; } catch ( XMLStreamException loc0 ) { throw new SAXException ( loc0 ) ; } }"
    },
    {
        "question_id": 467,
        "intent": "Return a classloader that can see all the given interfaces If the given loader can see all interfaces then it is used . If not then a combined classloader of all interface classloaders is returned .",
        "snippet": "ClassLoader function ( ClassLoader arg0 , Class < ? > [ ] arg1 ) { if ( concodefunc_canSeeAllInterfaces ( arg0 , arg1 ) ) { return arg0 ; } ProxyClassLoader loc0 = new ProxyClassLoader ( arg0 , arg1 ) ; for ( Class < ? > loc1 : arg1 ) { loc0 . addLoader ( loc1 . getClassLoader ( ) ) ; } return loc0 ; }"
    },
    {
        "question_id": 468,
        "intent": "Sets up the stream before a test runs .",
        "snippet": "void function ( ) { concodeclass_mTestStream = new TestBufferedBlockOutStream ( 1L , concodeclass_BLOCK_LENGTH , BlockStoreContext . get ( ) ) ; }"
    },
    {
        "question_id": 469,
        "intent": "Returns the value of the specified field , as a Constant . The schema is examined to determine the field 's type . If INTEGER , then the record file 's getInt method is called ; otherwise , the getString method is called .",
        "snippet": "Constant function ( String arg0 ) { if ( concodeclass_sch . type ( arg0 ) == INTEGER ) return new IntConstant ( concodeclass_rf . getInt ( arg0 ) ) ; else return new StringConstant ( concodeclass_rf . getString ( arg0 ) ) ; }"
    },
    {
        "question_id": 470,
        "intent": "Begin normal traversal of a subtree rooted at n . This gives the visitor the option of changing internal state or returning a new visitor which will be used to visit the children of n . The default implementation of this method is to call #enter Node enter n , as most subclasses do not need to know the parent of the node n .",
        "snippet": "NodeVisitor function ( Node arg0 , Node arg1 ) { return enter ( arg1 ) ; }"
    },
    {
        "question_id": 471,
        "intent": "Sets the backing ThreadFactory for new threads created with this ThreadFactory . Threadswill be created by invoking #newThread Runnable on this backing ThreadFactory .",
        "snippet": "ThreadFactoryBuilder function ( ThreadFactory arg0 ) { this . concodeclass_backingThreadFactory = checkNotNull ( arg0 ) ; return this ; }"
    },
    {
        "question_id": 472,
        "intent": "Get the downlinks of this node .",
        "snippet": "Vector < ClassdiagramNode > function ( ) { return new Vector < ClassdiagramNode > ( concodeclass_downlinks ) ; }"
    },
    {
        "question_id": 473,
        "intent": "Gets the test id .",
        "snippet": "Long function ( ) { return concodeclass_testId ; }"
    },
    {
        "question_id": 474,
        "intent": "Return the UUID of the element .",
        "snippet": "String function ( Object arg0 ) { if ( arg0 instanceof Fig ) { arg0 = ( ( Fig ) arg0 ) . getOwner ( ) ; } if ( arg0 == null ) return null ; if ( arg0 instanceof CommentEdge ) { return ( String ) ( ( CommentEdge ) arg0 ) . getUUID ( ) ; } return Model . getFacade ( ) . getUUID ( arg0 ) ; }"
    },
    {
        "question_id": 475,
        "intent": "Returns an long filesize from a string value such as 50m or 50mb",
        "snippet": "long function ( String arg0 , long arg1 ) { String loc0 = concodefunc_getString ( arg0 , null ) ; if ( StringUtils . isEmpty ( loc0 ) ) { return arg1 ; } return com . gitblit . utils . FileUtils . convertSizeToLong ( loc0 , arg1 ) ; }"
    },
    {
        "question_id": 476,
        "intent": "Encode a string to the `` x-www-form-urlencoded '' form , enhanced with the UTF-8-in-URL proposal . This is what happens : The ASCII characters ` a ' through ` z ' , ` A ' through ` Z ' , and ' 0 ' through ' 9 ' remain the same . The unreserved characters - _ . ! ~ ' remain the same . The space character ' ' is converted into a plus sign ' + ' . All other ASCII characters are converted into the 3-character string '' % xy '' , where xy is the two-digit hexadecimal representation of the character code All non-ASCII characters are encoded in two steps : first to a sequence of 2 or 3 bytes , using the UTF-8 algorithm ; secondly each of these bytes is encoded as '' % xx '' .",
        "snippet": "String function ( String arg0 ) { StringBuffer loc0 = new StringBuffer ( ) ; int loc1 = arg0 . length ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { int loc3 = arg0 . charAt ( loc2 ) ; concodefunc_append ( loc0 , loc3 ) ; } return loc0 . toString ( ) ; }"
    },
    {
        "question_id": 477,
        "intent": "Gets the created date .",
        "snippet": "Timestamp function ( ) { return this . concodeclass_createdDate ; }"
    },
    {
        "question_id": 478,
        "intent": "Create a new Evaluator to resolve the EL functions and variables using action creation time Phase 2",
        "snippet": "ELEvaluator function ( Element arg0 , SyncCoordAction arg1 , Configuration arg2 ) { return createInstancesELEvaluator ( \"srini_string\" , arg0 , arg1 , arg2 ) ; }"
    },
    {
        "question_id": 479,
        "intent": "Gets the value of the qname property .",
        "snippet": "QName function ( ) { return concodeclass_qname ; }"
    },
    {
        "question_id": 480,
        "intent": "Set the TraX factory to use .",
        "snippet": "void function ( TransformerFactory arg0 ) { concodeclass_factory = arg0 ; }"
    },
    {
        "question_id": 481,
        "intent": "Produce the next identifier .",
        "snippet": "int function ( ) { return concodefunc_mix ( concodeclass_gen . getAndIncrement ( ) ) ; }"
    },
    {
        "question_id": 482,
        "intent": "Called on completion of the MEP for which the Conduit was required .",
        "snippet": "void function ( Exchange arg0 ) { }"
    },
    {
        "question_id": 483,
        "intent": "Returns the Executor that will be used to run this service . Subclasses may overridethis method to use a custom Executor , which may configure its worker thread with a specific name , thread group or priority . The returned executor 's Executor #execute Runnable execute method is called when this service is started , and shouldreturn promptly . The default implementation returns a new Executor that sets the name of its threadsto the string returned by #serviceName",
        "snippet": "Executor function ( ) { return new Executor ( ) { @ Override public void execute ( Runnable arg0 ) { MoreExecutors . newThread ( concodefunc_serviceName ( ) , arg0 ) . start ( ) ; } } ; }"
    },
    {
        "question_id": 484,
        "intent": "Test method for net.sf.marineapi.nmea.parser.RMBParser #setOriginId String .",
        "snippet": "void function ( ) { concodeclass_rmb . setOriginId ( \"srini_string\" ) ; assertTrue ( concodeclass_rmb . toString ( ) . contains ( \"srini_string\" ) ) ; assertEquals ( \"srini_string\" , concodeclass_rmb . getOriginId ( ) ) ; }"
    },
    {
        "question_id": 485,
        "intent": "Get a feature from the current classifier not yet modeled .",
        "snippet": "Object function ( String arg0 ) { for ( Object loc0 : concodeclass_obsoleteFeatures ) { if ( arg0 . equals ( Model . getFacade ( ) . getName ( loc0 ) ) ) { return loc0 ; } } return null ; }"
    },
    {
        "question_id": 486,
        "intent": "Test of getVersion method , of class TestDosAttack .",
        "snippet": "void function ( AbstractDosPlugin arg0 ) { String loc0 = arg0 . getVersion ( ) ; assertTrue ( loc0 . length ( ) > 0 ) ; }"
    },
    {
        "question_id": 487,
        "intent": "Get a attribute from the current classifier not yet modeled .",
        "snippet": "Object function ( String arg0 ) { for ( Object loc0 : concodeclass_obsoleteFeatures ) { if ( Model . getFacade ( ) . isAAttribute ( loc0 ) && arg0 . equals ( Model . getFacade ( ) . getName ( loc0 ) ) ) { return loc0 ; } } return null ; }"
    },
    {
        "question_id": 488,
        "intent": "Gets the end date .",
        "snippet": "Timestamp function ( ) { return this . concodeclass_endDate ; }"
    },
    {
        "question_id": 489,
        "intent": "Create MERGE-WITH query .",
        "snippet": "String function ( String arg0 , String arg1 , String arg2 , String arg3 , String arg4 , String arg5 , String arg6 ) { return String . format ( \"srini_string\" % s + \"srini_string\" % s + \"srini_string\" % s % s + \"srini_string\" + \"srini_string\" , arg2 , arg3 , arg0 , arg1 , arg4 , arg5 , arg6 ) ; }"
    },
    {
        "question_id": 490,
        "intent": "Gets the description of the third-party application .",
        "snippet": "String function ( ) { return concodeclass_applicationDescription ; }"
    },
    {
        "question_id": 491,
        "intent": "Test method for net.sf.marineapi.nmea.parser.GSAParser #getVerticalDOP .",
        "snippet": "void function ( ) { double loc0 = concodeclass_instance . getVerticalDOP ( ) ; assertEquals ( 1.0 , loc0 , 0.001 ) ; }"
    },
    {
        "question_id": 492,
        "intent": "Gets the authorization code",
        "snippet": "String function ( ) { return concodeclass_code ; }"
    },
    {
        "question_id": 493,
        "intent": "Test method for net.sf.marineapi.nmea.util.Time #setMinutes int .",
        "snippet": "void function ( ) { concodeclass_time . setMinutes ( 30 ) ; assertEquals ( 30 , concodeclass_time . getMinutes ( ) ) ; }"
    },
    {
        "question_id": 494,
        "intent": "Get the SignatureProperties to use .",
        "snippet": "SignatureProperties function ( ) { return concodeclass_signatureProperties ; }"
    },
    {
        "question_id": 495,
        "intent": "Updates the value currently associated with key by combining it with x via the specified accumulator function , returning the old value . The previous value associated with key or zero , if there is none is passed as the first argumentto accumulatorFunction , and x is passed as the second argument .",
        "snippet": "long function ( K arg0 , long arg1 , LongBinaryOperator arg2 ) { checkNotNull ( arg2 ) ; return concodefunc_getAndUpdate ( arg0 , oldValue -> arg2 . applyAsLong ( oldValue , arg1 ) ) ; }"
    },
    {
        "question_id": 496,
        "intent": "Initialized some new modelelement o.",
        "snippet": "void function ( Object arg0 ) { }"
    },
    {
        "question_id": 497,
        "intent": "Returns a Method corresponding to the given Java methoddeclaration .",
        "snippet": "Method function ( final String arg0 ) { return getMethod ( arg0 , false ) ; }"
    },
    {
        "question_id": 498,
        "intent": "Send an ERROR log message .",
        "snippet": "void function ( String arg0 , Exception arg1 ) { if ( concodeclass_sIsLogEnabled ) { Log . e ( concodeclass_sApplicationTag , concodefunc_getContent ( concodefunc_getCurrentStackTraceElement ( ) ) + \"srini_string\" + arg1 . getMessage ( ) + \"srini_string\" + arg1 . getStackTrace ( ) + \"srini_string\" + arg0 ) ; arg1 . printStackTrace ( ) ; } }"
    },
    {
        "question_id": 499,
        "intent": "< a > < b > < / a >",
        "snippet": "void function ( ) { ASTElement loc0 = concodefunc_element ( \"srini_string\" ) ; ASTElement loc1 = concodefunc_element ( \"srini_string\" ) ; concodeclass_tagList . openTag ( loc0 ) ; concodeclass_tagList . openTag ( loc1 ) ; concodeclass_tagList . closeTag ( loc0 ) ; assertFalse ( loc0 . isUnclosed ( ) ) ; assertTrue ( loc1 . isUnclosed ( ) ) ; }"
    },
    {
        "question_id": 500,
        "intent": "Sets the src file name .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_srcFileName = arg0 ; }"
    },
    {
        "question_id": 501,
        "intent": "Returns the instance of the singleton .",
        "snippet": "IConfigurationFactory function ( ) { return concodeclass_SINGLETON ; }"
    },
    {
        "question_id": 502,
        "intent": "Moves the scan to the next record . The method moves to the next RHS record , if possible . Otherwise , it moves to the next LHS record and the first RHS record . If there are no more LHS records , the method returns false .",
        "snippet": "boolean function ( ) { if ( concodeclass_s2 . next ( ) ) return true ; else { concodeclass_s2 . beforeFirst ( ) ; return concodeclass_s2 . next ( ) && concodeclass_s1 . next ( ) ; } }"
    },
    {
        "question_id": 503,
        "intent": "Returns the value corresponding to this entry .",
        "snippet": "V function ( ) { return concodeclass_value ; }"
    },
    {
        "question_id": 504,
        "intent": "return the horizontal position of this ball",
        "snippet": "int function ( ) { return concodeclass_xPosition ; }"
    },
    {
        "question_id": 505,
        "intent": "Calculate checksum",
        "snippet": "long function ( byte [ ] arg0 ) { long loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 . length ; ++ loc1 ) { loc0 += 255 & arg0 [ loc1 ] ; } return loc0 ; }"
    },
    {
        "question_id": 506,
        "intent": "Utility method that throws a NullPointerException if any of the buffers in the collection is null .",
        "snippet": "void function ( final Collection arg0 ) { if ( CollectionUtils . exists ( arg0 , PredicateUtils . nullPredicate ( ) ) ) { throw new NullPointerException ( \"srini_string\" ) ; } }"
    },
    {
        "question_id": 507,
        "intent": "Tests the RPCFileReadRequest #RPCFileReadRequest long , long , long constructor with anegative offset .",
        "snippet": "void function ( ) { RPCFileReadRequest loc0 = new RPCFileReadRequest ( concodeclass_TEMP_UFS_FILE_ID , - 1 , concodeclass_LENGTH ) ; concodefunc_assertInvalid ( loc0 ) ; }"
    },
    {
        "question_id": 508,
        "intent": "Returns true if the current token is the specified delimiter character .",
        "snippet": "boolean function ( char arg0 ) { return arg0 == ( char ) concodeclass_tok . ttype ; }"
    },
    {
        "question_id": 509,
        "intent": "Assert a boolean expression , throwing IllegalArgumentException if the test result is false . Assert.isTrue i > 0 , `` The value must be greater than zero '' ;",
        "snippet": "void function ( boolean arg0 , String arg1 ) { if ( ! arg0 ) { throw new IllegalArgumentException ( arg1 ) ; } }"
    },
    {
        "question_id": 510,
        "intent": "Resets the singleton LoginUser to null .",
        "snippet": "void function ( ) { Whitebox . setInternalState ( LoginUser . class , \"srini_string\" , ( String ) null ) ; }"
    },
    {
        "question_id": 511,
        "intent": "Return an empty non-null list if the argument list is null .",
        "snippet": "List < T > function ( List < T > arg0 ) { if ( arg0 != null ) return arg0 ; return Collections . emptyList ( ) ; }"
    },
    {
        "question_id": 512,
        "intent": "A convenience method for URIUtils #rewriteURI URI , HttpHost , boolean that always keeps thefragment .",
        "snippet": "URI function ( final URI arg0 , final HttpHost arg1 ) { return rewriteURI ( arg0 , arg1 , false ) ; }"
    },
    {
        "question_id": 513,
        "intent": "Remove all listeners .",
        "snippet": "void function ( ) { concodeclass_mListeners . clear ( ) ; }"
    },
    {
        "question_id": 514,
        "intent": "Gets a singleton instance of this class , creating one if it does n't yet exist .",
        "snippet": "IJavascriptRuntime function ( ) { if ( concodeclass_runtime == null ) { concodeclass_runtime = new JavascriptRuntime ( ) ; } return concodeclass_runtime ; }"
    },
    {
        "question_id": 515,
        "intent": "Returns the boot date of the Gitblit server .",
        "snippet": "Date function ( ) { return concodeclass_serverStatus . bootDate ; }"
    },
    {
        "question_id": 516,
        "intent": "Sets the name of the gene set .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_name = arg0 ; }"
    },
    {
        "question_id": 517,
        "intent": "Test method for net.sf.marineapi.nmea.parser.HDGParser #getVariation .",
        "snippet": "void function ( ) { assertEquals ( - 1.2 , concodeclass_hdg . getVariation ( ) , 0.1 ) ; }"
    },
    {
        "question_id": 518,
        "intent": "Returns this extension from the given wallet , or null if no such extension was added .",
        "snippet": "StoredPaymentChannelClientStates function ( Wallet arg0 ) { return ( StoredPaymentChannelClientStates ) arg0 . getExtensions ( ) . get ( concodeclass_EXTENSION_ID ) ; }"
    },
    {
        "question_id": 519,
        "intent": "Remove everything in the cache .",
        "snippet": "void function ( ) { Cache < K , V > loc0 = concodefunc_getOpenIDCache ( ) ; if ( loc0 != null ) { loc0 . removeAll ( ) ; } }"
    },
    {
        "question_id": 520,
        "intent": "Sets the optional login name",
        "snippet": "void function ( String arg0 ) { this . concodeclass_loginName = arg0 ; }"
    },
    {
        "question_id": 521,
        "intent": "Test for getDatum",
        "snippet": "void function ( ) { assertEquals ( Datum . WGS84 , concodeclass_instance . getDatum ( ) ) ; }"
    },
    {
        "question_id": 522,
        "intent": "Ensure that the source has a systemId",
        "snippet": "void function ( Source arg0 ) { if ( arg0 != null && ( arg0 . getSystemId ( ) == null || arg0 . getSystemId ( ) . length ( ) == 0 ) ) { arg0 . setSystemId ( concodefunc_getDefaultSystemId ( ) ) ; } }"
    },
    {
        "question_id": 523,
        "intent": "Get all features not in the source .",
        "snippet": "List function ( ) { return concodeclass_newFeatures ; }"
    },
    {
        "question_id": 524,
        "intent": "Updates the rememberMe token",
        "snippet": "void function ( final OpenIDRememberMeDO arg0 ) { concodeclass_cache . updateTokenData ( arg0 ) ; Thread loc0 = new Thread ( ) { @ Override public void run ( ) { try { concodeclass_dao . updateTokenData ( arg0 ) ; } catch ( Exception e ) { concodeclass_log . error ( \"srini_string\" , e ) ; } } } ; loc0 . start ( ) ; }"
    },
    {
        "question_id": 525,
        "intent": "Attempts to close the current serverSocket .",
        "snippet": "void function ( ) { concodeclass_serverSocket . close ( ) ; }"
    },
    {
        "question_id": 526,
        "intent": "Sets the lane_id .",
        "snippet": "void function ( int arg0 ) { this . concodeclass_lane_id = arg0 ; }"
    },
    {
        "question_id": 527,
        "intent": "Adds a node to the central node hashtable .",
        "snippet": "void function ( DefaultMapNode arg0 ) { concodeclass_nodes . put ( arg0 . getId ( ) , arg0 ) ; }"
    },
    {
        "question_id": 528,
        "intent": "save the commit information and later output it",
        "snippet": "CommitModel function ( ) { return concodeclass_commitModel ; }"
    },
    {
        "question_id": 529,
        "intent": "Test method for com.sqa.em.util.helper.RequestInput #getChar java.lang.String .",
        "snippet": "void function ( ) { char loc0 = RequestInput . getChar ( \"srini_string\" ) ; System . out . println ( \"srini_string\" + loc0 ) ; }"
    },
    {
        "question_id": 530,
        "intent": "Load the configuration from a specified file .",
        "snippet": "boolean function ( File arg0 ) { return concodeclass_config . load ( arg0 ) ; }"
    },
    {
        "question_id": 531,
        "intent": "Sets the list of in interceptors which pre-process the responses from remote services .",
        "snippet": "void function ( List < Interceptor < ? extends Message >> arg0 ) { concodeclass_inInterceptors = arg0 ; }"
    },
    {
        "question_id": 532,
        "intent": "Sets the boolean value of a configuration property .",
        "snippet": "void function ( ConfigurationKey arg0 , boolean arg1 ) { concodeclass_config . setBoolean ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 533,
        "intent": "Get the secondary subject of this certificate either CN or OU if primary subject is O , empty otherwise",
        "snippet": "String function ( ) { return concodeclass_mSubjectSecondary ; }"
    },
    {
        "question_id": 534,
        "intent": "Returns the object that originated this event not the object that originated the wrapped event . This is generally an EventBus .",
        "snippet": "Object function ( ) { return concodeclass_source ; }"
    },
    {
        "question_id": 535,
        "intent": "Process the DELETE method .",
        "snippet": "void function ( DAVTransaction arg0 , DAVResource arg1 ) { try { arg1 . delete ( ) ; arg0 . setStatus ( 204 ) ; } catch ( DAVMultiStatus loc0 ) { loc0 . write ( arg0 ) ; } }"
    },
    {
        "question_id": 536,
        "intent": "Set the tenant domain which the authentication request is comming from",
        "snippet": "void function ( String arg0 ) { this . concodeclass_tenantDomain = arg0 ; }"
    },
    {
        "question_id": 537,
        "intent": "Tests the StorageDirView #getCapacityBytes method .",
        "snippet": "void function ( ) { Assert . assertEquals ( concodeclass_mTestDir . getCapacityBytes ( ) , concodeclass_mTestDirView . getCapacityBytes ( ) ) ; }"
    },
    {
        "question_id": 538,
        "intent": "Returns a unique member 's name for storage in a zipfile . The project 's base name is prepended followed by an underscore '_' . The extension is appended . Used by `` argo.tee '' .",
        "snippet": "String function ( ) { if ( concodeclass_uniqueName == null ) { return null ; } String loc0 = PersistenceManager . getInstance ( ) . getProjectBaseName ( concodeclass_project ) ; if ( concodeclass_uniqueName . length ( ) > 0 ) { loc0 += \"srini_string\" + concodeclass_uniqueName ; } if ( ! loc0 . endsWith ( concodefunc_getZipFileExtension ( ) ) ) { loc0 += concodefunc_getZipFileExtension ( ) ; } return loc0 ; }"
    },
    {
        "question_id": 539,
        "intent": "Sets the start of the peak of the ROI",
        "snippet": "void function ( int arg0 ) { this . concodeclass_peakStart = arg0 ; }"
    },
    {
        "question_id": 540,
        "intent": "Tests the BlockLockManager #lockBlock long , long , BlockLockType method .",
        "snippet": "void function ( ) { long loc0 = concodeclass_mLockManager . lockBlock ( concodeclass_TEST_SESSION_ID , concodeclass_TEST_BLOCK_ID , BlockLockType . READ ) ; long loc1 = concodeclass_mLockManager . lockBlock ( concodeclass_TEST_SESSION_ID , concodeclass_TEST_BLOCK_ID , BlockLockType . READ ) ; Assert . assertNotEquals ( loc0 , loc1 ) ; }"
    },
    {
        "question_id": 541,
        "intent": "Encode given data as lower case hex chars .",
        "snippet": "char [ ] function ( final byte [ ] arg0 ) { final int loc0 = arg0 . length ; final char [ ] loc1 = new char [ loc0 << 1 ] ; for ( int loc2 = 0 , loc3 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 [ loc3 ++ ] = concodeclass_CHARS [ ( 0xF0 & arg0 [ loc2 ] ) >>> 4 ] ; loc1 [ loc3 ++ ] = concodeclass_CHARS [ 0x0F & arg0 [ loc2 ] ] ; } return loc1 ; }"
    },
    {
        "question_id": 542,
        "intent": "Test method for net.sf.marineapi.nmea.parser.MWVParser #setTrue boolean .",
        "snippet": "void function ( ) { assertTrue ( concodeclass_mwv . isTrue ( ) ) ; concodeclass_mwv . setTrue ( false ) ; assertFalse ( concodeclass_mwv . isTrue ( ) ) ; }"
    },
    {
        "question_id": 543,
        "intent": "Returns the number of times to retry a cache update on failure",
        "snippet": "int function ( ) { return concodeclass_maxUpdateRetries ; }"
    },
    {
        "question_id": 544,
        "intent": "Takes a playerID as a arg , and checks if they are currently being ticked . Takes care of handling adding them to the tick , and incrementing ticks .",
        "snippet": "void function ( int arg0 , PlayerTickEvent arg1 ) { if ( concodeclass_playerList . containsKey ( arg0 ) ) { if ( concodeclass_playerList . get ( arg0 ) [ 0 ] < 1 ) { concodefunc_runPlayer ( arg0 , arg1 ) ; } concodeclass_playerList . put ( arg0 , new int [ ] { concodeclass_playerList . get ( arg0 ) [ 0 ] - 1 , concodeclass_playerList . get ( arg0 ) [ 1 ] } ) ; } else { concodeclass_playerList . put ( arg0 , new int [ ] { 1200 , 0 } ) ; } }"
    },
    {
        "question_id": 545,
        "intent": "set delivery tag of the message assigned by the transport",
        "snippet": "void function ( long arg0 ) { this . concodeclass_deliveryTag = arg0 ; }"
    },
    {
        "question_id": 546,
        "intent": "Finds a channel with the given id and contract hash and returns it , or returns null .",
        "snippet": "StoredClientChannel function ( Sha256Hash arg0 , Sha256Hash arg1 ) { concodeclass_lock . lock ( ) ; try { Set < StoredClientChannel > loc0 = concodeclass_mapChannels . get ( arg0 ) ; for ( StoredClientChannel loc1 : loc0 ) { if ( loc1 . contract . getHash ( ) . equals ( arg1 ) ) return loc1 ; } return null ; } finally { concodeclass_lock . unlock ( ) ; } }"
    },
    {
        "question_id": 547,
        "intent": "Remove a page for the given position . The adapter is responsible for removing the view from its container , although it only must ensure this is done by the time it returns from #finishUpdate ViewGroup .",
        "snippet": "void function ( ViewGroup arg0 , int arg1 , Object arg2 ) { destroyItem ( ( View ) arg0 , arg1 , arg2 ) ; }"
    },
    {
        "question_id": 548,
        "intent": "Set exception call-back listener .",
        "snippet": "void function ( ExceptionListener arg0 ) { this . concodeclass_exceptionListener = arg0 ; }"
    },
    {
        "question_id": 549,
        "intent": "Method called by the Viewer to send the trigger command to the model .",
        "snippet": "void function ( ) { concodeclass_model . triggerEvent ( ) ; }"
    },
    {
        "question_id": 550,
        "intent": "Gets the Case ID .",
        "snippet": "String function ( ) { return concodeclass_caseId ; }"
    },
    {
        "question_id": 551,
        "intent": "Get the file mode bits of a file . This method is only implemented for OSes of the Unix family . It returns the file mode information as available in the st_mode member of the resulting struct stat when calling ` lstat ' on a file .",
        "snippet": "int function ( String arg0 ) { if ( concodefunc_isWindows ( ) ) { throw new UnsupportedOperationException ( \"srini_string\" ) ; } Filestat loc0 = concodefunc_getFilestat ( arg0 ) ; if ( loc0 == null ) return - 1 ; return loc0 . mode ; }"
    },
    {
        "question_id": 552,
        "intent": "get text of emoji icon",
        "snippet": "String function ( ) { return concodeclass_emojiText ; }"
    },
    {
        "question_id": 553,
        "intent": "get the k-dimensional space that the Points is in calls : none called by : centroid , codebook",
        "snippet": "int function ( ) { return concodeclass_dimension ; }"
    },
    {
        "question_id": 554,
        "intent": "Sets the checksum type .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_checksumType = arg0 ; }"
    },
    {
        "question_id": 555,
        "intent": "Return a subset of allNodes , containing the items in allNodes that are of the given type .",
        "snippet": "Set < T > function ( Class < T > arg0 , Set < JspNode > arg1 ) { Set < T > loc0 = new HashSet < > ( ) ; for ( Node loc1 : arg1 ) { if ( arg0 . equals ( loc1 . getClass ( ) ) ) { loc0 . add ( ( T ) loc1 ) ; } } return loc0 ; }"
    },
    {
        "question_id": 556,
        "intent": "Test method for net.sf.marineapi.nmea.parser.RTEParser #setSentenceCount int .",
        "snippet": "void function ( ) { concodeclass_rte . setSentenceCount ( 3 ) ; assertEquals ( 3 , concodeclass_rte . getSentenceCount ( ) ) ; }"
    },
    {
        "question_id": 557,
        "intent": "Set the encryption Crypto object",
        "snippet": "void function ( Crypto arg0 ) { this . concodeclass_encryptionCrypto = arg0 ; }"
    },
    {
        "question_id": 558,
        "intent": "Get the utility of a cell in the projected q-matrix at a given cell position row , column",
        "snippet": "int function ( int arg0 , int arg1 ) { return concodeclass_originalMatrix . matrixItemUtility [ arg0 ] [ arg1 ] ; }"
    },
    {
        "question_id": 559,
        "intent": "Add an individual structure . If the individual structure identifier already exists the old individual structure will be overwritten .",
        "snippet": "void function ( String arg0 , IndividualStructure arg1 ) { this . concodeclass_individualStructures . put ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 560,
        "intent": "Return the context with the functions and variables of the EL evaluator .",
        "snippet": "Context function ( ) { return concodeclass_context ; }"
    },
    {
        "question_id": 561,
        "intent": "Get the triple state in A.",
        "snippet": "SDDTripleStateEnum function ( ) { return concodeclass_tripleStateA ; }"
    },
    {
        "question_id": 562,
        "intent": "Add a new user store manager to in-memory map , at the given domain name",
        "snippet": "void function ( PropertyDTO [ ] arg0 , String arg1 ) { UserStoreMgtDataKeeper . userStoreManagers . put ( arg1 , concodefunc_convertArrayToMap ( arg0 ) ) ; }"
    },
    {
        "question_id": 563,
        "intent": "Sets the mail sender .",
        "snippet": "void function ( JavaMailSender arg0 ) { this . concodeclass_mailSender = arg0 ; }"
    },
    {
        "question_id": 564,
        "intent": "Associate ClassCache object with the given top-level scope . The ClassCache object can only be associated with the given scope once .",
        "snippet": "boolean function ( ScriptableObject arg0 ) { if ( arg0 . getParentScope ( ) != null ) { throw new IllegalArgumentException ( ) ; } if ( this == arg0 . associateValue ( concodeclass_AKEY , this ) ) { return true ; } return false ; }"
    },
    {
        "question_id": 565,
        "intent": "Sets the Bus",
        "snippet": "void function ( Bus arg0 ) { if ( concodeclass_bus != null ) { concodeclass_bus = arg0 ; } }"
    },
    {
        "question_id": 566,
        "intent": "Tests the following constructor : DenseMatrix64F int numCols , int numRows",
        "snippet": "void function ( ) { DenseMatrix64F loc0 = new DenseMatrix64F ( 7 , 5 ) ; assertEquals ( 5 , loc0 . getNumCols ( ) ) ; assertEquals ( 7 , loc0 . getNumRows ( ) ) ; assertEquals ( 7 * 5 , loc0 . data . length ) ; }"
    },
    {
        "question_id": 567,
        "intent": "Test method for net.sf.marineapi.nmea.parser.RMCParser #getYear .",
        "snippet": "void function ( ) { assertEquals ( 2005 , concodeclass_rmc . getDate ( ) . getYear ( ) ) ; }"
    },
    {
        "question_id": 568,
        "intent": "Sets the List of Genes in the Set .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_geneList = arg0 ; }"
    },
    {
        "question_id": 569,
        "intent": "Gets the value of the roles property . This accessor method returns a reference to the live list , not a snapshot . Therefore any modification you make to the returned list will be present inside the JAXB object . This is why there is not a set method for the roles property . For example , to add a new item , do as follows : getRoles . add newItem ; Objects of the following type s are allowed in the list Role",
        "snippet": "List < Role > function ( ) { if ( concodeclass_roles == null ) { concodeclass_roles = new ArrayList < Role > ( ) ; } return this . concodeclass_roles ; }"
    },
    {
        "question_id": 570,
        "intent": "Set the referenced revision in A.",
        "snippet": "void function ( String arg0 ) { this . concodeclass_referencedRevisionA = arg0 ; }"
    },
    {
        "question_id": 571,
        "intent": "Process a upr command : consume all of the RTF commands relating to this and emit events representing the Unicode content .",
        "snippet": "void function ( IParserEvent arg0 ) { IParserEventHandler loc0 = new UprHandler ( concodeclass_handler ) ; loc0 . handleEvent ( arg0 ) ; concodeclass_handlerStack . push ( concodeclass_handler ) ; concodeclass_handler = loc0 ; }"
    },
    {
        "question_id": 572,
        "intent": "Gets the download size .",
        "snippet": "BigDecimal function ( ) { return this . concodeclass_downloadSize ; }"
    },
    {
        "question_id": 573,
        "intent": "Special case that requires exceptional shifts to work",
        "snippet": "void function ( ) { DenseMatrix64F loc0 = new DenseMatrix64F ( 5 , 5 , true , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ) ; if ( ! concodeclass_extractor . process ( loc0 ) ) { throw new RuntimeException ( \"srini_string\" ) ; } assertEquals ( 5 , concodeclass_extractor . getNumberOfEigenvalues ( ) ) ; }"
    },
    {
        "question_id": 574,
        "intent": "Adds a settings class to the list of factories that this handler will act upon .",
        "snippet": "void function ( AbstractSettings arg0 ) { concodeclass_PROPS . add ( arg0 ) ; }"
    },
    {
        "question_id": 575,
        "intent": "Removes the string event from the end of the buffer , merges it with the string event we 've just received , and adds the new event to the end of the buffer .",
        "snippet": "IParserEvent function ( StringEvent arg0 ) { StringEvent loc0 = ( StringEvent ) concodeclass_events . removeLast ( ) ; StringEvent loc1 = new StringEvent ( loc0 . getString ( ) + arg0 . getString ( ) ) ; return loc1 ; }"
    },
    {
        "question_id": 576,
        "intent": "Has this approval expired ?",
        "snippet": "boolean function ( ) { if ( concodefunc_getTimeoutDate ( ) != null ) { Date loc0 = new Date ( ) ; if ( loc0 . after ( concodefunc_getTimeoutDate ( ) ) ) { return true ; } else { return false ; } } else { return false ; } }"
    },
    {
        "question_id": 577,
        "intent": "Creates a name-value pair . Called from #parseNameValuePair .",
        "snippet": "NameValuePair function ( final String arg0 , final String arg1 ) { return new BasicNameValuePair ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 578,
        "intent": "Use this function instead of new String byte , String to avoid surprises from non-standard default encodings .",
        "snippet": "String function ( byte [ ] arg0 , String arg1 ) { try { return new String ( arg0 , arg1 ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( \"srini_string\" = \"srini_string\" ) ; } }"
    },
    {
        "question_id": 579,
        "intent": "Add a short field to the stream . \\ param value The short value to be added .",
        "snippet": "void function ( short arg0 ) { concodeclass_format . checkType ( 'h' , true ) ; concodefunc_packLong ( arg0 , true ) ; }"
    },
    {
        "question_id": 580,
        "intent": "This method is used to get the email template to be displayed with the given index .",
        "snippet": "EmailTemplateDTO function ( int arg0 ) { EmailTemplateDTO loc0 = null ; if ( arg0 <= concodeclass_templates . length ) { loc0 = concodeclass_templates [ arg0 ] ; } return loc0 ; }"
    },
    {
        "question_id": 581,
        "intent": "Convert a nodes list into a JSONArray .",
        "snippet": "JSONArray function ( List < ? extends JsonWorkflowAction > arg0 ) { JSONArray loc0 = new JSONArray ( ) ; for ( JsonWorkflowAction loc1 : arg0 ) { loc0 . add ( loc1 . toJSONObject ( ) ) ; } return loc0 ; }"
    },
    {
        "question_id": 582,
        "intent": "Returns the collection type if we recognize it by its short name .",
        "snippet": "Class < ? > function ( String arg0 ) { Class < ? > loc0 = concodeclass_COLLECTION_CLASSES_BY_NAMES . typeFor ( arg0 ) ; if ( loc0 != null ) { return loc0 ; } return concodeclass_COLLECTION_INTERFACES_BY_NAMES . typeFor ( arg0 ) ; }"
    },
    {
        "question_id": 583,
        "intent": "Walk the list of registered EndpointResolvers , so as to mint a new abstract EPR for a given service name .",
        "snippet": "EndpointReferenceType function ( QName arg0 ) { EndpointReferenceType loc0 = null ; for ( EndpointResolver loc1 : concodeclass_resolvers ) { loc0 = loc1 . mint ( arg0 ) ; if ( loc0 != null ) { break ; } } return loc0 ; }"
    },
    {
        "question_id": 584,
        "intent": "Writes a specific integer value 4 bytes to the output byte array at the given offset .",
        "snippet": "void function ( byte [ ] arg0 , int arg1 , int arg2 ) { concodefunc_checkBoundary ( arg0 , arg1 , 4 ) ; arg0 [ arg1 ++ ] = ( byte ) ( 0xff & ( arg2 >> 24 ) ) ; arg0 [ arg1 ++ ] = ( byte ) ( 0xff & ( arg2 >> 16 ) ) ; arg0 [ arg1 ++ ] = ( byte ) ( 0xff & ( arg2 >> 8 ) ) ; arg0 [ arg1 ] = ( byte ) ( 0xff & arg2 ) ; }"
    },
    {
        "question_id": 585,
        "intent": "Spin 90 Left Spin the drone 90 degrees to the left",
        "snippet": "void function ( ) { SpaceXGUI . getInstance ( ) . appendToConsole ( concodeclass_TAG , \"srini_string\" ) ; concodeclass_cmd . setLedsAnimation ( LEDAnimation . BLINK_ORANGE , 3 , ( concodeclass_spinTime / 1000 ) ) ; concodeclass_cmd . spinLeft ( concodeclass_spin90Speed ) . doFor ( concodeclass_spin90Time ) ; concodeclass_cmd . hover ( ) . doFor ( concodeclass_hoverTime ) ; }"
    },
    {
        "question_id": 586,
        "intent": "Return the singleton Measurements object .",
        "snippet": "Measurements function ( ) { if ( concodeclass_singleton == null ) { concodeclass_singleton = new Measurements ( concodeclass_measurementproperties ) ; } return concodeclass_singleton ; }"
    },
    {
        "question_id": 587,
        "intent": "Sets a non-default Marshaller to use when creating the Source .",
        "snippet": "JaxbBuilder function ( final Marshaller arg0 ) { this . concodeclass_marshaller = arg0 ; return this ; }"
    },
    {
        "question_id": 588,
        "intent": "Set the list of accepted key-wrap algorithms . A request can contain a wst : KeyWrapAlgorithm uri for use in encrypting an issued token . The algorithm specified must be contained in this list . The default algorithms are RSA 1.5 and RSA OEP .",
        "snippet": "void function ( List < String > arg0 ) { this . concodeclass_acceptedKeyWrapAlgorithms = arg0 ; }"
    },
    {
        "question_id": 589,
        "intent": "Verify user name/password authentication .",
        "snippet": "boolean function ( String arg0 , String arg1 ) { try { UserStoreManager loc0 = IdentityTenantUtil . getRealm ( null , arg0 ) . getUserStoreManager ( ) ; return loc0 . authenticate ( arg0 , arg1 ) ; } catch ( Exception loc0 ) { concodeclass_log . error ( \"srini_string\" , loc0 ) ; return false ; } }"
    },
    {
        "question_id": 590,
        "intent": "Checks if the given file is being persisted .",
        "snippet": "boolean function ( long arg0 ) { synchronized ( concodeclass_mLock ) { return concodeclass_mPersistedFiles . contains ( arg0 ) ; } }"
    },
    {
        "question_id": 591,
        "intent": "Create a solver which can efficiently add and remove elements instead of recomputing everything from scratch .",
        "snippet": "AdjustableLinearSolver function ( ) { return new AdjLinearSolverQr ( ) ; }"
    },
    {
        "question_id": 592,
        "intent": "Avoid the need to construct these objects over and over in cases where the code knows that it needs the basic case .",
        "snippet": "EndpointImplFactory function ( ) { return concodeclass_singleton ; }"
    },
    {
        "question_id": 593,
        "intent": "Tests that an exception is thrown when trying to get a storage directory view with a bad index .",
        "snippet": "void function ( ) { concodeclass_mThrown . expect ( IndexOutOfBoundsException . class ) ; int loc0 = TieredBlockStoreTestUtils . TIER_PATH [ concodeclass_TEST_TIER_LEVEL ] . length ; Assert . assertEquals ( loc0 , concodeclass_mTestTierView . getDirView ( loc0 ) . getDirViewIndex ( ) ) ; }"
    },
    {
        "question_id": 594,
        "intent": "is null or its size is 0 isEmpty null = true ; isEmpty = true ; isEmpty 1 , 2 = false ;",
        "snippet": "boolean function ( Map < K , V > arg0 ) { return ( arg0 == null || arg0 . size ( ) == 0 ) ; }"
    },
    {
        "question_id": 595,
        "intent": "Traverses up the tree to find all of the parent instances of type parentType",
        "snippet": "List < T > function ( Class < T > arg0 ) { List < T > loc0 = new ArrayList < > ( ) ; Node loc1 = concodefunc_jjtGetParent ( ) ; while ( loc1 != null ) { if ( loc1 . getClass ( ) == arg0 ) { loc0 . add ( ( T ) loc1 ) ; } loc1 = loc1 . jjtGetParent ( ) ; } return loc0 ; }"
    },
    {
        "question_id": 596,
        "intent": "Returns the int value that , when treated as unsigned , is equal to value , if possible .",
        "snippet": "int function ( long arg0 ) { checkArgument ( ( arg0 >> Integer . SIZE ) == 0 , \"srini_string\" , arg0 ) ; return ( int ) arg0 ; }"
    },
    {
        "question_id": 597,
        "intent": "This is a forward substitution solver for non-singular upper triangular matrices . b = U-1b where b is a vector , U is an n by n matrix .",
        "snippet": "void function ( double arg0 [ ] , double [ ] arg1 , int arg2 ) { for ( int loc0 = arg2 - 1 ; loc0 >= 0 ; loc0 -- ) { double loc1 = arg1 [ loc0 ] ; int loc2 = loc0 * arg2 + loc0 + 1 ; for ( int loc3 = loc0 + 1 ; loc3 < arg2 ; loc3 ++ ) { loc1 -= arg0 [ loc2 ++ ] * arg1 [ loc3 ] ; } arg1 [ loc0 ] = loc1 / arg0 [ loc0 * arg2 + loc0 ] ; } }"
    },
    {
        "question_id": 598,
        "intent": "Returns true if the given line is not null or if it is not a comment .",
        "snippet": "boolean function ( final String arg0 ) { return ! ( \"srini_string\" . equals ( arg0 . trim ( ) ) || ( arg0 . startsWith ( \"srini_string\" ) ) ) ; }"
    },
    {
        "question_id": 599,
        "intent": "Returns the root key that the DeterministicHierarchy was created with .",
        "snippet": "DeterministicKey function ( ) { return concodefunc_get ( concodeclass_rootPath , false , false ) ; }"
    },
    {
        "question_id": 600,
        "intent": "Returns a composed TriConsumer that performs , in sequence , thisoperation followed by the after operation . If performing eitheroperation throws an exception , it is relayed to the caller of the composed operation . If performing this operation throws an exception , the after operation will not be performed .",
        "snippet": "TriConsumer < X , Y , Z > function ( TriConsumer < ? super X , ? super Y , ? super Z > arg0 ) { Objects . requireNonNull ( arg0 ) ; return ( x , y , z ) -> { concodefunc_accept ( x , y , z ) ; arg0 . accept ( x , y , z ) ; } ; }"
    },
    {
        "question_id": 601,
        "intent": "Returns the identity function .",
        "snippet": "Function < E , E > function ( ) { return ( Function < E , E > ) IdentityFunction . INSTANCE ; }"
    },
    {
        "question_id": 602,
        "intent": "Sets the value of the challenge property .",
        "snippet": "void function ( byte [ ] arg0 ) { this . concodeclass_challenge = ( ( byte [ ] ) arg0 ) ; }"
    },
    {
        "question_id": 603,
        "intent": "Add a named type object to the table .",
        "snippet": "void function ( String arg0 , Named arg1 ) { if ( arg0 == null || arg1 == null ) { throw new InternalCompilerError ( \"srini_string\" ) ; } if ( Report . should_report ( concodeclass_TOPICS , 3 ) ) Report . report ( 3 , \"srini_string\" + arg0 + \"srini_string\" + arg1 + \"srini_string\" ) ; concodeclass_table . put ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 604,
        "intent": "Convenience method for executing a heartbeat and waiting for it to complete .",
        "snippet": "void function ( String arg0 ) { concodefunc_await ( arg0 ) ; concodefunc_schedule ( arg0 ) ; concodefunc_await ( arg0 ) ; }"
    },
    {
        "question_id": 605,
        "intent": "Creates a matcher of Comparable object that matches when the examined object isless than the specified value , as reported by the compareTo method of the examined object . For example : assertThat 1 , lessThan 2",
        "snippet": "Matcher < T > function ( T arg0 ) { return ComparatorMatcherBuilder . < T > usingNaturalOrdering ( ) . lessThan ( arg0 ) ; }"
    },
    {
        "question_id": 606,
        "intent": "Queue a command for execution after the current command execution completes . All commands queued during the execution of the current command will be queued for a single serial execution . If the command execution throws an exception , no command will be effectively queued .",
        "snippet": "void function ( XCommand < ? > arg0 ) { queue ( arg0 , 0 ) ; }"
    },
    {
        "question_id": 607,
        "intent": "Waits for the given thread to be ready to be scheduled .",
        "snippet": "void function ( String arg0 ) { try ( LockResource loc0 = new LockResource ( concodeclass_sLock ) ) { while ( ! concodeclass_sTimers . containsKey ( arg0 ) ) { concodeclass_sCondition . await ( ) ; } } }"
    },
    {
        "question_id": 608,
        "intent": "Declares the argument value to be invalid . Gui will be redrawn but with a warning drawn in red above the entry widget .",
        "snippet": "void function ( final String arg0 ) { concodeclass_valid = false ; concodefunc_setInvalidationMessage ( arg0 ) ; }"
    },
    {
        "question_id": 609,
        "intent": "Get Hash Value for String using DJBX33A Algorithm",
        "snippet": "int function ( String arg0 ) { byte [ ] loc0 = arg0 . getBytes ( ) ; int loc1 = loc0 . length ; int loc2 = 5381 ; for ( int loc3 = 0 ; loc3 < loc1 ; loc3 ++ ) { loc2 = ( ( loc2 << 5 ) + loc2 ) + loc0 [ loc3 ] ; } return loc2 ; }"
    },
    {
        "question_id": 610,
        "intent": "Gets the destination .",
        "snippet": "String function ( ) { return concodeclass_destination ; }"
    },
    {
        "question_id": 611,
        "intent": "Pause for",
        "snippet": "void function ( int arg0 ) { concodefunc_waitFor ( arg0 ) ; }"
    },
    {
        "question_id": 612,
        "intent": "Get Issuer List",
        "snippet": "String [ ] function ( ) { try { return concodeclass_stub . getIssuersOfSAMLServiceProviders ( ) ; } catch ( RemoteException loc0 ) { concodeclass_log . error ( \"srini_string\" , loc0 ) ; throw new AxisFault ( loc0 . getMessage ( ) , loc0 ) ; } }"
    },
    {
        "question_id": 613,
        "intent": "Remove an attribute value on the RuleContext . Attributes can be shared between RuleContext instances . This operation is thread-safe . Attribute values should be modified directly via the reference provided . It is not necessary to call setAttribute String , Object to update an attribute value . Modifications made to the attribute value will automatically be seen by other threads . Because of this , you must ensure the attribute values are themselves thread safe .",
        "snippet": "Object function ( String arg0 ) { return this . concodeclass_attributes . remove ( arg0 ) ; }"
    },
    {
        "question_id": 614,
        "intent": "The next step of the wizard .",
        "snippet": "void function ( ) { concodefunc_doAction ( concodeclass_step ) ; concodeclass_step ++ ; JPanel loc0 = concodefunc_makePanel ( concodeclass_step ) ; if ( loc0 != null ) { concodeclass_panels . add ( loc0 ) ; } concodeclass_started = true ; if ( concodeclass_item != null ) { concodeclass_item . changed ( ) ; } }"
    },
    {
        "question_id": 615,
        "intent": "Test method for net.sf.marineapi.nmea.util.Date #equals java.lang.Object .",
        "snippet": "void function ( ) { Date loc0 = new Date ( ) ; assertTrue ( loc0 . equals ( concodeclass_instance ) ) ; Date loc1 = new Date ( 2010 , 6 , 15 ) ; Date loc2 = new Date ( 2010 , 6 , 15 ) ; assertTrue ( loc1 . equals ( loc2 ) ) ; }"
    },
    {
        "question_id": 616,
        "intent": "add new node to list",
        "snippet": "void function ( int arg0 ) { Node loc0 = new Node ( arg0 ) ; if ( concodeclass_head == null ) { concodeclass_head = loc0 ; return ; } Node loc1 = concodeclass_head ; while ( loc1 . next != null ) { loc1 = loc1 . next ; } loc1 . next = loc0 ; return ; }"
    },
    {
        "question_id": 617,
        "intent": "Specifies the particular sounds which must be loaded for this screen . It returns null by default .",
        "snippet": "Array < Asset > function ( ) { Array < Asset > loc0 = null ; return loc0 ; }"
    },
    {
        "question_id": 618,
        "intent": "Called when the service transitions from @linkplain State #STARTING STARTING to @linkplain State #RUNNING RUNNING . This occurs when a service has successfully started .",
        "snippet": "void function ( ) { }"
    },
    {
        "question_id": 619,
        "intent": "Returns the power .",
        "snippet": "double function ( ) { return this . concodeclass_power ; }"
    },
    {
        "question_id": 620,
        "intent": "Get the referenced revision label in B.",
        "snippet": "String function ( ) { return concodeclass_referencedRevisionLabelB ; }"
    },
    {
        "question_id": 621,
        "intent": "Returns the graph 's source description in dot language .",
        "snippet": "String function ( ) { return concodeclass_graph . toString ( ) ; }"
    },
    {
        "question_id": 622,
        "intent": "Adds a net.sf.marineapi.nmea.event.SentenceListener that is interested in receiving onlysentences of certain type .",
        "snippet": "void function ( SentenceListener arg0 , String arg1 ) { concodefunc_registerListener ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 623,
        "intent": "Increments the total value which we pay the server .",
        "snippet": "ListenableFuture < PaymentIncrementAck > function ( Coin arg0 ) { return concodeclass_channelClient . incrementPayment ( arg0 , null ) ; }"
    },
    {
        "question_id": 624,
        "intent": "Given the name for a class , returns the portion which appears to constitute the package -- i.e. , all characters up to but not including the last dot , or no characters if the name has no dot .",
        "snippet": "String function ( String arg0 ) { int loc0 = arg0 . lastIndexOf ( '.' ) ; return loc0 >= 0 ? arg0 . substring ( 0 , loc0 ) : \"srini_string\" ; }"
    },
    {
        "question_id": 625,
        "intent": "Test loading an admin user , ensuring that the UserDetails object returned has both the ROLE_USER and ROLE_ADMIN authorities .",
        "snippet": "void function ( ) { Mockito . when ( concodeclass_userInfoRepository . getByUsername ( concodeclass_adminUsername ) ) . thenReturn ( concodeclass_userInfoAdmin ) ; UserInfo loc0 = concodeclass_service . getByUsername ( concodeclass_adminUsername ) ; assertEquals ( loc0 . getSub ( ) , concodeclass_adminSub ) ; }"
    },
    {
        "question_id": 626,
        "intent": "Returns true if the predicate evaluates to true with respect to the specified scan .",
        "snippet": "boolean function ( Scan arg0 ) { for ( Term loc0 : concodeclass_terms ) if ( ! loc0 . isSatisfied ( arg0 ) ) return false ; return true ; }"
    },
    {
        "question_id": 627,
        "intent": "Release the given port .",
        "snippet": "void function ( int arg0 ) { int loc0 = arg0 - concodeclass_basePort - 1 ; if ( ! concodeclass_allocated [ loc0 ] ) { throw new IllegalStateException ( \"srini_string\" ) ; } concodeclass_allocated [ loc0 ] = false ; }"
    },
    {
        "question_id": 628,
        "intent": "Returns the panel used internally for rendering .",
        "snippet": "XHTMLPanel function ( ) { return concodeclass_panel ; }"
    },
    {
        "question_id": 629,
        "intent": "Applies no mutation data to mutation map .",
        "snippet": "void function ( List < String > arg0 , List < String > arg1 , Map < String , String > arg2 ) { for ( String loc0 : arg0 ) { for ( String loc1 : arg1 ) { String loc2 = concodefunc_createKey ( loc0 , loc1 ) ; arg2 . put ( loc2 , \"srini_string\" ) ; } } }"
    },
    {
        "question_id": 630,
        "intent": "Called as a result of a previous service retrieval request .",
        "snippet": "void function ( long arg0 , int arg1 , ServiceInfo [ ] arg2 ) { }"
    },
    {
        "question_id": 631,
        "intent": "Write a group start tag .",
        "snippet": "void function ( ) { try { concodeclass_writer . writeStartElement ( \"srini_string\" ) ; } catch ( XMLStreamException loc0 ) { throw new RuntimeException ( loc0 ) ; } }"
    },
    {
        "question_id": 632,
        "intent": "Given matrix A and an eigen vector of A , compute the corresponding eigen value . This is the Rayleigh quotient . xTAx / xTx",
        "snippet": "double function ( DenseMatrix64F arg0 , DenseMatrix64F arg1 ) { double loc0 = VectorVectorMult . innerProd ( arg1 , arg1 ) ; double loc1 = VectorVectorMult . innerProdA ( arg1 , arg0 , arg1 ) ; return loc1 / loc0 ; }"
    },
    {
        "question_id": 633,
        "intent": "Validate the incoming request for mandatory parameters .",
        "snippet": "boolean function ( ActivityRequest arg0 ) { if ( arg0 == null ) { return false ; } if ( arg0 . getDelayerFileAttributesExtractorStrategy ( ) == null ) { return false ; } if ( arg0 . getFeedId ( ) == null ) { return false ; } return arg0 . getConfigProperties ( ) != null ; }"
    },
    {
        "question_id": 634,
        "intent": "Building per module configuration objects",
        "snippet": "ModuleConfiguration function ( String arg0 ) { Properties loc0 = concodefunc_getModuleProperties ( arg0 ) ; List < Subscription > loc1 = concodefunc_buildSubscriptionList ( arg0 , loc0 ) ; return new ModuleConfiguration ( concodefunc_getModuleProperties ( arg0 ) , loc1 ) ; }"
    },
    {
        "question_id": 635,
        "intent": "Test method for com.alibaba.dubbo.registry.support.injvm.InjvmRegistry #register java.util.Map .",
        "snippet": "void function ( ) { }"
    },
    {
        "question_id": 636,
        "intent": "Returns distance to closest block . If none is found , returns 9999 .",
        "snippet": "double function ( ) { BlockPos loc0 = concodefunc_getNextBlock ( 1 ) ; if ( loc0 == null ) { return 9999 ; } else { return Math . sqrt ( concodeclass_mob . getDistanceSqToCenter ( loc0 ) ) ; } }"
    },
    {
        "question_id": 637,
        "intent": "Reads playlists from database",
        "snippet": "boolean function ( ) { concodeclass_playlists = new HashMap < > ( ) ; return concodefunc_getDb ( ) . getPlaylists ( concodeclass_playlists ) ; }"
    },
    {
        "question_id": 638,
        "intent": "Flushes all modified buffers . Then goes through the log , rolling back all uncommitted transactions . Finally , writes a quiescent checkpoint record to the log . This method is called only during system startup , before user transactions begin .",
        "snippet": "void function ( ) { SimpleDB . bufferMgr ( ) . flushAll ( concodeclass_txnum ) ; concodeclass_recoveryMgr . recover ( ) ; }"
    },
    {
        "question_id": 639,
        "intent": "Setea el password del usuario .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_password = arg0 ; }"
    },
    {
        "question_id": 640,
        "intent": "Get the username/alias to use to sign any issued tokens",
        "snippet": "String function ( ) { return concodeclass_signatureUsername ; }"
    },
    {
        "question_id": 641,
        "intent": "Delete the ingredient by id .",
        "snippet": "void function ( String arg0 ) { concodeclass_log . debug ( \"srini_string\" , arg0 ) ; concodeclass_ingredientRepository . delete ( arg0 ) ; }"
    },
    {
        "question_id": 642,
        "intent": "Starts loading the assets . Loader #setAssetsToLoad must becalled first .",
        "snippet": "void function ( ) { try { concodefunc_createTextureAtlas ( ) ; } catch ( IOException loc0 ) { Gdx . app . error ( concodeclass_LOG , \"srini_string\" , loc0 ) ; } concodefunc_loadTextureAtlas ( ) ; concodefunc_loadTextures ( ) ; concodefunc_loadSounds ( ) ; concodefunc_loadMaps ( ) ; }"
    },
    {
        "question_id": 643,
        "intent": "Returns the depth of the tree longest path length from root to leaf .",
        "snippet": "int function ( ) { return concodeclass_children == null ? 1 : 1 + Math . max ( concodeclass_children [ 0 ] . depth ( ) , concodeclass_children [ 1 ] . depth ( ) ) ; }"
    },
    {
        "question_id": 644,
        "intent": "Guaranteed to throw an exception and leave the RangeMap unmodified .",
        "snippet": "void function ( Range < K > arg0 , V arg1 ) { throw new UnsupportedOperationException ( ) ; }"
    },
    {
        "question_id": 645,
        "intent": "Returns gammas from the householder operations for the V matrix .",
        "snippet": "double [ ] function ( ) { return gammasV ; }"
    },
    {
        "question_id": 646,
        "intent": "Properties for the test .",
        "snippet": "void function ( ) { }"
    },
    {
        "question_id": 647,
        "intent": "Called when the service transitions from @linkplain State #NEW NEW to @linkplain State #STARTING STARTING . This occurs when Service #startAsync is calledthe first time .",
        "snippet": "void function ( ) { }"
    },
    {
        "question_id": 648,
        "intent": "Adds an unnamed value to the formatted output . It is strongly encouraged to use #add String , double instead and give value areadable name .",
        "snippet": "ToStringHelper function ( double arg0 ) { return concodefunc_addHolder ( String . valueOf ( arg0 ) ) ; }"
    },
    {
        "question_id": 649,
        "intent": "Test method for org.mitre.uma.service.impl.DefaultPermissionService #createTicket org.mitre.uma.model.ResourceSet , java.util.Set .",
        "snippet": "void function ( ) { PermissionTicket loc0 = concodeclass_permissionService . createTicket ( concodeclass_rs1 , concodeclass_scopes1 ) ; assertNotNull ( loc0 . getTicket ( ) ) ; }"
    },
    {
        "question_id": 650,
        "intent": "checkGameOver prueft ob die Bedingung erfuellt wurde die fuer ein Game Over erforderlich sind .",
        "snippet": "void function ( ) { if ( ! concodeclass_snake . isAlive ) this . concodeclass_gui . setTitle ( \"srini_string\" ) ; if ( ! concodeclass_border . isAlive ) this . concodeclass_gui . setTitle ( \"srini_string\" ) ; if ( concodeclass_gameElements . size ( ) == 2 ) { concodeclass_snake . isAlive = false ; concodeclass_gui . setTitle ( \"srini_string\" ) ; } }"
    },
    {
        "question_id": 651,
        "intent": "Extract min value key from the heap",
        "snippet": "T function ( ) { Node loc0 = concodefunc_extractMinNode ( ) ; return loc0 . key ; }"
    },
    {
        "question_id": 652,
        "intent": "Tests the NetworkAddressUtils #getFqdnHost InetSocketAddress and NetworkAddressUtils #getFqdnHost WorkerNetAddress methods .",
        "snippet": "void function ( ) { Assert . assertEquals ( NetworkAddressUtils . getFqdnHost ( new InetSocketAddress ( \"srini_string\" , 0 ) ) , \"srini_string\" ) ; Assert . assertEquals ( NetworkAddressUtils . getFqdnHost ( new WorkerNetAddress ( ) . setHost ( \"srini_string\" ) ) , \"srini_string\" ) ; }"
    },
    {
        "question_id": 653,
        "intent": "Returns the population covariance of the values . The count must be non-zero . This is guaranteed to return zero if the dataset contains a single pair of finite values . It is not guaranteed to return zero when the dataset consists of the same pair of values multiple times , due to numerical errors . Non-finite values If the dataset contains any non-finite values Double #POSITIVE_INFINITY , Double #NEGATIVE_INFINITY , or Double #NaN then the result is Double #NaN .",
        "snippet": "double function ( ) { checkState ( concodefunc_count ( ) != 0 ) ; return concodeclass_sumOfProductsOfDeltas / concodefunc_count ( ) ; }"
    },
    {
        "question_id": 654,
        "intent": "Stores words and their corresponding frequencies in parallel array lists parameters . The frequencies are sorted from low to high .",
        "snippet": "void function ( ArrayList < String > arg0 , ArrayList < Integer > arg1 ) { ArrayList < Map . Entry < String , Int >> loc0 = new ArrayList < Map . Entry < String , Int >> ( concodeclass__wordFrequency . entrySet ( ) ) ; Collections . sort ( loc0 , new ComparatorFrequency ( ) ) ; for ( Map . Entry < String , Int > loc1 : loc0 ) { arg0 . add ( loc1 . getKey ( ) ) ; arg1 . add ( loc1 . getValue ( ) . value ) ; } }"
    },
    {
        "question_id": 655,
        "intent": "Sets the priority for new threads created with this ThreadFactory .",
        "snippet": "ThreadFactoryBuilder function ( int arg0 ) { checkArgument ( arg0 >= Thread . MIN_PRIORITY , \"srini_string\" , arg0 , Thread . MIN_PRIORITY ) ; checkArgument ( arg0 <= Thread . MAX_PRIORITY , \"srini_string\" , arg0 , Thread . MAX_PRIORITY ) ; this . concodeclass_priority = arg0 ; return this ; }"
    },
    {
        "question_id": 656,
        "intent": "Return the full URL including protocol , host , port , context path , servlet path for a servlet path .",
        "snippet": "String function ( String arg0 ) { String loc0 = arg0 ; if ( loc0 . endsWith ( \"srini_string\" ) ) { loc0 = loc0 . substring ( 0 , loc0 . length ( ) - 1 ) ; } return concodefunc_getContextURL ( ) + loc0 ; }"
    },
    {
        "question_id": 657,
        "intent": "Change the attributes for this element .",
        "snippet": "void function ( Attributes arg0 ) { concodeclass_attributes = new AttributesImpl ( arg0 ) ; }"
    },
    {
        "question_id": 658,
        "intent": "Note that this method does not get forwarded to the delegee if the hint parameter is null , ScriptRuntime.ScriptableClass or ScriptRuntime.FunctionClass . Instead the object itself is returned .",
        "snippet": "Object function ( Class < ? > arg0 ) { return ( arg0 == null || arg0 == ScriptRuntime . ScriptableClass || arg0 == ScriptRuntime . FunctionClass ) ? this : concodeclass_obj . getDefaultValue ( arg0 ) ; }"
    },
    {
        "question_id": 659,
        "intent": "Returns the raw value byte array .",
        "snippet": "byte [ ] function ( ) { return concodeclass_value ; }"
    },
    {
        "question_id": 660,
        "intent": "Resolves the URI ; if absolute , leaves as is , if relative , returns an absolute URI based on the baseUrl for the agent .",
        "snippet": "String function ( String arg0 ) { return concodeclass__uriResolver . resolve ( arg0 ) ; }"
    },
    {
        "question_id": 661,
        "intent": "Get the source where this result comes from Source is only a representative string no object reference",
        "snippet": "String function ( ) { return this . concodeclass_source ; }"
    },
    {
        "question_id": 662,
        "intent": "Execute the copy-of transform and return the resulting Document . Used for XMLTestCase comparison",
        "snippet": "Document function ( String arg0 , Document arg1 ) { DOMResult loc0 = new DOMResult ( ) ; concodefunc_performTransform ( concodefunc_getCopyTransformation ( arg0 ) , arg1 , loc0 ) ; return ( Document ) loc0 . getNode ( ) ; }"
    },
    {
        "question_id": 663,
        "intent": "Writes the graph 's image in a file .",
        "snippet": "int function ( byte [ ] arg0 , File arg1 ) { try { FileOutputStream loc0 = new FileOutputStream ( arg1 ) ; loc0 . write ( arg0 ) ; loc0 . close ( ) ; } catch ( java . io . IOException loc0 ) { return - 1 ; } return 1 ; }"
    },
    {
        "question_id": 664,
        "intent": "Test method for net.sf.marineapi.nmea.parser.VTGParser #getTrueCourse .",
        "snippet": "void function ( ) { assertEquals ( 360.0 , concodeclass_vtg . getTrueCourse ( ) , 0.001 ) ; }"
    },
    {
        "question_id": 665,
        "intent": "Returns the scaled value of dimension . This function performs the integer equivalent of ceil dimension scalingFactor .",
        "snippet": "int function ( int arg0 ) { return ( arg0 * concodeclass_num + concodeclass_denom - 1 ) / concodeclass_denom ; }"
    },
    {
        "question_id": 666,
        "intent": "Returns the scope for script evaluations .",
        "snippet": "Scriptable function ( ) { if ( concodeclass_type != concodeclass_SCOPE_PROVIDER ) Kit . codeBug ( ) ; if ( concodeclass_scope == null ) Kit . codeBug ( ) ; return concodeclass_scope ; }"
    },
    {
        "question_id": 667,
        "intent": "Lists all folders and files in the given dir as XML tags .",
        "snippet": "void function ( File arg0 ) { concodefunc_setFolders ( arg0 ) ; concodefunc_setFiles ( arg0 ) ; }"
    },
    {
        "question_id": 668,
        "intent": "Gets a hashMap of the default mutation and copy number profiles .",
        "snippet": "HashMap < String , GeneticProfile > function ( ) { return concodefunc_getDefaultGeneticProfileMap ( true , true ) ; }"
    },
    {
        "question_id": 669,
        "intent": "Check and modify path .",
        "snippet": "String function ( String arg0 ) { if ( ! arg0 . endsWith ( \"srini_string\" ) ) { arg0 = arg0 + \"srini_string\" ; } if ( ! arg0 . startsWith ( \"srini_string\" ) ) { arg0 = \"srini_string\" + arg0 ; } return arg0 ; }"
    },
    {
        "question_id": 670,
        "intent": "Get all the dishCollections .",
        "snippet": "Page < DishCollection > function ( Pageable arg0 ) { concodeclass_log . debug ( \"srini_string\" ) ; Page < DishCollection > loc0 = concodeclass_dishCollectionRepository . findAll ( arg0 ) ; return loc0 ; }"
    },
    {
        "question_id": 671,
        "intent": "Create an instance of GetPrice",
        "snippet": "GetPrice function ( ) { return new GetPrice ( ) ; }"
    },
    {
        "question_id": 672,
        "intent": "Get the WSS4J key identifier type used to reference a certificate for encryption",
        "snippet": "int function ( ) { return concodeclass_keyIdentifierType ; }"
    },
    {
        "question_id": 673,
        "intent": "Gets the data unit id .",
        "snippet": "long function ( ) { return this . concodeclass_dataUnitId ; }"
    },
    {
        "question_id": 674,
        "intent": "Multiplies the provided matrix by Q using householder reflectors . This is more efficient that computing Q then applying it to the matrix . B = Q B",
        "snippet": "void function ( BlockMatrix64F arg0 ) { applyQ ( arg0 , false ) ; }"
    },
    {
        "question_id": 675,
        "intent": "Remove a single item if it is in the set .",
        "snippet": "void function ( lalr_item arg0 ) { concodefunc_not_null ( arg0 ) ; concodeclass_hashcode_cache = null ; concodeclass__all . remove ( arg0 ) ; }"
    },
    {
        "question_id": 676,
        "intent": "find a element in binary search tree",
        "snippet": "TreeNode function ( TreeNode arg0 , int arg1 ) { if ( arg0 == null || arg0 . value == arg1 ) { return arg0 ; } if ( arg1 < arg0 . value ) { return find ( arg0 . left , arg1 ) ; } else { return find ( arg0 . right , arg1 ) ; } }"
    },
    {
        "question_id": 677,
        "intent": "Computes the product of the diagonal elements . For a diagonal or triangular matrix this is the determinant .",
        "snippet": "double function ( RowD1Matrix64F arg0 ) { double loc0 = 1.0 ; int loc1 = Math . min ( arg0 . numRows , arg0 . numCols ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { loc0 *= arg0 . unsafe_get ( loc2 , loc2 ) ; } return loc0 ; }"
    },
    {
        "question_id": 678,
        "intent": "Reads Content from a Buffered Reader .",
        "snippet": "String function ( BufferedReader arg0 ) { StringBuffer loc0 = new StringBuffer ( ) ; String loc1 ; while ( ( loc1 = arg0 . readLine ( ) ) != null ) { loc0 . append ( loc1 + \"srini_string\" ) ; } arg0 . close ( ) ; return loc0 . toString ( ) ; }"
    },
    {
        "question_id": 679,
        "intent": "Returns the given string if it is non-null ; the empty string otherwise .",
        "snippet": "String function ( @ Nullable String arg0 ) { return ( arg0 == null ) ? \"srini_string\" : arg0 ; }"
    },
    {
        "question_id": 680,
        "intent": "Returns an expression . Evaluating this expression for a record produces the value that will be stored in the record 's target field .",
        "snippet": "Expression function ( ) { return concodeclass_newval ; }"
    },
    {
        "question_id": 681,
        "intent": "Write the given long value 64-bit in big-endian order to the buffer",
        "snippet": "BufferedByteWriter function ( short arg0 ) { return put64 ( arg0 & 0xFFFFL ) ; }"
    },
    {
        "question_id": 682,
        "intent": "Get content type of the message",
        "snippet": "String function ( ) { return concodeclass_contentType ; }"
    },
    {
        "question_id": 683,
        "intent": "Whether the serializer will produce lazy parse mode Messages",
        "snippet": "boolean function ( ) { return concodeclass_parseLazy ; }"
    },
    {
        "question_id": 684,
        "intent": "Set whether to validate a client Public Key or Certificate presented as part of a UseKey element . If this is set to true the default , the public key must be trusted by the Signature Crypto of the STS .",
        "snippet": "void function ( boolean arg0 ) { this . concodeclass_validateUseKey = arg0 ; }"
    },
    {
        "question_id": 685,
        "intent": "Sets the data set id .",
        "snippet": "void function ( Long arg0 ) { this . concodeclass_dataSetId = arg0 ; }"
    },
    {
        "question_id": 686,
        "intent": "Returns the current #dotsPerDeg value .",
        "snippet": "float function ( ) { return concodeclass_dotsPerDeg ; }"
    },
    {
        "question_id": 687,
        "intent": "Check whether object o is in the set . Because of the semantics of the subtype set , o is in the set iffit descends from or is equal to one of the elements in the set .",
        "snippet": "boolean function ( Object arg0 ) { if ( arg0 instanceof Type ) { Type loc0 = ( Type ) arg0 ; for ( Type loc1 : concodeclass_v ) { if ( concodeclass_ts . isSubtype ( loc0 , loc1 ) ) { return true ; } } } return false ; }"
    },
    {
        "question_id": 688,
        "intent": "This callback is called on an unregistration event .",
        "snippet": "void function ( ServiceID arg0 , int arg1 , int arg2 , InetAddress arg3 ) { }"
    },
    {
        "question_id": 689,
        "intent": "Return the job owner user name .",
        "snippet": "String function ( ) { return concodefunc_getWorkflow ( ) . getUser ( ) ; }"
    },
    {
        "question_id": 690,
        "intent": "Singleton retrieval method for the projectbrowser . Lazely instantiates the projectbrowser .",
        "snippet": "ProjectActions function ( ) { if ( concodeclass_theInstance == null ) { concodeclass_theInstance = new ProjectActions ( ) ; } return concodeclass_theInstance ; }"
    },
    {
        "question_id": 691,
        "intent": "Sets the multiplicity for the given word .",
        "snippet": "void function ( O arg0 , int arg1 ) { assert concodeclass_data . get ( arg0 ) == null ; concodeclass_data . put ( arg0 , new DocumentElement < O > ( arg0 , new IntegerHolder ( arg1 ) ) ) ; concodeclass_wordCountMultiSet += arg1 ; }"
    },
    {
        "question_id": 692,
        "intent": "Get the SWT image . Reload it from the UAC if it was disposed .",
        "snippet": "Image function ( ) { if ( concodeclass__image != null && concodeclass__image . isDisposed ( ) ) { SWTFSImage loc0 = ( SWTFSImage ) concodeclass__uac . getImageResource ( concodeclass__uri ) . getImage ( ) ; if ( loc0 == null ) { concodeclass__image = null ; } else { concodeclass__image = loc0 . _image ; } } return concodeclass__image ; }"
    },
    {
        "question_id": 693,
        "intent": "Test method for net.sf.marineapi.nmea.parser.RMCParser #getCourse .",
        "snippet": "void function ( ) { double loc0 = concodeclass_rmc . getCourse ( ) + concodeclass_rmc . getVariation ( ) ; assertEquals ( loc0 , concodeclass_rmc . getCorrectedCourse ( ) , 0.001 ) ; }"
    },
    {
        "question_id": 694,
        "intent": "Returns the currently set action view for this menu item .",
        "snippet": "View function ( ) { if ( concodeclass_mMenuItem != null ) { return HoneycombMenuItem . getActionView ( concodeclass_mMenuItem ) ; } return null ; }"
    },
    {
        "question_id": 695,
        "intent": "Test method for net.sf.marineapi.nmea.parser.GSAParser #setHorizontalDOP double .",
        "snippet": "void function ( ) { final double loc0 = 1.98765 ; concodeclass_instance . setHorizontalDOP ( loc0 ) ; assertEquals ( loc0 , concodeclass_instance . getHorizontalDOP ( ) , 0.1 ) ; }"
    },
    {
        "question_id": 696,
        "intent": "Creates a character from this object 's parameters .",
        "snippet": "Character function ( ShadowStruggles arg0 ) { RpgMap loc0 = new RpgMap ( concodeclass_map , concodeclass_layer , SettingsDAO . getSettings ( ) . defaultTileLayer ) ; Character loc1 = new Character ( concodeclass_x , concodeclass_y , concodeclass_width , concodeclass_height , loc0 ) ; return loc1 ; }"
    },
    {
        "question_id": 697,
        "intent": "Calculates XOR checksum of given String . Resulting hex value is returned as a String in two digit format , padded with a leading zero if necessary .",
        "snippet": "String function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 . length ( ) ; loc1 ++ ) { loc0 ^= ( byte ) arg0 . charAt ( loc1 ) ; } return String . format ( \"srini_string\" , loc0 ) ; }"
    },
    {
        "question_id": 698,
        "intent": "Add a node to the closed list",
        "snippet": "void function ( Node arg0 ) { concodeclass_closed . add ( arg0 ) ; }"
    },
    {
        "question_id": 699,
        "intent": "Sleeps for the given number of milliseconds .",
        "snippet": "void function ( long arg0 ) { sleepMs ( null , arg0 ) ; }"
    },
    {
        "question_id": 700,
        "intent": "Read a writable from a byte array .",
        "snippet": "T function ( byte [ ] arg0 , Class < T > arg1 ) { try { T loc0 = ( T ) ReflectionUtils . newInstance ( arg1 , null ) ; loc0 . readFields ( new DataInputStream ( new ByteArrayInputStream ( arg0 ) ) ) ; return loc0 ; } catch ( IOException loc0 ) { throw new RuntimeException ( loc0 ) ; } }"
    },
    {
        "question_id": 701,
        "intent": "Create a three-component configuration key .",
        "snippet": "ConfigurationKey function ( String arg0 , String arg1 , String arg2 ) { return new ConfigurationKeyImpl ( arg0 , arg1 , arg2 ) ; }"
    },
    {
        "question_id": 702,
        "intent": "Dispose all images in cache and clean the cache .",
        "snippet": "void function ( ) { for ( Iterator loc0 = concodeclass__imageCache . values ( ) . iterator ( ) ; loc0 . hasNext ( ) ; ) { ImageResource loc1 = ( ImageResource ) loc0 . next ( ) ; ( ( SWTFSImage ) loc1 . getImage ( ) ) . getImage ( ) . dispose ( ) ; } concodeclass__imageCache . clear ( ) ; }"
    },
    {
        "question_id": 703,
        "intent": "Test case for OSSUnderFileSystem #delete String , boolean .",
        "snippet": "void function ( ) { Mockito . when ( concodeclass_mClient . listObjects ( Matchers . any ( ListObjectsRequest . class ) ) ) . thenThrow ( ServiceException . class ) ; boolean loc0 = concodeclass_mOSSUnderFileSystem . delete ( concodeclass_PATH , true ) ; Assert . assertFalse ( loc0 ) ; }"
    },
    {
        "question_id": 704,
        "intent": "Parse a string into a SourceFile AST node , applying substitutions .",
        "snippet": "SourceFile function ( String arg0 , List < ? > arg1 ) { return ( SourceFile ) concodefunc_parse ( concodeclass_FILE , arg0 , arg1 . toArray ( ) ) ; }"
    },
    {
        "question_id": 705,
        "intent": "Hashes a key in ByteBuffer to a bucket index in non-negative integer value .",
        "snippet": "int function ( ByteBuffer arg0 ) { byte [ ] loc0 = BufferUtils . newByteArrayFromByteBuffer ( arg0 ) ; return indexHash ( loc0 ) ; }"
    },
    {
        "question_id": 706,
        "intent": "Get the relative full path",
        "snippet": "String function ( ) { return concodeclass_relativeFullPath ; }"
    },
    {
        "question_id": 707,
        "intent": "Does any Rule for the given Language use Type Resolution ?",
        "snippet": "boolean function ( Language arg0 ) { for ( RuleSet loc0 : concodeclass_ruleSets ) { if ( loc0 . usesTypeResolution ( arg0 ) ) { return true ; } } return false ; }"
    },
    {
        "question_id": 708,
        "intent": "Sets the value of the Build property .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_build = arg0 ; }"
    },
    {
        "question_id": 709,
        "intent": "Rescales the image to ideal with and height",
        "snippet": "Bitmap function ( Bitmap arg0 ) { Bitmap loc0 = Bitmap . createScaledBitmap ( arg0 , concodefunc_getDims ( ) [ 0 ] , concodefunc_getDims ( ) [ 1 ] , true ) ; return loc0 ; }"
    },
    {
        "question_id": 710,
        "intent": "Gets the value of the given member as a JWS Algorithm , null if it does n't exist",
        "snippet": "JWSAlgorithm function ( JsonObject arg0 , String arg1 ) { String loc0 = concodefunc_getAsString ( arg0 , arg1 ) ; if ( loc0 != null ) { return JWSAlgorithm . parse ( loc0 ) ; } else { return null ; } }"
    },
    {
        "question_id": 711,
        "intent": "Convert mnemonic word list to seed .",
        "snippet": "byte [ ] function ( List < String > arg0 , String arg1 ) { String loc0 = Joiner . on ( ' ' ) . join ( arg0 ) ; String loc1 = \"srini_string\" + arg1 ; return PBKDF2SHA512 . derive ( loc0 , loc1 , concodeclass_PBKDF2_ROUNDS , 64 ) ; }"
    },
    {
        "question_id": 712,
        "intent": "Sets the value of the testData property .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_testData = arg0 ; }"
    },
    {
        "question_id": 713,
        "intent": "Connects to the TURN server",
        "snippet": "void function ( ) { this . concodeclass_m_turnClient . connect ( ) ; }"
    },
    {
        "question_id": 714,
        "intent": "Request any amount of Bitcoins probably a donation from user , with feedback from the app . Result intent can be received by overriding android.app.Activity #onActivityResult . Result indicates either Activity #RESULT_OK or Activity #RESULT_CANCELED . In the success case , use #transactionHashFromResult Intent to read the transaction hash from the intent.Warning : A success indication is no guarantee ! To be on the safe side , you must drive your own Bitcoin infrastructure and validate the transaction .",
        "snippet": "void function ( final Activity arg0 , final int arg1 , final String arg2 ) { final Intent loc0 = concodefunc_makeIntent ( arg2 , null ) ; concodefunc_startForResult ( arg0 , arg1 , loc0 ) ; }"
    },
    {
        "question_id": 715,
        "intent": "Test method for net.sf.marineapi.nmea.parser.RMBParser #setVelocity .",
        "snippet": "void function ( ) { final double loc0 = 40.66666 ; concodeclass_rmb . setVelocity ( loc0 ) ; assertTrue ( concodeclass_rmb . toString ( ) . contains ( \"srini_string\" ) ) ; assertEquals ( loc0 , concodeclass_rmb . getVelocity ( ) , 0.1 ) ; }"
    },
    {
        "question_id": 716,
        "intent": "will implement more functions later",
        "snippet": "BiAdAdapterSwitcher function ( final int arg0 ) { concodeclass_listview . setDefaultOnRefreshListener ( new SwipeRefreshLayout . OnRefreshListener ( ) { @ Override public void onRefresh ( ) { new Handler ( ) . postDelayed ( concodeclass_refresh_default , arg0 ) ; } } ) ; return this ; }"
    },
    {
        "question_id": 717,
        "intent": "Tests the BlockStoreMeta #getCapacityBytesOnTiers method .",
        "snippet": "void function ( ) { Map < String , Long > loc0 = ImmutableMap . of ( \"srini_string\" , 5000L , \"srini_string\" , 60000L ) ; Assert . assertEquals ( loc0 , concodeclass_mBlockStoreMeta . getCapacityBytesOnTiers ( ) ) ; }"
    },
    {
        "question_id": 718,
        "intent": "Get the exit code/status from the remote command - if available . Be careful - not all server implementations return this value . It is generally a good idea to call this method only when all data from the remote side has been consumed see also the method .",
        "snippet": "Integer function ( ) { return concodeclass_cn . getExitStatus ( ) ; }"
    },
    {
        "question_id": 719,
        "intent": "Honor the nonProxyHosts property value if set .",
        "snippet": "Proxy function ( final HTTPClientPolicy arg0 , final String arg1 ) { if ( arg0 . isSetNonProxyHosts ( ) ) { Pattern loc0 = PatternBuilder . build ( arg0 . getNonProxyHosts ( ) ) ; if ( loc0 . matcher ( arg1 ) . matches ( ) ) { return Proxy . NO_PROXY ; } } return concodefunc_createProxy ( arg0 ) ; }"
    },
    {
        "question_id": 720,
        "intent": "Deserialize the Thrift object from a byte array .",
        "snippet": "void function ( TBase arg0 , byte [ ] arg1 , int arg2 , int arg3 ) { try { concodeclass_trans_ . reset ( arg1 , arg2 , arg3 ) ; arg0 . read ( concodeclass_protocol_ ) ; } finally { concodeclass_trans_ . clear ( ) ; concodeclass_protocol_ . reset ( ) ; } }"
    },
    {
        "question_id": 721,
        "intent": "Send an ERROR log message .",
        "snippet": "void function ( Exception arg0 , String arg1 ) { if ( concodeclass_sIsLogEnabled ) { Log . e ( concodeclass_sApplicationTag , concodefunc_getContent ( concodefunc_getCurrentStackTraceElement ( ) ) + \"srini_string\" + arg0 . getMessage ( ) + \"srini_string\" + arg0 . getStackTrace ( ) + \"srini_string\" + arg1 ) ; arg0 . printStackTrace ( ) ; } }"
    },
    {
        "question_id": 722,
        "intent": "Get the signature alias to use for this SAML realm",
        "snippet": "String function ( ) { return concodeclass_signatureAlias ; }"
    },
    {
        "question_id": 723,
        "intent": "Test method for NotificationController #handleEvent org.osgi.service.event.Event Verifies that IllegalArgumentException is thrown when Event 's Notification #NOTIFICATION_KEY_APPLICATION property is empty .",
        "snippet": "void function ( ) { concodeclass_testEventProperties . put ( Notification . NOTIFICATION_KEY_APPLICATION , \"srini_string\" ) ; concodeclass_notificationController . handleEvent ( new Event ( Notification . NOTIFICATION_TOPIC_BROADCAST , concodeclass_testEventProperties ) ) ; }"
    },
    {
        "question_id": 724,
        "intent": "Formats a given KeyStroke into a string",
        "snippet": "String function ( KeyStroke arg0 ) { if ( arg0 != null ) { return concodefunc_getModifiersText ( arg0 . getModifiers ( ) ) + KeyEventUtils . getKeyText ( arg0 . getKeyCode ( ) ) ; } else { return \"srini_string\" ; } }"
    },
    {
        "question_id": 725,
        "intent": "Set the charset of the body of the request",
        "snippet": "void function ( String arg0 ) { this . concodeclass_charset = arg0 ; }"
    },
    {
        "question_id": 726,
        "intent": "Create an unbound ClientDetailsEntity from the given JSON string .",
        "snippet": "ClientDetailsEntity function ( String arg0 ) { JsonElement loc0 = concodeclass_parser . parse ( arg0 ) ; return parse ( loc0 ) ; }"
    },
    {
        "question_id": 727,
        "intent": "Provide the portId to the RouterInterface 's Builder .",
        "snippet": "Builder function ( String arg0 ) { this . concodeclass_portId = arg0 ; return this ; }"
    },
    {
        "question_id": 728,
        "intent": "Test method for net.sf.marineapi.nmea.parser.RTEParser #isActiveRoute .",
        "snippet": "void function ( ) { concodeclass_rte . setRouteType ( RouteType . WORKING ) ; assertTrue ( concodeclass_rte . isWorkingRoute ( ) ) ; assertFalse ( concodeclass_rte . isActiveRoute ( ) ) ; }"
    },
    {
        "question_id": 729,
        "intent": "Updates the actions according to the current battle state .",
        "snippet": "void function ( ) { for ( Action loc0 : concodeclass_actions ) { loc0 . update ( ) ; } }"
    },
    {
        "question_id": 730,
        "intent": "hashcode implementation to go with equals .",
        "snippet": "int function ( ) { return concodeclass_id ; }"
    },
    {
        "question_id": 731,
        "intent": "Calculate the digest value of all data processed up until this point and convert the digest into a HexDigest object .",
        "snippet": "HexDigest function ( ) { return HexDigest . createFromDigestBytes ( concodefunc_getDigestBytes ( ) ) ; }"
    },
    {
        "question_id": 732,
        "intent": "Determine which test buckets apply to a particular client .",
        "snippet": "ProctorResult function ( @ Nonnull final Identifiers arg0 , @ Nonnull final Map < String , Object > arg1 , @ Nonnull final Map < String , Integer > arg2 ) { return determineTestGroups ( arg0 , arg1 , arg2 , Collections . < String > emptyList ( ) ) ; }"
    },
    {
        "question_id": 733,
        "intent": "Parse a String into a Date according to the ISO 8601specification 2000-12-31T11:59:00Z .",
        "snippet": "Date function ( String arg0 ) { if ( arg0 == null ) return null ; SimpleDateFormat loc0 = new SimpleDateFormat ( concodeclass_FORMAT_ISO , concodeclass_LOCALE ) ; loc0 . setTimeZone ( concodeclass_TIMEZONE ) ; try { return loc0 . parse ( arg0 ) ; } catch ( ParseException loc1 ) { return null ; } }"
    },
    {
        "question_id": 734,
        "intent": "Returns if result is KO",
        "snippet": "boolean function ( ) { return ( this . concodeclass_errorLevel > 1 ) ; }"
    },
    {
        "question_id": 735,
        "intent": "Test method for net.sf.marineapi.nmea.parser.TTMParser #setTimeToCPA .",
        "snippet": "void function ( ) { concodeclass_ttm . setTimeToCPA ( 15.0 ) ; assertTrue ( concodeclass_ttm . toString ( ) . contains ( \"srini_string\" ) ) ; }"
    },
    {
        "question_id": 736,
        "intent": "An efficient copy between two channels with a fixed-size buffer .",
        "snippet": "void function ( final ReadableByteChannel arg0 , final WritableByteChannel arg1 ) { final ByteBuffer loc0 = ByteBuffer . allocateDirect ( 16 * 1024 ) ; while ( arg0 . read ( loc0 ) != - 1 ) { loc0 . flip ( ) ; arg1 . write ( loc0 ) ; loc0 . compact ( ) ; } loc0 . flip ( ) ; while ( loc0 . hasRemaining ( ) ) { arg1 . write ( loc0 ) ; } }"
    },
    {
        "question_id": 737,
        "intent": "Gets the attributeValue attribute of the StandardAttributeResolver object",
        "snippet": "String function ( Object arg0 , String arg1 ) { return concodeclass_nsh . getAttributeValue ( ( Element ) arg0 , arg1 ) ; }"
    },
    {
        "question_id": 738,
        "intent": "Set the value of album",
        "snippet": "void function ( String arg0 ) { this . concodeclass_album = arg0 ; }"
    },
    {
        "question_id": 739,
        "intent": "Returns the cipher suites filter",
        "snippet": "FiltersType function ( ) { return concodeclass_cipherSuiteFilters ; }"
    },
    {
        "question_id": 740,
        "intent": "Method to obtain the only instance of this class",
        "snippet": "MemoryLogger function ( ) { return concodeclass_instance ; }"
    },
    {
        "question_id": 741,
        "intent": "Test method for net.sf.marineapi.nmea.parser.VTGParser #setMagneticCourse double .",
        "snippet": "void function ( ) { try { concodeclass_vtg . setMagneticCourse ( - 0.001 ) ; fail ( \"srini_string\" ) ; } catch ( IllegalArgumentException loc0 ) { assertTrue ( loc0 . getMessage ( ) . contains ( \"srini_string\" ) ) ; } catch ( Exception loc0 ) { fail ( loc0 . getMessage ( ) ) ; } }"
    },
    {
        "question_id": 742,
        "intent": "It might seem odd to return ` true ' if a property == FALSE , but it is required sometimes .",
        "snippet": "boolean function ( Map < String , Object > arg0 , String arg1 ) { if ( arg0 == null || arg1 == null ) { return false ; } else { return isFalse ( arg0 . get ( arg1 ) ) ; } }"
    },
    {
        "question_id": 743,
        "intent": "Initialize TestClass",
        "snippet": "void function ( ) { XMLUnit . setIgnoreWhitespace ( true ) ; XMLUnit . setNormalize ( true ) ; Config . readConfig ( \"srini_string\" ) ; }"
    },
    {
        "question_id": 744,
        "intent": "Unwraps the string and returns it .",
        "snippet": "String function ( ) { return concodeclass_val ; }"
    },
    {
        "question_id": 745,
        "intent": "Set new property value",
        "snippet": "void function ( String arg0 ) { concodeclass_PROPS . put ( concodeclass_KEY , arg0 ) ; concodefunc_loadValue ( arg0 ) ; }"
    },
    {
        "question_id": 746,
        "intent": "Return the identifier for this Fig which is the encloser of the given Fig",
        "snippet": "String function ( Fig arg0 ) { Fig loc0 = arg0 . getEnclosingFig ( ) ; if ( loc0 == null ) { return null ; } return concodefunc_getId ( loc0 ) ; }"
    },
    {
        "question_id": 747,
        "intent": "Returns a hash of the given files contents . Reads the file fully into memory before hashing so only use with small files .",
        "snippet": "Sha256Hash function ( File arg0 ) { FileInputStream loc0 = new FileInputStream ( arg0 ) ; try { return concodefunc_create ( ByteStreams . toByteArray ( loc0 ) ) ; } finally { loc0 . close ( ) ; } }"
    },
    {
        "question_id": 748,
        "intent": "Checks if the given connection 's driver is MySQL Database Driver",
        "snippet": "boolean function ( Connection arg0 ) { if ( arg0 . getMetaData ( ) . getDriverName ( ) . toLowerCase ( ) . contains ( DBType . MySQL . name ( ) . toLowerCase ( ) ) ) { return true ; } return false ; }"
    },
    {
        "question_id": 749,
        "intent": "Return the public interface for UUID service .",
        "snippet": "Class < ? extends Service > function ( ) { return UUIDService . class ; }"
    },
    {
        "question_id": 750,
        "intent": "Method calling to use the direct connection .",
        "snippet": "void function ( ) { System . out . println ( \"srini_string\" ) ; HTTPDirectConnection loc0 = new HTTPDirectConnection ( this . concodeclass_URI ) ; this . concodeclass_urlConn = loc0 . getURLConnection ( ) ; }"
    },
    {
        "question_id": 751,
        "intent": "Parse SQL formatted UTC dateTime",
        "snippet": "Date function ( String arg0 ) { return concodefunc_parseUTC ( arg0 , DateTimeFormat . SQL ) ; }"
    },
    {
        "question_id": 752,
        "intent": "Sets the name of transducer .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_name = arg0 ; }"
    },
    {
        "question_id": 753,
        "intent": "Tests to ensure S3AOutputStream #write byte calls the underlying output stream .",
        "snippet": "void function ( ) { byte [ ] loc0 = new byte [ 10 ] ; concodeclass_mStream . write ( loc0 ) ; concodeclass_mStream . close ( ) ; Mockito . verify ( concodeclass_mLocalOutputStream ) . write ( loc0 , 0 , loc0 . length ) ; }"
    },
    {
        "question_id": 754,
        "intent": "Test method for net.sf.marineapi.nmea.parser.SentenceFactory #createParser java.lang.String .",
        "snippet": "void function ( ) { Sentence loc0 = concodeclass_instance . createParser ( BODTest . EXAMPLE ) ; assertNotNull ( loc0 ) ; assertTrue ( loc0 instanceof Sentence ) ; assertTrue ( loc0 instanceof BODSentence ) ; assertTrue ( loc0 instanceof BODParser ) ; assertEquals ( BODTest . EXAMPLE , loc0 . toSentence ( ) ) ; }"
    },
    {
        "question_id": 755,
        "intent": "Add listener .",
        "snippet": "void function ( StateListener arg0 ) { this . concodeclass_listeners . add ( arg0 ) ; }"
    },
    {
        "question_id": 756,
        "intent": "Remove the project .",
        "snippet": "void function ( Project arg0 ) { if ( concodeclass_currentProject == arg0 ) { concodeclass_currentProject = null ; } arg0 . remove ( ) ; }"
    },
    {
        "question_id": 757,
        "intent": "Check for read timed out",
        "snippet": "boolean function ( ) { return StringUtils . contains ( concodeclass_content , \"srini_string\" ) ; }"
    },
    {
        "question_id": 758,
        "intent": "Adds a ReplacedElement containing an image to a cache of images for quick lookup .",
        "snippet": "void function ( Element arg0 , ReplacedElement arg1 , String arg2 , final int arg3 , final int arg4 ) { if ( concodeclass_imageComponents == null ) { concodeclass_imageComponents = new HashMap ( ) ; } CacheKey loc0 = new CacheKey ( arg0 , arg2 , arg3 , arg4 ) ; concodeclass_imageComponents . put ( loc0 , arg1 ) ; }"
    },
    {
        "question_id": 759,
        "intent": "Sets the error msg .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_errorMsg = arg0 ; }"
    },
    {
        "question_id": 760,
        "intent": "Returns the list of possible federation tokens for this Gitblit instance .",
        "snippet": "List < String > function ( ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( FederationToken loc1 : FederationToken . values ( ) ) { loc0 . add ( concodefunc_getFederationToken ( loc1 ) ) ; } for ( String loc1 : concodeclass_settings . getStrings ( Keys . federation . sets ) ) { loc0 . add ( concodefunc_getFederationToken ( loc1 ) ) ; } return loc0 ; }"
    },
    {
        "question_id": 761,
        "intent": "save a contact",
        "snippet": "void function ( EaseUser arg0 ) { SuperWeChatDBManager . getInstance ( ) . saveContact ( arg0 ) ; }"
    },
    {
        "question_id": 762,
        "intent": "First byte of a base58 encoded P2SH address . P2SH addresses are defined as part of BIP0013 .",
        "snippet": "int function ( ) { return concodeclass_p2shHeader ; }"
    },
    {
        "question_id": 763,
        "intent": "Get the y coordinate for the step at the given index",
        "snippet": "int function ( int arg0 ) { return concodefunc_getStep ( arg0 ) . y ; }"
    },
    {
        "question_id": 764,
        "intent": "Returns default list of auth scheme names in their order of preference .",
        "snippet": "List < String > function ( ) { return concodeclass_DEFAULT_SCHEME_PRIORITY ; }"
    },
    {
        "question_id": 765,
        "intent": "Destroy the log service .",
        "snippet": "void function ( ) { LogManager . shutdown ( ) ; XLog . Info . reset ( ) ; XLogStreamer . Filter . reset ( ) ; }"
    },
    {
        "question_id": 766,
        "intent": "Returns",
        "snippet": "DirectionsLeg [ ] function ( double arg0 , double arg1 , double arg2 , double arg3 ) { DirectionsRoute [ ] loc0 = DirectionsApi . newRequest ( concodeclass_mapsClient . getContext ( ) ) . origin ( new LatLng ( arg0 , arg1 ) ) . destination ( new LatLng ( arg2 , arg3 ) ) . mode ( TravelMode . WALKING ) . await ( ) ; if ( null != loc0 ) { return loc0 [ 0 ] . legs ; } return new DirectionsLeg [ 0 ] ; }"
    },
    {
        "question_id": 767,
        "intent": "Returns the CSS name of this property , e.g. `` font-family '' .",
        "snippet": "String function ( ) { return concodeclass_propName ; }"
    },
    {
        "question_id": 768,
        "intent": "Give a chance for a Binding to customize their message",
        "snippet": "Message function ( Message arg0 ) { return arg0 ; }"
    },
    {
        "question_id": 769,
        "intent": "Get the filters",
        "snippet": "Filters function ( ) { return this . concodeclass_filters ; }"
    },
    {
        "question_id": 770,
        "intent": "Evaluate the result of executing the specified xpath syntax select expression on the specified document",
        "snippet": "String function ( String arg0 , Document arg1 ) { try { return concodeclass_engine . evaluate ( arg0 , new DOMSource ( arg1 ) ) ; } catch ( XMLUnitException loc0 ) { throw new XpathException ( loc0 . getCause ( ) ) ; } }"
    },
    {
        "question_id": 771,
        "intent": "Clears all connections but keeps location position informations .",
        "snippet": "void function ( ) { concodeclass_links . clear ( ) ; }"
    },
    {
        "question_id": 772,
        "intent": "Resolves serialized instance of enumeration value .",
        "snippet": "java . lang . Object function ( ) { try { return concodefunc_forName ( concodeclass_literalName ) ; } catch ( java . lang . IllegalArgumentException loc0 ) { throw new java . io . InvalidObjectException ( loc0 . getMessage ( ) ) ; } }"
    },
    {
        "question_id": 773,
        "intent": "Add a difference group . If the difference group identifier already exists the old difference group will be overwritten .",
        "snippet": "void function ( String arg0 , DifferenceGroup arg1 ) { this . concodeclass_differenceGroups . put ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 774,
        "intent": "array begin .",
        "snippet": "JSONWriter function ( ) { concodefunc_beforeValue ( ) ; concodeclass_mWriter . write ( JSON . LSQUARE ) ; concodeclass_mStack . push ( concodeclass_mState ) ; concodeclass_mState = new State ( concodeclass_ARRAY ) ; return this ; }"
    },
    {
        "question_id": 775,
        "intent": "Test method for net.sf.marineapi.nmea.parser.GSAParser #getHorizontalDOP .",
        "snippet": "void function ( ) { double loc0 = concodeclass_instance . getHorizontalDOP ( ) ; assertEquals ( 1.6 , loc0 , 0.001 ) ; }"
    },
    {
        "question_id": 776,
        "intent": "check that no key is entered twice",
        "snippet": "void function ( ResourceBundle arg0 ) { Set < Object > loc0 = new HashSet < Object > ( ) ; for ( Enumeration loc1 = arg0 . getKeys ( ) ; loc1 . hasMoreElements ( ) ; ) { Object loc2 = loc1 . nextElement ( ) ; Assert . assertTrue ( \"srini_string\" = \"srini_string\" + arg0 . getClass ( ) . getName ( ) , ! loc0 . contains ( loc2 ) ) ; loc0 . add ( loc2 ) ; } }"
    },
    {
        "question_id": 777,
        "intent": "Get Application LOG path . Used to backup database files also",
        "snippet": "String function ( ) { return concodeclass_logPath ; }"
    },
    {
        "question_id": 778,
        "intent": "decode the Hex encoded String data writing it to the given output stream , whitespace characters will be ignored .",
        "snippet": "int function ( String arg0 , OutputStream arg1 ) { return concodeclass_encoder . decode ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 779,
        "intent": "It might seem odd to return ` true ' if a property == FALSE , but it is required sometimes . Returns false if a value is either the String `` false '' regardless of case or Boolean.FALSE .",
        "snippet": "boolean function ( Object arg0 ) { if ( arg0 == null ) { return false ; } return Boolean . FALSE . equals ( arg0 ) || \"srini_string\" . equalsIgnoreCase ( arg0 . toString ( ) ) ; }"
    },
    {
        "question_id": 780,
        "intent": "size of the set",
        "snippet": "int function ( ) { return concodeclass__all . size ( ) ; }"
    },
    {
        "question_id": 781,
        "intent": "Flushes the events from the datastore .",
        "snippet": "void function ( ) { try { concodeclass_dataStore . flushEvents ( ) ; if ( concodeclass_monitor != null ) { concodeclass_monitor . clientFlushedEvents ( - 1 , System . currentTimeMillis ( ) ) ; } } catch ( final DataException loc0 ) { loc0 . printStackTrace ( ) ; } }"
    },
    {
        "question_id": 782,
        "intent": "Obtains the thread , if there is one .",
        "snippet": "Thread function ( ) { return this . concodeclass_waiter ; }"
    },
    {
        "question_id": 783,
        "intent": "Input Stream management not safe",
        "snippet": "void function ( InputStream arg0 ) { if ( arg0 != null ) arg0 . close ( ) ; }"
    },
    {
        "question_id": 784,
        "intent": "Tests the constructor with a negative offset .",
        "snippet": "void function ( ) { RPCFileWriteRequest loc0 = new RPCFileWriteRequest ( concodeclass_TEMP_UFS_FILE_ID , - 1 , concodeclass_LENGTH , null ) ; concodefunc_assertInvalid ( loc0 ) ; }"
    },
    {
        "question_id": 785,
        "intent": "Returns fully qualified name of the enumeration type .",
        "snippet": "java . util . List function ( ) { return concodeclass_typeName ; }"
    },
    {
        "question_id": 786,
        "intent": "Returns a BufferedImage using the specified width and height . By default this returns an image compatible with the screen if not in `` headless '' mode formatted for RGB .",
        "snippet": "BufferedImage function ( int arg0 , int arg1 ) { BufferedImage loc0 = ImageUtil . createCompatibleBufferedImage ( arg0 , arg1 , BufferedImage . TYPE_INT_RGB ) ; ImageUtil . clearImage ( loc0 ) ; return loc0 ; }"
    },
    {
        "question_id": 787,
        "intent": "Create a temporary directory .",
        "snippet": "File function ( ) { File loc0 = null ; try { loc0 = File . createTempFile ( \"srini_string\" , null ) ; loc0 . delete ( ) ; if ( ! loc0 . mkdir ( ) ) { return null ; } return loc0 ; } catch ( IOException loc1 ) { concodeclass_LOG . error ( \"srini_string\" , loc1 ) ; return null ; } }"
    },
    {
        "question_id": 788,
        "intent": "Sets the fetcher start time stamp .",
        "snippet": "void function ( Date arg0 ) { this . concodeclass_fetcherStartTimeStamp = arg0 ; }"
    },
    {
        "question_id": 789,
        "intent": "Returns the naive similarity score .",
        "snippet": "float function ( ) { return ( ( float ) concodeclass_setFoundFragments ) / ( ( float ) concodeclass_setFragmentsCount ) ; }"
    },
    {
        "question_id": 790,
        "intent": "return the vertical position of this ball",
        "snippet": "int function ( ) { return concodeclass_yPosition ; }"
    },
    {
        "question_id": 791,
        "intent": "Set the ID of satellite vehicle , for example `` 05 '' .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_id = arg0 ; }"
    },
    {
        "question_id": 792,
        "intent": "Checks where the key exists in heap or not",
        "snippet": "boolean function ( T arg0 ) { return concodeclass_nodePosition . containsKey ( arg0 ) ; }"
    },
    {
        "question_id": 793,
        "intent": "Extracts the sent-by host from a Via header .",
        "snippet": "InetAddress function ( final SipHeaderValue arg0 ) { final String loc0 = arg0 . getBaseValue ( ) ; final String loc1 = StringUtils . substringAfterLast ( loc0 , \"srini_string\" ) ; return InetAddress . getByName ( loc1 ) ; }"
    },
    {
        "question_id": 794,
        "intent": "Gets the value of the elem2 property .",
        "snippet": "String function ( ) { return concodeclass_elem2 ; }"
    },
    {
        "question_id": 795,
        "intent": "Test method for net.sf.marineapi.nmea.parser.GLLParser #setTime Time .",
        "snippet": "void function ( ) { Time loc0 = new Time ( 1 , 2 , 3.4 ) ; concodeclass_instance . setTime ( loc0 ) ; assertTrue ( concodeclass_instance . toString ( ) . contains ( \"srini_string\" ) ) ; }"
    },
    {
        "question_id": 796,
        "intent": "Returns whether the checksum held in a byte buffer holding a RUDP segment is correct .",
        "snippet": "boolean function ( final ByteBufferExt arg0 ) { final int loc0 = arg0 . position ( ) + RudpConstants . CHECKSUM_INDEX ; final UInt loc1 = arg0 . getUInt ( loc0 ) ; final UInt loc2 = new UIntImpl ( 0 ) ; arg0 . putUInt ( loc0 , loc2 ) ; final UInt loc3 = concodefunc_getChecksum ( arg0 ) ; return loc1 . equals ( loc3 ) ; }"
    },
    {
        "question_id": 797,
        "intent": "Recebe um Grafo e retorna uma List com os seus vertices ordenados .",
        "snippet": "List < Vertice > function ( Grafo arg0 ) { return obterVerticesOrdenados ( arg0 . getVertices ( ) ) ; }"
    },
    {
        "question_id": 798,
        "intent": "Sets the equipped item of the AI",
        "snippet": "void function ( Item arg0 ) { this . concodeclass_mob . setCurrentItemOrArmor ( 0 , new ItemStack ( arg0 ) ) ; }"
    },
    {
        "question_id": 799,
        "intent": "Sets the ListStatusOptions #mLoadMetadataType .",
        "snippet": "ListStatusOptions function ( LoadMetadataType arg0 ) { concodeclass_mLoadMetadataType = arg0 ; return this ; }"
    },
    {
        "question_id": 800,
        "intent": "Get plugin by its name",
        "snippet": "AbstractPlugin function ( String arg0 ) { for ( AbstractPlugin loc0 : concodeclass_plugins ) { if ( loc0 . getName ( ) . equals ( arg0 ) ) { return loc0 ; } } return null ; }"
    },
    {
        "question_id": 801,
        "intent": "Start or stop the pass timer .",
        "snippet": "void function ( boolean arg0 ) { if ( ! arg0 ) { concodeclass_inclusive_time = System . currentTimeMillis ( ) - concodeclass_inclusive_time ; } concodeclass_exclusive_time = System . currentTimeMillis ( ) - concodeclass_exclusive_time ; }"
    },
    {
        "question_id": 802,
        "intent": "Tests that an exception is thrown in the BlockMetadataManagerView #getBlockMeta long method when the block does not exist .",
        "snippet": "void function ( ) { concodeclass_mThrown . expect ( BlockDoesNotExistException . class ) ; concodeclass_mThrown . expectMessage ( ExceptionMessage . BLOCK_META_NOT_FOUND . getMessage ( concodeclass_TEST_BLOCK_ID ) ) ; concodeclass_mMetaManagerView . getBlockMeta ( concodeclass_TEST_BLOCK_ID ) ; }"
    },
    {
        "question_id": 803,
        "intent": "Applies the default umask for newly created files to the mode bits .",
        "snippet": "Permission function ( ) { concodeclass_mMode = concodeclass_mMode . applyUMask ( Mode . getUMask ( ) ) . applyUMask ( concodeclass_FILE_UMASK ) ; return this ; }"
    },
    {
        "question_id": 804,
        "intent": "Percent-encode values according the RFC 3986 . The built-in Java URLEncoder does not encode according to the RFC , so we make the extra replacements .",
        "snippet": "String function ( String arg0 ) { String loc0 ; try { loc0 = URLEncoder . encode ( arg0 , concodeclass_UTF8_CHARSET ) . replace ( \"srini_string\" , \"srini_string\" ) . replace ( \"srini_string\" , \"srini_string\" ) . replace ( \"srini_string\" , \"srini_string\" ) ; } catch ( UnsupportedEncodingException loc1 ) { loc0 = arg0 ; } return loc0 ; }"
    },
    {
        "question_id": 805,
        "intent": "Creates an empty file and its intermediate directories if necessary .",
        "snippet": "void function ( String arg0 ) { File loc0 = new File ( arg0 ) ; com . google . common . io . Files . createParentDirs ( loc0 ) ; if ( ! loc0 . createNewFile ( ) ) { throw new IOException ( \"srini_string\" + arg0 ) ; } }"
    },
    {
        "question_id": 806,
        "intent": "Test method for net.sf.marineapi.nmea.parser.RMCParser #getMonth .",
        "snippet": "void function ( ) { assertEquals ( 7 , concodeclass_rmc . getDate ( ) . getMonth ( ) ) ; }"
    },
    {
        "question_id": 807,
        "intent": "Sets the current working Document .",
        "snippet": "void function ( Document arg0 ) { this . concodeclass_doc = arg0 ; concodefunc_eval ( ) ; }"
    },
    {
        "question_id": 808,
        "intent": "Gets the value of the billTo property .",
        "snippet": "USAddress function ( ) { return concodeclass_billTo ; }"
    },
    {
        "question_id": 809,
        "intent": "Tests to ensure IOException is thrown if HttpURLConnection #getOutputStream throws anIOException .",
        "snippet": "void function ( ) { String loc0 = \"srini_string\" ; when ( concodeclass_mHttpConMock . getOutputStream ( ) ) . thenThrow ( new IOException ( loc0 ) ) ; concodeclass_mThrown . expect ( IOException . class ) ; concodeclass_mThrown . expectMessage ( loc0 ) ; new SwiftOutputStream ( concodeclass_mHttpConMock ) . close ( ) ; }"
    },
    {
        "question_id": 810,
        "intent": "Get the secret",
        "snippet": "byte [ ] function ( ) { return concodeclass_secret ; }"
    },
    {
        "question_id": 811,
        "intent": "The symbol we make the transition on .",
        "snippet": "symbol function ( ) { return concodeclass__on_symbol ; }"
    },
    {
        "question_id": 812,
        "intent": "Process the OPTIONS method .",
        "snippet": "void function ( DAVTransaction arg0 , DAVResource arg1 ) { arg0 . setHeader ( \"srini_string\" , arg1 . getContentType ( ) ) ; arg0 . setHeader ( \"srini_string\" , DAVProcessor . METHODS ) ; arg0 . setStatus ( 200 ) ; }"
    },
    {
        "question_id": 813,
        "intent": "Two decisions are considered to be equal if their names are equal . The priority is not considered .",
        "snippet": "boolean function ( Object arg0 ) { if ( ! ( arg0 instanceof Decision ) ) { return false ; } return ( ( Decision ) arg0 ) . getName ( ) . equals ( concodefunc_getName ( ) ) ; }"
    },
    {
        "question_id": 814,
        "intent": "Retrieves the addressing properties from the current message .",
        "snippet": "AddressingProperties function ( Message arg0 , boolean arg1 , boolean arg2 ) { return org . apache . cxf . ws . addressing . ContextUtils . retrieveMAPs ( arg0 , arg1 , arg2 ) ; }"
    },
    {
        "question_id": 815,
        "intent": "Create an instance of GetOfferDetailsResponse.Return.DetailOfferData.Products.Product",
        "snippet": "GetOfferDetailsResponse . Return . DetailOfferData . Products . Product function ( ) { return new GetOfferDetailsResponse . Return . DetailOfferData . Products . Product ( ) ; }"
    },
    {
        "question_id": 816,
        "intent": "Test method for ActivityController #deregisterUserSession ServerSession , ServerMessage Verifies that NullPointerException is thrown when ServerSession is null .",
        "snippet": "void function ( ) { concodeclass_acitivityController . deregisterUserSession ( null , concodeclass_mockServerMessage ) ; }"
    },
    {
        "question_id": 817,
        "intent": "Disconnects the network connection but does n't request the server to settle the channel first literally just unplugs the network socket and marks the stored channel state as inactive .",
        "snippet": "void function ( ) { concodeclass_wireParser . closeConnection ( ) ; }"
    },
    {
        "question_id": 818,
        "intent": "Implementation of PermissionEvaluator . We do not support this method call .",
        "snippet": "boolean function ( Authentication arg0 , Serializable arg1 , String arg2 , Object arg3 ) { throw new UnsupportedOperationException ( ) ; }"
    },
    {
        "question_id": 819,
        "intent": "Start application with program arg - screenwidth = xx with xx the width in cm or - screensize = yy with yy measured diagonally in inch .",
        "snippet": "void function ( String [ ] arg0 ) { Locale . setDefault ( Locale . US ) ; OsmViewerPlusApp loc0 = new OsmViewerPlusApp ( arg0 ) ; loc0 . getFrame ( ) . readMap ( DataResource . getULMFileResource ( ) ) ; loc0 . showFrame ( ) ; }"
    },
    {
        "question_id": 820,
        "intent": "Test method for net.sf.marineapi.nmea.parser.TTMParser #getSpeed .",
        "snippet": "void function ( ) { assertEquals ( 7.0 , concodeclass_ttm . getSpeed ( ) , 0.001 ) ; }"
    },
    {
        "question_id": 821,
        "intent": "Test of getCapabilities method , of class Device .",
        "snippet": "void function ( ) { System . out . println ( \"srini_string\" ) ; Device loc0 = null ; ArrayList < Capability > loc1 = null ; ArrayList < Capability > loc2 = loc0 . getCapabilities ( ) ; assertEquals ( loc1 , loc2 ) ; fail ( \"srini_string\" ) ; }"
    },
    {
        "question_id": 822,
        "intent": "Returns the last of the given 2 positions i.e. if pos1 ends after pos2 , then last pos1 , pos2 = pos1 . Returns null if the given 2 positions are not comparable .",
        "snippet": "Position function ( Position arg0 , Position arg1 ) { if ( ! concodefunc_isComparable ( arg0 , arg1 ) ) return null ; if ( arg0 . endLine > arg1 . endLine ) return arg0 ; if ( arg0 . endLine == arg1 . endLine && arg0 . endColumn >= arg1 . endColumn ) return arg0 ; return arg1 ; }"
    },
    {
        "question_id": 823,
        "intent": "Set the identifier corresponding to a transformed version of this token",
        "snippet": "void function ( String arg0 ) { this . concodeclass_transformedTokenIdentifier = arg0 ; }"
    },
    {
        "question_id": 824,
        "intent": "Returns the labels of all vertices within the graph .",
        "snippet": "List < VertexLabelType > function ( ) { return concodeclass_vertexLabels ; }"
    },
    {
        "question_id": 825,
        "intent": "Test method for net.sf.marineapi.nmea.parser.RTEParser #isActiveRoute .",
        "snippet": "void function ( ) { assertTrue ( concodeclass_rte . isActiveRoute ( ) ) ; }"
    },
    {
        "question_id": 826,
        "intent": "Returns the distance between latMax and latMin in Kilometers .",
        "snippet": "float function ( ) { return ( float ) Position . getDistKM ( concodeclass_latMax , concodeclass_lonMin , concodeclass_latMin , concodeclass_lonMin ) ; }"
    },
    {
        "question_id": 827,
        "intent": "Test method for net.sf.marineapi.nmea.parser.HDGParser #setDeviation double .",
        "snippet": "void function ( ) { final double loc0 = 180.000001 ; try { concodeclass_hdg . setDeviation ( loc0 ) ; fail ( \"srini_string\" ) ; } catch ( IllegalArgumentException loc1 ) { } catch ( Exception loc1 ) { fail ( loc1 . getMessage ( ) ) ; } }"
    },
    {
        "question_id": 828,
        "intent": "Returns the connected status of the client .",
        "snippet": "boolean function ( ) { return concodeclass_mConnected ; }"
    },
    {
        "question_id": 829,
        "intent": "Create a Calendar instance for UTC time zone using the specified date .",
        "snippet": "Calendar function ( String arg0 ) { return getCalendar ( arg0 , DateUtils . getTimeZone ( \"srini_string\" ) ) ; }"
    },
    {
        "question_id": 830,
        "intent": "Tests the DataNettyBuffer #getLength method .",
        "snippet": "void function ( ) { DataNettyBuffer loc0 = new DataNettyBuffer ( concodeclass_mBuffer , concodeclass_LENGTH ) ; Assert . assertEquals ( concodeclass_LENGTH , loc0 . getLength ( ) ) ; }"
    },
    {
        "question_id": 831,
        "intent": "Sets the test id .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_testId = arg0 ; }"
    },
    {
        "question_id": 832,
        "intent": "Test method for net.sf.marineapi.nmea.parser.HDGParser #getDeviation .",
        "snippet": "void function ( ) { assertEquals ( 1.2 , concodeclass_hdg . getDeviation ( ) , 0.1 ) ; }"
    },
    {
        "question_id": 833,
        "intent": "Test of getNumberRequests method , of class LogEntryInterval .",
        "snippet": "void function ( ) { System . out . println ( \"srini_string\" ) ; LogEntryInterval loc0 = new LogEntryInterval ( ) ; int loc1 = 0 ; int loc2 = loc0 . getNumberRequests ( ) ; assertEquals ( loc1 , loc2 ) ; }"
    },
    {
        "question_id": 834,
        "intent": "reverse char array",
        "snippet": "void function ( char [ ] arg0 , int arg1 , int arg2 ) { while ( arg1 < arg2 ) { char loc0 = arg0 [ arg1 ] ; arg0 [ arg1 ] = arg0 [ arg2 ] ; arg0 [ arg2 ] = loc0 ; arg1 ++ ; arg2 -- ; } }"
    },
    {
        "question_id": 835,
        "intent": "Tests the Mode.Bits #or Mode.Bits method .",
        "snippet": "void function ( ) { Assert . assertEquals ( Mode . Bits . WRITE_EXECUTE , Mode . Bits . WRITE . or ( Mode . Bits . EXECUTE ) ) ; Assert . assertEquals ( Mode . Bits . READ_EXECUTE , Mode . Bits . READ . or ( Mode . Bits . EXECUTE ) ) ; Assert . assertEquals ( Mode . Bits . READ_WRITE , Mode . Bits . WRITE . or ( Mode . Bits . READ ) ) ; }"
    },
    {
        "question_id": 836,
        "intent": "Start an activity . This method is defined to allow different methods of activity starting for newer versions of Android and for compatibility library .",
        "snippet": "void function ( Intent arg0 , int arg1 ) { concodeclass_activity . startActivityForResult ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 837,
        "intent": "Computes the `` cost '' for the parameters given . cost = 1/N Sum f x ;p - y ^ 2",
        "snippet": "double function ( DenseMatrix64F arg0 , DenseMatrix64F arg1 , DenseMatrix64F arg2 ) { concodeclass_func . compute ( arg0 , arg1 , concodeclass_temp0 ) ; double loc0 = diffNormF ( concodeclass_temp0 , arg2 ) ; return loc0 * loc0 / ( double ) arg1 . numRows ; }"
    },
    {
        "question_id": 838,
        "intent": "Return the DAVResource associated with a URI . If the specified URI is relative it will be resolved againstthe root of this DAVRepository .",
        "snippet": "DAVResource function ( URI arg0 ) { if ( arg0 == null ) return concodeclass_factory . getResource ( this , this . concodeclass_root ) ; if ( ! arg0 . isAbsolute ( ) ) arg0 = this . concodeclass_base . resolve ( arg0 ) . normalize ( ) ; return concodeclass_factory . getResource ( this , new File ( arg0 ) . getAbsoluteFile ( ) ) ; }"
    },
    {
        "question_id": 839,
        "intent": "Logs a Message .",
        "snippet": "void function ( String arg0 ) { if ( concodefunc_isRunningOnServer ( ) ) return ; concodeclass_progressMonitor . arg0 = arg0 ; concodeclass_progressMonitor . log . append ( arg0 + \"srini_string\" ) ; if ( concodeclass_progressMonitor . consoleMode ) { System . out . println ( arg0 ) ; } }"
    },
    {
        "question_id": 840,
        "intent": "Simple commodity method also designed to increase readability of source code , and to decrease import in the calling class . Provide a pattern and a subject , it 'll do the proper matching .",
        "snippet": "boolean function ( Pattern arg0 , String arg1 ) { if ( arg1 != null && ! \"srini_string\" . equals ( arg1 ) ) { Matcher loc0 = arg0 . loc0 ( arg1 ) ; if ( loc0 . find ( ) ) { return true ; } } return false ; }"
    },
    {
        "question_id": 841,
        "intent": "Updates/writes a complete user object .",
        "snippet": "boolean function ( UserModel arg0 ) { return concodeclass_userService . updateUserModel ( arg0 ) ; }"
    },
    {
        "question_id": 842,
        "intent": "Deletes the alternate under file system directory .",
        "snippet": "void function ( String arg0 ) { UnderFileSystemUtils . deleteDir ( arg0 ) ; }"
    },
    {
        "question_id": 843,
        "intent": "Retrieves the Content from the Specified File .",
        "snippet": "String function ( File arg0 ) { BufferedReader loc0 = new BufferedReader ( new FileReader ( arg0 ) ) ; return concodefunc_readFile ( loc0 ) ; }"
    },
    {
        "question_id": 844,
        "intent": "Test method for ActivityController #handleEvent org.osgi.service.event.Event Verifies that IllegalArgumentException is thrown when Event 's ActivityEvent #ID_KEY property is empty .",
        "snippet": "void function ( ) { concodeclass_testEventProperties . put ( ActivityEvent . ID_KEY , \"srini_string\" ) ; concodeclass_acitivityController . handleEvent ( new Event ( ActivityEvent . EVENT_TOPIC , concodeclass_testEventProperties ) ) ; }"
    },
    {
        "question_id": 845,
        "intent": "Return the name of the type in its short form if its known to us otherwise return its name fully packaged .",
        "snippet": "String function ( Class < ? > arg0 ) { String loc0 = concodeclass_SHORT_NAMES_BY_TYPE . get ( arg0 ) ; return loc0 == null ? arg0 . getName ( ) : loc0 ; }"
    },
    {
        "question_id": 846,
        "intent": "Gets the record at a given index .",
        "snippet": "AccessibilityRecordCompat function ( AccessibilityEvent arg0 , int arg1 ) { return new AccessibilityRecordCompat ( concodeclass_IMPL . getRecord ( arg0 , arg1 ) ) ; }"
    },
    {
        "question_id": 847,
        "intent": "Returns a org.ejml.interfaces.decomposition.QRDecomposition that has been optimized for the specified matrix size .",
        "snippet": "QRDecomposition < DenseMatrix64F > function ( int arg0 , int arg1 ) { return new QRDecompositionHouseholderColumn_D64 ( ) ; }"
    },
    {
        "question_id": 848,
        "intent": "Sets the message body .",
        "snippet": "void function ( byte [ ] arg0 ) { concodeclass__messageBody = arg0 ; }"
    },
    {
        "question_id": 849,
        "intent": "Set a custom listener for invocation of this menu item .",
        "snippet": "MenuItem function ( OnMenuItemClickListener arg0 ) { concodeclass_mMenuItem . setOnMenuItemClickListener ( arg0 ) ; return this ; }"
    },
    {
        "question_id": 850,
        "intent": "Test method for net.sf.marineapi.nmea.parser.VHWParser #VHWParser java.lang.String .",
        "snippet": "void function ( ) { assertTrue ( concodeclass_vhw . getTalkerId ( ) == TalkerId . VW ) ; assertTrue ( SentenceId . valueOf ( concodeclass_vhw . getSentenceId ( ) ) == SentenceId . VHW ) ; }"
    },
    {
        "question_id": 851,
        "intent": "Processes the internal buffer , converting it into packets if enough data is available .",
        "snippet": "void function ( ) { concodeclass_LOG . trace ( \"srini_string\" ) ; this . concodeclass_m_protocolHandler . handleMessages ( this . concodeclass_m_readBuffer , this . concodeclass_m_inetSocketAddress ) ; this . concodeclass_m_readBuffer . clear ( ) ; }"
    },
    {
        "question_id": 852,
        "intent": "Returns the unbiased sample variance of the values . If this dataset is a sample drawn from a population , this is an unbiased estimator of the population variance of the population . The count must be greater than one . This is not guaranteed to return zero when the dataset consists of the same value multiple times , due to numerical errors . However , it is guaranteed never to return a negative result . Non-finite values If the dataset contains any non-finite values Double #POSITIVE_INFINITY , Double #NEGATIVE_INFINITY , or Double #NaN then the result is Double #NaN .",
        "snippet": "double function ( ) { checkState ( concodeclass_count > 1 ) ; if ( isNaN ( concodeclass_sumOfSquaresOfDeltas ) ) { return NaN ; } return ensureNonNegative ( concodeclass_sumOfSquaresOfDeltas ) / ( concodeclass_count - 1 ) ; }"
    },
    {
        "question_id": 853,
        "intent": "Get a method from the current classifier not yet modeled .",
        "snippet": "Object function ( String arg0 ) { for ( Object loc0 : concodeclass_obsoleteFeatures ) { if ( Model . getFacade ( ) . isAMethod ( loc0 ) && arg0 . equals ( Model . getFacade ( ) . getName ( loc0 ) ) ) { return loc0 ; } } return null ; }"
    },
    {
        "question_id": 854,
        "intent": "Sets value of the CoreConnectionPNames #TCP_NODELAY parameter .",
        "snippet": "void function ( final HttpParams arg0 , boolean arg1 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } arg0 . setBooleanParameter ( CoreConnectionPNames . TCP_NODELAY , arg1 ) ; }"
    },
    {
        "question_id": 855,
        "intent": "Just a wrapper to #check String .",
        "snippet": "boolean function ( final HttpServletRequest arg0 ) { return ( arg0 == null ) ? false : concodefunc_check ( arg0 . getHeader ( \"srini_string\" ) ) ; }"
    },
    {
        "question_id": 856,
        "intent": "Adds the child in front of any other childs .",
        "snippet": "void function ( AbstractReportNode arg0 ) { concodeclass_childNodes . add ( 0 , arg0 ) ; arg0 . parentNode = this ; }"
    },
    {
        "question_id": 857,
        "intent": "Determines if the buffer is empty .",
        "snippet": "boolean function ( ) { return concodeclass_bufferSize == 0 ; }"
    },
    {
        "question_id": 858,
        "intent": "Returns a function that ignores its input and returns the result of supplier.get . Java 8 users : use the lambda expression o - > supplier.get instead .",
        "snippet": "Function < Object , T > function ( Supplier < T > arg0 ) { return new SupplierFunction < T > ( arg0 ) ; }"
    },
    {
        "question_id": 859,
        "intent": "Test method for net.sf.marineapi.nmea.parser.HDGParser #setHeading double .",
        "snippet": "void function ( ) { final double loc0 = 359.9 ; concodeclass_hdg . setHeading ( loc0 ) ; assertEquals ( loc0 , concodeclass_hdg . getHeading ( ) , 0.1 ) ; }"
    },
    {
        "question_id": 860,
        "intent": "Gets the next storage tier view .",
        "snippet": "StorageTierView function ( StorageTierView arg0 ) { int loc0 = arg0 . getTierViewOrdinal ( ) + 1 ; if ( loc0 < concodeclass_mTierViews . size ( ) ) { return concodeclass_mTierViews . get ( loc0 ) ; } return null ; }"
    },
    {
        "question_id": 861,
        "intent": "Just for debugging XML feeds .",
        "snippet": "void function ( final String arg0 ) { final File loc0 = new File ( \"srini_string\" ) ; loc0 . delete ( ) ; final OutputStream loc1 = new FileOutputStream ( loc0 ) ; final Reader loc2 = new StringReader ( arg0 ) ; IOUtils . copy ( loc2 , loc1 ) ; loc1 . flush ( ) ; loc1 . close ( ) ; loc2 . close ( ) ; }"
    },
    {
        "question_id": 862,
        "intent": "Add whitelist to this host file . This supports simple regex in entries .",
        "snippet": "void function ( THashSet < String > arg0 ) { concodeclass_mWhitelist . addAll ( arg0 ) ; }"
    },
    {
        "question_id": 863,
        "intent": "Estimates the distinct number of field values in the join . Since the join does not increase or decrease field values , the estimate is the same as in the appropriate underlying query .",
        "snippet": "int function ( String arg0 ) { if ( concodeclass_p1 . schema ( ) . hasField ( arg0 ) ) return concodeclass_p1 . distinctValues ( arg0 ) ; else return concodeclass_p2 . distinctValues ( arg0 ) ; }"
    },
    {
        "question_id": 864,
        "intent": "Returns the exact path for a file . This path will be the canonical path unless an exception is thrown in which case it will be the absolute path .",
        "snippet": "File function ( File arg0 ) { try { return arg0 . getCanonicalFile ( ) ; } catch ( IOException loc0 ) { return arg0 . getAbsoluteFile ( ) ; } }"
    },
    {
        "question_id": 865,
        "intent": "Get the preferred group length .",
        "snippet": "int function ( ) { return concodeclass_pref_group_len ; }"
    },
    {
        "question_id": 866,
        "intent": "This implementation of the Frobenius norm is a straight forward implementation and can be susceptible for overflow/underflow issues . A more resilient implementation is #normF .",
        "snippet": "double function ( D1Matrix64F arg0 ) { double loc0 = 0 ; int loc1 = arg0 . getNumElements ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { double loc3 = arg0 . get ( loc2 ) ; loc0 += loc3 * loc3 ; } return Math . sqrt ( loc0 ) ; }"
    },
    {
        "question_id": 867,
        "intent": "Sums up the square of each element in the matrix . This is equivalent to the Frobenius norm squared .",
        "snippet": "double function ( D1Matrix64F arg0 ) { double loc0 = 0 ; int loc1 = arg0 . getNumElements ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { double loc3 = arg0 . data [ loc2 ] ; loc0 += loc3 * loc3 ; } return loc0 ; }"
    },
    {
        "question_id": 868,
        "intent": "Determine if current messaging role is that of requestor .",
        "snippet": "boolean function ( Message arg0 ) { Boolean loc0 = ( Boolean ) arg0 . get ( Message . REQUESTOR_ROLE ) ; return loc0 != null && loc0 . booleanValue ( ) ; }"
    },
    {
        "question_id": 869,
        "intent": "Returns the field whose values will be modified",
        "snippet": "String function ( ) { return concodeclass_fldname ; }"
    },
    {
        "question_id": 870,
        "intent": "Takes in a list of file locations instead of actual files and renames/saves them",
        "snippet": "void function ( String arg0 , String arg1 , List < String > arg2 ) { List < File > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg2 ) { File loc2 = new File ( loc1 ) ; loc0 . add ( loc2 ) ; } this . concodefunc_saveFiles ( arg0 , arg1 , loc0 ) ; }"
    },
    {
        "question_id": 871,
        "intent": "Validate the incoming request for mandatory parameters .",
        "snippet": "boolean function ( ActivityRequest arg0 ) { if ( arg0 == null ) { return false ; } if ( arg0 . getFeedId ( ) == null ) { return false ; } return arg0 . getConfigProperties ( ) != null ; }"
    },
    {
        "question_id": 872,
        "intent": "Convenience method , equivalent to calling #decompress byte , int , int decompress src , 0 , destLen .",
        "snippet": "byte [ ] function ( byte [ ] arg0 , int arg1 ) { return decompress ( arg0 , 0 , arg1 ) ; }"
    },
    {
        "question_id": 873,
        "intent": "Splits ` text ` into words and counts them .",
        "snippet": "void function ( String arg0 ) { String [ ] loc0 = arg0 . replaceAll ( \"srini_string\" , \"srini_string\" ) . toLowerCase ( ) . split ( \"srini_string\" ) ; for ( int loc1 = 0 ; loc1 < loc0 . length ; loc1 ++ ) { String loc2 = loc0 [ loc1 ] ; concodefunc_incrementTermCount ( loc2 ) ; } }"
    },
    {
        "question_id": 874,
        "intent": "Modifies goal and map information and returns the modified heuristic function .",
        "snippet": "AdaptableHeuristicFunction function ( Object arg0 , Map arg1 ) { this . concodeclass_goal = arg0 ; this . concodeclass_map = arg1 ; return this ; }"
    },
    {
        "question_id": 875,
        "intent": "Provide number of REJECT decisions for Emtpy Annotation Mutations .",
        "snippet": "int function ( ) { return this . concodeclass_emptyAnnotationRejects ; }"
    },
    {
        "question_id": 876,
        "intent": "Tests for the BufferedBlockOutStream #remaining method .",
        "snippet": "void function ( ) { concodeclass_mTestStream . setWrittenBytes ( concodeclass_BLOCK_LENGTH ) ; Assert . assertEquals ( 0L , concodeclass_mTestStream . remaining ( ) ) ; concodeclass_mTestStream . setWrittenBytes ( 40L ) ; Assert . assertEquals ( concodeclass_BLOCK_LENGTH - 40L , concodeclass_mTestStream . remaining ( ) ) ; concodeclass_mTestStream . setWrittenBytes ( 0L ) ; Assert . assertEquals ( concodeclass_BLOCK_LENGTH , concodeclass_mTestStream . remaining ( ) ) ; }"
    },
    {
        "question_id": 877,
        "intent": "Gets all tierViews before certain tierView . Throws an IllegalArgumentException if thetierAlias is not found .",
        "snippet": "List < StorageTierView > function ( String arg0 ) { int loc0 = concodefunc_getTierView ( arg0 ) . getTierViewOrdinal ( ) ; return concodeclass_mTierViews . subList ( loc0 + 1 , concodeclass_mTierViews . size ( ) ) ; }"
    },
    {
        "question_id": 878,
        "intent": "Returns the same key with the private part removed . May return the same instance .",
        "snippet": "DeterministicKey function ( ) { if ( ! concodefunc_hasPrivate ( ) ) return this ; final DeterministicKey loc0 = concodefunc_getParent ( ) == null ? null : concodefunc_getParent ( ) . getPubOnly ( ) ; return new DeterministicKey ( concodefunc_getChildNumberPath ( ) , concodefunc_getChainCode ( ) , concodefunc_getPubPoint ( ) , null , loc0 ) ; }"
    },
    {
        "question_id": 879,
        "intent": "A version of heartbeat which returns a Future representing completion of therecompute plan . This is especially useful for tests .",
        "snippet": "Future < ? > function ( ) { RecomputePlan loc0 = concodeclass_mPlanner . loc0 ( ) ; if ( loc0 != null && ! loc0 . isEmpty ( ) ) { return concodeclass_mRecomputeLauncherService . submit ( new RecomputeLauncher ( loc0 ) ) ; } return Futures . < Void > immediateFuture ( null ) ; }"
    },
    {
        "question_id": 880,
        "intent": "Remove PropertyChangeListener .",
        "snippet": "void function ( final String arg0 , final PropertyChangeListener arg1 ) { concodeclass_m_PropertyChangeSupport . removePropertyChangeListener ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 881,
        "intent": "Perform the XSLT transformation specified in the constructor",
        "snippet": "String function ( ) { return concodefunc_withExceptionHandling ( new Trans < String > ( ) { public String concodefunc_transform ( ) { return concodeclass_transformation . transformToString ( ) ; } } ) ; }"
    },
    {
        "question_id": 882,
        "intent": "Gets all Parameters .",
        "snippet": "ArrayList function ( ) { return concodeclass_parameters ; }"
    },
    {
        "question_id": 883,
        "intent": "Gets the file size .",
        "snippet": "BigDecimal function ( ) { return this . concodeclass_fileSize ; }"
    },
    {
        "question_id": 884,
        "intent": "Adds a CSS property to a component . e.g. : key = background-color value = yellow",
        "snippet": "void function ( String arg0 , String arg1 ) { switch ( arg0 ) { case \"srini_string\" : if ( concodefunc_addBackgroundColor ( arg1 ) ) { concodeclass_properties . put ( arg0 , arg1 ) ; } break ; case \"srini_string\" : if ( concodefunc_addWidth ( arg1 ) ) { concodeclass_properties . put ( arg0 , arg1 ) ; } break ; } }"
    },
    {
        "question_id": 885,
        "intent": "Return linked stat source",
        "snippet": "StatSource function ( int arg0 ) { if ( arg0 > 0 ) { return this . concodeclass_statSources . get ( arg0 ) ; } else { return null ; } }"
    },
    {
        "question_id": 886,
        "intent": "Called when the connection is being finalized after receiving the response . Use this to do any cleanup / resource freeing .",
        "snippet": "void function ( HttpRequest arg0 , HttpResponse arg1 ) { }"
    },
    {
        "question_id": 887,
        "intent": "Index a single node for visitation by rules .",
        "snippet": "void function ( Node arg0 ) { List < Node > loc0 = concodeclass_nodeNameToNodes . get ( arg0 . toString ( ) ) ; if ( loc0 != null ) { loc0 . add ( arg0 ) ; } }"
    },
    {
        "question_id": 888,
        "intent": "Gets the test id .",
        "snippet": "long function ( ) { return this . concodeclass_testId ; }"
    },
    {
        "question_id": 889,
        "intent": "Add a short field to the stream . \\ param value The short value to be added .",
        "snippet": "void function ( short arg0 ) { concodeclass_format . checkType ( 'h' , true ) ; concodefunc_packLong ( arg0 , true ) ; }"
    },
    {
        "question_id": 890,
        "intent": "Get the transaction output changes if they have been calculated , otherwise null . Only one of this and getTransactions will return a non-null value .",
        "snippet": "TransactionOutputChanges function ( ) { return concodeclass_txOutChanges ; }"
    },
    {
        "question_id": 891,
        "intent": "Set the String corresponding to the CallbackHandler class .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_callbackHandlerClass = arg0 ; concodeclass_LOG . fine ( \"srini_string\" + arg0 ) ; }"
    },
    {
        "question_id": 892,
        "intent": "Calculates the size of the ROI",
        "snippet": "int function ( ) { return this . concodeclass_peakEnd - this . concodeclass_peakStart ; }"
    },
    {
        "question_id": 893,
        "intent": "Internal method that updates the Tree from the String",
        "snippet": "void function ( String arg0 ) { concodeclass_tree = concodefunc_parseTree ( arg0 ) ; concodeclass_mapS = new HashMap < MTDFragmentAST , Tuple > ( ) ; concodeclass_mapN = new HashMap < String , IntegerHolder > ( ) ; concodefunc_decorate ( concodeclass_tree , new IntegerHolder ( 0 ) ) ; }"
    },
    {
        "question_id": 894,
        "intent": "Add blacklist to this hosts file",
        "snippet": "void function ( THashSet < String > arg0 ) { concodeclass_mBlacklist . addAll ( arg0 ) ; }"
    },
    {
        "question_id": 895,
        "intent": "Gets the exp data set id .",
        "snippet": "BigDecimal function ( ) { return this . concodeclass_expDataSetId ; }"
    },
    {
        "question_id": 896,
        "intent": "Sets the exp msg .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_errorMsg = arg0 ; }"
    },
    {
        "question_id": 897,
        "intent": "Sets the album / artwork picture to be displayed on the remote control .",
        "snippet": "MetadataEditorCompat function ( int arg0 , Bitmap arg1 ) { if ( concodeclass_HAS_REMOTE_CONTROL_APIS ) { ( ( RemoteControlClient . MetadataEditor ) concodeclass_mActualMetadataEditor ) . putBitmap ( arg0 , arg1 ) ; } return this ; }"
    },
    {
        "question_id": 898,
        "intent": "Return the external ID of an action .",
        "snippet": "String function ( String arg0 ) { return concodefunc_getWorkflow ( ) . getWorkflowInstance ( ) . getVar ( arg0 + WorkflowInstance . NODE_VAR_SEPARATOR + concodeclass_ACTION_EXTERNAL_ID ) ; }"
    },
    {
        "question_id": 899,
        "intent": "Returns the string value of a configuration property .",
        "snippet": "String function ( ConfigurationKey arg0 ) { return getString ( arg0 , \"srini_string\" ) ; }"
    },
    {
        "question_id": 900,
        "intent": "Finds the length of a byte array . Either by decoding the length from the format or using the remaining size of the stream .",
        "snippet": "int function ( ) { int loc0 = 0 ; if ( concodeclass_format . available ( ) == 1 ) { loc0 = concodeclass_valueLen - concodeclass_valueOff ; } else { loc0 = concodefunc_unpackInt ( false ) ; } return loc0 ; }"
    },
    {
        "question_id": 901,
        "intent": "returns the class name corresponding to a number",
        "snippet": "String function ( int arg0 ) { if ( arg0 == 0 ) { return \"srini_string\" ; } else if ( arg0 == 1 ) { return \"srini_string\" ; } else { return \"srini_string\" ; } }"
    },
    {
        "question_id": 902,
        "intent": "Test method for net.sf.marineapi.nmea.parser.HDMParser #setHeading double .",
        "snippet": "void function ( ) { concodeclass_hdm . setHeading ( 123.45 ) ; assertEquals ( 123.5 , concodeclass_hdm . getHeading ( ) , 0.1 ) ; }"
    },
    {
        "question_id": 903,
        "intent": "add an entry",
        "snippet": "void function ( T arg0 ) { if ( concodeclass_position >= concodeclass_max ) { concodeclass_position = 0 ; concodeclass_haveOverflow = true ; } if ( concodeclass_circularArray . size ( ) > concodeclass_position ) { concodeclass_circularArray . remove ( concodeclass_position ) ; } concodeclass_circularArray . add ( concodeclass_position , arg0 ) ; concodeclass_position ++ ; }"
    },
    {
        "question_id": 904,
        "intent": "Starts the master .",
        "snippet": "void function ( ) { concodeclass_mMasterThread . start ( ) ; }"
    },
    {
        "question_id": 905,
        "intent": "Set the identifier associated with this token",
        "snippet": "void function ( String arg0 ) { this . concodeclass_identifier = arg0 ; }"
    },
    {
        "question_id": 906,
        "intent": "Ensures that the given buffer contains at least the given number of bytes after the given offset .",
        "snippet": "void function ( byte [ ] arg0 , int arg1 , int arg2 ) { if ( arg1 + arg2 > arg0 . length ) { throw new ArrayIndexOutOfBoundsException ( ) ; } }"
    },
    {
        "question_id": 907,
        "intent": "Tests the ClientRWLock #tryLock method .",
        "snippet": "void function ( ) { concodeclass_mWriteLock . lock ( ) ; Assert . assertFalse ( concodeclass_mWriteLock . tryLock ( ) ) ; }"
    },
    {
        "question_id": 908,
        "intent": "Gets the test id .",
        "snippet": "Long function ( ) { return concodeclass_testId ; }"
    },
    {
        "question_id": 909,
        "intent": "Returns the entries as a List .",
        "snippet": "List < String > function ( ) { return concodeclass_log ; }"
    },
    {
        "question_id": 910,
        "intent": "Test method for net.sf.marineapi.nmea.parser.RMCParser #getVariation .",
        "snippet": "void function ( ) { assertEquals ( - 6.1 , concodeclass_rmc . getVariation ( ) , 0.001 ) ; }"
    },
    {
        "question_id": 911,
        "intent": "Return the difference in minutes between now and the date .",
        "snippet": "int function ( Date arg0 , boolean arg1 ) { return minutesAgo ( arg0 , System . currentTimeMillis ( ) , arg1 ) ; }"
    },
    {
        "question_id": 912,
        "intent": "Return the directory into which we put our self-extracted native libraries and make sure it exists .",
        "snippet": "File function ( Context arg0 ) { File loc0 = concodefunc_getLibsDirectory ( arg0 ) ; if ( ! loc0 . isDirectory ( ) && ! loc0 . mkdirs ( ) ) { throw new RuntimeException ( \"srini_string\" ) ; } return loc0 ; }"
    },
    {
        "question_id": 913,
        "intent": "Getter for the denied extensions of a file type .",
        "snippet": "Set < String > function ( final ResourceTypeHandler arg0 ) { return concodeclass_extensionsDenied . get ( arg0 ) ; }"
    },
    {
        "question_id": 914,
        "intent": "Tests the RPCBlockReadResponse #getEncodedLength method .",
        "snippet": "void function ( ) { RPCFileReadResponse loc0 = new RPCFileReadResponse ( concodeclass_TEMP_UFS_FILE_ID , concodeclass_OFFSET , concodeclass_LENGTH , null , concodeclass_STATUS ) ; int loc1 = loc0 . getEncodedLength ( ) ; loc0 . encode ( concodeclass_mBuffer ) ; Assert . assertEquals ( loc1 , concodeclass_mBuffer . readableBytes ( ) ) ; }"
    },
    {
        "question_id": 915,
        "intent": "Format the template with args , only supports the placeholder % s .",
        "snippet": "String function ( String arg0 , Object ... arg1 ) { return String . format ( Locale . ROOT , arg0 , arg1 ) ; }"
    },
    {
        "question_id": 916,
        "intent": "Return a list containing o1 , ... , o3 .",
        "snippet": "List < T > function ( T arg0 , T arg1 , T arg2 ) { List < T > loc0 = new ArrayList < > ( 3 ) ; loc0 . add ( arg0 ) ; loc0 . add ( arg1 ) ; loc0 . add ( arg2 ) ; return loc0 ; }"
    },
    {
        "question_id": 917,
        "intent": "Assert that the provided object is an instance of the provided class . Assert.instanceOf Foo.class , foo ;",
        "snippet": "void function ( Class < ? > arg0 , Object arg1 ) { isInstanceOf ( arg0 , arg1 , \"srini_string\" ) ; }"
    },
    {
        "question_id": 918,
        "intent": "Return a WSDL definition model for a server .",
        "snippet": "Definition function ( Server arg0 ) { Service loc0 = arg0 . getEndpoint ( ) . getService ( ) ; ServiceWSDLBuilder loc1 = new ServiceWSDLBuilder ( concodeclass_bus , loc0 . getServiceInfos ( ) . get ( 0 ) ) ; loc1 . setUseSchemaImports ( false ) ; return loc1 . build ( ) ; }"
    },
    {
        "question_id": 919,
        "intent": "Used to read only single data",
        "snippet": "String function ( String arg0 ) { return concodefunc_getList ( arg0 ) . get ( 0 ) ; }"
    },
    {
        "question_id": 920,
        "intent": "Validates the collected sentences by checking the ages of each sentence and then by calling #isValid . If extending implementation has no validation criteria , it should return always true .",
        "snippet": "boolean function ( ) { long loc0 = System . currentTimeMillis ( ) ; for ( SentenceEvent loc1 : concodeclass_events ) { long loc2 = loc0 - loc1 . getTimeStamp ( ) ; if ( loc2 > 1000 ) { return false ; } } return concodefunc_isValid ( ) ; }"
    },
    {
        "question_id": 921,
        "intent": "Add a file with a relative path - should still be added and not be detected as a sym link .",
        "snippet": "void function ( ) { NoFileAssertListener loc0 = new NoFileAssertListener ( 1 ) ; concodeclass_cpd . setCpdListener ( loc0 ) ; concodeclass_cpd . add ( new File ( \"srini_string\" + concodeclass_BASE_TEST_RESOURCE_PATH , \"srini_string\" ) ) ; loc0 . verify ( ) ; }"
    },
    {
        "question_id": 922,
        "intent": "If the supplied Class has a declared Method whose signature matchesthat of the supplied Method , then this matching Method is returned , otherwise null is returned .",
        "snippet": "Method function ( Class arg0 , Method arg1 ) { return ReflectionUtils . findMethod ( arg0 , arg1 . getName ( ) , arg1 . getParameterTypes ( ) ) ; }"
    },
    {
        "question_id": 923,
        "intent": "Write a HashMap to a Parcel , class of key and value can parcelable both",
        "snippet": "void function ( Map < K , V > arg0 , Parcel arg1 , int arg2 ) { if ( arg0 != null ) { arg1 . writeInt ( arg0 . size ( ) ) ; for ( Entry < K , V > loc0 : arg0 . entrySet ( ) ) { arg1 . writeParcelable ( loc0 . getKey ( ) , arg2 ) ; arg1 . writeParcelable ( loc0 . getValue ( ) , arg2 ) ; } } else { arg1 . writeInt ( - 1 ) ; } }"
    },
    {
        "question_id": 924,
        "intent": "Gets the title attribute of the StylesheetInfo object",
        "snippet": "String function ( ) { return concodeclass_title ; }"
    },
    {
        "question_id": 925,
        "intent": "Sets the modified date .",
        "snippet": "void function ( Timestamp arg0 ) { this . concodeclass_modifiedDate = arg0 ; }"
    },
    {
        "question_id": 926,
        "intent": "Currently unused",
        "snippet": "boolean function ( ) { return false ; }"
    },
    {
        "question_id": 927,
        "intent": "Utility function to determine the presence of a key . The default is false .",
        "snippet": "boolean function ( final String arg0 , final Map arg1 ) { if ( arg1 == null ) { return false ; } Object loc0 = arg1 . get ( arg0 ) ; if ( ! ( loc0 instanceof Boolean ) ) { return false ; } return ( ( Boolean ) loc0 ) . booleanValue ( ) ; }"
    },
    {
        "question_id": 928,
        "intent": "Gets a future which returns this when the channel is successfully opened , or throws an exception if there is an error before the channel has reached the open state . After this future completes successfully , you may call PaymentChannelClientConnection #incrementPayment java.math.BigInteger to begin paying the server .",
        "snippet": "ListenableFuture < PaymentChannelClientConnection > function ( ) { return concodeclass_channelOpenFuture ; }"
    },
    {
        "question_id": 929,
        "intent": "Returns a string that is used to end a graph .",
        "snippet": "String function ( ) { return \"srini_string\" ; }"
    },
    {
        "question_id": 930,
        "intent": "Gets the modified date .",
        "snippet": "Timestamp function ( ) { return this . concodeclass_modifiedDate ; }"
    },
    {
        "question_id": 931,
        "intent": "Int to little-endian bytes : writes x to buf offset . . .",
        "snippet": "void function ( final int arg0 , final byte [ ] arg1 , final int arg2 ) { arg1 [ arg2 ] = ( byte ) arg0 ; arg1 [ arg2 + 1 ] = ( byte ) ( arg0 >> 8 ) ; arg1 [ arg2 + 2 ] = ( byte ) ( arg0 >> 16 ) ; arg1 [ arg2 + 3 ] = ( byte ) ( arg0 >> 24 ) ; }"
    },
    {
        "question_id": 932,
        "intent": "Make a request to the Facebook Graph API with the given string parameters using an HTTP GET default method . See http://developers.facebook.com/docs/api Note that this method is asynchronous and the callback will be invoked in a background thread ; operations that affect the UI will need to be posted to the UI thread or an appropriate handler . This method is deprecated . See Facebook and com.facebook.Request for more info .",
        "snippet": "void function ( String arg0 , Bundle arg1 , RequestListener arg2 , final Object arg3 ) { request ( arg0 , arg1 , \"srini_string\" , arg2 , arg3 ) ; }"
    },
    {
        "question_id": 933,
        "intent": "Configures the Api",
        "snippet": "ServiceBuilder function ( Class < ? extends Api > arg0 ) { this . concodeclass_api = concodefunc_createApi ( arg0 ) ; return this ; }"
    },
    {
        "question_id": 934,
        "intent": "Returns true if the specified value was absolute even if we have a computed value for it , meaning that either the value can be used directly e.g. pixels or there is a fixed context-independent conversion for it e.g. inches . Proportional types e.g. % return false .",
        "snippet": "boolean function ( CSSPrimitiveValue arg0 ) { short loc0 = 0 ; loc0 = ( ( CSSPrimitiveValue ) arg0 ) . getPrimitiveType ( ) ; return isAbsoluteUnit ( loc0 ) ; }"
    },
    {
        "question_id": 935,
        "intent": "Check whether we deal with a Macintosh .",
        "snippet": "boolean function ( ) { return ( System . getProperty ( \"srini_string\" ) != null ) ; }"
    },
    {
        "question_id": 936,
        "intent": "Test for getLongitude",
        "snippet": "void function ( ) { assertEquals ( 25.0 , concodeclass_instance . getLongitude ( ) , 0.0000001 ) ; }"
    },
    {
        "question_id": 937,
        "intent": "Tests the RPCFileReadRequest #RPCFileReadRequest long , long , long constructor with avalid length .",
        "snippet": "void function ( ) { RPCFileReadRequest loc0 = new RPCFileReadRequest ( concodeclass_TEMP_UFS_FILE_ID , concodeclass_OFFSET , concodeclass_LENGTH ) ; concodefunc_assertValid ( loc0 ) ; loc0 = new RPCFileReadRequest ( concodeclass_TEMP_UFS_FILE_ID , concodeclass_OFFSET , 0 ) ; concodefunc_assertValid ( loc0 ) ; }"
    },
    {
        "question_id": 938,
        "intent": "Returns true if this objects chainWork is higher than the others .",
        "snippet": "boolean function ( StoredBlock arg0 ) { return concodeclass_chainWork . compareTo ( arg0 . chainWork ) > 0 ; }"
    },
    {
        "question_id": 939,
        "intent": "Inits the .",
        "snippet": "void function ( ) { concodeclass_dataSetFieldColumnMapping = concodeclass_fetcherRegDataUnitVerifier . buildFieldAndColumnMapping ( new PCLDataSetEntity ( ) ) ; }"
    },
    {
        "question_id": 940,
        "intent": "Close the connection",
        "snippet": "void function ( ) { if ( concodeclass_connection != null && concodeclass_connection . isOpen ( ) ) { try { concodeclass_connection . close ( ) ; } catch ( IOException loc0 ) { concodefunc_handleException ( \"srini_string\" , loc0 ) ; } finally { concodeclass_connection = null ; } } }"
    },
    {
        "question_id": 941,
        "intent": "The hash of the transaction which holds this output .",
        "snippet": "Sha256Hash function ( ) { return concodeclass_hash ; }"
    },
    {
        "question_id": 942,
        "intent": "< a > < b > < b > < / a >",
        "snippet": "void function ( ) { ASTElement loc0 = concodefunc_element ( \"srini_string\" ) ; ASTElement loc1 = concodefunc_element ( \"srini_string\" ) ; ASTElement loc2 = concodefunc_element ( \"srini_string\" ) ; concodeclass_tagList . openTag ( loc0 ) ; concodeclass_tagList . openTag ( loc1 ) ; concodeclass_tagList . openTag ( loc2 ) ; concodeclass_tagList . closeTag ( loc0 ) ; assertFalse ( loc0 . isUnclosed ( ) ) ; assertTrue ( loc1 . isUnclosed ( ) ) ; assertTrue ( loc2 . isUnclosed ( ) ) ; }"
    },
    {
        "question_id": 943,
        "intent": "Method ignorableWhitespace .",
        "snippet": "void function ( char arg0 [ ] , int arg1 , int arg2 ) { try { concodeclass_writer . writeCharacters ( arg0 , arg1 , arg2 ) ; } catch ( XMLStreamException loc0 ) { throw new SAXException ( loc0 ) ; } }"
    },
    {
        "question_id": 944,
        "intent": "Append a hashCode for an Object array .",
        "snippet": "HashCodeBuilder function ( Object [ ] arg0 ) { if ( arg0 == null ) { concodeclass_iTotal = concodeclass_iTotal * concodeclass_iConstant ; } else { for ( Object loc0 : arg0 ) { append ( loc0 ) ; } } return this ; }"
    },
    {
        "question_id": 945,
        "intent": "Sets the value of the filepath property .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_filepath = arg0 ; }"
    },
    {
        "question_id": 946,
        "intent": "Dispose resources used by this PrinterRenderer . This does NOT dispose the attached Printer .",
        "snippet": "void function ( ) { concodeclass__sharedContext . flushFonts ( ) ; ( ( SWTReplacedElementFactory ) concodeclass__sharedContext . getReplacedElementFactory ( ) ) . clean ( ) ; UserAgentCallback loc0 = concodeclass__sharedContext . getUac ( ) ; if ( loc0 instanceof NaiveUserAgent ) { ( ( NaiveUserAgent ) loc0 ) . disposeCache ( ) ; } }"
    },
    {
        "question_id": 947,
        "intent": "In contrast to #getZipName returns the member ` sname without the prepended name of the project but with the extension . TODO : This is not used anywhere - shall we remove it ?",
        "snippet": "String function ( ) { String loc0 = concodeclass_uniqueName ; if ( loc0 != null ) { if ( ! loc0 . endsWith ( concodefunc_getZipFileExtension ( ) ) ) { loc0 += concodefunc_getZipFileExtension ( ) ; } } return loc0 ; }"
    },
    {
        "question_id": 948,
        "intent": "Returns the number of satoshis of this monetary value . It 's deprecated in favour of accessing #value directly .",
        "snippet": "long function ( ) { return this . concodeclass_value ; }"
    },
    {
        "question_id": 949,
        "intent": "Simply return true is the image is equal to keyword ` this ' or ` super ' .",
        "snippet": "boolean function ( ) { return concodeclass_THIS . equals ( concodeclass_image ) || concodeclass_SUPER . equals ( concodeclass_image ) ; }"
    },
    {
        "question_id": 950,
        "intent": "Test method for net.sf.marineapi.nmea.parser.TTMParser #getTime .",
        "snippet": "void function ( ) { Time loc0 = concodeclass_ttm . getTime ( ) ; assertNotNull ( loc0 ) ; assertEquals ( 17 , loc0 . getHour ( ) ) ; assertEquals ( 55 , loc0 . getMinutes ( ) ) ; assertEquals ( 50.24 , loc0 . getSeconds ( ) , 0.001 ) ; }"
    },
    {
        "question_id": 951,
        "intent": "Gets the value of the string1 property .",
        "snippet": "String function ( ) { return concodeclass_string1 ; }"
    },
    {
        "question_id": 952,
        "intent": "Sets the username of the user",
        "snippet": "void function ( String arg0 ) { this . concodeclass_userName = arg0 ; }"
    },
    {
        "question_id": 953,
        "intent": "Marks this directory as one that has been removed , indicating we should also remove all the directory contents .",
        "snippet": "void function ( ) { this . concodeclass_m_markedForRemoval = true ; }"
    },
    {
        "question_id": 954,
        "intent": "Gets the visited attribute of the StandardAttributeResolver object",
        "snippet": "boolean function ( Object arg0 ) { return concodefunc_isLink ( arg0 ) && concodeclass_uac . isVisited ( concodeclass_nsh . getLinkUri ( ( Element ) arg0 ) ) ; }"
    },
    {
        "question_id": 955,
        "intent": "Executes the specified JavaScript Command",
        "snippet": "Object function ( String arg0 ) { return concodeclass_webEngine . executeScript ( arg0 ) ; }"
    },
    {
        "question_id": 956,
        "intent": "Complementary operation to filterOnly",
        "snippet": "Result function ( ResultLevel arg0 ) { Result loc0 = new Result ( ) ; for ( ResultEntry loc1 : this . concodeclass_log ) { if ( loc1 . getLevel ( ) . compareTo ( arg0 ) <= 0 ) { loc0 . add ( loc1 ) ; } } return loc0 ; }"
    },
    {
        "question_id": 957,
        "intent": "Computes a metric identified by its code on a operation AST node .",
        "snippet": "double function ( OperationMetricKey arg0 , ASTMethodOrConstructorDeclaration arg1 ) { return concodeclass_TOP_LEVEL_PACKAGE . compute ( arg0 , arg1 , false ) ; }"
    },
    {
        "question_id": 958,
        "intent": "Update the set of listeners based on the given event . The default implementation just removes all listeners , and then re-initialises completely - this is method 1 . A more efficient way would be to dissect the propertyChangeEvent , and only adapt the listeners that need to be adapted - this is method 2 . Method 2 is explained by the code below that is commented out . Method 1 is the easiest to implement , since at every arrival of an event , we just remove all old listeners , and then inspect the current model , and add listeners where we need them . I.e. the advantage is that we only need to traverse the model structure in one location , i.e. the initialiseListener method .",
        "snippet": "void function ( final PropertyChangeListener arg0 , Object arg1 , PropertyChangeEvent arg2 ) { if ( Model . getUmlFactory ( ) . isRemoved ( arg1 ) ) { concodeclass_LOG . warn ( \"srini_string\" + arg1 ) ; return ; } concodefunc_cleanListener ( arg0 , arg1 ) ; concodefunc_initialiseListener ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 959,
        "intent": "Creates a general purpose solver . Use this if you are not sure what you need .",
        "snippet": "LinearSolver < DenseMatrix64F > function ( int arg0 , int arg1 ) { if ( arg0 == arg1 ) return concodefunc_linear ( arg0 ) ; else return concodefunc_leastSquares ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 960,
        "intent": "Gets the data set id .",
        "snippet": "Long function ( ) { return concodeclass_dataSetId ; }"
    },
    {
        "question_id": 961,
        "intent": "Sets the modified date .",
        "snippet": "void function ( Timestamp arg0 ) { this . concodeclass_modifiedDate = arg0 ; }"
    },
    {
        "question_id": 962,
        "intent": "Alternate initialization entry point for use by ArgoEclipse . It leaves out telling GEF about bundles that it wo n't be able to access . NOTE : This must be called before any other methods are called to work properly .",
        "snippet": "void function ( ) { concodefunc_initInternal ( \"srini_string\" ) ; }"
    },
    {
        "question_id": 963,
        "intent": "Similar to load64 , but allows offset + 8 > input.length , padding the result with zeroes . This has to explicitly reverse the order of the bytes as it packs them into the result which makes it slower than the native version .",
        "snippet": "long function ( byte [ ] arg0 , int arg1 , int arg2 ) { long loc0 = 0 ; int loc1 = Math . min ( arg2 , 8 ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { loc0 |= ( arg0 [ arg1 + loc2 ] & 0xFFL ) << ( loc2 * 8 ) ; } return loc0 ; }"
    },
    {
        "question_id": 964,
        "intent": "Returns the numeric value of a configuration property .",
        "snippet": "int function ( ConfigurationKey arg0 , int arg1 ) { return concodeclass_config . getInteger ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 965,
        "intent": "Increments the Current Value .",
        "snippet": "void function ( ) { concodeclass_progressMonitor . curValue ++ ; }"
    },
    {
        "question_id": 966,
        "intent": "Returns the collection of nodes in this network which are connected to edge .",
        "snippet": "Collection < Edge > function ( Node arg0 ) { return concodeclass_graph . getIncidentEdges ( arg0 ) ; }"
    },
    {
        "question_id": 967,
        "intent": "Obtains the address of the local test server .",
        "snippet": "HttpHost function ( ) { InetSocketAddress loc0 = concodeclass_localServer . getServiceAddress ( ) ; return new HttpHost ( loc0 . getHostName ( ) , loc0 . getPort ( ) , \"srini_string\" ) ; }"
    },
    {
        "question_id": 968,
        "intent": "Get the WS-ReliableMessaging namespace to be used for encoding and decoding messages .",
        "snippet": "String function ( ) { return concodeclass_namespaceURI ; }"
    },
    {
        "question_id": 969,
        "intent": "Remove a terminal",
        "snippet": "void function ( @ PathVariable long arg0 ) { concodeclass_repository . delete ( arg0 ) ; }"
    },
    {
        "question_id": 970,
        "intent": "Estimates the number of distinct field values in the table , which is obtainable from the statistics manager .",
        "snippet": "int function ( String arg0 ) { return concodeclass_si . distinctValues ( arg0 ) ; }"
    },
    {
        "question_id": 971,
        "intent": "wait until the given sequence number has been acknowledged",
        "snippet": "void function ( long arg0 ) { while ( ! concodeclass_session . isShutdown ( ) && ! concodefunc_haveAcknowledgementFor ( arg0 ) ) { concodeclass_waitForSeqAckLatch . set ( new CountDownLatch ( 1 ) ) ; concodeclass_waitForSeqAckLatch . get ( ) . await ( 10 , TimeUnit . MILLISECONDS ) ; } }"
    },
    {
        "question_id": 972,
        "intent": "Tests the RPCFileReadRequest #getEncodedLength method .",
        "snippet": "void function ( ) { RPCFileWriteRequest loc0 = new RPCFileWriteRequest ( concodeclass_TEMP_UFS_FILE_ID , concodeclass_OFFSET , concodeclass_LENGTH , null ) ; int loc1 = loc0 . getEncodedLength ( ) ; loc0 . encode ( concodeclass_mBuffer ) ; Assert . assertEquals ( loc1 , concodeclass_mBuffer . readableBytes ( ) ) ; }"
    },
    {
        "question_id": 973,
        "intent": "Factory method for creating a new SpringChain with default SpringConfig .",
        "snippet": "SpringChain function ( ) { return new SpringChain ( ) ; }"
    },
    {
        "question_id": 974,
        "intent": "Check whether a given file exists in the system",
        "snippet": "boolean function ( String arg0 ) { File loc0 = new File ( arg0 ) ; if ( loc0 . exists ( ) ) { return true ; } return false ; }"
    },
    {
        "question_id": 975,
        "intent": "Gets the checksum type .",
        "snippet": "String function ( ) { return this . concodeclass_checksumType ; }"
    },
    {
        "question_id": 976,
        "intent": "Test of getName method , of class TestDosAttack .",
        "snippet": "void function ( AbstractDosPlugin arg0 ) { String loc0 = arg0 . getName ( ) ; assertTrue ( loc0 . length ( ) > 0 ) ; }"
    },
    {
        "question_id": 977,
        "intent": "Get the number of milliseconds for the inactivity timeout .",
        "snippet": "long function ( ) { return concodeclass_inactivityTimeout == null ? 0 : concodeclass_inactivityTimeout . longValue ( ) ; }"
    },
    {
        "question_id": 978,
        "intent": "Create a SLA evaluator to be used during Materialization",
        "snippet": "ELEvaluator function ( Date arg0 , Configuration arg1 ) { ELEvaluator loc0 = Services . get ( ) . get ( ELService . class ) . createEvaluator ( \"srini_string\" ) ; concodefunc_setConfigToEval ( loc0 , arg1 ) ; SyncCoordAction loc1 = new SyncCoordAction ( ) ; loc1 . setNominalTime ( arg0 ) ; CoordELFunctions . configureEvaluator ( loc0 , null , loc1 ) ; return loc0 ; }"
    },
    {
        "question_id": 979,
        "intent": "Creates a parser for specified NMEA 0183 sentence String . The parser implementation is selected from registered parsers according to sentence type . The returned instance must be cast in to correct sentence interface , for which the type should first be checked by using the Sentence #getSentenceId method .",
        "snippet": "Sentence function ( String arg0 ) { String loc0 = SentenceId . parseStr ( arg0 ) ; return concodefunc_createParserImpl ( loc0 , arg0 ) ; }"
    },
    {
        "question_id": 980,
        "intent": "Returns the timestamp service .",
        "snippet": "TimestampService function ( ) { return new TimestampServiceImpl ( ) ; }"
    },
    {
        "question_id": 981,
        "intent": "manually set the last version name - for testing purposes only",
        "snippet": "void function ( String arg0 ) { this . concodeclass_lastVersion = arg0 ; }"
    },
    {
        "question_id": 982,
        "intent": "Initialize the Hessian stream with the underlying input stream .",
        "snippet": "void function ( InputStream arg0 ) { }"
    },
    {
        "question_id": 983,
        "intent": "Set whether proof of possession is required or not to cancel a token",
        "snippet": "void function ( boolean arg0 ) { this . concodeclass_verifyProofOfPossession = arg0 ; }"
    },
    {
        "question_id": 984,
        "intent": "This method returns policy publisher",
        "snippet": "PolicyPublisher function ( ) { return concodeclass_policyPublisher ; }"
    },
    {
        "question_id": 985,
        "intent": "Get Application options . Currently only video options .",
        "snippet": "Options function ( ) { return concodeclass_options ; }"
    },
    {
        "question_id": 986,
        "intent": "Should be called before once before any other method is called",
        "snippet": "void function ( ARDrone arg0 ) { this . concodeclass_drone = arg0 ; this . concodeclass_cmd = this . concodeclass_drone . getCommandManager ( ) ; }"
    },
    {
        "question_id": 987,
        "intent": "Call back when loading .",
        "snippet": "void function ( T arg0 , String arg1 , BitmapDisplayConfig arg2 , long arg3 , long arg4 ) { }"
    },
    {
        "question_id": 988,
        "intent": "Set the error queue .",
        "snippet": "void function ( ErrorQueue arg0 ) { Report . arg0 = arg0 ; }"
    },
    {
        "question_id": 989,
        "intent": "Sets the stylesheet attribute of the StylesheetInfo object",
        "snippet": "void function ( Stylesheet arg0 ) { this . concodeclass_stylesheet = arg0 ; }"
    },
    {
        "question_id": 990,
        "intent": "Gets the value of the auth property .",
        "snippet": "Auth function ( ) { return concodeclass_auth ; }"
    },
    {
        "question_id": 991,
        "intent": "Puts the specified name/value pair in the specified JSON object .",
        "snippet": "void function ( final JSONObject arg0 , final String arg1 , final Long arg2 ) { try { arg0 . put ( arg1 , arg2 ) ; } catch ( final JSONException loc0 ) { concodeclass_LOG . warn ( \"srini_string\" , loc0 ) ; } }"
    },
    {
        "question_id": 992,
        "intent": "Dispatches an AccessibilityEvent to the host View first and thento its children for adding their text content to the event . The default implementation behaves as View #dispatchPopulateAccessibilityEvent AccessibilityEvent View #dispatchPopulateAccessibilityEvent AccessibilityEvent forthe case of no accessibility delegate been set .",
        "snippet": "boolean function ( View arg0 , AccessibilityEvent arg1 ) { return concodeclass_IMPL . dispatchPopulateAccessibilityEvent ( concodeclass_DEFAULT_DELEGATE , arg0 , arg1 ) ; }"
    },
    {
        "question_id": 993,
        "intent": "Get the color name of the color that is exactly equal to the given hex color value as a 6-digit hex String .",
        "snippet": "Optional < String > function ( String arg0 ) { int loc0 = Integer . parseInt ( arg0 , 16 ) ; int loc1 = ( loc0 & 0xFF0000 ) >> 16 ; int loc2 = ( loc0 & 0xFF00 ) >> 8 ; int loc3 = ( loc0 & 0xFF ) ; return getNamedColor ( loc1 , loc2 , loc3 ) ; }"
    },
    {
        "question_id": 994,
        "intent": "Returns the schema of the index join .",
        "snippet": "Schema function ( ) { return concodeclass_sch ; }"
    },
    {
        "question_id": 995,
        "intent": "Gets the batch id .",
        "snippet": "Long function ( ) { return concodeclass_batchId ; }"
    },
    {
        "question_id": 996,
        "intent": "Adds a one-way connection to the map .",
        "snippet": "void function ( String arg0 , String arg1 , Double arg2 ) { concodeclass_links . set ( arg0 , arg1 , arg2 ) ; }"
    },
    {
        "question_id": 997,
        "intent": "Adds a string field to the schema . The length is the conceptual length of the field . For example , if the field is defined as varchar 8 , then its length is 8 .",
        "snippet": "void function ( String arg0 , int arg1 ) { concodefunc_addField ( arg0 , VARCHAR , arg1 ) ; }"
    },
    {
        "question_id": 998,
        "intent": "Assert that a collection has elements ; that is , it must not be null and must have at least one element.Assert.notEmpty collection , `` Collection must have elements '' ;",
        "snippet": "void function ( Collection arg0 , String arg1 ) { if ( CollectionUtils . isEmpty ( arg0 ) ) { throw new IllegalArgumentException ( arg1 ) ; } }"
    },
    {
        "question_id": 999,
        "intent": "Set up .",
        "snippet": "void function ( ) { concodeclass_mClient = Mockito . mock ( AmazonS3Client . class ) ; concodeclass_mManager = Mockito . mock ( TransferManager . class ) ; concodeclass_mS3UnderFileSystem = new S3AUnderFileSystem ( new AlluxioURI ( \"srini_string\" ) , concodeclass_mClient , concodeclass_BUCKET_NAME , concodeclass_BUCKET_PREFIX , concodeclass_BUCKET_MODE , concodeclass_ACCOUNT_OWNER , concodeclass_mManager ) ; }"
    },
    {
        "question_id": 1000,
        "intent": "Gets the bloack size .",
        "snippet": "int function ( ) { return concodeclass_blockSize ; }"
    },
    {
        "question_id": 1001,
        "intent": "Returns true if property has been defined in this style .",
        "snippet": "boolean function ( CSSName arg0 ) { return concodeclass_cascadedProperties . get ( arg0 ) != null ; }"
    },
    {
        "question_id": 1002,
        "intent": "Checks if is SP error out .",
        "snippet": "boolean function ( ) { if ( concodeclass_errorCode != 0 ) { return true ; } return false ; }"
    },
    {
        "question_id": 1003,
        "intent": "Write the body of the response .",
        "snippet": "OutputStream function ( ) { return this . concodeclass_response . getOutputStream ( ) ; }"
    },
    {
        "question_id": 1004,
        "intent": "Returns the list as a String representation .",
        "snippet": "String function ( ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : concodeclass_log ) { loc0 . append ( loc1 ) . append ( ( \"srini_string\" ) ) ; } return loc0 . toString ( ) . trim ( ) ; }"
    },
    {
        "question_id": 1005,
        "intent": "The hashCode of a move is 8y + x.",
        "snippet": "int function ( ) { return 8 * concodeclass_y + concodeclass_x ; }"
    },
    {
        "question_id": 1006,
        "intent": "Replaces the current maximum by the field value in the current record , if it is higher .",
        "snippet": "void function ( Scan arg0 ) { Constant loc0 = arg0 . getVal ( concodeclass_fldname ) ; if ( loc0 . compareTo ( concodeclass_val ) > 0 ) concodeclass_val = loc0 ; }"
    },
    {
        "question_id": 1007,
        "intent": "Check for Connection reset",
        "snippet": "boolean function ( ) { return StringUtils . contains ( concodeclass_content , \"srini_string\" ) || StringUtils . contains ( concodeclass_content , \"srini_string\" ) ; }"
    },
    {
        "question_id": 1008,
        "intent": "Gets a U2FService instance .",
        "snippet": "U2FService function ( ) { if ( concodeclass_u2FService == null ) { synchronized ( U2FService . class ) { if ( concodeclass_u2FService == null ) { concodeclass_u2FService = new U2FService ( ) ; return concodeclass_u2FService ; } else { return concodeclass_u2FService ; } } } else { return concodeclass_u2FService ; } }"
    },
    {
        "question_id": 1009,
        "intent": "GET / dish-collections / : id : get the `` id '' dishCollection .",
        "snippet": "ResponseEntity < DishCollection > function ( @ PathVariable String arg0 ) { concodeclass_log . debug ( \"srini_string\" , arg0 ) ; DishCollection loc0 = concodeclass_dishCollectionService . findOne ( arg0 ) ; return Optional . ofNullable ( loc0 ) . map ( result -> new ResponseEntity < > ( result , HttpStatus . OK ) ) . orElse ( new ResponseEntity < > ( HttpStatus . NOT_FOUND ) ) ; }"
    },
    {
        "question_id": 1010,
        "intent": "Creates a scriptSig that can redeem a pay-to-pubkey output .",
        "snippet": "Script function ( TransactionSignature arg0 ) { return new ScriptBuilder ( ) . data ( arg0 . encodeToBitcoin ( ) ) . build ( ) ; }"
    },
    {
        "question_id": 1011,
        "intent": "Checks the behavior when the issuer is not known .",
        "snippet": "void function ( ) { Mockito . when ( concodeclass_mockServerConfig . getIssuer ( ) ) . thenReturn ( \"srini_string\" ) ; RegisteredClient loc0 = concodeclass_service . getClientConfiguration ( concodeclass_mockServerConfig ) ; assertThat ( loc0 , is ( nullValue ( ) ) ) ; }"
    },
    {
        "question_id": 1012,
        "intent": "Provide the id to the ExtraDhcpOption 's Builder .",
        "snippet": "Builder function ( String arg0 ) { this . concodeclass_id = arg0 ; return this ; }"
    },
    {
        "question_id": 1013,
        "intent": "Setea si la cuenta esta expirada o no .",
        "snippet": "void function ( Boolean arg0 ) { this . concodeclass_accountNonExpired = arg0 ; }"
    },
    {
        "question_id": 1014,
        "intent": "Gets the lang attribute of the StandardAttributeResolver object",
        "snippet": "String function ( Object arg0 ) { return concodeclass_nsh . getLang ( ( Element ) arg0 ) ; }"
    },
    {
        "question_id": 1015,
        "intent": "Get the action that can redo the last undone action .",
        "snippet": "AbstractAction function ( ) { return concodeclass_redoAction ; }"
    },
    {
        "question_id": 1016,
        "intent": "Return list of devices as Collection",
        "snippet": "Collection < Device > function ( ) { return concodeclass_devices . values ( ) ; }"
    },
    {
        "question_id": 1017,
        "intent": "Setea si la cuenta esta bloqueada o no .",
        "snippet": "void function ( Boolean arg0 ) { this . concodeclass_accountNonLocked = arg0 ; }"
    },
    {
        "question_id": 1018,
        "intent": "Return all stations",
        "snippet": "List < Station > function ( ) { return concodeclass_stationDao . find ( ) . asList ( ) ; }"
    },
    {
        "question_id": 1019,
        "intent": "Unpins any buffers still pinned by this transaction .",
        "snippet": "void function ( ) { for ( Block loc0 : concodeclass_pins ) { Buffer loc1 = concodeclass_buffers . get ( loc0 ) ; concodeclass_bufferMgr . unpin ( loc1 ) ; } concodeclass_buffers . clear ( ) ; concodeclass_pins . clear ( ) ; }"
    },
    {
        "question_id": 1020,
        "intent": "Log a debug message to the context logger .",
        "snippet": "void function ( String arg0 ) { if ( this . concodeclass_debug ) this . concodefunc_doLog ( arg0 , null ) ; }"
    },
    {
        "question_id": 1021,
        "intent": "Determine if this Gitblit instance is actively serving git repositories or if it is merely a repository viewer .",
        "snippet": "boolean function ( ) { return concodeclass_settings . getBoolean ( Keys . git . enableGitServlet , true ) || ( concodeclass_settings . getInteger ( Keys . git . daemonPort , 0 ) > 0 ) || ( concodeclass_settings . getInteger ( Keys . git . sshPort , 0 ) > 0 ) ; }"
    },
    {
        "question_id": 1022,
        "intent": "Add a byte array field to the stream . \\ param value The byte array value to be added .",
        "snippet": "void function ( byte [ ] arg0 ) { this . addByteArray ( arg0 , 0 , arg0 . length ) ; }"
    },
    {
        "question_id": 1023,
        "intent": "Gets a hashMap of the default mutation profiles .",
        "snippet": "HashMap < String , GeneticProfile > function ( ) { return concodefunc_getDefaultGeneticProfileMap ( false , true ) ; }"
    },
    {
        "question_id": 1024,
        "intent": "Gets the value of the executionEndDateTime property .",
        "snippet": "String function ( ) { return concodeclass_executionEndDateTime ; }"
    },
    {
        "question_id": 1025,
        "intent": "Test method for net.sf.marineapi.nmea.parser.TTMParser #getNumber .",
        "snippet": "void function ( ) { assertEquals ( 11 , concodeclass_ttm . getNumber ( ) ) ; }"
    },
    {
        "question_id": 1026,
        "intent": "Creates a new mode by applying the umask specified in configuration to this mode .",
        "snippet": "Mode function ( ) { return applyUMask ( concodefunc_getUMask ( ) ) ; }"
    },
    {
        "question_id": 1027,
        "intent": "order by increasing sequence number",
        "snippet": "int function ( ReceiverLossListEntry arg0 ) { return ( int ) ( concodeclass_sequenceNumber - arg0 . sequenceNumber ) ; }"
    },
    {
        "question_id": 1028,
        "intent": "Closes idle connections .",
        "snippet": "void function ( long arg0 , TimeUnit arg1 ) { if ( arg1 == null ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } concodeclass_poolLock . lock ( ) ; try { concodeclass_idleConnHandler . closeIdleConnections ( arg1 . toMillis ( arg0 ) ) ; } finally { concodeclass_poolLock . unlock ( ) ; } }"
    },
    {
        "question_id": 1029,
        "intent": "Pass the event to the listener .",
        "snippet": "void function ( IRtfListener arg0 ) { arg0 . processBinaryBytes ( concodeclass_data ) ; }"
    },
    {
        "question_id": 1030,
        "intent": "Test method for net.sf.marineapi.nmea.parser.TTMParser #getBearing .",
        "snippet": "void function ( ) { assertEquals ( 13.7 , concodeclass_ttm . getBearing ( ) , 0.001 ) ; }"
    },
    {
        "question_id": 1031,
        "intent": "Remove a plugin from this container by its index",
        "snippet": "boolean function ( int arg0 ) { AbstractPlugin loc0 = concodefunc_getByIndex ( arg0 ) ; return concodefunc_remove ( loc0 ) ; }"
    },
    {
        "question_id": 1032,
        "intent": "Scans list of base packages for all classes marked with specific annotations .",
        "snippet": "Map < Class < ? extends Annotation > , Collection < Class < ? >>> function ( Collection < String > arg0 , List < Class < ? extends Annotation >> arg1 ) { return findClasses ( arg0 , arg1 , null ) ; }"
    },
    {
        "question_id": 1033,
        "intent": "Saves the state to a stream that is , serializes it .",
        "snippet": "void function ( java . io . ObjectOutputStream arg0 ) { arg0 . defaultWriteObject ( ) ; int loc0 = loc0 ( ) ; arg0 . writeInt ( loc0 ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { arg0 . writeDouble ( concodefunc_get ( loc1 ) ) ; } }"
    },
    {
        "question_id": 1034,
        "intent": "Sets the fetcher end time stamp .",
        "snippet": "void function ( Date arg0 ) { this . concodeclass_fetcherEndTimeStamp = arg0 ; }"
    },
    {
        "question_id": 1035,
        "intent": "Return the user name .",
        "snippet": "String function ( ) { return concodeclass_user ; }"
    },
    {
        "question_id": 1036,
        "intent": "Creates an empty file .",
        "snippet": "void function ( final String arg0 ) { UnderFileSystem loc0 = UnderFileSystem . get ( arg0 ) ; OutputStream loc1 = loc0 . create ( arg0 ) ; loc1 . close ( ) ; }"
    },
    {
        "question_id": 1037,
        "intent": "once it is called , the list will restart from the zero scroll",
        "snippet": "void function ( ) { if ( concodeclass_with_the_ad ) { concodeclass_withad . notifyDataSetChanged ( ) ; } else { concodeclass_noad . notifyDataSetChanged ( ) ; } }"
    },
    {
        "question_id": 1038,
        "intent": "Get image",
        "snippet": "BufferedImage function ( ) { if ( concodeclass_coverArtImage != null ) { if ( concodeclass_image == null ) { try { concodeclass_image = ImageIO . read ( concodeclass_coverArtImage . getLargeThumbnail ( ) ) ; } catch ( IOException loc0 ) { Popup . error ( loc0 ) ; } } } return concodeclass_image ; }"
    },
    {
        "question_id": 1039,
        "intent": "Create an instance of CertificateInfo",
        "snippet": "CertificateInfo function ( ) { return new CertificateInfo ( ) ; }"
    },
    {
        "question_id": 1040,
        "intent": "Gets the SharedContext for layout and rendering .",
        "snippet": "SharedContext function ( ) { return concodeclass_panel . getSharedContext ( ) ; }"
    },
    {
        "question_id": 1041,
        "intent": "Get ApplicationManagementService instance .",
        "snippet": "ApplicationManagementService function ( ) { return ApplicationManagementServiceImpl . getInstance ( ) ; }"
    },
    {
        "question_id": 1042,
        "intent": "Destroy the memory locks service .",
        "snippet": "void function ( ) { concodeclass_locks = null ; }"
    },
    {
        "question_id": 1043,
        "intent": "Write the 16-bit length of the given data followed by the data itself",
        "snippet": "BufferedByteWriter function ( byte [ ] arg0 ) { concodefunc_ensureCapacity ( 2 + arg0 . length ) ; concodeclass_mWriter . putShort ( ( short ) arg0 . length ) ; concodeclass_mWriter . put ( arg0 ) ; return this ; }"
    },
    {
        "question_id": 1044,
        "intent": "Gets the minimum encoded size of the given value .",
        "snippet": "int function ( int arg0 ) { if ( arg0 < 253 ) return 1 ; else if ( arg0 < 65536 ) return 3 ; return 5 ; }"
    },
    {
        "question_id": 1045,
        "intent": "Return a Coordinator engine .",
        "snippet": "CoordinatorEngine function ( String arg0 , String arg1 ) { return new CoordinatorEngine ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 1046,
        "intent": "Convert an amount expressed in the way humans are used to into satoshis .",
        "snippet": "Coin function ( final int arg0 , final int arg1 ) { checkArgument ( arg1 < 100 ) ; checkArgument ( arg1 >= 0 ) ; checkArgument ( arg0 >= 0 ) ; final Coin loc0 = concodeclass_COIN . multiply ( arg0 ) . add ( concodeclass_CENT . multiply ( arg1 ) ) ; checkArgument ( loc0 . compareTo ( NetworkParameters . MAX_MONEY ) <= 0 ) ; return loc0 ; }"
    },
    {
        "question_id": 1047,
        "intent": "Open an URL in the system 's default browser .",
        "snippet": "void function ( URL arg0 ) { openUrl ( arg0 . toString ( ) ) ; }"
    },
    {
        "question_id": 1048,
        "intent": "Return a position for a type object . Generate one if the type does n't have one .",
        "snippet": "Position function ( polyglot . types . TypeObject arg0 ) { Position loc0 = arg0 . position ( ) ; if ( loc0 == null ) loc0 = Position . compilerGenerated ( 0 ) ; return loc0 ; }"
    },
    {
        "question_id": 1049,
        "intent": "Gets the error code .",
        "snippet": "Integer function ( ) { return concodeclass_errorCode ; }"
    },
    {
        "question_id": 1050,
        "intent": "Set a hash code associated with this token .",
        "snippet": "void function ( int arg0 ) { concodeclass_tokenHash = arg0 ; }"
    },
    {
        "question_id": 1051,
        "intent": "Set the Test-Source from all kind of types supported by Input #from Object .",
        "snippet": "DiffBuilder function ( Object arg0 ) { concodeclass_testSource = concodefunc_getSource ( arg0 ) ; return this ; }"
    },
    {
        "question_id": 1052,
        "intent": "Get the ID of satellite vehicle , for example `` 05 '' .",
        "snippet": "String function ( ) { return concodeclass_id ; }"
    },
    {
        "question_id": 1053,
        "intent": "Get the target reference .",
        "snippet": "EndpointReferenceType function ( EndpointInfo arg0 , Bus arg1 ) { return getTargetReference ( arg0 , null , arg1 ) ; }"
    },
    {
        "question_id": 1054,
        "intent": "Create an instance of RoleList",
        "snippet": "RoleList function ( ) { return new RoleList ( ) ; }"
    },
    {
        "question_id": 1055,
        "intent": "Sets the value of the named field .",
        "snippet": "void function ( Object arg0 , String arg1 , Object arg2 ) { Field loc0 ; if ( arg0 instanceof Class ) loc0 = concodefunc_getFieldImpl ( ( Class ) arg0 , arg1 ) ; else loc0 = concodefunc_getFieldImpl ( arg0 . getClass ( ) , arg1 ) ; loc0 . setAccessible ( true ) ; loc0 . set ( arg0 , arg2 ) ; }"
    },
    {
        "question_id": 1056,
        "intent": "The backing script bytes which can be turned into a Script object .",
        "snippet": "byte [ ] function ( ) { return concodeclass_scriptBytes ; }"
    },
    {
        "question_id": 1057,
        "intent": "Gets the active attribute of the StandardAttributeResolver object",
        "snippet": "boolean function ( Object arg0 ) { return concodeclass_ui . isActive ( ( Element ) arg0 ) ; }"
    },
    {
        "question_id": 1058,
        "intent": "Takes in any valid UCI command and executes it",
        "snippet": "void function ( String arg0 ) { try { concodeclass_processWriter . write ( arg0 + \"srini_string\" ) ; concodeclass_processWriter . flush ( ) ; } catch ( IOException loc0 ) { loc0 . printStackTrace ( ) ; } }"
    },
    {
        "question_id": 1059,
        "intent": "Attaches the debugger to the given ContextFactory .",
        "snippet": "void function ( ContextFactory arg0 ) { concodeclass_dim . attachTo ( arg0 ) ; }"
    },
    {
        "question_id": 1060,
        "intent": "Delete the authentication . That is important if the Authentication turned out to invalid . For example during login , if no ClientIdentity was associated with the given Credentials",
        "snippet": "void function ( ) { this . concodeclass_parent . remove ( this . concodeclass_credential . toString ( ) ) ; concodeclass_parent = null ; }"
    },
    {
        "question_id": 1061,
        "intent": "Test if a repository path is for a personal repository .",
        "snippet": "boolean function ( String arg0 ) { if ( arg0 . startsWith ( concodeclass_userRepoPrefix ) ) return true ; return false ; }"
    },
    {
        "question_id": 1062,
        "intent": "Check if input is a valid IPv6 address",
        "snippet": "boolean function ( String arg0 ) { concodeclass_mIPv6Matcher = concodeclass_mIPv6Pattern . matcher ( arg0 ) ; try { return concodeclass_mIPv6Matcher . matches ( ) ; } catch ( Exception loc0 ) { Log . loc0 ( Constants . TAG , \"srini_string\" , loc0 ) ; return true ; } }"
    },
    {
        "question_id": 1063,
        "intent": "Specifies that each key not value stored in the map should be wrapped in a WeakReference by default , strong references are used . Warning : when this method is used , the resulting map will use identity == comparison to determine equality of keys , which is a technical violation of the Map specification , and may not be what you expect .",
        "snippet": "MapMaker function ( ) { return concodefunc_setKeyStrength ( Strength . WEAK ) ; }"
    },
    {
        "question_id": 1064,
        "intent": "Decomposes the matrix , extracts H and Q , then sees if it can recompute A using similar matrix stuff .",
        "snippet": "void function ( ) { DenseMatrix64F loc0 = RandomMatrices . createRandom ( 5 , 5 , concodeclass_rand ) ; concodefunc_checkItAll ( loc0 ) ; }"
    },
    {
        "question_id": 1065,
        "intent": "Gets the PMIDs .",
        "snippet": "String function ( ) { return concodeclass_pmids ; }"
    },
    {
        "question_id": 1066,
        "intent": "Get by index",
        "snippet": "ResultEntry function ( int arg0 ) { return concodeclass_log . get ( arg0 ) ; }"
    },
    {
        "question_id": 1067,
        "intent": "Create a four-component configuration key .",
        "snippet": "ConfigurationKey function ( String arg0 , String arg1 , String arg2 , String arg3 ) { return new ConfigurationKeyImpl ( arg0 , arg1 , arg2 , arg3 ) ; }"
    },
    {
        "question_id": 1068,
        "intent": "Returns the field 's name , prepended by `` maxof '' .",
        "snippet": "String function ( ) { return \"srini_string\" + concodeclass_fldname ; }"
    },
    {
        "question_id": 1069,
        "intent": "Returns the elapsed time from the start time . This method assumes that the start time was previously set .",
        "snippet": "long function ( ) { final long loc0 = System . currentTimeMillis ( ) ; final long loc1 = loc0 - this . concodeclass_m_startTime ; return loc1 ; }"
    },
    {
        "question_id": 1070,
        "intent": "Test method for net.sf.marineapi.nmea.util.Time #getMinutes .",
        "snippet": "void function ( ) { assertEquals ( 2 , concodeclass_time . getMinutes ( ) ) ; }"
    },
    {
        "question_id": 1071,
        "intent": "Returns TermCounter keys for the URLS that have been indexed . Should be used for development and testing , not production .",
        "snippet": "Set < String > function ( ) { return concodeclass_jedis . keys ( \"srini_string\" ) ; }"
    },
    {
        "question_id": 1072,
        "intent": "Get one site by id .",
        "snippet": "Site function ( String arg0 ) { concodeclass_log . debug ( \"srini_string\" , arg0 ) ; Site loc0 = concodeclass_siteRepository . findOne ( arg0 ) ; return loc0 ; }"
    },
    {
        "question_id": 1073,
        "intent": "Returns the description of what each action does .",
        "snippet": "ResultFunction function ( ) { return concodeclass_resultFunction ; }"
    },
    {
        "question_id": 1074,
        "intent": "Returns the string representation of the duration between now and the date .",
        "snippet": "String function ( Date arg0 ) { return timeAgo ( arg0 , false ) ; }"
    },
    {
        "question_id": 1075,
        "intent": "Handle an unexpected condition and print the error code .",
        "snippet": "void function ( String arg0 ) { try { throw new Exception ( arg0 ) ; } catch ( Exception loc0 ) { loc0 . printStackTrace ( ) ; System . exit ( 0 ) ; } }"
    },
    {
        "question_id": 1076,
        "intent": "Reset the static members for the TokenMapper .",
        "snippet": "void function ( ) { concodeclass_funcObjects = new ObjArray ( ) ; concodeclass_functionVarMappings = new ArrayList ( ) ; }"
    },
    {
        "question_id": 1077,
        "intent": "Logs out the User .",
        "snippet": "void function ( HttpServletRequest arg0 ) { arg0 . getSession ( ) . removeAttribute ( concodeclass_EMAIL ) ; }"
    },
    {
        "question_id": 1078,
        "intent": "Convert a MultiplicityRange bound string to an integer .",
        "snippet": "int function ( String arg0 ) { try { if ( arg0 . equals ( \"srini_string\" ) || arg0 . equals ( \"srini_string\" ) ) { return - 1 ; } else { return Integer . parseInt ( arg0 ) ; } } catch ( Exception loc0 ) { throw new IllegalArgumentException ( \"srini_string\" + arg0 ) ; } }"
    },
    {
        "question_id": 1079,
        "intent": "Get the name of the class for main method implementation .",
        "snippet": "String function ( ) { return concodeclass_mainMethodClassName ; }"
    },
    {
        "question_id": 1080,
        "intent": "Returns a byte bitfield with a given bit set .",
        "snippet": "byte function ( final int arg0 ) { assert arg0 >= 0 ; assert arg0 < 8 ; return ( byte ) ( 1 << arg0 ) ; }"
    },
    {
        "question_id": 1081,
        "intent": "Get a NotationProvider for the given language .",
        "snippet": "NotationProvider function ( int arg0 , Object arg1 ) { NotationName loc0 = Notation . findNotation ( concodeclass_currentLanguage ) ; return getNotationProvider ( arg0 , arg1 , loc0 ) ; }"
    },
    {
        "question_id": 1082,
        "intent": "saving the file 's bytearray",
        "snippet": "void function ( String arg0 , byte [ ] arg1 ) { try { concodeclass_fos = new FileOutputStream ( arg0 ) ; concodeclass_fos . write ( arg1 ) ; concodeclass_fos . close ( ) ; } catch ( Exception loc0 ) { System . err . println ( \"srini_string\" + arg0 + \"srini_string\" + loc0 . toString ( ) ) ; } System . out . println ( \"srini_string\" + arg0 ) ; }"
    },
    {
        "question_id": 1083,
        "intent": "Removes a child node from the node .",
        "snippet": "void function ( DirectedAcyclicGraphNode < T > arg0 ) { Preconditions . checkState ( concodeclass_mChildren . contains ( arg0 ) ) ; concodeclass_mChildren . remove ( arg0 ) ; }"
    },
    {
        "question_id": 1084,
        "intent": "Calls a method on the given object instance with the given arguments .",
        "snippet": "Object function ( Object arg0 , String arg1 , Object [ ] arg2 ) { Class [ ] loc0 = null ; if ( arg2 != null ) { loc0 = new Class [ arg2 . length ] ; for ( int loc1 = 0 ; loc1 < arg2 . length ; loc1 ++ ) { if ( arg2 [ loc1 ] != null ) loc0 [ loc1 ] = arg2 [ loc1 ] . getClass ( ) ; } } return invokeMethod ( arg0 , arg1 , arg2 , loc0 ) ; }"
    },
    {
        "question_id": 1085,
        "intent": "Adds an operation to the class .",
        "snippet": "void function ( String arg0 , OperationSignature arg1 ) { if ( ! concodeclass_operations . containsKey ( arg1 ) ) { concodeclass_operations . put ( arg1 , new HashMap < String , OperationStats > ( ) ) ; } concodeclass_operations . get ( arg1 ) . put ( arg0 , new OperationStats ( arg0 ) ) ; }"
    },
    {
        "question_id": 1086,
        "intent": "Create a program that satisfies an OP_CHECKMULTISIG program , using pre-encoded signatures .",
        "snippet": "Script function ( List < byte [ ] > arg0 ) { checkArgument ( arg0 . size ( ) <= 16 ) ; ScriptBuilder loc0 = new ScriptBuilder ( ) ; loc0 . smallNum ( 0 ) ; for ( byte [ ] loc1 : arg0 ) loc0 . data ( loc1 ) ; return loc0 . build ( ) ; }"
    },
    {
        "question_id": 1087,
        "intent": "Test method for net.sf.marineapi.nmea.util.Time #setHour int .",
        "snippet": "void function ( ) { try { concodeclass_time . setHour ( - 1 ) ; fail ( \"srini_string\" ) ; } catch ( IllegalArgumentException loc0 ) { } }"
    },
    {
        "question_id": 1088,
        "intent": "If using directly , consider using OwnedItem instead",
        "snippet": "UntypedItem function ( PlatformLayerKey arg0 , Tag arg1 , String arg2 , Format arg3 ) { return concodeclass_platformLayerClient . putItemByTag ( arg0 , arg1 , arg2 , arg3 ) ; }"
    },
    {
        "question_id": 1089,
        "intent": "Tests the RPCBlockReadRequest #getEncodedLength method .",
        "snippet": "void function ( ) { RPCBlockReadRequest loc0 = new RPCBlockReadRequest ( concodeclass_BLOCK_ID , concodeclass_OFFSET , concodeclass_LENGTH , concodeclass_LOCK_ID , concodeclass_SESSION_ID ) ; int loc1 = loc0 . getEncodedLength ( ) ; loc0 . encode ( concodeclass_mBuffer ) ; Assert . assertEquals ( loc1 , concodeclass_mBuffer . readableBytes ( ) ) ; }"
    },
    {
        "question_id": 1090,
        "intent": "Gets the offset of the data stored in this datagram packet .",
        "snippet": "int function ( ) { return concodeclass_offset ; }"
    },
    {
        "question_id": 1091,
        "intent": "Calls evaluate method and returns sorted outcome .",
        "snippet": "ArrayList < String > function ( ) { Map < String , Double > loc0 = this . concodefunc_evaluate ( ) ; return concodefunc_sortByValue ( loc0 ) ; }"
    },
    {
        "question_id": 1092,
        "intent": "Reads the SOAP 1.2 or SOAP 1.1 reference attribute .",
        "snippet": "String function ( MessageReader arg0 ) { String loc0 = concodefunc_readAttributeValue ( arg0 , concodeclass_SOAP_ENCODING_REF_1_2 ) ; if ( loc0 == null ) { loc0 = concodefunc_readAttributeValue ( arg0 , concodeclass_SOAP_ENCODING_REF_1_1 ) ; } return loc0 ; }"
    },
    {
        "question_id": 1093,
        "intent": "Returns a location which is selected by random .",
        "snippet": "String function ( ) { return Util . selectRandomlyFromList ( concodefunc_getLocations ( ) ) ; }"
    },
    {
        "question_id": 1094,
        "intent": "Gets an object value out of the object .",
        "snippet": "ShareOpenGraphObject function ( final String arg0 ) { final Object loc0 = this . concodeclass_bundle . get ( arg0 ) ; return ( loc0 instanceof ShareOpenGraphObject ? ( ShareOpenGraphObject ) loc0 : null ) ; }"
    },
    {
        "question_id": 1095,
        "intent": "If a handler is connected , call its com.google.bitcoin.protocols.channels.PaymentChannelServer #close method thus disconnecting the TCP connection .",
        "snippet": "void function ( ) { if ( concodeclass_connectedHandler != null ) concodeclass_connectedHandler . close ( ) ; }"
    },
    {
        "question_id": 1096,
        "intent": "Convert String date to Date type",
        "snippet": "Date function ( String arg0 , String arg1 ) { if ( arg0 == null ) return null ; ParsePosition loc0 = new ParsePosition ( 0 ) ; SimpleDateFormat loc1 = new SimpleDateFormat ( arg1 ) ; Date loc2 = loc1 . parse ( arg0 , loc0 ) ; return loc2 ; }"
    },
    {
        "question_id": 1097,
        "intent": "is selected ?",
        "snippet": "boolean function ( ) { return concodeclass_selected ; }"
    },
    {
        "question_id": 1098,
        "intent": "add item .",
        "snippet": "void function ( Object arg0 ) { concodeclass_mArray . add ( arg0 ) ; }"
    },
    {
        "question_id": 1099,
        "intent": "Renames a repository role .",
        "snippet": "boolean function ( String arg0 , String arg1 ) { return concodeclass_userService . renameRepositoryRole ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 1100,
        "intent": "Implements BundleActivator.stop . Does nothing since the framework will automatically unregister any registered services .",
        "snippet": "void function ( BundleContext arg0 ) { for ( AutoSIMConnectionConfig loc0 : concodeclass_config . connections ) { concodeclass_environments . deregisterConnectionFactory ( loc0 . name ) ; concodeclass_factories . remove ( loc0 . name ) ; } }"
    },
    {
        "question_id": 1101,
        "intent": "The most common use of `` unifiedBreak '' : level 1 , with an alternative of a single space .",
        "snippet": "void function ( int arg0 ) { unifiedBreak ( arg0 , 1 , \"srini_string\" , 1 ) ; }"
    },
    {
        "question_id": 1102,
        "intent": "Hash forward first 7 Characters",
        "snippet": "void function ( ) { CollisionDJBX33X loc0 = new CollisionDJBX33X ( ) ; int loc1 = loc0 . hashForth ( \"srini_string\" ) ; assertEquals ( 998537770 , loc1 ) ; System . out . println ( \"srini_string\" + ( loc0 . hashForth ( \"srini_string\" ) ) ) ; }"
    },
    {
        "question_id": 1103,
        "intent": "No data available after this reset .",
        "snippet": "void function ( ) { EntityAttributeManager . instance ( ) . clearHash ( ) ; concodeclass_nodes . clear ( ) ; concodeclass_ways . clear ( ) ; concodeclass_pois . clear ( ) ; concodeclass_markers . clear ( ) ; concodeclass_tracks . clear ( ) ; concodeclass_entityTree = null ; concodeclass_boundingBox = null ; concodefunc_fireMapDataEvent ( new MapEvent ( this , MapEvent . Type . MAP_CLEARED ) ) ; }"
    },
    {
        "question_id": 1104,
        "intent": "Gets whether this result object is empty , i.e. contains no information flows",
        "snippet": "boolean function ( ) { return this . concodeclass_results . isEmpty ( ) ; }"
    },
    {
        "question_id": 1105,
        "intent": "Allows third party apps to specify the scanning rectangle dimensions , rather than determine them automatically based on screen resolution .",
        "snippet": "void function ( int arg0 , int arg1 ) { if ( concodeclass_initialized ) { concodeclass_framingRect = concodefunc_getFramingRect ( ) ; Log . d ( concodeclass_TAG , \"srini_string\" + concodeclass_framingRect ) ; concodeclass_framingRectInPreview = null ; } else { concodeclass_requestedFramingRectWidth = arg0 ; concodeclass_requestedFramingRectHeight = arg1 ; } }"
    },
    {
        "question_id": 1106,
        "intent": "Gets the string representing the access token .",
        "snippet": "String function ( ) { return this . concodeclass_token ; }"
    },
    {
        "question_id": 1107,
        "intent": "Retrieve the group attributes by group name",
        "snippet": "Map < String , String > function ( String arg0 ) { return null ; }"
    },
    {
        "question_id": 1108,
        "intent": "Calculate how many milliseconds have passed since last frame .",
        "snippet": "int function ( ) { long loc0 = concodefunc_getTime ( ) ; int loc1 = ( int ) ( loc0 - concodeclass_lastFrame ) ; concodeclass_lastFrame = loc0 ; return loc1 ; }"
    },
    {
        "question_id": 1109,
        "intent": "Converts ` A ' into a block matrix and call setA on the block matrix solver .",
        "snippet": "boolean function ( DenseMatrix64F arg0 ) { concodeclass_blockA . reshape ( arg0 . numRows , arg0 . numCols , false ) ; BlockMatrixOps . convert ( arg0 , concodeclass_blockA ) ; return concodeclass_alg . setA ( concodeclass_blockA ) ; }"
    },
    {
        "question_id": 1110,
        "intent": "Check whether the resource is healthy . If not retry . When this called , the resource is not in mResourceAvailable .",
        "snippet": "T function ( T arg0 , long arg1 ) { if ( concodefunc_isHealthy ( arg0 ) ) { return arg0 ; } else { concodeclass_LOG . info ( \"srini_string\" , arg0 ) ; concodefunc_remove ( arg0 ) ; concodefunc_closeResource ( arg0 ) ; return concodefunc_acquire ( arg1 - concodeclass_mClock . millis ( ) , TimeUnit . MILLISECONDS ) ; } }"
    },
    {
        "question_id": 1111,
        "intent": "Test method for net.sf.marineapi.nmea.parser.MWVParser #getSpeedUnit .",
        "snippet": "void function ( ) { assertEquals ( Units . METER , concodeclass_mwv . getSpeedUnit ( ) ) ; }"
    },
    {
        "question_id": 1112,
        "intent": "Test method for org.mitre.uma.service.impl.DefaultResourceSetService #saveNew org.mitre.uma.model.ResourceSet .",
        "snippet": "void function ( ) { ResourceSet loc0 = new ResourceSet ( ) ; loc0 . setId ( 1L ) ; concodeclass_resourceSetService . saveNew ( loc0 ) ; }"
    },
    {
        "question_id": 1113,
        "intent": "Prints input in console for debugging .",
        "snippet": "void function ( ) { System . out . println ( concodeclass_fis . getFunctionBlock ( null ) . getVariables ( ) . toString ( ) ) ; }"
    },
    {
        "question_id": 1114,
        "intent": "Adds an integer field to the schema .",
        "snippet": "void function ( String arg0 ) { concodefunc_addField ( arg0 , INTEGER , 0 ) ; }"
    },
    {
        "question_id": 1115,
        "intent": "Defines the hashcode .",
        "snippet": "int function ( ) { return concodeclass_url . hashCode ( ) ; }"
    },
    {
        "question_id": 1116,
        "intent": "Gets the ids of the registered object instances .",
        "snippet": "Set < String > function ( ) { return Collections . unmodifiableSet ( concodeclass_instances . keySet ( ) ) ; }"
    },
    {
        "question_id": 1117,
        "intent": "Tests to ensure S3AOutputStream #flush calls the underlying output stream .",
        "snippet": "void function ( ) { concodeclass_mStream . flush ( ) ; concodeclass_mStream . close ( ) ; Mockito . verify ( concodeclass_mLocalOutputStream ) . flush ( ) ; }"
    },
    {
        "question_id": 1118,
        "intent": "Guaranteed to throw an exception and leave the underlying data unmodified .",
        "snippet": "void function ( ) { throw new UnsupportedOperationException ( ) ; }"
    },
    {
        "question_id": 1119,
        "intent": "Returns the class ` name ' that was declared by class ` parent ' .",
        "snippet": "Class function ( Class arg0 , String arg1 ) { Class loc0 = concodefunc_getClassImpl ( arg0 , arg1 ) ; return loc0 ; }"
    },
    {
        "question_id": 1120,
        "intent": "Creates a new local Alluxio master with a isolated port .",
        "snippet": "LocalAlluxioMaster function ( final String arg0 ) { UnderFileSystemUtils . mkdirIfNotExists ( arg0 ) ; return new LocalAlluxioMaster ( ) ; }"
    },
    {
        "question_id": 1121,
        "intent": "MINA does some funky things if we do n't do this first .",
        "snippet": "void function ( ) { ByteBuffer . setUseDirectBuffers ( false ) ; ByteBuffer . setAllocator ( new SimpleByteBufferAllocator ( ) ) ; }"
    },
    {
        "question_id": 1122,
        "intent": "Get the ConditionsProvider",
        "snippet": "ConditionsProvider function ( ) { return concodeclass_conditionsProvider ; }"
    },
    {
        "question_id": 1123,
        "intent": "Closes the manager , by unpinning the block .",
        "snippet": "void function ( ) { if ( concodeclass_blk != null ) { concodeclass_tx . unpin ( concodeclass_blk ) ; concodeclass_blk = null ; } }"
    },
    {
        "question_id": 1124,
        "intent": "Set the token Id",
        "snippet": "void function ( String arg0 ) { this . concodeclass_tokenId = arg0 ; }"
    },
    {
        "question_id": 1125,
        "intent": "getState returns a String representing the state in a UBL address .",
        "snippet": "String function ( ) { String loc0 = \"srini_string\" ; try { loc0 = concodeclass_address . getCountrySubentityCode ( ) . getValue ( ) ; } catch ( NullPointerException loc1 ) { } return loc0 ; }"
    },
    {
        "question_id": 1126,
        "intent": "Unlocks the given lock and releases the block lock for the given block id if the lock no longer in use .",
        "snippet": "void function ( Lock arg0 , long arg1 ) { arg0 . unlock ( ) ; concodefunc_releaseBlockLockIfUnused ( arg1 ) ; }"
    },
    {
        "question_id": 1127,
        "intent": "Accessor for the version of the client we 're running . If we 're running on the main line , this just returns 0.00 .",
        "snippet": "double function ( ) { final String loc0 = System . getProperty ( \"srini_string\" , \"srini_string\" ) ; return Double . parseDouble ( loc0 ) ; }"
    },
    {
        "question_id": 1128,
        "intent": "Tests that an exception is thrown when trying to unlock a block via BlockLockManager #unlockBlock long which is not locked .",
        "snippet": "void function ( ) { long loc0 = 1 ; concodeclass_mThrown . expect ( BlockDoesNotExistException . class ) ; concodeclass_mThrown . expectMessage ( ExceptionMessage . LOCK_RECORD_NOT_FOUND_FOR_LOCK_ID . getMessage ( loc0 ) ) ; concodeclass_mLockManager . unlockBlock ( loc0 ) ; }"
    },
    {
        "question_id": 1129,
        "intent": "Gets the checksum type .",
        "snippet": "String function ( ) { return this . concodeclass_checksumType ; }"
    },
    {
        "question_id": 1130,
        "intent": "Sends a zoom command to the camera according to the user control",
        "snippet": "void function ( int arg0 ) { String loc0 ; String loc2 = String . valueOf ( arg0 ) ; loc0 = \"srini_string\" + concodeclass_channel ; loc0 = loc0 + \"srini_string\" ; loc0 = loc0 + loc2 ; try { concodefunc_runUrl ( loc0 ) ; } catch ( IOException loc1 ) { loc1 . printStackTrace ( ) ; } }"
    },
    {
        "question_id": 1131,
        "intent": "Test of getAddress method , of class Device .",
        "snippet": "void function ( ) { System . out . println ( \"srini_string\" ) ; Device loc0 = null ; int loc1 = 0 ; int loc2 = loc0 . getAddress ( ) ; assertEquals ( loc1 , loc2 ) ; fail ( \"srini_string\" ) ; }"
    },
    {
        "question_id": 1132,
        "intent": "Get the maximum lifetime in seconds for issued SAML token if requestor specifies lifetime element",
        "snippet": "long function ( ) { return concodeclass_maxLifetime ; }"
    },
    {
        "question_id": 1133,
        "intent": "Factory method for the routing component . Subclasses can override it and provide more advanced routing algorithms .",
        "snippet": "RouteCalculator function ( ) { return new RouteCalculator ( ) ; }"
    },
    {
        "question_id": 1134,
        "intent": "Changes local file 's permission .",
        "snippet": "void function ( String arg0 , String arg1 ) { Files . setPosixFilePermissions ( Paths . get ( arg0 ) , PosixFilePermissions . fromString ( arg1 ) ) ; }"
    },
    {
        "question_id": 1135,
        "intent": "Sets the InputStream to be used as data source . If reader is running , it is first stopped and you must call #start to resume reading .",
        "snippet": "void function ( InputStream arg0 ) { if ( concodeclass_reader . isRunning ( ) ) { concodefunc_stop ( ) ; } concodeclass_reader = new DefaultDataReader ( arg0 , this ) ; }"
    },
    {
        "question_id": 1136,
        "intent": "Disconnect database",
        "snippet": "void function ( ) { try { concodeclass_connection . close ( ) ; } catch ( SQLException loc0 ) { Jamuz . getLogger ( ) . log ( Level . SEVERE , \"srini_string\" , loc0 ) ; } }"
    },
    {
        "question_id": 1137,
        "intent": "Gets the value of the dates property . This accessor method returns a reference to the live list , not a snapshot . Therefore any modification you make to the returned list will be present inside the JAXB object . This is why there is not a set method for the dates property . For example , to add a new item , do as follows : getDates . add newItem ; Objects of the following type s are allowed in the list String",
        "snippet": "List < Date > function ( ) { if ( concodeclass_dates == null ) { concodeclass_dates = new ArrayList < Date > ( ) ; } return this . concodeclass_dates ; }"
    },
    {
        "question_id": 1138,
        "intent": "Render the walls",
        "snippet": "void function ( float arg0 , float arg1 , float arg2 , float arg3 , float arg4 , float arg5 ) { glPushMatrix ( ) ; glBegin ( GL_QUADS ) ; glColor3f ( 0.39f , 0.39f , 0.39f ) ; glVertex3f ( arg0 , arg1 , - arg2 ) ; glVertex3f ( arg0 + arg4 , arg1 , - ( arg2 + arg5 ) ) ; glVertex3f ( arg0 + arg4 , arg1 + arg3 , - ( arg2 + arg5 ) ) ; glVertex3f ( arg0 , arg1 + arg3 , - arg2 ) ; glEnd ( ) ; glPopMatrix ( ) ; }"
    },
    {
        "question_id": 1139,
        "intent": "Default Locale is set and resources Bundles are loaded .",
        "snippet": "void function ( ) { concodefunc_initInternal ( \"srini_string\" ) ; Localizer . addResource ( \"srini_string\" , \"srini_string\" ) ; }"
    },
    {
        "question_id": 1140,
        "intent": "Gets the parent of the file at a path .",
        "snippet": "String function ( String arg0 ) { String loc0 = concodefunc_cleanPath ( arg0 ) ; String loc1 = FilenameUtils . getName ( loc0 ) ; String loc2 = loc0 . substring ( 0 , loc0 . length ( ) - loc1 . length ( ) - 1 ) ; if ( loc2 . isEmpty ( ) ) { return AlluxioURI . SEPARATOR ; } return loc2 ; }"
    },
    {
        "question_id": 1141,
        "intent": "Sets the TrustManagers associated with this endpoint . This parameter may be set to null for system default behavior .",
        "snippet": "void function ( TrustManager [ ] arg0 ) { concodeclass_trustManagers = arg0 ; }"
    },
    {
        "question_id": 1142,
        "intent": "Mutator for the ReplyTo property .",
        "snippet": "void function ( EndpointReferenceType arg0 ) { concodeclass_replyTo = arg0 ; }"
    },
    {
        "question_id": 1143,
        "intent": "Return the UTC date and time in W3C format down to second yyyy-MM-ddTHH : mm : ssZ . i.e. : 1997-07-16T19:20:30Z",
        "snippet": "String function ( Date arg0 ) { SimpleDateFormat loc0 = new SimpleDateFormat ( \"srini_string\" ) ; loc0 . setTimeZone ( TimeZone . getTimeZone ( \"srini_string\" ) ) ; return loc0 . format ( arg0 ) ; }"
    },
    {
        "question_id": 1144,
        "intent": "Maps the specified row and column to the specified value in the table . Neither the row nor the column nor the value can be null The value can be retrieved by calling the get method with a row and column that is equal to the original row and column .",
        "snippet": "void function ( RowHeaderType arg0 , ColumnHeaderType arg1 , ValueType arg2 ) { concodeclass_rows . get ( arg0 ) . put ( arg1 , arg2 ) ; }"
    },
    {
        "question_id": 1145,
        "intent": "Set the list of accepted signature algorithms . A request can contain a wst : SignatureAlgorithm uri to use to sign an issued token . The algorithm specified must be contained in this list . The default algorithms are RSA-SHA1 .",
        "snippet": "void function ( List < String > arg0 ) { this . concodeclass_acceptedSignatureAlgorithms = arg0 ; }"
    },
    {
        "question_id": 1146,
        "intent": "Test of setResponseString method , of class LogEntryRequest .",
        "snippet": "void function ( ) { System . out . println ( \"srini_string\" ) ; String loc0 = \"srini_string\" ; concodeclass_instance . setResponseString ( loc0 ) ; }"
    },
    {
        "question_id": 1147,
        "intent": "Provide explicit mappings to ReflectionServiceFactory .",
        "snippet": "Map < String , String > function ( ) { return this . concodeclass_namespaceMap ; }"
    },
    {
        "question_id": 1148,
        "intent": "Test method for net.sf.marineapi.nmea.parser.RMCParser #getMode .",
        "snippet": "void function ( ) { assertEquals ( FaaMode . AUTOMATIC , concodeclass_rmc . getMode ( ) ) ; }"
    },
    {
        "question_id": 1149,
        "intent": "Test method for net.sf.marineapi.nmea.parser.RMBParser #getSteerTo .",
        "snippet": "void function ( ) { assertEquals ( Direction . RIGHT , concodeclass_rmb . getSteerTo ( ) ) ; }"
    },
    {
        "question_id": 1150,
        "intent": "Estimates the number of output records in the index selection , which is the same as the number of search key values for the index .",
        "snippet": "int function ( ) { return concodeclass_ii . recordsOutput ( ) ; }"
    },
    {
        "question_id": 1151,
        "intent": "Get the Msg value .",
        "snippet": "String function ( ) { return concodeclass_msg ; }"
    },
    {
        "question_id": 1152,
        "intent": "Return the priority of the command .",
        "snippet": "int function ( ) { return concodeclass_priority ; }"
    },
    {
        "question_id": 1153,
        "intent": "Add a new declaration to the current scope using a unique prefix and return the prefix . This is useful when one just wants to add a decl and does n't want to have to deal with creating unique prefixes . If the namespace name is already declared and in scope , then the previously declared prefix is returned .",
        "snippet": "String function ( String arg0 ) { String loc0 = concodefunc_getPrefix ( arg0 ) ; if ( loc0 == null ) { do { loc0 = concodeclass_NS_PREFIX_PREFIX + concodeclass_nsPrefixCount ++ ; } while ( concodefunc_getURI ( loc0 ) != null ) ; add ( loc0 , arg0 ) ; } return loc0 ; }"
    },
    {
        "question_id": 1154,
        "intent": "When adding a new substitution A - > B to the map , we need to check if there are already any existing substitutions , say C - > A , and if so , replace them appropriately , in this case with C - > B . This method allows subclasses to perform substitution on a value in the substitution map B in the example above . Subclasses may need to override this if the keys and values are not the same object .",
        "snippet": "Actual function ( Actual arg0 ) { return arg0 ; }"
    },
    {
        "question_id": 1155,
        "intent": "Create an instance of BrowseOffersResponse.Return.OfferData.OfferMedia.OfferImage.Entry.Value",
        "snippet": "BrowseOffersResponse . Return . OfferData . OfferMedia . OfferImage . Entry . Value function ( ) { return new BrowseOffersResponse . Return . OfferData . OfferMedia . OfferImage . Entry . Value ( ) ; }"
    },
    {
        "question_id": 1156,
        "intent": "Test method for net.sf.marineapi.nmea.parser.RTEParser #setSentenceIndex int .",
        "snippet": "void function ( ) { try { concodeclass_rte . setSentenceIndex ( - 1 ) ; fail ( \"srini_string\" ) ; } catch ( IllegalArgumentException loc0 ) { assertTrue ( loc0 . getMessage ( ) . contains ( \"srini_string\" ) ) ; } catch ( Exception loc0 ) { fail ( loc0 . getMessage ( ) ) ; } }"
    },
    {
        "question_id": 1157,
        "intent": "Step back .",
        "snippet": "void function ( ) { concodeclass_step -- ; if ( concodeclass_step < 0 ) concodeclass_step = 0 ; concodefunc_undoAction ( concodeclass_step ) ; if ( concodeclass_item != null ) concodeclass_item . changed ( ) ; }"
    },
    {
        "question_id": 1158,
        "intent": "Call MotionEvent #getX int . If running on a pre - @android . os.Build.VERSION _ CODES #HONEYCOMB device , IndexOutOfBoundsException is thrown .",
        "snippet": "float function ( MotionEvent arg0 , int arg1 ) { return concodeclass_IMPL . getX ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 1159,
        "intent": "Gets committed bytes for this dir . This includes all blocks , locked , pinned , committed etc. .",
        "snippet": "long function ( ) { return concodeclass_mDir . getCommittedBytes ( ) ; }"
    },
    {
        "question_id": 1160,
        "intent": "Tests conversion to thrift representation .",
        "snippet": "void function ( ) { long loc0 = new Random ( ) . nextLong ( ) ; CompleteFileOptions loc1 = CompleteFileOptions . defaults ( ) ; loc1 . setUfsLength ( loc0 ) ; CompleteFileTOptions loc2 = loc1 . toThrift ( ) ; Assert . assertEquals ( loc0 , loc2 . getUfsLength ( ) ) ; }"
    },
    {
        "question_id": 1161,
        "intent": "Return the default ClassLoader to use : typically the thread context ClassLoader , if available ; the ClassLoader that loaded the ClassUtils class will be used as fallback . Call this method if you intend to use the thread context ClassLoader in a scenario where you absolutely need a non-null ClassLoader reference : for example , for class path resource loading but not necessarily for Class.forName , which accepts a null ClassLoader reference as well .",
        "snippet": "ClassLoader function ( ) { return getClassLoader ( ClassHelper . class ) ; }"
    },
    {
        "question_id": 1162,
        "intent": "get wrapper .",
        "snippet": "Wrapper function ( Class < ? > arg0 ) { while ( ClassGenerator . isDynamicClass ( arg0 ) ) arg0 = arg0 . getSuperclass ( ) ; if ( arg0 == Object . class ) return concodeclass_OBJECT_WRAPPER ; Wrapper loc0 = concodeclass_WRAPPER_MAP . get ( arg0 ) ; if ( loc0 == null ) { loc0 = concodefunc_makeWrapper ( arg0 ) ; concodeclass_WRAPPER_MAP . put ( arg0 , loc0 ) ; } return loc0 ; }"
    },
    {
        "question_id": 1163,
        "intent": "Creates a project scan for this query .",
        "snippet": "Scan function ( ) { Scan loc0 = concodeclass_p . open ( ) ; return new ProjectScan ( loc0 , concodeclass_schema . fields ( ) ) ; }"
    },
    {
        "question_id": 1164,
        "intent": "Asigna un nuevo grado al polonomio",
        "snippet": "void function ( int arg0 ) { this . concodeclass_grado = arg0 ; }"
    },
    {
        "question_id": 1165,
        "intent": "Calls the given RestUtils.RestCallable and handles any exceptions thrown .",
        "snippet": "Response function ( RestUtils . RestCallable < T > arg0 ) { try { return concodefunc_createResponse ( arg0 . call ( ) ) ; } catch ( Exception loc0 ) { concodeclass_LOG . error ( \"srini_string\" , loc0 ) ; return concodefunc_createErrorResponse ( loc0 . getMessage ( ) ) ; } }"
    },
    {
        "question_id": 1166,
        "intent": "Test method for net.sf.marineapi.nmea.util.Date #setYear int .",
        "snippet": "void function ( ) { try { concodeclass_instance . setYear ( 10000 ) ; fail ( \"srini_string\" ) ; } catch ( IllegalArgumentException loc1 ) { } }"
    },
    {
        "question_id": 1167,
        "intent": "Builds the qualified name of a constructor declaration .",
        "snippet": "QualifiedName function ( ASTConstructorDeclaration arg0 ) { ASTClassOrInterfaceDeclaration loc0 = arg0 . getFirstParentOfType ( ASTClassOrInterfaceDeclaration . class ) ; return makeOperationOf ( loc0 . getQualifiedName ( ) , loc0 . getImage ( ) , arg0 . getFirstDescendantOfType ( ASTFormalParameters . class ) ) ; }"
    },
    {
        "question_id": 1168,
        "intent": "Unset Application management service implementation",
        "snippet": "void function ( ApplicationManagementService arg0 ) { if ( concodeclass_log . isDebugEnabled ( ) ) { concodeclass_log . debug ( \"srini_string\" ) ; } OAuth2ServiceComponentHolder . setApplicationMgtService ( null ) ; }"
    },
    {
        "question_id": 1169,
        "intent": "Get a List of Strings that corresponds to the subject regular expression constraints from a JAXB CertificateConstraintsType",
        "snippet": "List < String > function ( CertificateConstraintsType arg0 ) { if ( arg0 != null && arg0 . isSetSubjectDNConstraints ( ) ) { DNConstraintsType loc0 = arg0 . getSubjectDNConstraints ( ) ; return loc0 . getRegularExpression ( ) ; } return java . util . Collections . emptyList ( ) ; }"
    },
    {
        "question_id": 1170,
        "intent": "Test method for NotificationController #deregisterUserSession ServerSession , ServerMessage Verifies that NullPointerException is thrown when ServerSession is null .",
        "snippet": "void function ( ) { concodeclass_notificationController . deregisterUserSession ( null , concodeclass_mockServerMessage ) ; }"
    },
    {
        "question_id": 1171,
        "intent": "Retrieves a Tiled map . tmx from the system .",
        "snippet": "TiledMap function ( String arg0 , String arg1 ) { TiledMap loc0 = null ; if ( this . concodeclass_rpgMaps != null && FileMap . resourcesToDirectory . containsKey ( arg1 ) ) { loc0 = concodeclass_game . getAssets ( ) . get ( FileMap . resourcesToDirectory . get ( arg1 ) + arg0 + \"srini_string\" , TiledMap . class ) ; } return loc0 ; }"
    },
    {
        "question_id": 1172,
        "intent": "Return true if any element in ' candidates ' is contained in ' source ' ; otherwise returns false .",
        "snippet": "boolean function ( Collection arg0 , Collection arg1 ) { if ( concodefunc_isEmpty ( arg0 ) || concodefunc_isEmpty ( arg1 ) ) { return false ; } for ( Object loc0 : arg1 ) { if ( arg0 . contains ( loc0 ) ) { return true ; } } return false ; }"
    },
    {
        "question_id": 1173,
        "intent": "Test for getLatHemisphere",
        "snippet": "void function ( ) { assertEquals ( CompassPoint . NORTH , concodeclass_instance . getLatitudeHemisphere ( ) ) ; }"
    },
    {
        "question_id": 1174,
        "intent": "Create an instance of PasswordCredentials",
        "snippet": "PasswordCredentials function ( ) { return new PasswordCredentials ( ) ; }"
    },
    {
        "question_id": 1175,
        "intent": "Verifies that two violations nodes with different beginColumn arenot equal .",
        "snippet": "void function ( ) { final ViolationNode loc0 = concodefunc_createViolationNode ( \"srini_string\" , 1 , 1 , 5 , 15 , \"srini_string\" ) ; final ViolationNode loc1 = concodefunc_createViolationNode ( \"srini_string\" , 1 , 1 , 7 , 15 , \"srini_string\" ) ; assertFalse ( \"srini_string\" , loc0 . equalsNode ( loc1 ) ) ; }"
    },
    {
        "question_id": 1176,
        "intent": "Gets the exp data unit id .",
        "snippet": "BigDecimal function ( ) { return this . concodeclass_expDataUnitId ; }"
    },
    {
        "question_id": 1177,
        "intent": "Test method for net.sf.marineapi.nmea.util.Date #equals java.lang.Object .",
        "snippet": "void function ( ) { assertTrue ( concodeclass_instance . equals ( concodeclass_instance ) ) ; }"
    },
    {
        "question_id": 1178,
        "intent": "Sets the reg pcl test result details .",
        "snippet": "void function ( List < RegPCLTestResultDetailsEntity > arg0 ) { this . concodeclass_regPclTestResultDetails = arg0 ; }"
    },
    {
        "question_id": 1179,
        "intent": "Test method for net.sf.marineapi.nmea.util.Time #setMinutes int .",
        "snippet": "void function ( ) { try { concodeclass_time . setMinutes ( 60 ) ; fail ( \"srini_string\" ) ; } catch ( IllegalArgumentException loc0 ) { } }"
    },
    {
        "question_id": 1180,
        "intent": "Get the heap min without extracting the key",
        "snippet": "T function ( ) { return concodeclass_allNodes . get ( 0 ) . key ; }"
    },
    {
        "question_id": 1181,
        "intent": "Gets a textual title for the notation suitable for use in a combo box or other such visual location .",
        "snippet": "String function ( ) { String loc0 = concodeclass_name ; if ( loc0 . equalsIgnoreCase ( \"srini_string\" ) ) { loc0 = loc0 . toUpperCase ( ) ; } if ( concodeclass_version == null || concodeclass_version . equals ( \"srini_string\" ) ) { return loc0 ; } return loc0 + \"srini_string\" + concodeclass_version ; }"
    },
    {
        "question_id": 1182,
        "intent": "Returns a TopKSelector that collects the greatest k elements added to it , relative to the natural ordering of the elements , and returns them via #topK indescending order .",
        "snippet": "TopKSelector < T > function ( int arg0 ) { return greatest ( arg0 , Ordering . natural ( ) ) ; }"
    },
    {
        "question_id": 1183,
        "intent": "Store an XKMSCacheToken in the Cache using the given key",
        "snippet": "void function ( String arg0 , XKMSCacheToken arg1 ) { concodeclass_cache . put ( new Element ( arg0 , arg1 , false ) ) ; }"
    },
    {
        "question_id": 1184,
        "intent": "Returns the values in the container packaged in a bundle .",
        "snippet": "Bundle function ( ) { return ( Bundle ) this . concodeclass_bundle . clone ( ) ; }"
    },
    {
        "question_id": 1185,
        "intent": "Gets the quality .",
        "snippet": "int function ( ) { return concodeclass_quality ; }"
    },
    {
        "question_id": 1186,
        "intent": "Get the value of album",
        "snippet": "String function ( ) { return concodeclass_album ; }"
    },
    {
        "question_id": 1187,
        "intent": "Set time zone offset hours .",
        "snippet": "void function ( int arg0 ) { if ( arg0 < - 13 || arg0 > 13 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } this . concodeclass_offsetHours = arg0 ; }"
    },
    {
        "question_id": 1188,
        "intent": "Returns an array containing all the Bitcoin nodes within the list .",
        "snippet": "InetSocketAddress [ ] function ( long arg0 , TimeUnit arg1 ) { try { return concodefunc_allPeers ( ) ; } catch ( UnknownHostException loc0 ) { throw new PeerDiscoveryException ( loc0 ) ; } }"
    },
    {
        "question_id": 1189,
        "intent": "Adds a source for the schema defintion .",
        "snippet": "void function ( Source arg0 ) { concodeclass_sources . add ( arg0 ) ; concodeclass_validator . setSchemaSources ( concodeclass_sources . toArray ( new Source [ 0 ] ) ) ; }"
    },
    {
        "question_id": 1190,
        "intent": "Note this will also set the TextureRegion with the associated pGlobalTileID of the TMXTiledMap .",
        "snippet": "void function ( final TMXTiledMap arg0 , final int arg1 ) { this . concodeclass_mGlobalTileID = arg1 ; this . concodeclass_mTextureRegion = arg0 . getTextureRegionFromGlobalTileID ( arg1 ) ; }"
    },
    {
        "question_id": 1191,
        "intent": "Ejecuta un turno para el Piloto dado .",
        "snippet": "void function ( Piloto arg0 ) { Comando loc0 = null ; try { loc0 = arg0 . proximoComando ( ) ; loc0 . ejecutar ( this . concodefunc_getPartida ( ) ) ; } catch ( Exception loc1 ) { this . concodefunc_notificarObservadoresException ( arg0 , loc0 , loc1 ) ; } }"
    },
    {
        "question_id": 1192,
        "intent": "Enables or disables the timeout entirely . This may be useful if you want to store the timeout value but wish to temporarily disable/enable timeouts . The default is for timeoutEnabled to be true but timeoutMillis to be set to 0 ie disabled . This call will reset the current progress towards the timeout .",
        "snippet": "void function ( boolean arg0 ) { this . concodeclass_timeoutEnabled = arg0 ; concodefunc_resetTimeout ( ) ; }"
    },
    {
        "question_id": 1193,
        "intent": "The value which this Transaction output holds .",
        "snippet": "Coin function ( ) { return concodeclass_value ; }"
    },
    {
        "question_id": 1194,
        "intent": "Gets the value of the items property .",
        "snippet": "Items function ( ) { return concodeclass_items ; }"
    },
    {
        "question_id": 1195,
        "intent": "This method signs requests in query-string form . It returns a URL that should be used to fetch the response . The URL returned should not be modified in any way , doing so will invalidate the signature and Amazon will reject the request .",
        "snippet": "String function ( String arg0 ) { Map < String , String > loc0 = this . concodefunc_createParameterMap ( arg0 ) ; return this . sign ( loc0 ) ; }"
    },
    {
        "question_id": 1196,
        "intent": "retrieves the underlying node",
        "snippet": "Node function ( ) { return concodeclass_node ; }"
    },
    {
        "question_id": 1197,
        "intent": "Tests that an exception is thrown when trying to validate a lock of a block via BlockLockManager #validateLock long , long , long which is not locked .",
        "snippet": "void function ( ) { long loc0 = 1 ; concodeclass_mThrown . expect ( BlockDoesNotExistException . class ) ; concodeclass_mThrown . expectMessage ( ExceptionMessage . LOCK_RECORD_NOT_FOUND_FOR_LOCK_ID . getMessage ( loc0 ) ) ; concodeclass_mLockManager . validateLock ( concodeclass_TEST_SESSION_ID , concodeclass_TEST_BLOCK_ID , loc0 ) ; }"
    },
    {
        "question_id": 1198,
        "intent": "Adds an OAuth callback url",
        "snippet": "ServiceBuilder function ( String arg0 ) { Preconditions . checkNotNull ( arg0 , \"srini_string\" ) ; this . concodeclass_callback = arg0 ; return this ; }"
    },
    {
        "question_id": 1199,
        "intent": "Autogenerates a factory mapping skeleton for the given class .",
        "snippet": "void function ( ExtensionInfo arg0 , ClassDecl arg1 ) { ClassType loc0 = arg1 . type ( ) ; EfgClassInfo loc1 = concodefunc_get ( loc0 ) ; if ( loc1 == null ) { loc1 = new EfgClassInfo ( arg0 , EfgClassInfo . State . AUTO , arg1 . position ( ) , loc0 ) ; concodeclass_factoryMappings . put ( loc0 , loc1 ) ; } loc1 . addAuto ( arg1 ) ; }"
    },
    {
        "question_id": 1200,
        "intent": "Return the task launch id for the task .",
        "snippet": "String function ( ) { return concodeclass_id ; }"
    },
    {
        "question_id": 1201,
        "intent": "Removes all of the specified ranges from this range set optional operation . This is equivalent to calling #remove on each of the ranges in other inturn .",
        "snippet": "void function ( Iterable < Range < C >> arg0 ) { for ( Range < C > loc0 : arg0 ) { concodefunc_remove ( loc0 ) ; } }"
    },
    {
        "question_id": 1202,
        "intent": "Gets the test id .",
        "snippet": "String function ( ) { return concodeclass_testId ; }"
    },
    {
        "question_id": 1203,
        "intent": "Returns whether a given state is the downloading state .",
        "snippet": "boolean function ( final MoverDState < DsT > arg0 ) { final MoverDState . VisitorAdapter < Boolean , DsT > loc0 = new MoverDState . VisitorAdapter < Boolean , DsT > ( Boolean . FALSE ) { @ Override public Boolean visitDownloading ( final Downloading < DsT > downloadingState ) { return Boolean . TRUE ; } } ; return arg0 . accept ( loc0 ) . booleanValue ( ) ; }"
    },
    {
        "question_id": 1204,
        "intent": "Creates a new Hibernate session factory .",
        "snippet": "SessionFactory function ( ) { concodeclass_LOG . debug ( \"srini_string\" ) ; final SchemaExport loc0 = new SchemaExport ( this . concodeclass_m_config ) ; if ( this . concodeclass_m_createTables ) { loc0 . create ( false , true ) ; } return this . concodeclass_m_config . buildSessionFactory ( ) ; }"
    },
    {
        "question_id": 1205,
        "intent": "Sets the uri attribute of the StylesheetInfo object",
        "snippet": "void function ( String arg0 ) { this . concodeclass_uri = arg0 ; }"
    },
    {
        "question_id": 1206,
        "intent": "Retrieves a Texture from the file system .",
        "snippet": "Texture function ( String arg0 , String arg1 ) { Texture loc0 = null ; if ( this . concodeclass_textures != null && FileMap . resourcesToDirectory . containsKey ( arg1 ) ) { loc0 = concodeclass_game . getAssets ( ) . get ( FileMap . resourcesToDirectory . get ( arg1 ) + arg0 + \"srini_string\" , Texture . class ) ; } return loc0 ; }"
    },
    {
        "question_id": 1207,
        "intent": "Has this token expired ?",
        "snippet": "boolean function ( ) { return concodefunc_getExpiration ( ) == null ? false : System . currentTimeMillis ( ) > concodefunc_getExpiration ( ) . getTime ( ) ; }"
    },
    {
        "question_id": 1208,
        "intent": "Returns the string value of the specified field . The value is obtained from whichever scan contains the field .",
        "snippet": "String function ( String arg0 ) { if ( concodeclass_s1 . hasField ( arg0 ) ) return concodeclass_s1 . getString ( arg0 ) ; else return concodeclass_s2 . getString ( arg0 ) ; }"
    },
    {
        "question_id": 1209,
        "intent": "Used to specify a different WS-Addressing namespace URI , so as to cause MAPs to be exposed i.e. encoded in externalized message with a different WS-Addressing version .",
        "snippet": "void function ( String arg0 ) { concodeclass_namespaceURI = arg0 ; }"
    },
    {
        "question_id": 1210,
        "intent": "String for the type of object used for the symbol on the parse stack .",
        "snippet": "String function ( ) { return concodeclass__stack_type ; }"
    },
    {
        "question_id": 1211,
        "intent": "Gets the path component of the AlluxioURI .",
        "snippet": "String function ( ) { return concodeclass_mUri . getPath ( ) ; }"
    },
    {
        "question_id": 1212,
        "intent": "Returns true if the block height is either not a checkpoint , or is a checkpoint and the hash matches .",
        "snippet": "boolean function ( int arg0 , Sha256Hash arg1 ) { Sha256Hash loc0 = concodeclass_checkpoints . get ( arg0 ) ; return loc0 == null || loc0 . equals ( arg1 ) ; }"
    },
    {
        "question_id": 1213,
        "intent": "Handle event from the RawRtfParser .",
        "snippet": "void function ( byte [ ] arg0 ) { concodefunc_handleEvent ( new BinaryBytesEvent ( arg0 ) ) ; }"
    },
    {
        "question_id": 1214,
        "intent": "Returns the integer value for the currentValue . If the currentValue can not be interpreted as an integer , the defaultValue is returned .",
        "snippet": "int function ( int arg0 ) { try { if ( ! StringUtils . isEmpty ( concodeclass_currentValue ) ) { return Integer . parseInt ( concodeclass_currentValue . trim ( ) ) ; } } catch ( NumberFormatException loc0 ) { } return arg0 ; }"
    },
    {
        "question_id": 1215,
        "intent": "Adds a parent node to the node .",
        "snippet": "void function ( DirectedAcyclicGraphNode < T > arg0 ) { concodeclass_mParents . add ( arg0 ) ; }"
    },
    {
        "question_id": 1216,
        "intent": "Set the HTTP Content-Type header .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_response . setContentType ( arg0 ) ; }"
    },
    {
        "question_id": 1217,
        "intent": "Gets the test id .",
        "snippet": "String function ( ) { return concodeclass_testId ; }"
    },
    {
        "question_id": 1218,
        "intent": "Set the stylesheet to use .",
        "snippet": "void function ( Source arg0 ) { concodeclass_styleSheet = arg0 ; }"
    },
    {
        "question_id": 1219,
        "intent": "generate output file",
        "snippet": "File function ( final String arg0 , final String arg1 ) { final File loc0 = new File ( Environment . getExternalStoragePublicDirectory ( arg0 ) , concodeclass_DIR_NAME ) ; Log . d ( concodeclass_TAG , \"srini_string\" + loc0 . toString ( ) ) ; loc0 . mkdirs ( ) ; if ( loc0 . canWrite ( ) ) { return new File ( loc0 , concodefunc_getDateTimeString ( ) + arg1 ) ; } return null ; }"
    },
    {
        "question_id": 1220,
        "intent": "Reads in the Response String from Server .",
        "snippet": "String function ( InputStream arg0 ) { BufferedReader loc0 = new BufferedReader ( new InputStreamReader ( arg0 ) ) ; StringBuffer loc1 = new StringBuffer ( ) ; String loc2 = loc0 . readLine ( ) ; while ( loc2 != null ) { loc1 . append ( loc2 ) ; loc1 . append ( \"srini_string\" ) ; loc2 = loc0 . readLine ( ) ; } return loc1 . toString ( ) ; }"
    },
    {
        "question_id": 1221,
        "intent": "For modules , it would be usefule to be able to remove their factories . TODO : The effect of this method is not yet tested !",
        "snippet": "void function ( PropPanelFactory arg0 ) { concodeclass_ppfactories . remove ( arg0 ) ; }"
    },
    {
        "question_id": 1222,
        "intent": "Activates interest in writing from a thread other than the selector thread .",
        "snippet": "void function ( ) { this . concodeclass_m_selectorManager . addChannelInterestLater ( this . concodeclass_m_socketChannel , SelectionKey . OP_WRITE ) ; }"
    },
    {
        "question_id": 1223,
        "intent": "Tests the WebUtils #convertMsToClockTime long method with one minute .",
        "snippet": "void function ( ) { String loc0 = WebUtils . convertMsToClockTime ( TimeUnit . MINUTES . toMillis ( 1 ) ) ; Assert . assertEquals ( \"srini_string\" , loc0 ) ; }"
    },
    {
        "question_id": 1224,
        "intent": "Add a terminal",
        "snippet": "void function ( TerminalDevice arg0 ) { concodeclass_repository . save ( arg0 ) ; }"
    },
    {
        "question_id": 1225,
        "intent": "Returns if result is not valid",
        "snippet": "boolean function ( ) { return ( this . concodeclass_errorLevel > 0 ) ; }"
    },
    {
        "question_id": 1226,
        "intent": "Set up .",
        "snippet": "void function ( ) { concodeclass_mClient = Mockito . mock ( OSSClient . class ) ; concodeclass_mOSSUnderFileSystem = new OSSUnderFileSystem ( new AlluxioURI ( \"srini_string\" ) , concodeclass_mClient , concodeclass_BUCKET_NAME , concodeclass_BUCKET_PREFIX ) ; }"
    },
    {
        "question_id": 1227,
        "intent": "Closes the page by unpinning its buffer .",
        "snippet": "void function ( ) { if ( concodeclass_currentblk != null ) concodeclass_tx . unpin ( concodeclass_currentblk ) ; concodeclass_currentblk = null ; }"
    },
    {
        "question_id": 1228,
        "intent": "Accessor for the From property .",
        "snippet": "EndpointReferenceType function ( ) { return concodeclass_from ; }"
    },
    {
        "question_id": 1229,
        "intent": "Convert to a string .",
        "snippet": "String function ( ) { String loc0 ; loc0 = \"srini_string\" + concodefunc_on_symbol ( ) . name ( ) + \"srini_string\" ; loc0 += concodeclass__to_state . index ( ) ; loc0 += \"srini_string\" ; return loc0 ; }"
    },
    {
        "question_id": 1230,
        "intent": "Accesses a float attribute from a tag name and an attribute name within the element identified by that tag .",
        "snippet": "String function ( final Element arg0 , final String arg1 , final String arg2 ) { final NodeList loc0 = arg0 . getElementsByTagName ( arg1 ) ; final Element loc1 = ( Element ) loc0 . item ( 0 ) ; if ( loc1 == null ) { return StringUtils . EMPTY ; } return loc1 . getAttribute ( arg2 ) ; }"
    },
    {
        "question_id": 1231,
        "intent": "Get the current classifier .",
        "snippet": "Object function ( ) { return concodeclass_mClassifier ; }"
    },
    {
        "question_id": 1232,
        "intent": "Sets the remote URL .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_url = arg0 ; }"
    },
    {
        "question_id": 1233,
        "intent": "Get the length of the text in the element .",
        "snippet": "int function ( ) { return concodeclass_text . length ( ) ; }"
    },
    {
        "question_id": 1234,
        "intent": "Launches any services that should be launched only if this peer is on the open Internet , such as running a TURN server or a SIP proxy .",
        "snippet": "void function ( ) { concodeclass_m_sipProxy . start ( ) ; concodeclass_m_turnServer . start ( ) ; try { synchronized ( this ) { wait ( ) ; } } catch ( InterruptedException loc0 ) { loc0 . printStackTrace ( ) ; } }"
    },
    {
        "question_id": 1235,
        "intent": "Captures SshDataReceivedEvent",
        "snippet": "void function ( SshDataReceivedEvent arg0 ) { System . out . println ( \"srini_string\" ) ; System . out . print ( arg0 . getData ( ) ) ; }"
    },
    {
        "question_id": 1236,
        "intent": "Returns the count to which the specified key is mapped in this frequency counter , or 0 if the map contains no mapping for this key .",
        "snippet": "Integer function ( T arg0 ) { Integer loc0 = concodeclass_counter . get ( arg0 ) ; if ( loc0 == null ) { return 0 ; } return loc0 ; }"
    },
    {
        "question_id": 1237,
        "intent": "Not required",
        "snippet": "GenericJSONBuilder function ( double arg0 , double arg1 ) { concodeclass_lng = arg0 ; concodeclass_lat = arg1 ; return this ; }"
    },
    {
        "question_id": 1238,
        "intent": "Returns the location one unit above this location .",
        "snippet": "XYLocation function ( ) { return concodefunc_north ( ) ; }"
    },
    {
        "question_id": 1239,
        "intent": "Devuelve los roles aosciados a este usuario .",
        "snippet": "Collection < GrantedAuthority > function ( ) { return this . concodeclass_grantedAuthorities ; }"
    },
    {
        "question_id": 1240,
        "intent": "Sets the value of the vector to use in the start of the iterations .",
        "snippet": "void function ( DenseMatrix64F arg0 ) { this . concodeclass_seed = arg0 ; }"
    },
    {
        "question_id": 1241,
        "intent": "Create an instance of GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia.OfferImage.Entry.Value.Item",
        "snippet": "GetOfferDetailsResponse . Return . DetailOfferData . OfferMedia . OfferImage . Entry . Value . Item function ( ) { return new GetOfferDetailsResponse . Return . DetailOfferData . OfferMedia . OfferImage . Entry . Value . Item ( ) ; }"
    },
    {
        "question_id": 1242,
        "intent": "Find a type object by name .",
        "snippet": "Named function ( String arg0 ) { try { return concodeclass_head . find ( arg0 ) ; } catch ( NoClassException loc0 ) { return concodeclass_tail . find ( arg0 ) ; } }"
    },
    {
        "question_id": 1243,
        "intent": "Setter for the denied extensions of a file type . The allowed extensions will be cleared . If extensionsList is null , denied extensions are kept untouched .",
        "snippet": "void function ( final ResourceTypeHandler arg0 , final String arg1 ) { if ( arg1 != null ) { concodeclass_extensionsDenied . put ( arg0 , Utils . getSet ( arg1 ) ) ; concodeclass_extensionsAllowed . get ( arg0 ) . clear ( ) ; } }"
    },
    {
        "question_id": 1244,
        "intent": "Add the given identifier to the cache . It will be cached for a default amount of time .",
        "snippet": "void function ( String arg0 ) { putId ( arg0 , concodeclass_ttl ) ; }"
    },
    {
        "question_id": 1245,
        "intent": "Makes a CSP consisting of binary constraints arc-consistent .",
        "snippet": "DomainRestoreInfo function ( CSP arg0 ) { DomainRestoreInfo loc0 = new DomainRestoreInfo ( ) ; FIFOQueue < Variable > loc1 = new FIFOQueue < Variable > ( ) ; for ( Variable loc2 : arg0 . getVariables ( ) ) loc1 . add ( loc2 ) ; reduceDomains ( loc1 , arg0 , loc0 ) ; return loc0 . compactify ( ) ; }"
    },
    {
        "question_id": 1246,
        "intent": "Gets the position altitude from mean sea level . Notice that most sentences with position do n't provide this value . When missing , the default value in Position is 0.0 .",
        "snippet": "double function ( ) { return concodeclass_altitude ; }"
    },
    {
        "question_id": 1247,
        "intent": "Returns result value as array .",
        "snippet": "List < Object > function ( int arg0 ) { Object loc0 = concodeclass_values . get ( arg0 ) ; if ( loc0 instanceof List ) { return ( List ) loc0 ; } else { throw new IllegalStateException ( ) ; } }"
    },
    {
        "question_id": 1248,
        "intent": "Test whether the device has an active pen",
        "snippet": "boolean function ( ) { Assert . assertNotNull ( concodeclass_instance ) ; return concodeclass_instance . mHasPenDigitizer ; }"
    },
    {
        "question_id": 1249,
        "intent": "write boolean",
        "snippet": "void function ( boolean arg0 , Parcel arg1 ) { arg1 . writeInt ( arg0 ? 1 : 0 ) ; }"
    },
    {
        "question_id": 1250,
        "intent": "Unregister an endpoint resolver .",
        "snippet": "void function ( EndpointResolver arg0 ) { concodeclass_resolvers . remove ( arg0 ) ; }"
    },
    {
        "question_id": 1251,
        "intent": "Returns a PrintStream for stderr in the Debugger 's internalConsole window .",
        "snippet": "PrintStream function ( ) { return concodeclass_debugGui . getConsole ( ) . getErr ( ) ; }"
    },
    {
        "question_id": 1252,
        "intent": "The number of previous blocks to look at when calculating the next Block 's difficulty",
        "snippet": "int function ( ) { return concodefunc_getInterval ( ) - 1 ; }"
    },
    {
        "question_id": 1253,
        "intent": "Create an instance of ComplexNode",
        "snippet": "ComplexNode function ( ) { return new ComplexNode ( ) ; }"
    },
    {
        "question_id": 1254,
        "intent": "Sets the genes in the ROI",
        "snippet": "void function ( ArrayList < CanonicalGene > arg0 ) { this . concodeclass_genes_in_ROI = arg0 ; }"
    },
    {
        "question_id": 1255,
        "intent": "Runs the given Callable in the JavaFX thread , waiting for it to complete before returning . Also attempts to wait for any other JavaFX events that may have been queued in the Callable to complete . If any Exception is thrown during execution of the Callable , that exception will be re-thrown from invokeAndWait .",
        "snippet": "void function ( final Callable < ? > arg0 , int arg1 ) { Future < ? > loc0 = WaitForAsyncUtils . asyncFx ( arg0 ) ; WaitForAsyncUtils . waitFor ( arg1 , TimeUnit . SECONDS , loc0 ) ; WaitForAsyncUtils . waitForFxEvents ( ) ; }"
    },
    {
        "question_id": 1256,
        "intent": "Append a simple string .",
        "snippet": "void function ( String arg0 ) { concodeclass_log . add ( arg0 ) ; }"
    },
    {
        "question_id": 1257,
        "intent": "Compute a hash code .",
        "snippet": "int function ( ) { return 0xCafe123 ; }"
    },
    {
        "question_id": 1258,
        "intent": "Accessor for the tie breaker bytes .",
        "snippet": "byte [ ] function ( ) { return concodeclass_m_byteArray ; }"
    },
    {
        "question_id": 1259,
        "intent": "Sets the file count .",
        "snippet": "void function ( BigDecimal arg0 ) { this . concodeclass_fileCount = arg0 ; }"
    },
    {
        "question_id": 1260,
        "intent": "An integer between 0 and 100 , shows percent done . The current ArgoUML user interface shows different PostIt note icons for 0 , 1-25 , 26-50 . 51-75 , and 76-100 .",
        "snippet": "int function ( ) { return concodeclass_step * 100 / concodefunc_getNumSteps ( ) ; }"
    },
    {
        "question_id": 1261,
        "intent": "Create an instance of BrowseOffersResponse.Return.OfferData.Geo.Region",
        "snippet": "BrowseOffersResponse . Return . OfferData . Geo . Region function ( ) { return new BrowseOffersResponse . Return . OfferData . Geo . Region ( ) ; }"
    },
    {
        "question_id": 1262,
        "intent": "Obtains the default port .",
        "snippet": "int function ( ) { return concodeclass_defaultPort ; }"
    },
    {
        "question_id": 1263,
        "intent": "Prints the inventory list for debugging purposes .",
        "snippet": "void function ( ) { for ( Item loc0 : concodeclass_invMap . keySet ( ) ) { System . out . println ( loc0 . getUnlocalizedName ( ) + \"srini_string\" + concodeclass_invMap . get ( loc0 ) ) ; } }"
    },
    {
        "question_id": 1264,
        "intent": "set length",
        "snippet": "void function ( long arg0 ) { this . concodeclass_length = new FileSizeComparable ( arg0 ) ; }"
    },
    {
        "question_id": 1265,
        "intent": "Get the default LanguageVersion for the first Language of a given source file .",
        "snippet": "LanguageVersion function ( File arg0 ) { return getDefaultLanguageVersionForFile ( arg0 . getName ( ) ) ; }"
    },
    {
        "question_id": 1266,
        "intent": "Test of getImage method , of class Device .",
        "snippet": "void function ( ) { System . out . println ( \"srini_string\" ) ; Device loc0 = null ; Image loc1 = null ; Image loc2 = loc0 . getImage ( ) ; assertEquals ( loc1 , loc2 ) ; fail ( \"srini_string\" ) ; }"
    },
    {
        "question_id": 1267,
        "intent": "Checkpoint records have no associated transaction , and so the method returns a `` dummy '' , negative txid .",
        "snippet": "int function ( ) { return - 1 ; }"
    },
    {
        "question_id": 1268,
        "intent": "Gets a Builder configured as this object .",
        "snippet": "Builder function ( ) { return new Builder ( ) . fromNetworkSegment ( this ) ; }"
    },
    {
        "question_id": 1269,
        "intent": "Test of setNumberRequests method , of class LogEntryInterval .",
        "snippet": "void function ( ) { System . out . println ( \"srini_string\" ) ; int loc0 = 0 ; LogEntryInterval loc1 = new LogEntryInterval ( ) ; loc1 . setNumberRequests ( loc0 ) ; }"
    },
    {
        "question_id": 1270,
        "intent": "Return a classpath resource as a reader . It is assumed that the resource is a text resource .",
        "snippet": "Reader function ( String arg0 , int arg1 ) { return new InputStreamReader ( concodefunc_getResourceAsStream ( arg0 , arg1 ) ) ; }"
    },
    {
        "question_id": 1271,
        "intent": "Tests the DataNettyBuffer #getReadOnlyByteBuffer method .",
        "snippet": "void function ( ) { DataNettyBuffer loc0 = new DataNettyBuffer ( concodeclass_mBuffer , concodeclass_LENGTH ) ; ByteBuffer loc1 = loc0 . getReadOnlyByteBuffer ( ) ; Assert . assertTrue ( loc1 . isReadOnly ( ) ) ; Assert . assertEquals ( concodeclass_mBuffer . nioBuffer ( ) , loc1 ) ; }"
    },
    {
        "question_id": 1272,
        "intent": "Gets the visited attribute of the NaiveUserAgent object",
        "snippet": "boolean function ( String arg0 ) { return false ; }"
    },
    {
        "question_id": 1273,
        "intent": "Serializes an object into a Json object .",
        "snippet": "void function ( Object arg0 , Json arg1 , ArrayList < String > arg2 ) { Field [ ] loc0 = arg0 . getClass ( ) . getFields ( ) ; for ( Field loc1 : loc0 ) { if ( ! arg2 . contains ( loc1 . getName ( ) ) ) { System . out . println ( \"srini_string\" + loc1 . getName ( ) ) ; arg1 . writeValue ( loc1 . getName ( ) , loc1 . get ( arg0 ) ) ; } } }"
    },
    {
        "question_id": 1274,
        "intent": "get a read-only list containing all metrics",
        "snippet": "List < MeanValue > function ( ) { return Collections . unmodifiableList ( concodeclass_metrics ) ; }"
    },
    {
        "question_id": 1275,
        "intent": "Test of createOverlaidChart method , of class ChartObject .",
        "snippet": "void function ( ) { AttackModel loc0 = new AttackModel ( ) ; ChartObject loc1 = new ChartObject ( loc0 ) ; JFreeChart loc2 = loc1 . createOverlaidChart ( ) ; assertNotNull ( \"srini_string\" , loc2 ) ; }"
    },
    {
        "question_id": 1276,
        "intent": "Determines the number of consecutive characters that are encodable using numeric compaction .",
        "snippet": "int function ( CharSequence arg0 , int arg1 ) { int loc0 = 0 ; int loc1 = arg0 . length ( ) ; int loc2 = arg1 ; if ( loc2 < loc1 ) { char loc3 = arg0 . charAt ( loc2 ) ; while ( concodefunc_isDigit ( loc3 ) && loc2 < loc1 ) { loc0 ++ ; loc2 ++ ; if ( loc2 < loc1 ) { loc3 = arg0 . charAt ( loc2 ) ; } } } return loc0 ; }"
    },
    {
        "question_id": 1277,
        "intent": "Returns the x-coordinate of the move .",
        "snippet": "int function ( ) { return concodeclass_x ; }"
    },
    {
        "question_id": 1278,
        "intent": "Sets the test id .",
        "snippet": "void function ( Long arg0 ) { this . concodeclass_testId = arg0 ; }"
    },
    {
        "question_id": 1279,
        "intent": "Initializes an AccessibilityEvent with information about thethe host View which is the event source . The default implementation behaves as ViewCompat #onInitializeAccessibilityEvent View v , AccessibilityEvent event ViewCompat #onInitalizeAccessibilityEvent View v , AccessibilityEvent event forthe case of no accessibility delegate been set .",
        "snippet": "void function ( View arg0 , AccessibilityEvent arg1 ) { concodeclass_IMPL . onInitializeAccessibilityEvent ( concodeclass_DEFAULT_DELEGATE , arg0 , arg1 ) ; }"
    },
    {
        "question_id": 1280,
        "intent": "Decode an integer from the format string , return zero if not starting on a digit . \\ param advance whether to move the stream position .",
        "snippet": "int function ( boolean arg0 ) { int loc0 = 0 ; int loc1 ; for ( loc1 = 0 ; Character . isDigit ( concodeclass_format . charAt ( concodeclass_formatOff + loc1 ) ) ; loc1 ++ ) { loc0 *= 10 ; loc0 += Character . digit ( concodeclass_format . charAt ( concodeclass_formatOff + loc1 ) , 10 ) ; } if ( arg0 ) { concodeclass_formatOff += loc1 ; } return loc0 ; }"
    },
    {
        "question_id": 1281,
        "intent": "Gets the act value .",
        "snippet": "String function ( ) { return this . concodeclass_actValue ; }"
    },
    {
        "question_id": 1282,
        "intent": "get user profile provider",
        "snippet": "EaseUserProfileProvider function ( ) { return concodeclass_userProvider ; }"
    },
    {
        "question_id": 1283,
        "intent": "Sets the value of the internal integer .",
        "snippet": "void function ( int arg0 ) { this . concodeclass_value = arg0 ; }"
    },
    {
        "question_id": 1284,
        "intent": "Test method for NotificationController #handleEvent org.osgi.service.event.Event Verifies that IllegalArgumentException is thrown when Event 's Notification #NOTIFICATION_KEY_TITLE property is null .",
        "snippet": "void function ( ) { concodeclass_testEventProperties . put ( Notification . NOTIFICATION_KEY_TITLE , null ) ; concodeclass_notificationController . handleEvent ( new Event ( Notification . NOTIFICATION_TOPIC_BROADCAST , concodeclass_testEventProperties ) ) ; }"
    },
    {
        "question_id": 1285,
        "intent": "Gets the value of the moduleName property .",
        "snippet": "String function ( ) { return concodeclass_moduleName ; }"
    },
    {
        "question_id": 1286,
        "intent": "Returns true if type is one of the nine primitive-wrapper types , such as Integer .",
        "snippet": "boolean function ( Class < ? > arg0 ) { return concodeclass_WRAPPER_TO_PRIMITIVE_TYPE . containsKey ( checkNotNull ( arg0 ) ) ; }"
    },
    {
        "question_id": 1287,
        "intent": "Normalizes the matrix such that the Frobenius norm is equal to one .",
        "snippet": "void function ( DenseMatrix64F arg0 ) { double loc0 = concodefunc_normF ( arg0 ) ; if ( loc0 == 0 ) return ; int loc1 = arg0 . getNumElements ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { arg0 . div ( loc2 , loc0 ) ; } }"
    },
    {
        "question_id": 1288,
        "intent": "function to print tree",
        "snippet": "String function ( ) { concodeclass_al = new ArrayList < String > ( ) ; concodefunc_traverse ( concodeclass_root , \"srini_string\" ) ; return \"srini_string\" + concodeclass_al ; }"
    },
    {
        "question_id": 1289,
        "intent": "Returns the exception call-back listener .",
        "snippet": "ExceptionListener function ( ) { return concodeclass_exceptionListener ; }"
    },
    {
        "question_id": 1290,
        "intent": "Sets hostname .",
        "snippet": "void function ( ) { concodeclass_mHostname = NetworkAddressUtils . getLocalHostName ( 100 ) ; }"
    },
    {
        "question_id": 1291,
        "intent": "Execution of the card action .",
        "snippet": "void function ( BattlePlatform arg0 , Image arg1 , float arg2 ) { }"
    },
    {
        "question_id": 1292,
        "intent": "Return a map of attributes for the launched task . The specific keys and values returned are dependent on the runtime where the task has been launched . This may include extra information such as execution location or specific error messages in the case of failure .",
        "snippet": "Map < String , String > function ( ) { return this . concodeclass_attributes ; }"
    },
    {
        "question_id": 1293,
        "intent": "Gets the feed id .",
        "snippet": "BigDecimal function ( ) { return this . concodeclass_feedId ; }"
    },
    {
        "question_id": 1294,
        "intent": "Returns an eigenvalue as a complex number . For symmetric matrices the returned eigenvalue will always be a real number , which means the imaginary component will be equal to zero . NOTE : The order of the eigenvalues is dependent upon the decomposition algorithm used . This means that they may or may not be ordered by magnitude . For example the QR algorithm will returns results that are partially ordered by magnitude , but this behavior should not be relied upon .",
        "snippet": "Complex64F function ( int arg0 ) { return concodeclass_eig . getEigenvalue ( arg0 ) ; }"
    },
    {
        "question_id": 1295,
        "intent": "Return a workflow store instance with a fresh transaction . The coordinator store has to be committed and then closed to commit changes , if only close it rolls back .",
        "snippet": "CoordinatorStore function ( ) { try { return new CoordinatorStore ( false ) ; } catch ( Exception loc0 ) { throw new StoreException ( ErrorCode . E0600 , loc0 . getMessage ( ) , loc0 ) ; } }"
    },
    {
        "question_id": 1296,
        "intent": "The index of the output in transaction to which we refer",
        "snippet": "long function ( ) { return concodeclass_index ; }"
    },
    {
        "question_id": 1297,
        "intent": "Creates a script of the form OP_RETURN data . This feature allows you to attach a small piece of data like a hash of something stored elsewhere to a zero valued output which can never be spent and thus does not pollute the ledger .",
        "snippet": "Script function ( byte [ ] arg0 ) { checkArgument ( arg0 . length <= 40 ) ; return new ScriptBuilder ( ) . op ( OP_RETURN ) . arg0 ( arg0 ) . build ( ) ; }"
    },
    {
        "question_id": 1298,
        "intent": "Return the public interface for scheduler service .",
        "snippet": "Class < ? extends Service > function ( ) { return SchedulerService . class ; }"
    },
    {
        "question_id": 1299,
        "intent": "Deletes an Identity Provider from a given tenant",
        "snippet": "void function ( String arg0 ) { try { concodeclass_idPMgtStub . deleteIdP ( arg0 ) ; } catch ( Exception loc0 ) { concodeclass_log . error ( \"srini_string\" , loc0 ) ; throw new Exception ( \"srini_string\" ) ; } }"
    },
    {
        "question_id": 1300,
        "intent": "Returns whether the debugger GUI frame is visible .",
        "snippet": "boolean function ( ) { return concodeclass_debugGui . isVisible ( ) ; }"
    },
    {
        "question_id": 1301,
        "intent": "Converts a String to a DOM . Sometimes , you might prefer DOM to SOAPElement . No namespace prefixes are used by default .",
        "snippet": "Document function ( String arg0 ) { return stringToDom ( arg0 , false ) ; }"
    },
    {
        "question_id": 1302,
        "intent": "Returns the int value that , when treated as unsigned , is nearest in value to value .",
        "snippet": "int function ( long arg0 ) { if ( arg0 <= 0 ) { return 0 ; } else if ( arg0 >= ( 1L << 32 ) ) { return - 1 ; } else { return ( int ) arg0 ; } }"
    },
    {
        "question_id": 1303,
        "intent": "Returns a string representation of the enumeration value .",
        "snippet": "java . lang . String function ( ) { return concodeclass_literalName ; }"
    },
    {
        "question_id": 1304,
        "intent": "Checks the behavior when the issuer is not known .",
        "snippet": "void function ( ) { ServerConfiguration loc0 = concodeclass_service . getServerConfiguration ( \"srini_string\" ) ; assertThat ( loc0 , is ( nullValue ( ) ) ) ; }"
    },
    {
        "question_id": 1305,
        "intent": "Updates a given Identity Provider information",
        "snippet": "void function ( String arg0 , IdentityProvider arg1 ) { try { concodeclass_idPMgtStub . updateIdP ( arg0 , arg1 ) ; } catch ( Exception loc0 ) { concodeclass_log . error ( \"srini_string\" , loc0 ) ; throw new Exception ( loc0 . getMessage ( ) ) ; } }"
    },
    {
        "question_id": 1306,
        "intent": "Obtains the value of NIOReactorPNames #INTEREST_OPS_QUEUEING parameter.If not set , defaults to false .",
        "snippet": "boolean function ( final HttpParams arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return arg0 . getBooleanParameter ( INTEREST_OPS_QUEUEING , false ) ; }"
    },
    {
        "question_id": 1307,
        "intent": "Set policy combining algorithm globally",
        "snippet": "void function ( String arg0 ) { try { concodeclass_stub . setGlobalPolicyAlgorithm ( arg0 ) ; } catch ( Exception loc0 ) { concodefunc_handleException ( loc0 . getMessage ( ) , loc0 ) ; } }"
    },
    {
        "question_id": 1308,
        "intent": "The header bytes that identify the start of a packet on this network .",
        "snippet": "long function ( ) { return concodeclass_packetMagic ; }"
    },
    {
        "question_id": 1309,
        "intent": "Returns a map of strings from the current value .",
        "snippet": "Map < String , String > function ( ) { Map < String , String > loc0 = new LinkedHashMap < String , String > ( ) ; for ( String loc1 : concodefunc_getStrings ( ) ) { String [ ] loc2 = loc1 . split ( \"srini_string\" , 2 ) ; String loc3 = loc2 [ 0 ] ; String loc4 = loc2 [ 1 ] ; loc0 . put ( loc3 , loc4 ) ; } return loc0 ; }"
    },
    {
        "question_id": 1310,
        "intent": "Always returns the configured issuer URL",
        "snippet": "IssuerServiceResponse function ( HttpServletRequest arg0 ) { return new IssuerServiceResponse ( getIssuer ( ) , null , null ) ; }"
    },
    {
        "question_id": 1311,
        "intent": "Crete new Delegator instance . The default implementation calls this.getClass . newInstance .",
        "snippet": "Delegator function ( ) { try { return this . getClass ( ) . newInstance ( ) ; } catch ( Exception loc0 ) { throw Context . throwAsScriptRuntimeEx ( loc0 ) ; } }"
    },
    {
        "question_id": 1312,
        "intent": "Return the generated public value for this key agreement operation as a BigInteger .",
        "snippet": "BigInteger function ( ) { DHPublicKey loc0 = ( DHPublicKey ) concodeclass_keyPair . getPublic ( ) ; return loc0 . getY ( ) ; }"
    },
    {
        "question_id": 1313,
        "intent": "Gets Entrez Gene ID for Gene A.",
        "snippet": "long function ( ) { return concodeclass_geneA ; }"
    },
    {
        "question_id": 1314,
        "intent": "Returns an html version of the commit message with any global or repository-specific regular expression substitution applied . This method assumes the commit message is plain text .",
        "snippet": "String function ( Repository arg0 , String arg1 , String arg2 ) { String loc0 = StringUtils . escapeForHtml ( arg2 , false ) ; loc0 = concodefunc_processTextRegex ( arg0 , arg1 , loc0 ) ; return StringUtils . breakLinesForHtml ( loc0 ) ; }"
    },
    {
        "question_id": 1315,
        "intent": "Returns the travel distance between the two specified locations if they are linked by a connection and null otherwise .",
        "snippet": "Double function ( String arg0 , String arg1 ) { return concodeclass_links . get ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 1316,
        "intent": "Translate a set of strings to a JSON array , optionally preserving the empty array . Otherwise default empty array is returned as null .",
        "snippet": "JsonElement function ( Set < String > arg0 , boolean arg1 ) { if ( ! arg1 && arg0 != null && arg0 . isEmpty ( ) ) { return JsonNull . INSTANCE ; } else { return concodeclass_gson . toJsonTree ( arg0 , new TypeToken < Set < String >> ( ) { } . getType ( ) ) ; } }"
    },
    {
        "question_id": 1317,
        "intent": "Show keyboard",
        "snippet": "void function ( Context arg0 , View arg1 ) { if ( arg1 == null ) return ; InputMethodManager loc0 = ( InputMethodManager ) arg0 . getSystemService ( Context . INPUT_METHOD_SERVICE ) ; loc0 . showSoftInput ( arg1 , 0 ) ; }"
    },
    {
        "question_id": 1318,
        "intent": "Gets the receipt date .",
        "snippet": "Timestamp function ( ) { return this . concodeclass_receiptDate ; }"
    },
    {
        "question_id": 1319,
        "intent": "Gets the conduit selector",
        "snippet": "ConduitSelector function ( ) { return concodeclass_conduitSelector ; }"
    },
    {
        "question_id": 1320,
        "intent": "Factory method for creating a new SpringChain with the provided SpringConfig .",
        "snippet": "SpringChain function ( int arg0 , int arg1 , int arg2 , int arg3 ) { return new SpringChain ( arg0 , arg1 , arg2 , arg3 ) ; }"
    },
    {
        "question_id": 1321,
        "intent": "Not required",
        "snippet": "GenericJSONBuilder function ( int arg0 ) { concodeclass_loc_radius = arg0 ; return this ; }"
    },
    {
        "question_id": 1322,
        "intent": "Returns a Map representing the substitution i.e. a set of variable/term pairs or null which is used to indicate a failure to unify .",
        "snippet": "Map < Variable , Term > function ( FOLNode arg0 , FOLNode arg1 ) { return unify ( arg0 , arg1 , new LinkedHashMap < Variable , Term > ( ) ) ; }"
    },
    {
        "question_id": 1323,
        "intent": "Create hash for a key , use default algorithm SHA-256",
        "snippet": "String function ( @ Nonnull PublicKey arg0 ) { return getKeyHash ( arg0 , \"srini_string\" ) ; }"
    },
    {
        "question_id": 1324,
        "intent": "Retrieves the TiledMap and the current layer using the mapName and tileLayer attributes .",
        "snippet": "void function ( ) { this . concodeclass_map = ShadowStruggles . getInstance ( ) . getTiledMap ( concodeclass_mapName ) ; this . concodeclass_tileLayer = ( TiledMapTileLayer ) concodeclass_map . getLayers ( ) . get ( concodeclass_tileLayerString ) ; }"
    },
    {
        "question_id": 1325,
        "intent": "Creates a DOM Document from a TraX Source . If the source is a DOMSource holding a DocumentNode , this one will be returned . Otherwise #toInputSource and a namespace aware DocumentBuilder createdby the default DocumentBuilderFactory will be used to read the source . This may involve an XSLT identity transform in toInputSource .",
        "snippet": "Document function ( Source arg0 ) { Document loc0 = concodefunc_tryExtractDocFromDOMSource ( arg0 ) ; return loc0 != null ? loc0 : toDocument ( arg0 , DocumentBuilderFactory . newInstance ( ) ) ; }"
    },
    {
        "question_id": 1326,
        "intent": "Returns a string that is used to start a subgraph .",
        "snippet": "String function ( String arg0 ) { return \"srini_string\" + arg0 + \"srini_string\" ; }"
    },
    {
        "question_id": 1327,
        "intent": "Implements BundleActivator.stop . Does nothing since the framework will automatically unregister any registered services .",
        "snippet": "void function ( BundleContext arg0 ) { for ( AutoSIMConnectionConfig loc0 : concodeclass_config . connections ) { concodeclass_environments . deregisterConnectionFactory ( loc0 . name ) ; concodeclass_factories . remove ( loc0 . name ) ; } }"
    },
    {
        "question_id": 1328,
        "intent": "Remove a plugin from this container by its unique name",
        "snippet": "boolean function ( String arg0 ) { AbstractPlugin loc0 = concodefunc_getByName ( arg0 ) ; return concodefunc_remove ( loc0 ) ; }"
    },
    {
        "question_id": 1329,
        "intent": "The production for the item .",
        "snippet": "production function ( ) { return concodeclass__the_production ; }"
    },
    {
        "question_id": 1330,
        "intent": "Test of toString method , of class Device .",
        "snippet": "void function ( ) { System . out . println ( \"srini_string\" ) ; Device loc0 = null ; String loc1 = \"srini_string\" ; String loc2 = loc0 . toString ( ) ; assertEquals ( loc1 , loc2 ) ; fail ( \"srini_string\" ) ; }"
    },
    {
        "question_id": 1331,
        "intent": "Returns the list of tags changed by the push .",
        "snippet": "List < String > function ( ) { return concodefunc_getChangedRefs ( Constants . R_TAGS ) ; }"
    },
    {
        "question_id": 1332,
        "intent": "Get a value from the internal JSONObject",
        "snippet": "Object function ( String arg0 ) { return this . concodeclass_json . get ( arg0 ) ; }"
    },
    {
        "question_id": 1333,
        "intent": "Add Last Movement",
        "snippet": "void function ( int arg0 ) { concodeclass_recordedMovement [ 4 ] = concodeclass_recordedMovement [ 3 ] ; concodeclass_recordedMovement [ 3 ] = concodeclass_recordedMovement [ 2 ] ; concodeclass_recordedMovement [ 2 ] = concodeclass_recordedMovement [ 1 ] ; concodeclass_recordedMovement [ 1 ] = concodeclass_recordedMovement [ 0 ] ; concodeclass_recordedMovement [ 0 ] = arg0 ; }"
    },
    {
        "question_id": 1334,
        "intent": "Release the Netty ByteBuf .",
        "snippet": "void function ( ) { Preconditions . checkState ( concodeclass_mNettyBuf != null ) ; Preconditions . checkState ( concodeclass_mNettyBuf . refCnt ( ) == 1 , \"srini_string\" , concodeclass_mNettyBuf . refCnt ( ) ) ; Preconditions . checkState ( concodeclass_mNettyBuf . release ( ) , \"srini_string\" ) ; }"
    },
    {
        "question_id": 1335,
        "intent": "Tests the UnderStoreBlockInStream #skip long method for the first block of the file .",
        "snippet": "void function ( ) { concodefunc_skipInternal ( concodeclass_mBlockStream , 0 ) ; }"
    },
    {
        "question_id": 1336,
        "intent": "Find the stored preview for the given book",
        "snippet": "BookPreview function ( Book arg0 ) { return getPreview ( arg0 . getUUID ( ) ) ; }"
    },
    {
        "question_id": 1337,
        "intent": "Returns the ISO 8601 representation of time hh : mm : ss + hh : mm .",
        "snippet": "String function ( ) { int loc0 = concodefunc_getHour ( ) ; int loc1 = concodefunc_getMinutes ( ) ; int loc2 = ( int ) Math . floor ( concodefunc_getSeconds ( ) ) ; int loc3 = concodefunc_getOffsetHours ( ) ; int loc4 = concodefunc_getOffsetMinutes ( ) ; return String . format ( concodeclass_TIME_PATTERN , loc0 , loc1 , loc2 , loc3 , loc4 ) ; }"
    },
    {
        "question_id": 1338,
        "intent": "Sets the feed id .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_feedId = arg0 ; }"
    },
    {
        "question_id": 1339,
        "intent": "Test method for net.sf.marineapi.nmea.util.Date #equals java.lang.Object .",
        "snippet": "void function ( ) { Object loc0 = new String ( \"srini_string\" ) ; Object loc1 = new Double ( 123 ) ; assertFalse ( concodeclass_instance . equals ( loc0 ) ) ; assertFalse ( concodeclass_instance . equals ( loc1 ) ) ; }"
    },
    {
        "question_id": 1340,
        "intent": "Return a new instance of AppStatus based onthe provided individual app instances via #with AppInstanceStatus .",
        "snippet": "AppStatus function ( ) { return concodeclass_status ; }"
    },
    {
        "question_id": 1341,
        "intent": "Verifies that two violations nodes with different filename arenot equal .",
        "snippet": "void function ( ) { final ViolationNode loc0 = concodefunc_createViolationNode ( \"srini_string\" , 1 , 1 , 5 , 15 , \"srini_string\" ) ; final ViolationNode loc1 = concodefunc_createViolationNode ( \"srini_string\" , 1 , 1 , 5 , 15 , \"srini_string\" ) ; assertFalse ( \"srini_string\" , loc0 . equalsNode ( loc1 ) ) ; }"
    },
    {
        "question_id": 1342,
        "intent": "The component we are decorating .",
        "snippet": "DataTypesHelper function ( ) { return concodeclass_impl ; }"
    },
    {
        "question_id": 1343,
        "intent": "Sets the number of rows .",
        "snippet": "void function ( int arg0 ) { this . concodeclass_numRows = arg0 ; }"
    },
    {
        "question_id": 1344,
        "intent": "Sets the exp msg .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_errorMsg = arg0 ; }"
    },
    {
        "question_id": 1345,
        "intent": "Common empty loop utility that serves the purpose of warming up the JVM before performance microbenchmarks .",
        "snippet": "void function ( ) { for ( int loc0 = 0 ; loc0 < 10000000 ; loc0 ++ ) { } }"
    },
    {
        "question_id": 1346,
        "intent": "For Locale selection . TODO : Detect the available locales from the available files .",
        "snippet": "Locale [ ] function ( ) { return new Locale [ ] { Locale . ENGLISH , Locale . FRENCH , new Locale ( \"srini_string\" , \"srini_string\" ) , Locale . GERMAN , Locale . ITALIAN , new Locale ( \"srini_string\" , \"srini_string\" ) , new Locale ( \"srini_string\" , \"srini_string\" ) , new Locale ( \"srini_string\" , \"srini_string\" ) , Locale . CHINESE , Locale . UK } ; }"
    },
    {
        "question_id": 1347,
        "intent": "Return the Instrumentation instance in use .",
        "snippet": "Instrumentation function ( ) { return concodeclass_instrumentation ; }"
    },
    {
        "question_id": 1348,
        "intent": "Returns the amount of milliseconds that have elapsed since mark was last called . This timer runs irrespective of Greenfoot 's act cycle , so if you call it many times during the same Greenfoot frame , you may well get different answers .",
        "snippet": "int function ( ) { return ( int ) ( System . currentTimeMillis ( ) - concodeclass_lastMark ) ; }"
    },
    {
        "question_id": 1349,
        "intent": "Gets the pcl feed id .",
        "snippet": "String function ( ) { return concodeclass_pclFeedId ; }"
    },
    {
        "question_id": 1350,
        "intent": "Gets the value of the elem3 property .",
        "snippet": "int function ( ) { return concodeclass_elem3 ; }"
    },
    {
        "question_id": 1351,
        "intent": "Gets the elementStylingOrder attribute of the Selector class",
        "snippet": "String function ( ) { return \"srini_string\" + \"srini_string\" + \"srini_string\" + \"srini_string\" + \"srini_string\" ; }"
    },
    {
        "question_id": 1352,
        "intent": "reverse linked list recursive",
        "snippet": "void function ( ) { concodeclass_head = concodefunc_reverse ( concodeclass_head ) ; }"
    },
    {
        "question_id": 1353,
        "intent": "Converts a CreateFileOptions object to an OpenFileOptions object with amatching Alluxio storage type .",
        "snippet": "OpenFileOptions function ( CreateFileOptions arg0 ) { if ( arg0 . getAlluxioStorageType ( ) . isStore ( ) ) { return OpenFileOptions . defaults ( ) . setReadType ( ReadType . CACHE ) ; } return OpenFileOptions . defaults ( ) . setReadType ( ReadType . NO_CACHE ) ; }"
    },
    {
        "question_id": 1354,
        "intent": "Get KeyInfo element of an encrypted element .",
        "snippet": "Element function ( ) { return concodeclass_m_KeyInfoEl ; }"
    },
    {
        "question_id": 1355,
        "intent": "Store MAPs in the message .",
        "snippet": "void function ( AddressingProperties arg0 , Message arg1 , boolean arg2 , boolean arg3 ) { org . apache . cxf . ws . addressing . ContextUtils . storeMAPs ( arg0 , arg1 , arg2 , arg3 ) ; }"
    },
    {
        "question_id": 1356,
        "intent": "Intent action for reloading the JS",
        "snippet": "String function ( Context arg0 ) { return arg0 . getPackageName ( ) + concodeclass_RELOAD_APP_ACTION_SUFFIX ; }"
    },
    {
        "question_id": 1357,
        "intent": "Test method for com.sqa.em.util.helper.RequestInput #getString java.lang.String , java.lang.String .",
        "snippet": "void function ( ) { String loc0 = RequestInput . getString ( \"srini_string\" , \"srini_string\" , \"srini_string\" , \"srini_string\" ) ; System . out . println ( \"srini_string\" + loc0 ) ; }"
    },
    {
        "question_id": 1358,
        "intent": "Return the job owner group name .",
        "snippet": "String function ( ) { return concodefunc_getWorkflow ( ) . getGroup ( ) ; }"
    },
    {
        "question_id": 1359,
        "intent": "Sets the value of the moduleName property .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_moduleName = arg0 ; }"
    },
    {
        "question_id": 1360,
        "intent": "Frees the object . If the free list is full , the object will be garbage collected .",
        "snippet": "void function ( T arg0 ) { if ( concodefunc_checkDuplicate ( arg0 ) ) { throw new IllegalStateException ( \"srini_string\" + arg0 ) ; } concodefunc_free ( arg0 ) ; }"
    },
    {
        "question_id": 1361,
        "intent": "Set correlation id of the message",
        "snippet": "void function ( String arg0 ) { this . concodeclass_correlationId = arg0 ; }"
    },
    {
        "question_id": 1362,
        "intent": "Tests the PlainSaslServer #getAuthorizationID to retrieve the correct user .",
        "snippet": "void function ( ) { String loc0 = \"srini_string\" ; String loc1 = \"srini_string\" ; concodeclass_mPlainSaslServer . evaluateResponse ( concodefunc_getUserInfo ( loc0 , loc1 ) ) ; Assert . assertEquals ( loc0 , concodeclass_mPlainSaslServer . getAuthorizationID ( ) ) ; }"
    },
    {
        "question_id": 1363,
        "intent": "Handle event from the RawRtfParser .",
        "snippet": "void function ( ) { concodefunc_handleEvent ( concodeclass_GROUP_END ) ; concodeclass_state = concodeclass_stack . pop ( ) ; }"
    },
    {
        "question_id": 1364,
        "intent": "This method is where most of the action is . Up to 2 sorted temporary tables are created , and are passed into SortScan for final merging .",
        "snippet": "Scan function ( ) { Scan loc0 = concodeclass_p . open ( ) ; List < TempTable > loc1 = concodefunc_splitIntoRuns ( loc0 ) ; loc0 . close ( ) ; while ( loc1 . size ( ) > 2 ) loc1 = concodefunc_doAMergeIteration ( loc1 ) ; return new SortScan ( loc1 , concodeclass_comp ) ; }"
    },
    {
        "question_id": 1365,
        "intent": "Logs out the user The implementation removes the User associated with the Subject .",
        "snippet": "boolean function ( ) { if ( concodeclass_mSubject . isReadOnly ( ) ) { throw new LoginException ( \"srini_string\" ) ; } if ( concodeclass_mUser != null ) { concodeclass_mSubject . getPrincipals ( ) . remove ( concodeclass_mUser ) ; } return true ; }"
    },
    {
        "question_id": 1366,
        "intent": "Returns the post id , if available .",
        "snippet": "String function ( ) { return concodeclass_postId ; }"
    },
    {
        "question_id": 1367,
        "intent": "Check if a given address version is valid given the NetworkParameters .",
        "snippet": "boolean function ( int arg0 ) { for ( int loc0 : concodefunc_getAcceptableAddressCodes ( ) ) { if ( arg0 == loc0 ) return true ; } return false ; }"
    },
    {
        "question_id": 1368,
        "intent": "Set a flag indicating whether to print a ' ; ' after certain statements . This is used when pretty-printing for loops .",
        "snippet": "boolean function ( boolean arg0 ) { boolean loc0 = this . concodeclass_appendSemicolon ; this . concodeclass_appendSemicolon = arg0 ; return loc0 ; }"
    },
    {
        "question_id": 1369,
        "intent": "Test method for net.sf.marineapi.nmea.parser.RMCParser #setFaaMode .",
        "snippet": "void function ( ) { concodeclass_rmc . setMode ( FaaMode . SIMULATED ) ; assertEquals ( FaaMode . SIMULATED , concodeclass_rmc . getMode ( ) ) ; concodeclass_rmc . setMode ( FaaMode . ESTIMATED ) ; assertEquals ( FaaMode . ESTIMATED , concodeclass_rmc . getMode ( ) ) ; }"
    },
    {
        "question_id": 1370,
        "intent": "Sets the current record to be the record having the specified ID .",
        "snippet": "void function ( int arg0 ) { concodeclass_currentslot = arg0 ; }"
    },
    {
        "question_id": 1371,
        "intent": "Determines if this term is of the form `` F1 = F2 '' where F1 is the specified field and F2 is another field . If so , the method returns the name of that field . If not , the method returns null .",
        "snippet": "String function ( String arg0 ) { if ( concodeclass_lhs . isFieldName ( ) && concodeclass_lhs . asFieldName ( ) . equals ( arg0 ) && concodeclass_rhs . isFieldName ( ) ) return concodeclass_rhs . asFieldName ( ) ; else if ( concodeclass_rhs . isFieldName ( ) && concodeclass_rhs . asFieldName ( ) . equals ( arg0 ) && concodeclass_lhs . isFieldName ( ) ) return concodeclass_lhs . asFieldName ( ) ; else return null ; }"
    },
    {
        "question_id": 1372,
        "intent": "Sets the act value .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_actValue = arg0 ; }"
    },
    {
        "question_id": 1373,
        "intent": "Normalize Text-Elements by removing all empty text nodes and normalizing the non-empty ones . `` normalized '' in this context means all whitespace characters are replaced by space characters and consecutive whitespace characters are collapsed .",
        "snippet": "DiffBuilder function ( ) { concodeclass_normalizeWhitespace = true ; return this ; }"
    },
    {
        "question_id": 1374,
        "intent": "Get default claims for given trusted service",
        "snippet": "ClaimDTO function ( String arg0 ) { RegistryBasedTrustedServiceStore loc0 = new RegistryBasedTrustedServiceStore ( ) ; return loc0 . getTrustedServiceClaims ( arg0 ) ; }"
    },
    {
        "question_id": 1375,
        "intent": "Gets a boolean value out of the object .",
        "snippet": "boolean function ( final String arg0 , final boolean arg1 ) { return this . concodeclass_bundle . getBoolean ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 1376,
        "intent": "Checks if the logLevel and logMessage goes through the logFilter .",
        "snippet": "boolean function ( ArrayList < String > arg0 ) { String loc0 = arg0 . get ( 0 ) ; String loc1 = arg0 . get ( 1 ) ; if ( this . concodeclass_logLevels == null || this . concodeclass_logLevels . containsKey ( loc0 . toUpperCase ( ) ) ) { Matcher loc2 = concodeclass_filterPattern . matcher ( loc1 ) ; return loc2 . matches ( ) ; } else { return false ; } }"
    },
    {
        "question_id": 1377,
        "intent": "Write the given int value 32-bit in big-endian order to the buffer",
        "snippet": "BufferedByteWriter function ( byte arg0 ) { return put32 ( arg0 & 0xFF ) ; }"
    },
    {
        "question_id": 1378,
        "intent": "The authentication in place when this token was created .",
        "snippet": "AuthenticationHolderEntity function ( ) { return concodeclass_authenticationHolder ; }"
    },
    {
        "question_id": 1379,
        "intent": "Remove all available plugins",
        "snippet": "void function ( ) { Iterator < AbstractPlugin > loc0 = concodeclass_allPlugins . iterator ( ) ; while ( loc0 . hasNext ( ) ) { AbstractPlugin loc1 = ( AbstractPlugin ) loc0 . next ( ) ; loc1 . removePluginObserver ( this ) ; concodeclass_activePlugins . remove ( loc1 ) ; loc0 . remove ( ) ; } }"
    },
    {
        "question_id": 1380,
        "intent": "Set the weight for this node .",
        "snippet": "void function ( float arg0 ) { concodeclass_weight = arg0 ; }"
    },
    {
        "question_id": 1381,
        "intent": "Releases a netty channel to the channel pools .",
        "snippet": "void function ( InetSocketAddress arg0 , Channel arg1 ) { Preconditions . checkArgument ( concodeclass_NETTY_CHANNEL_POOL_MAP . containsKey ( arg0 ) ) ; concodeclass_NETTY_CHANNEL_POOL_MAP . get ( arg0 ) . release ( arg1 ) ; }"
    },
    {
        "question_id": 1382,
        "intent": "Return the system ID , the value defined in the #CONF_SYSTEM_ID configuration property .",
        "snippet": "String function ( ) { return concodeclass_systemId ; }"
    },
    {
        "question_id": 1383,
        "intent": "Sets an array of object values in the object .",
        "snippet": "E function ( final String arg0 , final ArrayList < ShareOpenGraphObject > arg1 ) { this . concodeclass_bundle . putParcelableArrayList ( arg0 , arg1 ) ; return ( E ) this ; }"
    },
    {
        "question_id": 1384,
        "intent": "Sets URI fragment . The value is expected to be unescaped and may contain non ASCII characters .",
        "snippet": "URIBuilder function ( final String arg0 ) { this . concodeclass_fragment = arg0 ; this . concodeclass_encodedFragment = null ; return this ; }"
    },
    {
        "question_id": 1385,
        "intent": "Set the key size to use when generating a symmetric key . The default is 256 bits .",
        "snippet": "void function ( long arg0 ) { this . concodeclass_keySize = arg0 ; }"
    },
    {
        "question_id": 1386,
        "intent": "Sets up the configuration for Alluxio before a test runs .",
        "snippet": "void function ( ) { concodeclass_mSessionTimeoutMs = Configuration . getInt ( PropertyKey . WORKER_SESSION_TIMEOUT_MS ) ; }"
    },
    {
        "question_id": 1387,
        "intent": "retrieve all SpringConfig in the registry",
        "snippet": "Map < SpringConfig , String > function ( ) { return Collections . unmodifiableMap ( concodeclass_mSpringConfigMap ) ; }"
    },
    {
        "question_id": 1388,
        "intent": "Return the UTC current date and time in W3C format down to second yyyy-MM-ddTHH : mm : ssZ . i.e. : 1997-07-16T19:20:30Z",
        "snippet": "String function ( ) { SimpleDateFormat loc0 = new SimpleDateFormat ( \"srini_string\" ) ; loc0 . setTimeZone ( TimeZone . getTimeZone ( \"srini_string\" ) ) ; return loc0 . format ( new Date ( ) ) ; }"
    },
    {
        "question_id": 1389,
        "intent": "Lets this know the application has been updated with what 's on disk , and this should synchronize with the last disk check .",
        "snippet": "void function ( ) { this . concodeclass_m_storedDirectoryContents = this . concodeclass_m_newDirectoryContents ; }"
    },
    {
        "question_id": 1390,
        "intent": "Add mapping between Uri path and SQL which represent one of more using INNER JOIN or LEFT OUTER JOIN tables . The base type and sub type will be guessed .",
        "snippet": "void function ( String arg0 , String arg1 ) { addTablesSQL ( arg0 , null , null , arg1 ) ; }"
    },
    {
        "question_id": 1391,
        "intent": "Clear the individual model .",
        "snippet": "void function ( ) { concodeclass_individualStructures . clear ( ) ; }"
    },
    {
        "question_id": 1392,
        "intent": "Get the LanguageVersion associated with the current source file .",
        "snippet": "LanguageVersion function ( ) { return this . concodeclass_languageVersion ; }"
    },
    {
        "question_id": 1393,
        "intent": "Get the SignatureProperties to use .",
        "snippet": "SignatureProperties function ( ) { return concodeclass_signatureProperties ; }"
    },
    {
        "question_id": 1394,
        "intent": "Returns the predicate that describes which records should be modified .",
        "snippet": "Predicate function ( ) { return concodeclass_pred ; }"
    },
    {
        "question_id": 1395,
        "intent": "This is a fairly light weight check to see of a covariance matrix is valid . It checks to see if the diagonal elements are all positive , which they should be if it is valid . Not all invalid covariance matrices will be caught by this method .",
        "snippet": "boolean function ( DenseMatrix64F arg0 ) { return MatrixFeatures . isDiagonalPositive ( arg0 ) ; }"
    },
    {
        "question_id": 1396,
        "intent": "Puts an unsigned byte into the buffer .",
        "snippet": "void function ( final ByteBuffer arg0 , final int arg1 , final long arg2 ) { arg0 . putInt ( arg1 , ( int ) ( arg2 & 0xffffffffL ) ) ; }"
    },
    {
        "question_id": 1397,
        "intent": "Sets a subject capturing the login name the end user used to login to the resource server when authorizing a given client request",
        "snippet": "void function ( UserSubject arg0 ) { this . concodeclass_subject = arg0 ; }"
    },
    {
        "question_id": 1398,
        "intent": "Sets whether execution should break when a script exception is thrown .",
        "snippet": "void function ( boolean arg0 ) { concodeclass_dim . setBreakOnExceptions ( arg0 ) ; concodeclass_debugGui . getMenubar ( ) . getBreakOnExceptions ( ) . setSelected ( arg0 ) ; }"
    },
    {
        "question_id": 1399,
        "intent": "Computes the corresponding latitude for a given view y coordinate .",
        "snippet": "float function ( int arg0 ) { return concodeclass_originLat - arg0 / concodeclass_dotsPerDeg ; }"
    },
    {
        "question_id": 1400,
        "intent": "Create an instance of USAddress",
        "snippet": "USAddress function ( ) { return new USAddress ( ) ; }"
    },
    {
        "question_id": 1401,
        "intent": "Start the service . This method is invoked on the execution thread . By default this method does nothing .",
        "snippet": "void function ( ) { }"
    },
    {
        "question_id": 1402,
        "intent": "get JSONObject value .",
        "snippet": "JSONObject function ( int arg0 ) { Object loc0 = concodeclass_mArray . get ( arg0 ) ; return loc0 == null ? null : loc0 instanceof JSONObject ? ( JSONObject ) loc0 : null ; }"
    },
    {
        "question_id": 1403,
        "intent": "Computes the determinant of the matrix using Leibniz 's formula A direct implementation of Leibniz determinant equation . This is of little practical use because of its slow runtime of O n ! where n is the width of the matrix . LU decomposition should be used instead . One advantage of Leibniz 's equation is how simplistic it is . det A = Sum & sigma ; in Sn ; sgn & sigma ;-RRB- Prod i = 1 to n ; ai , & sigma ; i sgn is the sign function of permutations . +1 or -1 for even and odd permutations a set of permutations . if n = 3 then the possible permutations are 1,2,3 1,3,2 , 3,2,1 , ... etc",
        "snippet": "double function ( DenseMatrix64F arg0 ) { PermuteArray loc0 = new PermuteArray ( arg0 . numCols ) ; double loc1 = 0 ; int loc2 [ ] = loc0 . next ( ) ; while ( loc2 != null ) { double loc3 = 1 ; for ( int loc4 = 0 ; loc4 < arg0 . numRows ; loc4 ++ ) { loc3 *= arg0 . get ( loc4 , loc2 [ loc4 ] ) ; } loc1 += loc0 . sgn ( ) * loc3 ; loc2 = loc0 . next ( ) ; } return loc1 ; }"
    },
    {
        "question_id": 1404,
        "intent": "Get a dish by site url",
        "snippet": "Dish function ( SiteUrl arg0 ) { return concodeclass_dishRepository . findBySiteUrl ( arg0 ) ; }"
    },
    {
        "question_id": 1405,
        "intent": "Generates a new unique ID and returns it as a String . The contents of the String is supposed to be unique with respect to all Strings generated by other instances of this class . TODO : We should consider using java.util.UUID for this instead .",
        "snippet": "String function ( ) { return ( new java . rmi . server . UID ( ) ) . toString ( ) ; }"
    },
    {
        "question_id": 1406,
        "intent": "This method is called to flush the error queue . Subclasses may want to print summary information in this method .",
        "snippet": "void function ( ) { concodeclass_flushed = true ; }"
    },
    {
        "question_id": 1407,
        "intent": "Called as a result of a previous service addition request .",
        "snippet": "void function ( long arg0 , int arg1 , ServiceInfo [ ] arg2 ) { }"
    },
    {
        "question_id": 1408,
        "intent": "Get the list of registered scopes",
        "snippet": "List < String > function ( ) { return concodeclass_registeredScopes ; }"
    },
    {
        "question_id": 1409,
        "intent": "Deletes a directory and all of its contents .",
        "snippet": "void function ( File arg0 ) { try { concodefunc_traverseDir ( arg0 , new FileAction ( ) { public void concodefunc_act ( File arg1 ) { arg1 . delete ( ) ; } } ) ; } catch ( IOException loc0 ) { concodeclass_LOG . error ( \"srini_string\" , loc0 ) ; } }"
    },
    {
        "question_id": 1410,
        "intent": "Returns the operation string . @return The operation string .",
        "snippet": "String function ( ) { return concodeclass_operation ; }"
    },
    {
        "question_id": 1411,
        "intent": "Argument will be declared valid .",
        "snippet": "void function ( ) { concodeclass_valid = true ; }"
    },
    {
        "question_id": 1412,
        "intent": "Ejecuta una ronda .",
        "snippet": "void function ( ) { Collections . shuffle ( this . concodeclass_pilotos ) ; for ( Piloto loc0 : this . concodefunc_getPilotos ( ) ) { this . concodefunc_runTurno ( loc0 ) ; } this . concodefunc_notificarObservadoresRondaTerminada ( this . concodeclass_rondas . incrementAndGet ( ) ) ; }"
    },
    {
        "question_id": 1413,
        "intent": "Return the path originally requested by the client .",
        "snippet": "String function ( ) { final String loc0 = this . concodefunc_getOriginalPath ( ) ; if ( ! loc0 . endsWith ( \"srini_string\" ) ) return loc0 ; return loc0 . substring ( 0 , loc0 . length ( ) - 1 ) ; }"
    },
    {
        "question_id": 1414,
        "intent": "Tests if output of IdUtils #createFileId long is valid .",
        "snippet": "void function ( ) { long loc0 = 1 ; long loc1 = IdUtils . createFileId ( loc0 ) ; Assert . assertNotEquals ( - 1 , loc1 ) ; }"
    },
    {
        "question_id": 1415,
        "intent": "Creates a copied list of the property descriptors and returns it .",
        "snippet": "List < PropertyDescriptor < ? >> function ( ) { return new ArrayList < > ( concodeclass_propertyDescriptors ) ; }"
    },
    {
        "question_id": 1416,
        "intent": "Convert the Reader into an InputStream . Note : This uses the default encoding .",
        "snippet": "InputStream function ( ) { return new ReaderInputStream ( concodeclass_reader ) ; }"
    },
    {
        "question_id": 1417,
        "intent": "Sets the failed attrib .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_failedAttrib = arg0 ; }"
    },
    {
        "question_id": 1418,
        "intent": "Register a profile in the ProfileManager .",
        "snippet": "void function ( Profile arg0 ) { concodefunc_getManager ( ) . registerProfile ( arg0 ) ; }"
    },
    {
        "question_id": 1419,
        "intent": "Determines whether or not the bridge Method is the bridge for thesupplied candidate Method .",
        "snippet": "boolean function ( Method arg0 , Method arg1 , Map < TypeVariable , Type > arg2 ) { if ( concodefunc_isResolvedTypeMatch ( arg1 , arg0 , arg2 ) ) { return true ; } Method loc0 = concodefunc_findGenericDeclaration ( arg0 ) ; return ( loc0 != null && concodefunc_isResolvedTypeMatch ( loc0 , arg1 , arg2 ) ) ; }"
    },
    {
        "question_id": 1420,
        "intent": "Draw this ball at its current position onto the canvas .",
        "snippet": "void function ( ) { concodeclass_canvas . setForegroundColor ( concodeclass_color ) ; concodeclass_canvas . fillCircle ( concodeclass_xPosition , concodeclass_yPosition , concodeclass_diameter ) ; }"
    },
    {
        "question_id": 1421,
        "intent": "Resolve a variable name . Used by the EL evaluator implemenation .",
        "snippet": "Object function ( String arg0 ) { if ( ! concodeclass_vars . containsKey ( arg0 ) ) { throw new ELException ( XLog . format ( \"srini_string\" , arg0 ) ) ; } return concodeclass_vars . get ( arg0 ) ; }"
    },
    {
        "question_id": 1422,
        "intent": "This test does n't work the way you might expect . If you take the URI.create `` hdfs : / / localhost :1234 / foo/bar/baz ? please = dont & show = up '' . getPath it will return / foo/bar/baz . If you go through Hadoop 's Path using Path #Path String then Hadoop injects the query params into the path , so when you call toURI it gives a different response .",
        "snippet": "void function ( ) { final Path loc0 = new Path ( \"srini_string\" ) ; final String loc1 = HadoopUtils . getPathWithoutScheme ( loc0 ) ; Assert . assertFalse ( \"srini_string\" . equals ( loc1 ) ) ; }"
    },
    {
        "question_id": 1423,
        "intent": "return the horizontal position of this ball",
        "snippet": "int function ( ) { return concodeclass_xPosition ; }"
    },
    {
        "question_id": 1424,
        "intent": "This method is used to get a float value in a specified unit .",
        "snippet": "float function ( short arg0 ) { return concodeclass_floatValue ; }"
    },
    {
        "question_id": 1425,
        "intent": "Marks a block to move into this dir view , which is used by the evictor .",
        "snippet": "void function ( long arg0 , long arg1 ) { if ( concodeclass_mBlocksToMoveIn . add ( arg0 ) ) { concodeclass_mBlocksToMoveInSize += arg1 ; } }"
    },
    {
        "question_id": 1426,
        "intent": "Get a new instance of a WSDLFactory . This method follows almost the same basic sequence of steps that JAXP follows to determine the fully-qualified class name of the class which implements WSDLFactory . The steps in order are : Check the javax.wsdl.factory.WSDLFactory system property . Check the lib/wsdl . properties file in the JRE directory . The key will have the same name as the above system property . Use the default value . Once an instance of a WSDLFactory is obtained , invoke newDefinition , newWSDLReader , or newWSDLWriter , to create the desired instances .",
        "snippet": "WSDLCorbaFactory function ( ) { String loc0 = concodefunc_findFactoryImplName ( ) ; return newInstance ( loc0 ) ; }"
    },
    {
        "question_id": 1427,
        "intent": "get groups which I was mentioned",
        "snippet": "Set < String > function ( ) { return concodeclass_atMeGroupList ; }"
    },
    {
        "question_id": 1428,
        "intent": "Returns the description of the property with the provided name on the provided object 's interface .",
        "snippet": "PropertyDescriptor function ( String arg0 , Object arg1 ) { for ( PropertyDescriptor loc0 : concodefunc_propertyDescriptorsFor ( arg1 , null ) ) { if ( loc0 . getName ( ) . equals ( arg0 ) ) { return loc0 ; } } return null ; }"
    },
    {
        "question_id": 1429,
        "intent": "Set the minute of hour .",
        "snippet": "void function ( int arg0 ) { if ( arg0 < 0 || arg0 > 59 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } this . concodeclass_minutes = arg0 ; }"
    },
    {
        "question_id": 1430,
        "intent": "Returns the value as a plain string denominated in BTC . The result is unformatted with no trailing zeroes . For instance , a value of 150000 satoshis gives an output string of `` 0.0015 '' BTC",
        "snippet": "String function ( ) { return concodeclass_PLAIN_FORMAT . format ( this ) . toString ( ) ; }"
    },
    {
        "question_id": 1431,
        "intent": "Adds a panel on the stack .",
        "snippet": "void function ( JPanel arg0 ) { concodeclass_uiStack . addToStack ( arg0 ) ; }"
    },
    {
        "question_id": 1432,
        "intent": "Absent any annotations of XML mapping , the value of the nillable attribute on elements .",
        "snippet": "boolean function ( ) { return concodeclass_defaultNillable ; }"
    },
    {
        "question_id": 1433,
        "intent": "Obtain a list of all errors in the given instance . The list contains org.xml.sax.SAXParseException SAXParseException s.",
        "snippet": "List < SAXParseException > function ( Source arg0 ) { try { return concodefunc_problemToExceptionList ( concodeclass_validator . validateInstance ( arg0 ) . getProblems ( ) ) ; } catch ( XMLUnitException loc0 ) { throw new XMLUnitRuntimeException ( loc0 . getMessage ( ) , loc0 . getCause ( ) ) ; } }"
    },
    {
        "question_id": 1434,
        "intent": "Registers a listener that is notified of each comparison with outcome other than ComparisonResult #EQUAL .",
        "snippet": "DiffBuilder function ( final ComparisonListener ... arg0 ) { this . concodeclass_differenceListeners . addAll ( Arrays . asList ( arg0 ) ) ; return this ; }"
    },
    {
        "question_id": 1435,
        "intent": "Sets the conduit selector",
        "snippet": "void function ( ConduitSelector arg0 ) { this . concodeclass_conduitSelector = arg0 ; }"
    },
    {
        "question_id": 1436,
        "intent": "Determine the fault mode for the underlying fault message for use on server side only .",
        "snippet": "FaultMode function ( Message arg0 ) { if ( arg0 != null && arg0 . getExchange ( ) != null && arg0 == arg0 . getExchange ( ) . getOutFaultMessage ( ) ) { FaultMode loc0 = arg0 . get ( FaultMode . class ) ; if ( null != loc0 ) { return loc0 ; } else { return FaultMode . RUNTIME_FAULT ; } } return null ; }"
    },
    {
        "question_id": 1437,
        "intent": "Hide keyboard",
        "snippet": "void function ( Context arg0 , View arg1 ) { if ( arg1 == null ) return ; InputMethodManager loc0 = ( InputMethodManager ) arg0 . getSystemService ( Context . INPUT_METHOD_SERVICE ) ; loc0 . hideSoftInputFromWindow ( arg1 . getWindowToken ( ) , 0 ) ; }"
    },
    {
        "question_id": 1438,
        "intent": "Gets the run id .",
        "snippet": "BigDecimal function ( ) { return this . concodeclass_runId ; }"
    },
    {
        "question_id": 1439,
        "intent": "Get the tenant domain",
        "snippet": "String function ( ) { return concodeclass_tenantDomain ; }"
    },
    {
        "question_id": 1440,
        "intent": "Not supported . This method is used to get the Rect value .",
        "snippet": "Rect function ( ) { return concodeclass_rectValue ; }"
    },
    {
        "question_id": 1441,
        "intent": "Return playlists as a Collection",
        "snippet": "List < Playlist > function ( ) { List loc0 = new ArrayList ( concodeclass_playlists . values ( ) ) ; Collections . sort ( loc0 ) ; return loc0 ; }"
    },
    {
        "question_id": 1442,
        "intent": "Initializes our Documents object and underlying database connection .",
        "snippet": "void function ( String arg0 , String arg1 , String arg2 , String arg3 ) { try { Class . forName ( arg3 ) . newInstance ( ) ; concodeclass_con = DriverManager . getConnection ( arg0 , arg1 , arg2 ) ; Documents . createDb ( ) ; } catch ( Exception loc0 ) { throw new MoxieException ( loc0 ) ; } }"
    },
    {
        "question_id": 1443,
        "intent": "Sets the value of the paramName property .",
        "snippet": "void function ( CString arg0 ) { this . concodeclass_paramName = arg0 ; }"
    },
    {
        "question_id": 1444,
        "intent": "Returns true if the given URI was visited , meaning it was requested at some point since initialization .",
        "snippet": "boolean function ( String arg0 ) { return false ; }"
    },
    {
        "question_id": 1445,
        "intent": "Retrieve the key in the ServletContext where the instance ofthe DAVRepository associated with a named DAVServlet can be found .",
        "snippet": "String function ( String arg0 ) { if ( arg0 == null ) throw new NullPointerException ( ) ; return DAVRepository . class . getName ( ) + \"srini_string\" + arg0 ; }"
    },
    {
        "question_id": 1446,
        "intent": "Writes any object to the output stream .",
        "snippet": "void function ( Object arg0 ) { concodeclass__out . writeStreamingObject ( arg0 ) ; }"
    },
    {
        "question_id": 1447,
        "intent": "A file should be added only once - even if it was found twice , because of a sym link .",
        "snippet": "void function ( ) { if ( concodeclass_canTestSymLinks ) { NoFileAssertListener loc0 = new NoFileAssertListener ( 1 ) ; concodeclass_cpd . setCpdListener ( loc0 ) ; concodeclass_cpd . add ( new File ( concodeclass_BASE_TEST_RESOURCE_PATH , \"srini_string\" ) ) ; concodeclass_cpd . add ( new File ( concodeclass_BASE_TEST_RESOURCE_PATH , \"srini_string\" ) ) ; loc0 . verify ( ) ; } }"
    },
    {
        "question_id": 1448,
        "intent": "Tests the BlockContainerIdGenerator #setNextContainerId long method .",
        "snippet": "void function ( ) { concodeclass_mGenerator . setNextContainerId ( concodeclass_TEST_ID ) ; Assert . assertEquals ( concodeclass_TEST_ID , concodeclass_mGenerator . getNewContainerId ( ) ) ; Assert . assertEquals ( concodeclass_TEST_ID + 1 , concodeclass_mGenerator . getNewContainerId ( ) ) ; Assert . assertEquals ( concodeclass_TEST_ID + 2 , concodeclass_mGenerator . getNewContainerId ( ) ) ; }"
    },
    {
        "question_id": 1449,
        "intent": "Tests rankNUpdate with various sized input matrices",
        "snippet": "void function ( ) { concodefunc_checkRankNUpdate ( concodeclass_N , concodeclass_N - 2 ) ; concodefunc_checkRankNUpdate ( concodeclass_N * 2 + 1 , concodeclass_N - 2 ) ; concodefunc_checkRankNUpdate ( concodeclass_N - 1 , concodeclass_N - 2 ) ; }"
    },
    {
        "question_id": 1450,
        "intent": "Test method for NotificationController #registerUserSession ServerSession , ServerMessage . Verifies that method throws NullPointerException when ServerSession ID is null .",
        "snippet": "void function ( ) { when ( concodeclass_mockServerSession . getId ( ) ) . thenReturn ( null ) ; concodeclass_notificationController . registerUserSession ( concodeclass_mockServerSession , concodeclass_mockServerMessage ) ; }"
    },
    {
        "question_id": 1451,
        "intent": "Returns the size image needed to render the document without anything going off the side . Could be different than the dimensions passed into layout because of text that could n't break or a table that 's set to be too big .",
        "snippet": "Rectangle function ( ) { if ( concodeclass_panel . getPreferredSize ( ) != null ) { return new Rectangle ( 0 , 0 , ( int ) concodeclass_panel . getPreferredSize ( ) . getWidth ( ) , ( int ) concodeclass_panel . getPreferredSize ( ) . getHeight ( ) ) ; } else { return new Rectangle ( 0 , 0 , concodeclass_panel . getWidth ( ) , concodeclass_panel . getHeight ( ) ) ; } }"
    },
    {
        "question_id": 1452,
        "intent": "Inner matrix that stores the decomposition",
        "snippet": "DenseMatrix64F function ( ) { return concodeclass_QR ; }"
    },
    {
        "question_id": 1453,
        "intent": "Method to find a file , first by finding it as a file either by the absolute or relative path , then as a URL , and then finally seeing if it is on the classpath . Caller is responsible for closing the InputStream .",
        "snippet": "InputStream function ( String arg0 ) { InputStream loc0 = loadResourceAsStream ( arg0 , ResourceLoader . class . getClassLoader ( ) ) ; if ( loc0 == null ) { throw new RuleSetNotFoundException ( \"srini_string\" + arg0 + \"srini_string\" ) ; } return loc0 ; }"
    },
    {
        "question_id": 1454,
        "intent": "Returns the quantity associated with a line item .",
        "snippet": "int function ( ) { int loc0 = 0 ; try { loc0 = concodeclass_lineItem . getLineItem ( ) . getQuantity ( ) . getValue ( ) . intValue ( ) ; } catch ( NullPointerException loc1 ) { } return loc0 ; }"
    },
    {
        "question_id": 1455,
        "intent": "Sets the cytoband of a gistic",
        "snippet": "void function ( String arg0 ) { this . concodeclass_cytoband = arg0 ; }"
    },
    {
        "question_id": 1456,
        "intent": "Create an instance of ValidateAccess",
        "snippet": "ValidateAccess function ( ) { return new ValidateAccess ( ) ; }"
    },
    {
        "question_id": 1457,
        "intent": "Get the return format requested",
        "snippet": "String function ( HttpServletRequest arg0 ) { String loc0 = arg0 . getParameter ( WebService . FORMAT ) ; return loc0 == null ? loc0 : loc0 . toLowerCase ( ) ; }"
    },
    {
        "question_id": 1458,
        "intent": "Save a dishCollection .",
        "snippet": "DishCollection function ( DishCollection arg0 ) { concodeclass_log . debug ( \"srini_string\" , arg0 ) ; DishCollection loc0 = concodeclass_dishCollectionRepository . save ( arg0 ) ; return loc0 ; }"
    },
    {
        "question_id": 1459,
        "intent": "Calculates the hash of the hash of the contents . This is a standard operation in Bitcoin .",
        "snippet": "Sha256Hash function ( byte [ ] arg0 ) { return new Sha256Hash ( Utils . doubleDigest ( arg0 ) ) ; }"
    },
    {
        "question_id": 1460,
        "intent": "Destroy the workflow application service .",
        "snippet": "void function ( ) { }"
    },
    {
        "question_id": 1461,
        "intent": "Get current date and time formatted as ISO 8601 string .",
        "snippet": "String function ( ) { return concodefunc_fromCalendar ( GregorianCalendar . getInstance ( ) ) ; }"
    },
    {
        "question_id": 1462,
        "intent": "Create a DiffBuilder from all kind of types supported by Input #from Object .",
        "snippet": "DiffBuilder function ( final Object arg0 ) { final Source loc0 = concodefunc_getSource ( arg0 ) ; return new DiffBuilder ( loc0 ) ; }"
    },
    {
        "question_id": 1463,
        "intent": "Puts the specified name/value pair in the specified JSON object .",
        "snippet": "void function ( final JSONObject arg0 , final String arg1 , final Collection arg2 ) { try { arg0 . put ( arg1 , arg2 ) ; } catch ( final JSONException loc0 ) { concodeclass_LOG . warn ( \"srini_string\" , loc0 ) ; } }"
    },
    {
        "question_id": 1464,
        "intent": "Returns the orthogonal ` V ' matrix .",
        "snippet": "T function ( ) { return concodeclass_V ; }"
    },
    {
        "question_id": 1465,
        "intent": "The alias associated with this certificate .",
        "snippet": "String function ( ) { return concodeclass_mAlias ; }"
    },
    {
        "question_id": 1466,
        "intent": "Launches the SIP and TURN servers .",
        "snippet": "void function ( final String [ ] arg0 ) { concodeclass_LOG . debug ( \"srini_string\" ) ; final TurnLauncher loc0 = new TurnLauncher ( ) ; concodeclass_LOG . debug ( \"srini_string\" ) ; try { loc0 . start ( ) ; concodeclass_LOG . debug ( \"srini_string\" ) ; } catch ( final Throwable loc1 ) { concodeclass_LOG . error ( \"srini_string\" , loc1 ) ; } }"
    },
    {
        "question_id": 1467,
        "intent": "Sets the value of the projectSecret property .",
        "snippet": "void function ( byte [ ] arg0 ) { this . concodeclass_projectSecret = ( ( byte [ ] ) arg0 ) ; }"
    },
    {
        "question_id": 1468,
        "intent": "Format date .",
        "snippet": "String function ( Date arg0 , DateFormatType arg1 ) { String loc0 = null ; SimpleDateFormat loc1 = new SimpleDateFormat ( arg1 . valueOf ( ) ) ; loc0 = loc1 . format ( arg0 ) ; return loc0 ; }"
    },
    {
        "question_id": 1469,
        "intent": "Counts the number of times the specified eigenvalue appears .",
        "snippet": "int function ( SymmetricQrAlgorithm arg0 , double arg1 , double arg2 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 . getNumberOfEigenvalues ( ) ; loc1 ++ ) { double loc2 = arg0 . getEigenvalue ( loc1 ) ; if ( Math . abs ( loc2 - arg1 ) <= arg2 ) { loc0 ++ ; } } return loc0 ; }"
    },
    {
        "question_id": 1470,
        "intent": "Factory that just takes a service . Used in tools and unit tests .",
        "snippet": "BasicNameManager function ( ServiceInfo arg0 ) { BasicNameManager loc0 = new BasicNameManager ( ) ; loc0 . initialize ( arg0 , null ) ; return loc0 ; }"
    },
    {
        "question_id": 1471,
        "intent": "Returns the customized configuration for the user .",
        "snippet": "ConfigurationHandler function ( ) { return concodeclass_handler ; }"
    },
    {
        "question_id": 1472,
        "intent": "Returns the proposal identified by the supplied token .",
        "snippet": "FederationProposal function ( String arg0 ) { List < FederationProposal > loc0 = concodefunc_getPendingFederationProposals ( ) ; for ( FederationProposal loc1 : loc0 ) { if ( loc1 . arg0 . equals ( arg0 ) ) { return loc1 ; } } return null ; }"
    },
    {
        "question_id": 1473,
        "intent": "Not supported , class is immutable . Sets the string representation of the current value .",
        "snippet": "void function ( String arg0 ) { this . concodeclass__cssText = arg0 ; }"
    },
    {
        "question_id": 1474,
        "intent": "Moves to the next log block in reverse order , and positions it after the last record in that block .",
        "snippet": "void function ( ) { concodeclass_blk = new Block ( concodeclass_blk . fileName ( ) , concodeclass_blk . number ( ) - 1 ) ; concodeclass_pg . read ( concodeclass_blk ) ; concodeclass_currentrec = concodeclass_pg . getInt ( LogMgr . LAST_POS ) ; }"
    },
    {
        "question_id": 1475,
        "intent": "Looks up the target object by EJB local reference .",
        "snippet": "Object function ( String arg0 ) { Object loc0 = new InitialContext ( ) . lookup ( arg0 ) ; Method loc1 = loc0 . getClass ( ) . getMethod ( \"srini_string\" , new Class [ 0 ] ) ; return loc1 . invoke ( loc0 , new Object [ 0 ] ) ; }"
    },
    {
        "question_id": 1476,
        "intent": "Get the list of accepted encryption algorithms . A request can contain a wst : EncryptionAlgorithm uri to use to encrypt an issued token . The algorithm specified must be contained in this list . The default algorithms are 3-DES , AES-128 , AES-128 GCM , AES-192 , AES-192 GCM , AES-256 and AES-256 GCM .",
        "snippet": "List < String > function ( ) { return concodeclass_acceptedEncryptionAlgorithms ; }"
    },
    {
        "question_id": 1477,
        "intent": "Implements BundleActivator.stop . Does nothing since the framework will automatically unregister any registered services .",
        "snippet": "void function ( BundleContext arg0 ) { for ( AutoSIMConnectionConfig loc0 : concodeclass_config . connections ) { concodeclass_environments . deregisterConnectionFactory ( loc0 . name ) ; concodeclass_factories . remove ( loc0 . name ) ; } }"
    },
    {
        "question_id": 1478,
        "intent": "Create a new table with the specified headers and row data .",
        "snippet": "String function ( String [ ] arg0 , Object [ ] [ ] arg1 ) { return of ( arg0 , arg1 , Borders . FULL ) ; }"
    },
    {
        "question_id": 1479,
        "intent": "The actual target .",
        "snippet": "Node function ( ) { return concodeclass_target ; }"
    },
    {
        "question_id": 1480,
        "intent": "The component we are decorating .",
        "snippet": "ActivityGraphsHelper function ( ) { return concodeclass_impl ; }"
    },
    {
        "question_id": 1481,
        "intent": "Tests the WebUtils #convertMsToClockTime long method with one second .",
        "snippet": "void function ( ) { String loc0 = WebUtils . convertMsToClockTime ( TimeUnit . SECONDS . toMillis ( 1 ) ) ; Assert . assertEquals ( \"srini_string\" , loc0 ) ; }"
    },
    {
        "question_id": 1482,
        "intent": "Returns a string representation of the enumeration value .",
        "snippet": "java . lang . String function ( ) { return concodeclass_literalName ; }"
    },
    {
        "question_id": 1483,
        "intent": "Get the downlinks of this node .",
        "snippet": "List < ClassdiagramNode > function ( ) { return concodeclass_downlinks ; }"
    },
    {
        "question_id": 1484,
        "intent": "Return the runtime directory of the Oozie instance . The directory is created under TMP and it is always a new directory per Services initialization .",
        "snippet": "String function ( ) { return concodeclass_runtimeDir ; }"
    },
    {
        "question_id": 1485,
        "intent": "Returns the boolean value for the currentValue . If the currentValue can not be interpreted as a boolean , the defaultValue is returned .",
        "snippet": "boolean function ( boolean arg0 ) { if ( ! StringUtils . isEmpty ( concodeclass_currentValue ) ) { return Boolean . parseBoolean ( concodeclass_currentValue . trim ( ) ) ; } return arg0 ; }"
    },
    {
        "question_id": 1486,
        "intent": "Puts the slider back in its original position , but makes it seem as if it has moved , allowing onProgressChanged to be called",
        "snippet": "void function ( SeekBar arg0 ) { int loc0 = arg0 . getProgress ( ) ; if ( loc0 < arg0 . getMax ( ) ) { arg0 . setProgress ( loc0 + 1 ) ; } else { arg0 . setProgress ( loc0 - 1 ) ; } arg0 . setProgress ( loc0 ) ; }"
    },
    {
        "question_id": 1487,
        "intent": "Test method for net.sf.marineapi.nmea.util.Time #getHour .",
        "snippet": "void function ( ) { assertEquals ( 1 , concodeclass_time . getHour ( ) ) ; }"
    },
    {
        "question_id": 1488,
        "intent": "Get Date from DatePicker",
        "snippet": "Date function ( DatePicker arg0 ) { int loc0 = arg0 . getDayOfMonth ( ) ; int loc1 = arg0 . getMonth ( ) ; int loc2 = arg0 . getYear ( ) ; Calendar loc3 = Calendar . getInstance ( ) ; loc3 . set ( loc2 , loc1 , loc0 ) ; return loc3 . getTime ( ) ; }"
    },
    {
        "question_id": 1489,
        "intent": "Sets the created date .",
        "snippet": "void function ( Timestamp arg0 ) { this . concodeclass_createdDate = arg0 ; }"
    },
    {
        "question_id": 1490,
        "intent": "Determine if one collection of assertions contains another collection of assertion , using the equal method from the Assertion interface .",
        "snippet": "boolean function ( Collection < Assertion > arg0 , Collection < Assertion > arg1 ) { if ( null == arg1 || arg1 . isEmpty ( ) ) { return true ; } for ( Assertion loc0 : arg1 ) { if ( ! contains ( arg0 , loc0 ) ) { return false ; } } return true ; }"
    },
    {
        "question_id": 1491,
        "intent": "Begin normal traversal of a subtree rooted at n . This gives the visitor the option of changing internal state or returning a new visitor which will be used to visit the children of n . This method is typically called by the method #enter Node , Node enter parent , n . If a subclass overrides the method #enter Node , Node enter parent , n then this methodmay not be called .",
        "snippet": "NodeVisitor function ( Node arg0 ) { return this ; }"
    },
    {
        "question_id": 1492,
        "intent": "Gets the value of the paramValue property .",
        "snippet": "XsdStringType function ( ) { return concodeclass_paramValue ; }"
    },
    {
        "question_id": 1493,
        "intent": "From string .",
        "snippet": "ConfigSetupType function ( String arg0 ) { try { return valueOf ( arg0 . toUpperCase ( ) ) ; } catch ( IllegalArgumentException loc0 ) { FetcherTesterRestSvcManager . LOGGER . error ( \"srini_string\" , loc0 ) ; throw new FetcherTesterServiceException ( \"srini_string\" + arg0 , loc0 ) ; } }"
    },
    {
        "question_id": 1494,
        "intent": "Call ViewConfiguration #getScaledPagingTouchSlop . If running on a pre - @android . os.Build.VERSION _ CODES #FROYO device , returns ViewConfiguration #getScaledTouchSlop .",
        "snippet": "int function ( ViewConfiguration arg0 ) { return concodeclass_IMPL . getScaledPagingTouchSlop ( arg0 ) ; }"
    },
    {
        "question_id": 1495,
        "intent": "Parse a string into a TypeNode AST node , applying substitutions .",
        "snippet": "TypeNode function ( String arg0 , Object ... arg1 ) { return ( TypeNode ) concodefunc_parse ( concodeclass_TYPE , arg0 , arg1 ) ; }"
    },
    {
        "question_id": 1496,
        "intent": "Test method for net.sf.marineapi.nmea.parser.RMBParser #setSteerTo CompassPoint .",
        "snippet": "void function ( ) { try { concodeclass_rmb . setSteerTo ( null ) ; fail ( \"srini_string\" ) ; } catch ( IllegalArgumentException loc0 ) { assertTrue ( loc0 . getMessage ( ) . contains ( \"srini_string\" ) ) ; } catch ( Exception loc0 ) { fail ( loc0 . getMessage ( ) ) ; } }"
    },
    {
        "question_id": 1497,
        "intent": "If a handler is connected , call its org.bitcoinj.protocols.channels.PaymentChannelServer #close method thus disconnecting the TCP connection .",
        "snippet": "void function ( ) { if ( concodeclass_connectedHandler != null ) concodeclass_connectedHandler . close ( ) ; }"
    },
    {
        "question_id": 1498,
        "intent": "Add PropertyChangeListener .",
        "snippet": "void function ( final PropertyChangeListener arg0 ) { concodeclass_m_PropertyChangeSupport . addPropertyChangeListener ( arg0 ) ; }"
    },
    {
        "question_id": 1499,
        "intent": "Returns the Client instance",
        "snippet": "Client function ( ) { return concodeclass_client ; }"
    },
    {
        "question_id": 1500,
        "intent": "Description of the accessibility service . Statically set from AccessibilityService #SERVICE_META_DATA meta-data .",
        "snippet": "String function ( AccessibilityServiceInfo arg0 ) { return concodeclass_IMPL . getDescription ( arg0 ) ; }"
    },
    {
        "question_id": 1501,
        "intent": "Change the current Locale . Only use this before the GUI is initialized .",
        "snippet": "void function ( Locale arg0 ) { Locale . setDefault ( arg0 ) ; concodeclass_bundles = new HashMap < String , ResourceBundle > ( ) ; }"
    },
    {
        "question_id": 1502,
        "intent": "Creates a scriptSig that can redeem a pay-to-address output . If given signature is null , incomplete scriptSig will be created with OP_0 instead of signature",
        "snippet": "Script function ( @ Nullable TransactionSignature arg0 , ECKey arg1 ) { byte [ ] loc0 = arg1 . getPubKey ( ) ; byte [ ] loc1 = arg0 != null ? arg0 . encodeToBitcoin ( ) : new byte [ ] { } ; return new ScriptBuilder ( ) . data ( loc1 ) . data ( loc0 ) . build ( ) ; }"
    },
    {
        "question_id": 1503,
        "intent": "Gets the receipt date .",
        "snippet": "Timestamp function ( ) { return this . concodeclass_receiptDate ; }"
    },
    {
        "question_id": 1504,
        "intent": "Enforce that the Issuer of the received Response/Assertion is known . The default is true .",
        "snippet": "void function ( boolean arg0 ) { this . concodeclass_enforceKnownIssuer = arg0 ; }"
    },
    {
        "question_id": 1505,
        "intent": "Gets the value of the access property .",
        "snippet": "ValidateAccess function ( ) { return concodeclass_access ; }"
    },
    {
        "question_id": 1506,
        "intent": "Make the version of ArgoUML public .",
        "snippet": "void function ( ) { ApplicationVersion . init ( concodeclass_VERSION ) ; }"
    },
    {
        "question_id": 1507,
        "intent": "Positions the current record as indicated by the specified RID .",
        "snippet": "void function ( RID arg0 ) { concodefunc_moveTo ( arg0 . blockNumber ( ) ) ; concodeclass_rp . moveToId ( arg0 . id ( ) ) ; }"
    },
    {
        "question_id": 1508,
        "intent": "Method called only from the Model . It sends a command to the Viewer to update the character sprite as the model 's character moves .",
        "snippet": "void function ( WalkDirection arg0 ) { concodeclass_viewer . moveCharacter2d ( arg0 ) ; }"
    },
    {
        "question_id": 1509,
        "intent": "Obtains a client for a worker with the given address .",
        "snippet": "BlockWorkerClient function ( WorkerNetAddress arg0 ) { Preconditions . checkNotNull ( arg0 , ExceptionMessage . NO_WORKER_AVAILABLE . getMessage ( ) ) ; long loc0 = IdUtils . getRandomNonNegativeLong ( ) ; return new RetryHandlingBlockWorkerClient ( arg0 , loc0 ) ; }"
    },
    {
        "question_id": 1510,
        "intent": "Gets the failed attrib .",
        "snippet": "String function ( ) { return this . concodeclass_failedAttrib ; }"
    },
    {
        "question_id": 1511,
        "intent": "set all headers for the message",
        "snippet": "void function ( Map < String , Object > arg0 ) { this . concodeclass_headers = arg0 ; }"
    },
    {
        "question_id": 1512,
        "intent": "Return the hash code that object would have provided for us so we have a nearly unique id for debugging .",
        "snippet": "int function ( ) { return super . hashCode ( ) ; }"
    },
    {
        "question_id": 1513,
        "intent": "Validate SAML request",
        "snippet": "ValidatedItemDTO [ ] function ( String arg0 , boolean arg1 ) { try { return concodeclass_stub . validateAuthnRequest ( arg0 , arg1 ) ; } catch ( RemoteException loc0 ) { concodeclass_log . error ( \"srini_string\" , loc0 ) ; throw new AxisFault ( loc0 . getMessage ( ) , loc0 ) ; } }"
    },
    {
        "question_id": 1514,
        "intent": "Gets the hash of the given block for the purpose of checking its PoW",
        "snippet": "Sha256Hash function ( Block arg0 ) { return arg0 . getHash ( ) ; }"
    },
    {
        "question_id": 1515,
        "intent": "Moves file from one place to another , can across storage devices e.g. , from memory to SSD when File #renameTo may not work.Current implementation uses com.google.common.io.Files #move File , File , may change if there is a better solution .",
        "snippet": "void function ( String arg0 , String arg1 ) { com . google . common . io . Files . move ( new File ( arg0 ) , new File ( arg1 ) ) ; }"
    },
    {
        "question_id": 1516,
        "intent": "Convert a JSONArray into a nodes list .",
        "snippet": "List < JsonCoordinatorAction > function ( JSONArray arg0 ) { List < JsonCoordinatorAction > loc0 = new ArrayList < JsonCoordinatorAction > ( ) ; for ( Object loc1 : arg0 ) { loc0 . add ( new JsonCoordinatorAction ( ( JSONObject ) loc1 ) ) ; } return loc0 ; }"
    },
    {
        "question_id": 1517,
        "intent": "clean the md5 cache",
        "snippet": "void function ( ) { concodeclass_md5Cache . clear ( ) ; }"
    },
    {
        "question_id": 1518,
        "intent": "Gets the inactivation reason type .",
        "snippet": "String function ( ) { return this . concodeclass_inactivationReasonType ; }"
    },
    {
        "question_id": 1519,
        "intent": "Logs and wraps the given exception .",
        "snippet": "void function ( String arg0 , Exception arg1 ) { concodeclass_log . error ( arg0 , arg1 ) ; throw new AxisFault ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 1520,
        "intent": "Gets a ByteBuffer containing an increasing sequence of integers starting at the givenvalue .",
        "snippet": "ByteBuffer function ( int arg0 , int arg1 ) { ByteBuffer loc0 = ByteBuffer . allocate ( arg1 * 4 ) ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { loc0 . putInt ( arg0 + loc1 ) ; } loc0 . flip ( ) ; return loc0 ; }"
    },
    {
        "question_id": 1521,
        "intent": "Gets the lane_id .",
        "snippet": "int function ( ) { return concodeclass_lane_id ; }"
    },
    {
        "question_id": 1522,
        "intent": "Returns true if s is a legal Java identifier . more info .",
        "snippet": "boolean function ( String arg0 ) { if ( arg0 . length ( ) == 0 || ! Character . isJavaIdentifierStart ( arg0 . charAt ( 0 ) ) ) { return false ; } for ( int loc0 = 1 ; loc0 < arg0 . length ( ) ; loc0 ++ ) { if ( ! Character . isJavaIdentifierPart ( arg0 . charAt ( loc0 ) ) ) { return false ; } } return true ; }"
    },
    {
        "question_id": 1523,
        "intent": "Load the configuration from the default location . The configuration will be automatically loaded from the default location the first time a value is queried or modified , if it had not been previously loaded . Only the first load request will be honored , so if the configuration is to be loaded from a non-default location , load name must be used prior to any other call . The configuration can be loaded only one time . Implementations must ignore load requests once a load is already successful , and must return false for each of those ignored requests .",
        "snippet": "boolean function ( ) { return concodeclass_config . loadDefault ( ) ; }"
    },
    {
        "question_id": 1524,
        "intent": "Add the utility values of an itemset to this sequence",
        "snippet": "void function ( List < Double > arg0 ) { concodeclass_profits . add ( arg0 ) ; }"
    },
    {
        "question_id": 1525,
        "intent": "The index of the output in transaction to which we refer",
        "snippet": "long function ( ) { return concodeclass_index ; }"
    },
    {
        "question_id": 1526,
        "intent": "Sets #mSeekBufferSizeBytes .",
        "snippet": "InStreamOptions function ( long arg0 ) { concodeclass_mSeekBufferSizeBytes = arg0 ; return this ; }"
    },
    {
        "question_id": 1527,
        "intent": "Get current UTC dateTime in SQL format .",
        "snippet": "String function ( ) { return concodefunc_formatUTC ( new Date ( ) , DateTimeFormat . SQL , false ) ; }"
    },
    {
        "question_id": 1528,
        "intent": "Increments the count to which the specified key is mapped in this frequency counter , or puts 1 if the map contains no mapping for this key .",
        "snippet": "void function ( T arg0 ) { Integer loc0 = concodeclass_counter . get ( arg0 ) ; if ( loc0 == null ) { concodeclass_counter . put ( arg0 , 1 ) ; } else { concodeclass_counter . put ( arg0 , loc0 + 1 ) ; } }"
    },
    {
        "question_id": 1529,
        "intent": "Sets the test result lst .",
        "snippet": "void function ( List < TestResultDTO > arg0 ) { this . concodeclass_testResultLst = arg0 ; }"
    },
    {
        "question_id": 1530,
        "intent": "Wrap Java object as Scriptable instance to allow full access to its methods and fields from JavaScript . #wrap Context , Scriptable , Object , Class and #wrapNewObject Context , Scriptable , Object call this methodwhen they can not convert javaObject to JavaScript primitive value or JavaScript array . Subclasses can override the method to provide custom wrappers for Java objects .",
        "snippet": "Scriptable function ( Context arg0 , Scriptable arg1 , Object arg2 , Class < ? > arg3 ) { Scriptable loc0 ; loc0 = new NativeJavaObject ( arg1 , arg2 , arg3 ) ; return loc0 ; }"
    },
    {
        "question_id": 1531,
        "intent": "Gets the storage tier alias of the location .",
        "snippet": "String function ( ) { return concodeclass_mTierAlias ; }"
    },
    {
        "question_id": 1532,
        "intent": "Gets the canonical PaymentChannelServerState object for this channel , either by returning an existing oneor by creating a new one .",
        "snippet": "PaymentChannelServerState function ( Wallet arg0 , TransactionBroadcaster arg1 ) { if ( concodeclass_state == null ) concodeclass_state = new PaymentChannelServerState ( this , arg0 , arg1 ) ; checkArgument ( arg0 == concodeclass_state . arg0 ) ; return concodeclass_state ; }"
    },
    {
        "question_id": 1533,
        "intent": "Obtain a suitable name for use in Javascript for an attribute . This function is purely a tribute to the awful modularity of XmlSchema .",
        "snippet": "String function ( XmlSchemaAttribute arg0 , boolean arg1 ) { if ( arg1 ) { String loc0 = concodefunc_getPrefix ( arg0 . getQName ( ) . getNamespaceURI ( ) ) ; concodefunc_collect ( loc0 , arg0 . getQName ( ) . getNamespaceURI ( ) ) ; return loc0 + \"srini_string\" + arg0 . getName ( ) ; } return arg0 . getName ( ) ; }"
    },
    {
        "question_id": 1534,
        "intent": "A scan for this query is created and returned , as follows . First , the method materializes its RHS query . It then determines the optimal chunk size , based on the size of the materialized file and the number of available buffers . It creates a chunk plan for each chunk , saving them in a list . Finally , it creates a multiscan for this list of plans , and returns that scan .",
        "snippet": "Scan function ( ) { TempTable loc0 = concodefunc_copyRecordsFrom ( concodeclass_rhs ) ; TableInfo loc1 = loc0 . getTableInfo ( ) ; Scan loc2 = concodeclass_lhs . open ( ) ; return new MultiBufferProductScan ( loc2 , loc1 , concodeclass_tx ) ; }"
    },
    {
        "question_id": 1535,
        "intent": "Sets whether the message should be trated as high priority or not .",
        "snippet": "void function ( boolean arg0 ) { concodeclass__highPriority = arg0 ; }"
    },
    {
        "question_id": 1536,
        "intent": "Obtains the ServerSession associated with a given user id .",
        "snippet": "ServerSession function ( String arg0 ) { return concodeclass_userSessionMap . get ( arg0 ) ; }"
    },
    {
        "question_id": 1537,
        "intent": "Gets the description of the third-party application .",
        "snippet": "String function ( ) { return concodeclass_applicationDescription ; }"
    },
    {
        "question_id": 1538,
        "intent": "Returns a list of all locations .",
        "snippet": "List < String > function ( ) { return concodeclass_links . getVertexLabels ( ) ; }"
    },
    {
        "question_id": 1539,
        "intent": "Gets the Constant value of the specified field . If the field is a group field , then its value can be obtained from the saved group value . Otherwise , the value is obtained from the appropriate aggregation function .",
        "snippet": "Constant function ( String arg0 ) { if ( concodeclass_groupfields . contains ( arg0 ) ) return concodeclass_groupval . getVal ( arg0 ) ; for ( AggregationFn loc0 : concodeclass_aggfns ) if ( loc0 . fieldName ( ) . equals ( arg0 ) ) return loc0 . value ( ) ; throw new RuntimeException ( \"srini_string\" + arg0 + \"srini_string\" ) ; }"
    },
    {
        "question_id": 1540,
        "intent": "Gets the value of the testData property .",
        "snippet": "String function ( ) { return concodeclass_testData ; }"
    },
    {
        "question_id": 1541,
        "intent": "Adds a property to the cluster resource .",
        "snippet": "LocalAlluxioClusterResource function ( PropertyKey arg0 , Object arg1 ) { concodeclass_mConfiguration . put ( arg0 , arg1 . toString ( ) ) ; return this ; }"
    },
    {
        "question_id": 1542,
        "intent": "Returns the input if valid over the given black list patterns else throws an IdentityValidationException",
        "snippet": "String function ( String arg0 , String ... arg1 ) { if ( StringUtils . isEmpty ( arg0 ) || concodefunc_isValidOverBlackListPatterns ( arg0 , arg1 ) ) { return arg0 ; } throw new IdentityValidationException ( concodeclass_msgSection1 + String . format ( concodeclass_msgSection3 , concodefunc_getPatternString ( arg1 ) ) ) ; }"
    },
    {
        "question_id": 1543,
        "intent": "Returns the schema of the materialized table , which is the same as in the underlying plan .",
        "snippet": "Schema function ( ) { return concodeclass_srcplan . schema ( ) ; }"
    },
    {
        "question_id": 1544,
        "intent": "Complementary operation to filterOnly",
        "snippet": "Result function ( List < String > arg0 ) { Result loc0 = new Result ( ) ; for ( ResultEntry loc1 : this . concodeclass_log ) { if ( arg0 . contains ( loc1 . getSource ( ) ) ) { loc0 . add ( loc1 ) ; } } return loc0 ; }"
    },
    {
        "question_id": 1545,
        "intent": "Builds a map of the supplied keys to random colors . Each color is selected randomly and tinted with a fixed tint .",
        "snippet": "Map < T , String > function ( Set < T > arg0 ) { Map < T , String > loc0 = new HashMap < T , String > ( ) ; for ( T loc1 : arg0 ) { Color loc2 = concodefunc_tintColor ( concodefunc_getRandomColor ( ) , concodeclass_FIXED_TINT_FACTOR ) ; loc0 . put ( loc1 , concodefunc_getColorString ( loc2 ) ) ; } return loc0 ; }"
    },
    {
        "question_id": 1546,
        "intent": "Sets the population size and number of iterations to zero .",
        "snippet": "void function ( ) { concodefunc_setPopulationSize ( 0 ) ; concodefunc_setIterations ( 0 ) ; }"
    },
    {
        "question_id": 1547,
        "intent": "Writes out the domains assignments section of the RIFL document",
        "snippet": "void function ( Document arg0 , Element arg1 ) { Element loc0 = arg0 . createElement ( \"srini_string\" ) ; arg1 . appendChild ( loc0 ) ; for ( SourceSinkDomPair loc1 : this . concodeclass_document . getDomainAssignment ( ) ) concodefunc_writeSourceSinkDomPair ( loc1 , arg0 , loc0 ) ; }"
    },
    {
        "question_id": 1548,
        "intent": "Returns number of top level result values .",
        "snippet": "int function ( ) { return concodeclass_values . size ( ) ; }"
    },
    {
        "question_id": 1549,
        "intent": "Supply the encoding to be used throughout the persistence mechanism .",
        "snippet": "String function ( ) { return \"srini_string\" ; }"
    },
    {
        "question_id": 1550,
        "intent": "Logs a new message with the specified color code .",
        "snippet": "void function ( Object arg0 , String arg1 , String arg2 ) { Class loc0 = arg0 . getClass ( ) ; XDebugMessage loc1 = new XDebugMessage ( loc0 . getName ( ) , arg1 , arg2 ) ; concodeclass_messages . add ( loc1 ) ; }"
    },
    {
        "question_id": 1551,
        "intent": "Adds numerical information to be displayed . Note that none of the information added after #apply has been called , will be displayed .",
        "snippet": "MetadataEditorCompat function ( int arg0 , long arg1 ) { if ( concodeclass_HAS_REMOTE_CONTROL_APIS ) { ( ( RemoteControlClient . MetadataEditor ) concodeclass_mActualMetadataEditor ) . putLong ( arg0 , arg1 ) ; } return this ; }"
    },
    {
        "question_id": 1552,
        "intent": "SpinLeft spins the drone a little to the left",
        "snippet": "void function ( ) { SpaceXGUI . getInstance ( ) . appendToConsole ( concodeclass_TAG , \"srini_string\" ) ; concodeclass_cmd . setLedsAnimation ( LEDAnimation . BLINK_RED , 3 , ( concodeclass_spinTime / 1000 ) ) ; concodeclass_cmd . spinLeft ( concodeclass_spinSpeed ) . doFor ( concodeclass_spinTime ) ; concodeclass_cmd . hover ( ) . doFor ( concodeclass_hoverTime ) ; }"
    },
    {
        "question_id": 1553,
        "intent": "GET / ingredients / : id : get the `` id '' ingredient .",
        "snippet": "ResponseEntity < Ingredient > function ( @ PathVariable String arg0 ) { concodeclass_log . debug ( \"srini_string\" , arg0 ) ; Ingredient loc0 = concodeclass_ingredientService . findOne ( arg0 ) ; return Optional . ofNullable ( loc0 ) . map ( result -> new ResponseEntity < > ( result , HttpStatus . OK ) ) . orElse ( new ResponseEntity < > ( HttpStatus . NOT_FOUND ) ) ; }"
    },
    {
        "question_id": 1554,
        "intent": "Template delegator for testNode method . OVERRIDE to add custom logic",
        "snippet": "void function ( Element arg0 ) { concodefunc_unhandled ( arg0 ) ; }"
    },
    {
        "question_id": 1555,
        "intent": "Get string value from database , replacing empty string with Empty",
        "snippet": "String function ( ResultSet arg0 , String arg1 ) { return getStringValue ( arg0 , arg1 , true ) ; }"
    },
    {
        "question_id": 1556,
        "intent": "Returns the package name of classFullName according to the Java Language Specification section 6.7 . Unlike Class #getPackage , this method only parses the class name , without attempting to define the Package and hence load files .",
        "snippet": "String function ( String arg0 ) { int loc0 = arg0 . lastIndexOf ( '.' ) ; return ( loc0 < 0 ) ? \"srini_string\" : arg0 . substring ( 0 , loc0 ) ; }"
    },
    {
        "question_id": 1557,
        "intent": "Additionally - two SimpleTypedNameDeclaration are equal , if theycontain types , that can be cast into each other .",
        "snippet": "boolean function ( Object arg0 ) { return concodefunc_internalEquals ( arg0 ) || concodefunc_internalEqualsNext ( arg0 ) ; }"
    },
    {
        "question_id": 1558,
        "intent": "Returns the part number associated with a line item .",
        "snippet": "String function ( ) { String loc0 = \"srini_string\" ; try { loc0 = concodeclass_lineItem . getLineItem ( ) . getItem ( ) . getSellersItemIdentification ( ) . getID ( ) . getValue ( ) ; } catch ( NullPointerException loc1 ) { } return loc0 ; }"
    },
    {
        "question_id": 1559,
        "intent": "Set the number of bytes to skip after a Unicode character .",
        "snippet": "void function ( int arg0 ) { concodeclass_state . unicodeAlternateSkipCount = arg0 ; }"
    },
    {
        "question_id": 1560,
        "intent": "You 'd probably want to call TMXTile #setGlobalTileID TMXTiledMap , int instead .",
        "snippet": "void function ( final TextureRegion arg0 ) { this . concodeclass_mTextureRegion = arg0 ; }"
    },
    {
        "question_id": 1561,
        "intent": "Tests the BlockStoreMeta #getCapacityBytes method .",
        "snippet": "void function ( ) { Assert . assertEquals ( TieredBlockStoreTestUtils . getDefaultTotalCapacityBytes ( ) , concodeclass_mBlockStoreMeta . getCapacityBytes ( ) ) ; }"
    },
    {
        "question_id": 1562,
        "intent": "Reads a line of text . A line is considered to be terminated by any one of a line feed ' \\ n ' , a carriage return ' \\ r ' , or a carriage return followed immediately by a linefeed '' \\ r \\ n '' .",
        "snippet": "String function ( ) { while ( concodeclass_lines . peek ( ) == null ) { concodeclass_cbuf . clear ( ) ; int loc0 = ( concodeclass_reader != null ) ? concodeclass_reader . loc0 ( concodeclass_buf , 0 , concodeclass_buf . length ) : concodeclass_readable . loc0 ( concodeclass_cbuf ) ; if ( loc0 == - 1 ) { concodeclass_lineBuf . finish ( ) ; break ; } concodeclass_lineBuf . add ( concodeclass_buf , 0 , loc0 ) ; } return concodeclass_lines . poll ( ) ; }"
    },
    {
        "question_id": 1563,
        "intent": "Test method for net.sf.marineapi.nmea.parser.GSVParser #setSentenceCount int .",
        "snippet": "void function ( ) { concodeclass_gsv . setSentenceCount ( 1 ) ; assertEquals ( 1 , concodeclass_gsv . getSentenceCount ( ) ) ; concodeclass_gsv . setSentenceCount ( 2 ) ; assertEquals ( 2 , concodeclass_gsv . getSentenceCount ( ) ) ; }"
    },
    {
        "question_id": 1564,
        "intent": "set icon path",
        "snippet": "void function ( String arg0 ) { this . concodeclass_iconPath = arg0 ; }"
    },
    {
        "question_id": 1565,
        "intent": "Check if the proxy setting has username/password set .",
        "snippet": "boolean function ( ) { return ( this . concodeclass_properties . getProxy ( ) != null && this . concodeclass_properties . getProxy ( ) . getAuth ( ) != null && this . concodeclass_properties . getProxy ( ) . getAuth ( ) . getUsername ( ) != null && this . concodeclass_properties . getProxy ( ) . getAuth ( ) . getPassword ( ) != null ) ; }"
    },
    {
        "question_id": 1566,
        "intent": "Main entry point : parse RTF data from the input stream , and pass events based on the RTF content to the listener .",
        "snippet": "void function ( IRtfSource arg0 , IRtfListener arg1 ) { concodeclass_handler = new DefaultEventHandler ( arg1 ) ; IRtfParser loc0 = new RawRtfParser ( ) ; loc0 . parse ( arg0 , this ) ; }"
    },
    {
        "question_id": 1567,
        "intent": "Complementary operation to filterOnly",
        "snippet": "Result function ( String arg0 ) { Result loc0 = new Result ( ) ; for ( ResultEntry loc1 : this . concodeclass_log ) { if ( loc1 . getSource ( ) . equals ( arg0 ) ) { loc0 . add ( loc1 ) ; } } return loc0 ; }"
    },
    {
        "question_id": 1568,
        "intent": "Tests against the condition number from octave .",
        "snippet": "void function ( ) { double loc0 = NormOps . conditionP2 ( concodeclass_unzeroMatrix ) ; assertEquals ( 2.1655 , loc0 , 1e-3 ) ; concodefunc_checkUncountable ( NormOps . conditionP2 ( concodeclass_zeroMatrix ) ) ; }"
    },
    {
        "question_id": 1569,
        "intent": "Test case for OSSUnderFileSystem #delete String , boolean .",
        "snippet": "void function ( ) { Mockito . when ( concodeclass_mClient . listObjects ( Matchers . any ( ListObjectsRequest . class ) ) ) . thenThrow ( ServiceException . class ) ; boolean loc0 = concodeclass_mOSSUnderFileSystem . delete ( concodeclass_PATH , false ) ; Assert . assertFalse ( loc0 ) ; }"
    },
    {
        "question_id": 1570,
        "intent": "Get the Languages of a given source file .",
        "snippet": "List < Language > function ( File arg0 ) { return getLanguagesForFile ( arg0 . getName ( ) ) ; }"
    },
    {
        "question_id": 1571,
        "intent": "Prevents the given methods from being run as part of the test suite . Note : in principle this should never need to be used , but it might be useful if the semantics of an implementation disagree in unforeseen ways with the semantics expected by a test , or to keep dependent builds clean in spite of an erroneous test .",
        "snippet": "B function ( Method ... arg0 ) { return suppressing ( Arrays . asList ( arg0 ) ) ; }"
    },
    {
        "question_id": 1572,
        "intent": "Registers the instance of RemoteControlClient with the AudioManager .",
        "snippet": "void function ( AudioManager arg0 , RemoteControlClientCompat arg1 ) { if ( ! concodeclass_sHasRemoteControlAPIs ) { return ; } arg0 . registerRemoteControlClient ( ( RemoteControlClient ) arg1 . getActualRemoteControlClientObject ( ) ) ; }"
    },
    {
        "question_id": 1573,
        "intent": "Get the number of messages sent . This metrics is incremented after a message has been completely and successfully put on the wire .",
        "snippet": "long function ( ) { return concodeclass_messagesSent ; }"
    },
    {
        "question_id": 1574,
        "intent": "Remove and return one item from the set done in hash order . Return null if there are no items in the set .",
        "snippet": "lalr_item function ( ) { lalr_item loc0 ; if ( concodeclass__all . values ( ) . size ( ) == 0 ) return null ; loc0 = concodefunc_iterator ( ) . next ( ) ; concodefunc_remove ( loc0 ) ; return loc0 ; }"
    },
    {
        "question_id": 1575,
        "intent": "This field returns the URI associated with the connection in question .",
        "snippet": "URI function ( ) { return concodeclass_theURI ; }"
    },
    {
        "question_id": 1576,
        "intent": "logs the message prepended by the filter name copy of GenericServlet #log String",
        "snippet": "void function ( String arg0 ) { this . concodeclass_config . getServletContext ( ) . log ( this . concodeclass_config . getFilterName ( ) + \"srini_string\" + arg0 ) ; }"
    },
    {
        "question_id": 1577,
        "intent": "override only if needed - if claims are controlled by the identity provider , this will return null . If it is connector specific this must return the corresponding claim dialect .",
        "snippet": "String function ( ) { return null ; }"
    },
    {
        "question_id": 1578,
        "intent": "Test method for net.sf.marineapi.nmea.parser.GSVParser #getSatelliteInfo .",
        "snippet": "void function ( ) { GSVSentence loc0 = new GSVParser ( \"srini_string\" ) ; List < SatelliteInfo > loc1 = loc0 . getSatelliteInfo ( ) ; assertEquals ( 2 , loc1 . size ( ) ) ; concodefunc_testSatelliteInfo ( loc1 . get ( 0 ) , \"srini_string\" , 56 , 182 , 51 ) ; concodefunc_testSatelliteInfo ( loc1 . get ( 1 ) , \"srini_string\" , 38 , 163 , 47 ) ; }"
    },
    {
        "question_id": 1579,
        "intent": "Tests the DataByteBuffer #getNettyOutput method .",
        "snippet": "void function ( ) { DataByteBuffer loc0 = new DataByteBuffer ( concodeclass_mBuffer , concodeclass_LENGTH ) ; Object loc1 = loc0 . getNettyOutput ( ) ; Assert . assertTrue ( loc1 instanceof ByteBuf || loc1 instanceof FileRegion ) ; }"
    },
    {
        "question_id": 1580,
        "intent": "Whether logging is on or off .",
        "snippet": "boolean function ( ) { return concodeclass_loggingEnabled ; }"
    },
    {
        "question_id": 1581,
        "intent": "Get the client configured for this issuer",
        "snippet": "RegisteredClient function ( ServerConfiguration arg0 ) { return concodeclass_clients . get ( arg0 . getIssuer ( ) ) ; }"
    },
    {
        "question_id": 1582,
        "intent": "Helper method to get a filename without its extension",
        "snippet": "String function ( String arg0 ) { String loc0 = arg0 ; int loc1 = arg0 . lastIndexOf ( '.' ) ; if ( loc1 != - 1 ) { loc0 = arg0 . substring ( 0 , loc1 ) ; } return loc0 ; }"
    },
    {
        "question_id": 1583,
        "intent": "Checks whether the class declares a field by the name given which is covered by the signature mask .",
        "snippet": "boolean function ( String arg0 , FieldSigMask arg1 ) { for ( FieldSignature loc0 : concodeclass_fields . keySet ( ) ) { if ( arg1 . covers ( loc0 ) ) { if ( concodeclass_fields . get ( loc0 ) . contains ( arg0 ) ) { return true ; } } } return false ; }"
    },
    {
        "question_id": 1584,
        "intent": "Call when the path itself has changed , but no structure changes have occurred .",
        "snippet": "void function ( TreePath arg0 ) { Object loc0 = arg0 . getLastPathComponent ( ) ; TreePath loc1 = arg0 . getParentPath ( ) ; if ( loc1 == null ) { concodefunc_fireChildrenChanged ( arg0 , null , null ) ; } else { Object loc2 = loc1 . getLastPathComponent ( ) ; concodefunc_fireChildChanged ( loc1 , concodefunc_getIndexOfChild ( loc2 , loc0 ) , loc0 ) ; } }"
    },
    {
        "question_id": 1585,
        "intent": "Called as a result of a previous service removal request .",
        "snippet": "void function ( long arg0 , int arg1 , ServiceInfoStat [ ] arg2 ) { }"
    },
    {
        "question_id": 1586,
        "intent": "Sets the test id .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_testId = arg0 ; }"
    },
    {
        "question_id": 1587,
        "intent": "Closes all connections to remote hosts associated with this TURN client .",
        "snippet": "void function ( ) { final Iterator < IoSession > loc0 = this . concodeclass_m_connections . values ( ) . iterator ( ) ; while ( loc0 . hasNext ( ) ) { final IoSession loc1 = loc0 . next ( ) ; loc1 . close ( ) ; loc0 . remove ( ) ; } }"
    },
    {
        "question_id": 1588,
        "intent": "Convert a workflows list into a JSONArray .",
        "snippet": "JSONArray function ( List < ? extends JsonWorkflowJob > arg0 ) { JSONArray loc0 = new JSONArray ( ) ; if ( arg0 != null ) { for ( JsonWorkflowJob loc1 : arg0 ) { loc0 . add ( loc1 . toJSONObject ( ) ) ; } } return loc0 ; }"
    },
    {
        "question_id": 1589,
        "intent": "Is the Gene mRNA down-regulated ?",
        "snippet": "boolean function ( ) { return ( concodeclass_mrnaValue == MRNA . DOWNREGULATED ) ; }"
    },
    {
        "question_id": 1590,
        "intent": "Returns the verb for the access token endpoint defaults to POST",
        "snippet": "Verb function ( ) { return Verb . POST ; }"
    },
    {
        "question_id": 1591,
        "intent": "Sets the cascade flag for this option .",
        "snippet": "DeleteLineageOptions function ( boolean arg0 ) { concodeclass_mCascade = arg0 ; return this ; }"
    },
    {
        "question_id": 1592,
        "intent": "Is the Gene mRNA upregulated ?",
        "snippet": "boolean function ( ) { return ( concodeclass_mrnaValue == MRNA . UPREGULATED ) ; }"
    },
    {
        "question_id": 1593,
        "intent": "Return the workflow run number , unless a rerun it is always 1 .",
        "snippet": "int function ( ) { return concodefunc_getWorkflow ( ) . getRun ( ) ; }"
    },
    {
        "question_id": 1594,
        "intent": "Inserts a key into the heirarchy . Used during deserialization : you normally do n't need this . Keys must be inserted in order .",
        "snippet": "void function ( DeterministicKey arg0 ) { ImmutableList < ChildNumber > loc0 = arg0 . getPath ( ) ; final DeterministicKey loc1 = arg0 . getParent ( ) ; if ( loc1 != null ) concodeclass_lastChildNumbers . put ( loc1 . getPath ( ) , arg0 . getChildNumber ( ) ) ; concodeclass_keys . put ( loc0 , arg0 ) ; }"
    },
    {
        "question_id": 1595,
        "intent": "Gets the test result lst .",
        "snippet": "List < TestResultDTO > function ( ) { return concodeclass_testResultLst ; }"
    },
    {
        "question_id": 1596,
        "intent": "Get the EncryptedKeyElement object of the KeyInfoElement object",
        "snippet": "EncryptedKeyElement function ( ) { return concodeclass_m_EncryptedKeyElement ; }"
    },
    {
        "question_id": 1597,
        "intent": "Add an image url that failed loading to be tracked",
        "snippet": "void function ( String arg0 ) { concodeclass_failedImages . add ( arg0 ) ; }"
    },
    {
        "question_id": 1598,
        "intent": "Setter for property ` currentScenario ' .",
        "snippet": "void function ( boolean arg0 ) { concodeclass_isCurrentScenario = arg0 ; }"
    },
    {
        "question_id": 1599,
        "intent": "Reads file of words to ignore . Ignore words are added to a Set . The IOException is passed to caller because we certinaly do n't know what the user interface issue is .",
        "snippet": "void function ( File arg0 ) { Scanner loc0 = new Scanner ( arg0 ) ; loc0 . useDelimiter ( \"srini_string\" ) ; while ( loc0 . hasNext ( ) ) { concodeclass__ignoreWords . add ( loc0 . next ( ) ) ; } loc0 . close ( ) ; }"
    },
    {
        "question_id": 1600,
        "intent": "Sets the checksum .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_checksum = arg0 ; }"
    },
    {
        "question_id": 1601,
        "intent": "Perform the actual transformation",
        "snippet": "void function ( final Result arg0 ) { concodefunc_withExceptionHandling ( new Trans < Object > ( ) { public Object concodefunc_transform ( ) { concodeclass_transformation . transformTo ( arg0 ) ; return null ; } } ) ; }"
    },
    {
        "question_id": 1602,
        "intent": "remove a node",
        "snippet": "boolean function ( Node arg0 ) { boolean loc0 = concodeclass_graph . removeVertex ( arg0 ) ; if ( loc0 ) { concodeclass_nodesByIds . remove ( arg0 . getId ( ) ) ; } return loc0 ; }"
    },
    {
        "question_id": 1603,
        "intent": "Add a ruleset for a language . Only one ruleset can be added for a specific language . If ruleSet.getLanguage is null , it is assumed to be a RuleSet of java rules .",
        "snippet": "void function ( RuleSet arg0 ) { concodeclass_ruleSets . add ( arg0 ) ; concodeclass_ruleChain . add ( arg0 ) ; }"
    },
    {
        "question_id": 1604,
        "intent": "Updates the internal state of this NamespaceHelper to reflect the existance of the XML token pointed to by the cursor .",
        "snippet": "void function ( XmlCursor arg0 , ObjArray arg1 ) { javax . xml . namespace . QName loc0 = arg0 . getName ( ) ; String loc1 = loc0 . getNamespaceURI ( ) ; Set loc2 = ( Set ) concodeclass_uriToPrefix . get ( loc1 ) ; if ( loc2 == null || loc2 . size ( ) == 0 ) { concodeclass_undeclared . add ( loc1 ) ; if ( arg1 != null ) arg1 . add ( new Namespace ( concodeclass_lib , loc1 ) ) ; } }"
    },
    {
        "question_id": 1605,
        "intent": "Create an instance of GetOfferDetailsResponse.Return.DetailOfferData",
        "snippet": "GetOfferDetailsResponse . Return . DetailOfferData function ( ) { return new GetOfferDetailsResponse . Return . DetailOfferData ( ) ; }"
    },
    {
        "question_id": 1606,
        "intent": "Returns a supplier whose get method synchronizes on delegate before callingit , making it thread-safe .",
        "snippet": "Supplier < T > concodeclass_function ( Supplier < T > arg0 ) { return new ThreadSafeSupplier < T > ( Preconditions . checkNotNull ( arg0 ) ) ; }"
    },
    {
        "question_id": 1607,
        "intent": "Convert a Categorical Distribution into a column vector in Matrix form .",
        "snippet": "Matrix function ( CategoricalDistribution arg0 ) { double [ ] loc0 = arg0 . getValues ( ) ; return new Matrix ( loc0 , loc0 . length ) ; }"
    },
    {
        "question_id": 1608,
        "intent": "Retrieves the results of last evaluation .",
        "snippet": "List < Node > function ( ) { return concodeclass_evaluationResults ; }"
    },
    {
        "question_id": 1609,
        "intent": "Check whether the tracker is started .",
        "snippet": "boolean function ( ) { return concodeclass_services != null ; }"
    },
    {
        "question_id": 1610,
        "intent": "Ensure that there is enough space available to write the requested number of bytes . If necessary the internal buffer is resized .",
        "snippet": "void function ( int arg0 ) { if ( concodeclass_mWriter . remaining ( ) >= arg0 ) { return ; } byte [ ] loc0 = new byte [ ( concodeclass_mBuffer . length + arg0 ) * 2 ] ; System . arraycopy ( concodeclass_mBuffer , 0 , loc0 , 0 , concodeclass_mWriter . position ( ) ) ; concodeclass_mBuffer = loc0 ; ByteBuffer loc1 = ByteBuffer . wrap ( loc0 ) ; loc1 . position ( concodeclass_mWriter . position ( ) ) ; concodeclass_mWriter = loc1 ; }"
    },
    {
        "question_id": 1611,
        "intent": "Throws an exception if the current token is not a string . Otherwise , returns that string and moves to the next token .",
        "snippet": "String function ( ) { if ( ! concodefunc_matchStringConstant ( ) ) throw new BadSyntaxException ( ) ; String loc0 = concodeclass_tok . sval ; concodefunc_nextToken ( ) ; return loc0 ; }"
    },
    {
        "question_id": 1612,
        "intent": "A proxy method that adds the node n to the graph being tested . In case of Immutablegraph implementations , this method should add n to the graph builder and build a newgraph with the current builder state .",
        "snippet": "boolean function ( Integer arg0 ) { return concodeclass_graph . addNode ( arg0 ) ; }"
    },
    {
        "question_id": 1613,
        "intent": "Gets the custom Produces media types",
        "snippet": "List < String > function ( ) { return concodeclass_produceMediaTypes ; }"
    },
    {
        "question_id": 1614,
        "intent": "Parses an entire JSON object in the format described by Json communication structure",
        "snippet": "Message function ( String arg0 ) { Object loc0 ; try { loc0 = JSONValue . parseWithException ( arg0 ) ; } catch ( ParseException loc1 ) { throw new ParserException ( \"srini_string\" + loc1 . toString ( ) + \"srini_string\" + arg0 + \"srini_string\" ) ; } return concodefunc_parseJSONValueToMessage ( loc0 ) ; }"
    },
    {
        "question_id": 1615,
        "intent": "Sets up internal data structures and creates a copy of the input matrix .",
        "snippet": "void function ( DenseMatrix64F arg0 ) { concodeclass_UBV = arg0 ; concodeclass_m = concodeclass_UBV . numRows ; concodeclass_n = concodeclass_UBV . numCols ; concodeclass_min = Math . min ( concodeclass_m , concodeclass_n ) ; int loc0 = Math . loc0 ( concodeclass_m , concodeclass_n ) ; if ( b . length < loc0 + 1 ) { b = new double [ loc0 + 1 ] ; u = new double [ loc0 + 1 ] ; } if ( gammasU . length < concodeclass_m ) { gammasU = new double [ concodeclass_m ] ; } if ( gammasV . length < concodeclass_n ) { gammasV = new double [ concodeclass_n ] ; } }"
    },
    {
        "question_id": 1616,
        "intent": "Convert to a string .",
        "snippet": "String function ( ) { if ( concodefunc_label ( ) != null ) return concodefunc_label ( ) + \"srini_string\" ; else return \"srini_string\" ; }"
    },
    {
        "question_id": 1617,
        "intent": "Returns the URL of an image for the MediaInfo at the given index . Index should be anumber between 0 and n-1 where n is the number of images for that given item .",
        "snippet": "String function ( MediaInfo arg0 , int arg1 ) { Uri loc0 = concodefunc_getImageUri ( arg0 , arg1 ) ; if ( loc0 != null ) { return loc0 . toString ( ) ; } return null ; }"
    },
    {
        "question_id": 1618,
        "intent": "get total elapsed .",
        "snippet": "long function ( ) { return concodeclass_totalElapsed . get ( ) ; }"
    },
    {
        "question_id": 1619,
        "intent": "Skips any comment lines and retrieves a data line from the unmapped file created by liftOver .",
        "snippet": "String function ( BufferedReader arg0 ) { String loc0 = arg0 . readLine ( ) ; while ( loc0 != null && loc0 . trim ( ) . startsWith ( \"srini_string\" ) ) { loc0 = arg0 . readLine ( ) ; } return loc0 ; }"
    },
    {
        "question_id": 1620,
        "intent": "Test method for net.sf.marineapi.nmea.parser.VTGParser #setMagneticCourse double .",
        "snippet": "void function ( ) { final double loc0 = 95.56789 ; concodeclass_vtg . setMagneticCourse ( loc0 ) ; assertTrue ( concodeclass_vtg . toString ( ) . contains ( \"srini_string\" ) ) ; assertEquals ( loc0 , concodeclass_vtg . getMagneticCourse ( ) , 0.1 ) ; }"
    },
    {
        "question_id": 1621,
        "intent": "Sets MessageContext",
        "snippet": "void function ( MessageContext arg0 ) { concodeclass_mc = arg0 ; }"
    },
    {
        "question_id": 1622,
        "intent": "Returns the hash code for the TtlBucket .",
        "snippet": "int function ( ) { return Objects . hashCode ( concodeclass_mTtlIntervalStartTimeMs ) ; }"
    },
    {
        "question_id": 1623,
        "intent": "Returns the specified singular value .",
        "snippet": "double function ( int arg0 ) { return concodeclass_W . get ( arg0 , arg0 ) ; }"
    },
    {
        "question_id": 1624,
        "intent": "Get all the RuleSets .",
        "snippet": "RuleSet [ ] function ( ) { return concodeclass_ruleSets . toArray ( new RuleSet [ concodeclass_ruleSets . size ( ) ] ) ; }"
    },
    {
        "question_id": 1625,
        "intent": "Gets the value of the given parameter as an integer",
        "snippet": "int function ( String arg0 ) { try { return Integer . parseInt ( concodeclass_params . get ( arg0 ) ) ; } catch ( Exception loc0 ) { return - 1 ; } }"
    },
    {
        "question_id": 1626,
        "intent": "Checks whether these bits imply the given bits .",
        "snippet": "boolean function ( Bits arg0 ) { if ( arg0 != null ) { return ( ordinal ( ) & arg0 . ordinal ( ) ) == arg0 . ordinal ( ) ; } return false ; }"
    },
    {
        "question_id": 1627,
        "intent": "This method is called before the connection is disconnected . Implementations should add any additional operations before the connection is disconnected .",
        "snippet": "void function ( ) { }"
    },
    {
        "question_id": 1628,
        "intent": "Sets the checks if is active .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_isActive = arg0 ; }"
    },
    {
        "question_id": 1629,
        "intent": "Returns the next value of the current log record , assuming it is a string .",
        "snippet": "String function ( ) { String loc0 = concodeclass_pg . getString ( concodeclass_pos ) ; concodeclass_pos += STR_SIZE ( loc0 . length ( ) ) ; return loc0 ; }"
    },
    {
        "question_id": 1630,
        "intent": "Creates a CascadedStyle , setting the display property to to the value of the display parameter .",
        "snippet": "CascadedStyle function ( IdentValue arg0 ) { CSSPrimitiveValue loc0 = new PropertyValue ( arg0 ) ; List loc1 = Collections . singletonList ( new PropertyDeclaration ( CSSName . DISPLAY , loc0 , true , StylesheetInfo . USER ) ) ; return new CascadedStyle ( loc1 . iterator ( ) ) ; }"
    },
    {
        "question_id": 1631,
        "intent": "Returns short message of the log record .",
        "snippet": "String function ( ) { if ( concodeclass_title == null ) { concodeclass_title = concodefunc_avoidNull ( concodeclass_xmlParser . getTitle ( ) ) ; } return concodeclass_title ; }"
    },
    {
        "question_id": 1632,
        "intent": "Puts a new value in the property table with the appropriate flags",
        "snippet": "int function ( Object arg0 ) { int loc0 = concodeclass__mask ; int loc1 = System . identityHashCode ( arg0 ) % loc0 & loc0 ; Object [ ] loc2 = concodeclass__keys ; while ( true ) { Object loc3 = loc2 [ loc1 ] ; if ( loc3 == null ) return concodeclass_NULL ; else if ( loc3 == arg0 ) return concodeclass__values [ loc1 ] ; loc1 = ( loc1 + 1 ) % loc0 ; } }"
    },
    {
        "question_id": 1633,
        "intent": "Get the current placement hint .",
        "snippet": "int function ( ) { return concodeclass_placementHint ; }"
    },
    {
        "question_id": 1634,
        "intent": "Calls each of the registered ServiceContractResolver instances to resolve the location of the service 's contract . It returns the location from the first resolver that matches the QName to a location .",
        "snippet": "URI function ( QName arg0 ) { for ( ServiceContractResolver loc0 : concodeclass_resolvers ) { URI loc1 = loc0 . getContractLocation ( arg0 ) ; if ( null != loc1 ) { return loc1 ; } } return null ; }"
    },
    {
        "question_id": 1635,
        "intent": "Tests if the game is finished . The game is finished if neither side has a legal move .",
        "snippet": "boolean function ( ) { return ! ( concodefunc_hasMoves ( OthelloSide . BLACK ) || concodefunc_hasMoves ( OthelloSide . WHITE ) ) ; }"
    },
    {
        "question_id": 1636,
        "intent": "Test of getResourceBundleAsProperties method , of class DBType .",
        "snippet": "void function ( ) { System . out . println ( \"srini_string\" ) ; ResourceBundle loc0 = ResourceBundle . getBundle ( DBType . class . getPackage ( ) . getName ( ) + \"srini_string\" ) ; Properties loc1 = concodeclass_testProperties ; Properties loc2 = DBType . getResourceBundleAsProperties ( loc0 ) ; Assert . assertEquals ( loc1 , loc2 ) ; }"
    },
    {
        "question_id": 1637,
        "intent": "Adds a task to the queue and makes sure a worker thread is running , unless the queue has been suspended . If this method throws , e.g. a RejectedExecutionException from the delegate executor , execution of tasks will stop until a call to this method or to #resume is made .",
        "snippet": "void function ( Runnable arg0 ) { synchronized ( concodeclass_internalLock ) { concodeclass_queue . add ( arg0 ) ; } concodefunc_startQueueWorker ( ) ; }"
    },
    {
        "question_id": 1638,
        "intent": "Set the Date that this Token expires",
        "snippet": "void function ( Date arg0 ) { this . concodeclass_expires = arg0 ; }"
    },
    {
        "question_id": 1639,
        "intent": "Ideally this should be configurable . For the moment , hard code the priority .",
        "snippet": "int function ( ) { return concodeclass_priority ; }"
    },
    {
        "question_id": 1640,
        "intent": "Returns dividend / divisor , where the dividend and divisor are treated as unsigned 32-bit quantities .",
        "snippet": "int function ( int arg0 , int arg1 ) { return ( int ) ( concodefunc_toLong ( arg0 ) / concodefunc_toLong ( arg1 ) ) ; }"
    },
    {
        "question_id": 1641,
        "intent": "Insist that a Type is a parameterized type of one parameter . This is used to decompose Holders , for example .",
        "snippet": "Type function ( Type arg0 ) { return getSingleTypeParameter ( arg0 , 0 ) ; }"
    },
    {
        "question_id": 1642,
        "intent": "Allow writing of collections when the type of the collection object is known via an java.lang.reflect.Type object .",
        "snippet": "AegisType function ( AegisContext arg0 , Object arg1 , java . lang . reflect . Type arg2 ) { if ( arg2 == null ) { return getWriteTypeStandalone ( arg0 , arg1 , ( AegisType ) null ) ; } else { return arg0 . getTypeMapping ( ) . getTypeCreator ( ) . createType ( arg2 ) ; } }"
    },
    {
        "question_id": 1643,
        "intent": "Generates and returns a new sequence identifier .",
        "snippet": "Identifier function ( ) { return concodeclass_reliableEndpoint . getManager ( ) . getIdGenerator ( ) . generateSequenceIdentifier ( ) ; }"
    },
    {
        "question_id": 1644,
        "intent": "Returns the number of distinct field values in the sorted table , which is the same as in the underlying query .",
        "snippet": "int function ( String arg0 ) { return concodeclass_p . distinctValues ( arg0 ) ; }"
    },
    {
        "question_id": 1645,
        "intent": "Hashes a key in ByteBuffer into a non-zero , one byte fingerprint .",
        "snippet": "byte function ( ByteBuffer arg0 ) { byte [ ] loc0 = BufferUtils . newByteArrayFromByteBuffer ( arg0 ) ; return fingerprintHash ( loc0 ) ; }"
    },
    {
        "question_id": 1646,
        "intent": "Tests that block locks are not returned to the pool when they are still in use .",
        "snippet": "void function ( ) { concodefunc_setMaxLocks ( 1 ) ; final BlockLockManager loc0 = new BlockLockManager ( ) ; long loc1 = loc0 . lockBlock ( concodeclass_TEST_SESSION_ID , 1 , BlockLockType . READ ) ; loc0 . lockBlock ( concodeclass_TEST_SESSION_ID , 1 , BlockLockType . READ ) ; loc0 . unlockBlock ( loc1 ) ; concodefunc_lockExpectingHang ( loc0 , 2 ) ; }"
    },
    {
        "question_id": 1647,
        "intent": "Returns a string , of length at least minLength , consisting of string prependedwith as many copies of padChar as are necessary to reach that length . For example , padStart `` 7 '' , 3 , ' 0 ' returns `` 007 '' padStart `` 2010 '' , 3 , ' 0 ' returns `` 2010 '' See java.util.Formatter for a richer set of formatting capabilities .",
        "snippet": "String function ( String arg0 , int arg1 , char arg2 ) { checkNotNull ( arg0 ) ; if ( arg0 . length ( ) >= arg1 ) { return arg0 ; } StringBuilder loc0 = new StringBuilder ( arg1 ) ; for ( int loc1 = arg0 . length ( ) ; loc1 < arg1 ; loc1 ++ ) { loc0 . append ( arg2 ) ; } loc0 . append ( arg0 ) ; return loc0 . toString ( ) ; }"
    },
    {
        "question_id": 1648,
        "intent": "Test whether the device has a working pressure sensor",
        "snippet": "boolean function ( ) { Assert . assertNotNull ( concodeclass_instance ) ; return concodeclass_instance . mHasPressureSensor ; }"
    },
    {
        "question_id": 1649,
        "intent": "Register item in the matrix",
        "snippet": "void function ( int arg0 , int arg1 , int arg2 , int arg3 ) { matrixItemUtility [ arg0 ] [ arg1 ] = arg2 ; matrixItemRemainingUtility [ arg0 ] [ arg1 ] = arg3 ; }"
    },
    {
        "question_id": 1650,
        "intent": "Restores errorLevel to folder one",
        "snippet": "void function ( ) { this . concodeclass_errorLevel = this . concodeclass_errorLevelFolder ; }"
    },
    {
        "question_id": 1651,
        "intent": "If field is not found in header or data line , or is empty , it just returns empty field value `` NA '' .",
        "snippet": "String function ( int arg0 , String [ ] arg1 ) { try { if ( arg1 [ arg0 ] . length ( ) == 0 ) { return concodeclass_NA_STRING ; } else { return arg1 [ arg0 ] ; } } catch ( ArrayIndexOutOfBoundsException loc0 ) { return concodeclass_NA_STRING ; } }"
    },
    {
        "question_id": 1652,
        "intent": "Sets the expected data unit id .",
        "snippet": "void function ( Long arg0 ) { this . concodeclass_expectedDataUnitId = arg0 ; }"
    },
    {
        "question_id": 1653,
        "intent": "Helper function for null test . Throws an interal_error exception if its parameter is null .",
        "snippet": "void function ( Object arg0 ) { if ( arg0 == null ) throw new internal_error ( \"srini_string\" ) ; }"
    },
    {
        "question_id": 1654,
        "intent": "Queues up a save in the background . Useful for not very important wallet changes .",
        "snippet": "void function ( ) { if ( concodeclass_savePending . getAndSet ( true ) ) return ; concodeclass_executor . schedule ( concodeclass_saver , concodeclass_delay , concodeclass_delayTimeUnit ) ; }"
    },
    {
        "question_id": 1655,
        "intent": "Tests symmRankNMinus_U with various sized input matrices",
        "snippet": "void function ( ) { concodefunc_checkSymmRankNMinus_U ( concodeclass_N , concodeclass_N - 2 ) ; concodefunc_checkSymmRankNMinus_U ( concodeclass_N * 2 + 1 , concodeclass_N - 2 ) ; concodefunc_checkSymmRankNMinus_U ( concodeclass_N - 1 , concodeclass_N - 2 ) ; }"
    },
    {
        "question_id": 1656,
        "intent": "Return true if this goal conflicts with the other ; that is passes running over both goals could access the same data .",
        "snippet": "boolean function ( Goal arg0 ) { return concodeclass_job ( ) != null && concodeclass_job ( ) == arg0 . job ( ) ; }"
    },
    {
        "question_id": 1657,
        "intent": "Gets the value of the workflowImplId property .",
        "snippet": "String function ( ) { return concodeclass_workflowImplId ; }"
    },
    {
        "question_id": 1658,
        "intent": "Configure whether exceptions during applying a rule should be ignored or not . If set to true then such exceptions are logged as warnings and the processing is continued with the next rule - the failing rule is simply skipped . This is the default behavior . If set to false then the processing will be aborted with the exception . This is especially useful during unit tests , in order to not oversee any exceptions .",
        "snippet": "void function ( boolean arg0 ) { this . concodeclass_ignoreExceptions = arg0 ; }"
    },
    {
        "question_id": 1659,
        "intent": "Returns the input if valid over the given white list patterns else throws an IdentityValidationException",
        "snippet": "String function ( String arg0 , String ... arg1 ) { if ( StringUtils . isEmpty ( arg0 ) || concodefunc_isValidOverWhiteListPatterns ( arg0 , arg1 ) ) { return arg0 ; } throw new IdentityValidationException ( concodeclass_msgSection1 + String . format ( concodeclass_msgSection2 , concodefunc_getPatternString ( arg1 ) ) ) ; }"
    },
    {
        "question_id": 1660,
        "intent": "Test method for net.sf.marineapi.nmea.parser.MWVParser #setSpeed double .",
        "snippet": "void function ( ) { final double loc0 = 7.75 ; concodeclass_mwv . setSpeed ( loc0 ) ; assertEquals ( loc0 , concodeclass_mwv . getSpeed ( ) , 0.1 ) ; }"
    },
    {
        "question_id": 1661,
        "intent": "Delay processing for specified milliseconds . Should be `` small '' to prevent the client from timing out .",
        "snippet": "long function ( ) { return concodeclass_delay ; }"
    },
    {
        "question_id": 1662,
        "intent": "Test for setLongitude",
        "snippet": "void function ( ) { assertEquals ( 25.0 , concodeclass_instance . getLongitude ( ) , 0.0000001 ) ; concodeclass_instance . setLongitude ( 180.0 ) ; assertEquals ( 180 , concodeclass_instance . getLongitude ( ) , 0.0000001 ) ; assertEquals ( CompassPoint . EAST , concodeclass_instance . getLongitudeHemisphere ( ) ) ; }"
    },
    {
        "question_id": 1663,
        "intent": "Exclude all elements from an iterable that do n't match a given predicate .",
        "snippet": "Iterable < T > function ( final Iterable < T > arg0 , final Predicate < ? super T > arg1 ) { return new Iterable < T > ( ) { @ Override public Iterator < T > iterator ( ) { return new FilteringIterator < T > ( arg0 . iterator ( ) , arg1 ) ; } } ; }"
    },
    {
        "question_id": 1664,
        "intent": "Return the coordiantor actions being returned .",
        "snippet": "List < CoordinatorActionBean > function ( ) { return concodeclass_actions ; }"
    },
    {
        "question_id": 1665,
        "intent": "Create schedule",
        "snippet": "void function ( @ ModelAttribute Schedule arg0 ) { concodeclass_repository . save ( arg0 ) ; }"
    },
    {
        "question_id": 1666,
        "intent": "Runs the given Runnable on the JavaFX Application Thread at some unspecified timein the future and waits for it long milliseconds to finish , otherwise times out with TimeoutException .",
        "snippet": "void function ( long arg0 , Runnable arg1 ) { Future < Void > loc0 = concodefunc_asyncFx ( arg1 ) ; concodefunc_waitForMillis ( arg0 , loc0 ) ; }"
    },
    {
        "question_id": 1667,
        "intent": "Set the logger",
        "snippet": "void function ( Logger arg0 ) { Popup . arg0 = arg0 ; }"
    },
    {
        "question_id": 1668,
        "intent": "Test method for net.sf.marineapi.nmea.util.Time #setSeconds int .",
        "snippet": "void function ( ) { concodeclass_time . setSeconds ( 45.12345 ) ; assertEquals ( 45.12345 , concodeclass_time . getSeconds ( ) , 0.001 ) ; }"
    },
    {
        "question_id": 1669,
        "intent": "Gets a ByteBuffer containing an increasing sequence of integers starting at zero .",
        "snippet": "ByteBuffer function ( int arg0 ) { return getIncreasingIntBuffer ( 0 , arg0 ) ; }"
    },
    {
        "question_id": 1670,
        "intent": "Creates a parser for specified talker and sentence type . This method is mainly intended to be used when custom parsers have been registered in the factory . The returned instance needs to be cast to corresponding sentence interface .",
        "snippet": "Sentence function ( TalkerId arg0 , String arg1 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return concodefunc_createParserImpl ( arg1 , arg0 ) ; }"
    },
    {
        "question_id": 1671,
        "intent": "Sets the feed id .",
        "snippet": "void function ( BigDecimal arg0 ) { this . concodeclass_feedId = arg0 ; }"
    },
    {
        "question_id": 1672,
        "intent": "Tests the RPCBlockReadResponse #encode ByteBuf and RPCBlockReadResponse #decode ByteBuf methods .",
        "snippet": "void function ( ) { RPCBlockReadResponse loc0 = new RPCBlockReadResponse ( concodeclass_BLOCK_ID , concodeclass_OFFSET , concodeclass_LENGTH , null , concodeclass_STATUS ) ; loc0 . encode ( concodeclass_mBuffer ) ; RPCBlockReadResponse loc1 = RPCBlockReadResponse . decode ( concodeclass_mBuffer ) ; concodefunc_assertValid ( concodeclass_BLOCK_ID , concodeclass_OFFSET , concodeclass_LENGTH , concodeclass_STATUS , loc0 ) ; concodefunc_assertValid ( concodeclass_BLOCK_ID , concodeclass_OFFSET , concodeclass_LENGTH , concodeclass_STATUS , loc1 ) ; }"
    },
    {
        "question_id": 1673,
        "intent": "Returns the price associated with a line item .",
        "snippet": "double function ( ) { double loc0 = 0.0 ; try { loc0 = concodefunc_getTheItemPrice ( ) . getPriceAmount ( ) . getValue ( ) . doubleValue ( ) ; } catch ( NullPointerException loc1 ) { } return loc0 ; }"
    },
    {
        "question_id": 1674,
        "intent": "Creates an AtomicLongMap .",
        "snippet": "AtomicLongMap < K > function ( ) { return new AtomicLongMap < K > ( new ConcurrentHashMap < > ( ) ) ; }"
    },
    {
        "question_id": 1675,
        "intent": "Turns logging on or off , without affecting logging configuration .",
        "snippet": "void function ( boolean arg0 ) { XRLog . arg0 = arg0 ; }"
    },
    {
        "question_id": 1676,
        "intent": "Assume the plan is returned by a non-cascading evictor , check whether it is valid . a cascading evictor is an evictor that always tries to move from the target tier to the next tier and recursively move down 1 tier until finally blocks are evicted from the final tier .",
        "snippet": "boolean function ( long arg0 , EvictionPlan arg1 , BlockMetadataManager arg2 ) { Preconditions . checkNotNull ( arg1 ) ; return concodefunc_blocksInTheSameDir ( arg1 , arg2 ) && concodefunc_requestSpaceSatisfied ( arg0 , arg1 , arg2 ) ; }"
    },
    {
        "question_id": 1677,
        "intent": "Create an instance of GetOfferDetailsResponse.Return",
        "snippet": "GetOfferDetailsResponse . Return function ( ) { return new GetOfferDetailsResponse . Return ( ) ; }"
    },
    {
        "question_id": 1678,
        "intent": "Parse a inputstream assuming it is a valid XML document and return an JDOM Element for it .",
        "snippet": "Element function ( InputStream arg0 ) { ParamChecker . notNull ( arg0 , \"srini_string\" ) ; SAXBuilder loc0 = concodefunc_createSAXBuilder ( ) ; Document loc1 = loc0 . build ( arg0 ) ; return loc1 . getRootElement ( ) ; }"
    },
    {
        "question_id": 1679,
        "intent": "Provides SimpleJobLauncher Bean",
        "snippet": "JobLauncher function ( ) { concodeclass_synchJobLauncher = new SimpleJobLauncher ( ) ; concodeclass_synchJobLauncher . setJobRepository ( concodeclass_jobRepository ) ; return concodeclass_synchJobLauncher ; }"
    },
    {
        "question_id": 1680,
        "intent": "Assert that an array has elements ; that is , it must not be null and must have at least one element.Assert.notEmpty array ;",
        "snippet": "void function ( Object [ ] arg0 ) { notEmpty ( arg0 , \"srini_string\" ) ; }"
    },
    {
        "question_id": 1681,
        "intent": "Get whether to use a KeyIdentifier to refer to this token",
        "snippet": "boolean function ( ) { return concodeclass_useKeyIdentifier ; }"
    },
    {
        "question_id": 1682,
        "intent": "Reply a java.util.Enumeration of the children of the given Object",
        "snippet": "Enumeration function ( Object arg0 ) { return new IteratorEnumeration ( concodefunc_gen2 ( arg0 ) ) ; }"
    },
    {
        "question_id": 1683,
        "intent": "Returns true if inventory is full .",
        "snippet": "boolean function ( ) { System . out . println ( concodeclass_count + \"srini_string\" + concodeclass_limit ) ; return concodeclass_count >= concodeclass_limit ; }"
    },
    {
        "question_id": 1684,
        "intent": "Returns a string representation of the host specifier suitable for inclusion in a URI . If the host specifier is a domain name , the string will be normalized to all lower case . If the specifier was an IPv6 address without brackets , brackets are added so that the result will be usable in the host part of a URI .",
        "snippet": "String function ( ) { return concodeclass_canonicalForm ; }"
    },
    {
        "question_id": 1685,
        "intent": "Makes an empty project .",
        "snippet": "Project function ( ) { return makeEmptyProject ( true ) ; }"
    },
    {
        "question_id": 1686,
        "intent": "Generates the create table SQL Statement",
        "snippet": "String function ( Table arg0 , DBType arg1 ) { return Schema . generateCreateTableScript ( arg0 , arg1 , concodeclass_TABLE_COLUMNS . get ( arg0 ) ) ; }"
    },
    {
        "question_id": 1687,
        "intent": "Returns the current baseUrl for this class .",
        "snippet": "String function ( ) { return concodeclass__uriResolver . getBaseUri ( ) ; }"
    },
    {
        "question_id": 1688,
        "intent": "Removes the last last fish tagging .",
        "snippet": "void function ( ) { if ( ! ThreadContext . peek ( ) . isEmpty ( ) ) { ThreadContext . pop ( ) ; } }"
    },
    {
        "question_id": 1689,
        "intent": "Tests the Mode #Mode Mode constructor .",
        "snippet": "void function ( ) { Mode loc0 = new Mode ( Mode . getDefault ( ) ) ; Assert . assertEquals ( Mode . Bits . ALL , loc0 . getOwnerBits ( ) ) ; Assert . assertEquals ( Mode . Bits . ALL , loc0 . getGroupBits ( ) ) ; Assert . assertEquals ( Mode . Bits . ALL , loc0 . getOtherBits ( ) ) ; Assert . assertEquals ( 0777 , loc0 . toShort ( ) ) ; }"
    },
    {
        "question_id": 1690,
        "intent": "Gets the value of the elem1 property .",
        "snippet": "String function ( ) { return concodeclass_elem1 ; }"
    },
    {
        "question_id": 1691,
        "intent": "Add a repeat field .",
        "snippet": "void function ( RepeatField arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; this . concodeclass_repeatList . add ( arg0 ) ; }"
    },
    {
        "question_id": 1692,
        "intent": "Returns the configuration factory instance . This is equivalent to ConfigurationFactory.getInstance but using Configuration.getFactory is shorter to type and allows us not to have to deal with ConfigurationFactory at all if we do n't need to modify or configure it .",
        "snippet": "IConfigurationFactory function ( ) { return ConfigurationFactory . getInstance ( ) ; }"
    },
    {
        "question_id": 1693,
        "intent": "Returns whether the given byte array slice is a well-formed UTF-8 byte sequence , as defined by #isWellFormed byte . Note that this can be false even when isWellFormed bytes is true .",
        "snippet": "boolean function ( byte [ ] arg0 , int arg1 , int arg2 ) { int loc0 = arg1 + arg2 ; checkPositionIndexes ( arg1 , loc0 , arg0 . length ) ; for ( int loc1 = arg1 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { return concodefunc_isWellFormedSlowPath ( arg0 , loc1 , loc0 ) ; } } return true ; }"
    },
    {
        "question_id": 1694,
        "intent": "Set the CallbackHandler to use with the LoginContext . It can be null .",
        "snippet": "void function ( CallbackHandler arg0 ) { this . concodeclass_callbackHandler = arg0 ; }"
    },
    {
        "question_id": 1695,
        "intent": "Gets the Data Matrix .",
        "snippet": "String [ ] [ ] function ( ) { return concodeclass_matrix ; }"
    },
    {
        "question_id": 1696,
        "intent": "Sets Alluxio work directory .",
        "snippet": "void function ( ) { concodeclass_mWorkDirectory = AlluxioTestDirectory . createTemporaryDirectory ( \"srini_string\" ) . getAbsolutePath ( ) ; }"
    },
    {
        "question_id": 1697,
        "intent": "Is the User Currently Authenticated ? Determined via Session .",
        "snippet": "boolean function ( HttpServletRequest arg0 ) { String loc0 = concodefunc_getEmailId ( arg0 ) ; if ( loc0 != null ) { return true ; } else { return false ; } }"
    },
    {
        "question_id": 1698,
        "intent": "Reads an ASCII string from the buffer . Reads from the buffer 's current position to its limit .",
        "snippet": "String function ( final ByteBuffer arg0 ) { concodeclass_DECODER . reset ( ) ; try { return arg0 . getString ( concodeclass_DECODER ) ; } catch ( final CharacterCodingException loc0 ) { concodeclass_LOG . error ( \"srini_string\" + arg0 , loc0 ) ; return StringUtils . EMPTY ; } }"
    },
    {
        "question_id": 1699,
        "intent": "Notifies all listeners that data reading has stopped .",
        "snippet": "void function ( ) { for ( SentenceListener loc0 : concodefunc_getSentenceListeners ( ) ) { try { loc0 . readingStopped ( ) ; } catch ( Exception loc1 ) { concodeclass_LOGGER . log ( Level . WARNING , concodeclass_LOG_MSG , loc1 ) ; } } }"
    },
    {
        "question_id": 1700,
        "intent": "Calls a method on the given object instance with the given argument .",
        "snippet": "Object function ( Object arg0 , String arg1 , Object arg2 ) { Object [ ] loc0 = new Object [ 1 ] ; loc0 [ 0 ] = arg2 ; return invokeMethod ( arg0 , arg1 , loc0 ) ; }"
    },
    {
        "question_id": 1701,
        "intent": "Test method for net.sf.marineapi.nmea.util.Time #setHour int .",
        "snippet": "void function ( ) { try { concodeclass_time . setHour ( 60 ) ; fail ( \"srini_string\" ) ; } catch ( IllegalArgumentException loc0 ) { } }"
    },
    {
        "question_id": 1702,
        "intent": "Get all the books .",
        "snippet": "Page < Book > function ( Pageable arg0 ) { concodeclass_log . debug ( \"srini_string\" ) ; Page < Book > loc0 = concodeclass_bookRepository . findAll ( arg0 ) ; return loc0 ; }"
    },
    {
        "question_id": 1703,
        "intent": "Creates a new StoredBlock , calculating the additional fields by adding to the values in this block .",
        "snippet": "StoredBlock function ( Block arg0 ) { BigInteger loc0 = this . concodeclass_chainWork . add ( arg0 . getWork ( ) ) ; int loc1 = this . concodeclass_height + 1 ; return new StoredBlock ( arg0 , loc0 , loc1 ) ; }"
    },
    {
        "question_id": 1704,
        "intent": "Get the current classifier .",
        "snippet": "Object function ( ) { return concodeclass_classifier ; }"
    },
    {
        "question_id": 1705,
        "intent": "Returns the list of repeat times r = fields specified in the SessionDescription .",
        "snippet": "void function ( Vector arg0 ) { this . concodeclass_repeatList = arg0 ; }"
    },
    {
        "question_id": 1706,
        "intent": "Called when a line is complete .",
        "snippet": "boolean function ( boolean arg0 ) { String loc0 = concodeclass_sawReturn ? ( arg0 ? \"srini_string\" : \"srini_string\" ) : ( arg0 ? \"srini_string\" : \"srini_string\" ) ; concodefunc_handleLine ( concodeclass_line . toString ( ) , loc0 ) ; concodeclass_line = new StringBuilder ( ) ; concodeclass_sawReturn = false ; return arg0 ; }"
    },
    {
        "question_id": 1707,
        "intent": "Resolves serialized instance of enumeration value .",
        "snippet": "java . lang . Object function ( ) { try { return concodefunc_forName ( concodeclass_literalName ) ; } catch ( java . lang . IllegalArgumentException loc0 ) { throw new java . io . InvalidObjectException ( loc0 . getMessage ( ) ) ; } }"
    },
    {
        "question_id": 1708,
        "intent": "Sets the ObjectType used to read and write the trailing block instances .",
        "snippet": "void function ( ObjectType arg0 ) { this . concodeclass_objectType = arg0 ; }"
    },
    {
        "question_id": 1709,
        "intent": "Sets the fetcher start timestamp .",
        "snippet": "void function ( Timestamp arg0 ) { this . concodeclass_fetcherStartTimestamp = arg0 ; }"
    },
    {
        "question_id": 1710,
        "intent": "Sets the data source , where this interaction comes from , e.g. REACTOME .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_source = arg0 ; }"
    },
    {
        "question_id": 1711,
        "intent": "Checks if is file down loaded to destination .",
        "snippet": "boolean function ( ) { return \"srini_string\" . equalsIgnoreCase ( concodeclass_comments ) ; }"
    },
    {
        "question_id": 1712,
        "intent": "Creates instance of builder .",
        "snippet": "SearchConditionBuilder function ( ) { return instance ( concodeclass_DEFAULT_LANGUAGE ) ; }"
    },
    {
        "question_id": 1713,
        "intent": "Get the File associated with the current source file .",
        "snippet": "File function ( ) { return concodeclass_sourceCodeFile ; }"
    },
    {
        "question_id": 1714,
        "intent": "Sets the value of the attachinfo property .",
        "snippet": "void function ( DataHandler arg0 ) { this . concodeclass_attachinfo = arg0 ; }"
    },
    {
        "question_id": 1715,
        "intent": "Convenience method for calling #waitForPersist LocalAlluxioClusterResource , AlluxioURI , int with a default timeout .",
        "snippet": "void function ( LocalAlluxioClusterResource arg0 , AlluxioURI arg1 ) { waitForPersist ( arg0 , arg1 , 15 * Constants . SECOND_MS ) ; }"
    },
    {
        "question_id": 1716,
        "intent": "Test of readFromGameFile method , of class FileHandler .",
        "snippet": "void function ( ) { System . out . println ( \"srini_string\" ) ; String loc0 = \"srini_string\" ; FileHandler loc1 = new FileHandler ( ) ; String loc2 = \"srini_string\" ; String loc3 = loc1 . readFromGameFile ( loc0 ) . getNodeName ( ) ; assertEquals ( loc2 , loc3 ) ; }"
    },
    {
        "question_id": 1717,
        "intent": "Create AUTO-MERGE query .",
        "snippet": "String function ( String arg0 , String arg1 , String arg2 , String arg3 , String arg4 , String arg5 ) { return String . format ( \"srini_string\" % s + \"srini_string\" % s + \"srini_string\" % s % s , arg2 , arg3 , arg0 , arg1 , arg4 , arg5 ) ; }"
    },
    {
        "question_id": 1718,
        "intent": "Return a workflow store instance with an existing transaction . The workflow store has to be committed and then closed to commit changes , if only close it rolls back .",
        "snippet": "WorkflowStore function ( S arg0 ) { return null ; }"
    },
    {
        "question_id": 1719,
        "intent": "Returns the chain code associated with this key . See the specification to learn more about chain codes .",
        "snippet": "byte [ ] function ( ) { return concodeclass_chainCode ; }"
    },
    {
        "question_id": 1720,
        "intent": "Suspends the running of tasks until #resume is called . This can be called multipletimes to increase the suspensions count and execution will not continue until #resume has been called the same number of times as suspend has been.Any task that has already been pulled off the queue for execution will be completed before execution is suspended .",
        "snippet": "void function ( ) { synchronized ( concodeclass_internalLock ) { concodeclass_suspensions ++ ; } }"
    },
    {
        "question_id": 1721,
        "intent": "Returns the verb for the request token endpoint defaults to POST",
        "snippet": "Verb function ( ) { return Verb . POST ; }"
    },
    {
        "question_id": 1722,
        "intent": "Convenience method for mocking the UnderFileSystem for any ufsPath .",
        "snippet": "UnderFileSystem function ( ) { return mockUnderFileSystem ( Mockito . anyString ( ) ) ; }"
    },
    {
        "question_id": 1723,
        "intent": "The number of previous blocks to look at when calculating the next Block 's difficulty Uses a storedblock cursor as input rather than just returning a constant value",
        "snippet": "int function ( StoredBlock arg0 ) { return concodefunc_getInterval ( ) - 1 ; }"
    },
    {
        "question_id": 1724,
        "intent": "Closes the connection to the server , triggering the StreamParser #connectionClosed event on the network-handling thread where all callbacks occur .",
        "snippet": "void function ( ) { try { concodeclass_vCloseRequested = true ; concodeclass_socket . close ( ) ; } catch ( IOException loc0 ) { throw new RuntimeException ( loc0 ) ; } }"
    },
    {
        "question_id": 1725,
        "intent": "Hashes a key in byte array into a non-zero , one byte fingerprint .",
        "snippet": "byte function ( byte [ ] arg0 ) { int loc0 = concodeclass_FINGERPRINT_HASHER . hashBytes ( arg0 ) . asInt ( ) ; loc0 = ( loc0 >> 24 ) & 0xff ; return ( byte ) ( ( loc0 == 0 ) ? 1 : loc0 ) ; }"
    },
    {
        "question_id": 1726,
        "intent": "Returns the file object which may have it 's base-path determined by environment variables for running on a cloud hosting service . All Gitblit file or folder retrievals are at least initially funneled through this method so it is the correct point to globally override/alter filesystem access based on environment or some other indicator .",
        "snippet": "File function ( String arg0 ) { return com . gitblit . utils . FileUtils . resolveParameter ( Constants . baseFolder$ , concodeclass_baseFolder , arg0 ) ; }"
    },
    {
        "question_id": 1727,
        "intent": "Computes the quality using diagonal elements the triangular R matrix in the QR decomposition .",
        "snippet": "double function ( ) { return SpecializedOps . qualityTriangular ( true , concodeclass_decomp . getQR ( ) ) ; }"
    },
    {
        "question_id": 1728,
        "intent": "write encoded data to muxer",
        "snippet": "void function ( final int arg0 , final ByteBuffer arg1 , final MediaCodec . BufferInfo arg2 ) { if ( concodeclass_mStatredCount > 0 ) concodeclass_mMediaMuxer . writeSampleData ( arg0 , arg1 , arg2 ) ; }"
    },
    {
        "question_id": 1729,
        "intent": "Given a File Filter , expose as a FilenameFilter .",
        "snippet": "FilenameFilter function ( final Filter < File > arg0 ) { return new FilenameFilter ( ) { @ Override public boolean accept ( File arg1 , String arg2 ) { return arg0 . arg0 ( new File ( arg1 , arg2 ) ) ; } @ Override public String toString ( ) { return arg0 . toString ( ) ; } } ; }"
    },
    {
        "question_id": 1730,
        "intent": "Parses strings of the form '' NS-URI LOCAL-NAME '' or `` prefix : localName '' as QualifiedNames . When using the prefix-version the prefix must be defined inside the current NamespaceContext .",
        "snippet": "QualifiedName function ( String arg0 ) { return valueOf ( arg0 , XMLUnit . getXpathNamespaceContext ( ) ) ; }"
    },
    {
        "question_id": 1731,
        "intent": "formats a value for its usage in XPath expressions",
        "snippet": "String function ( Attribute arg0 ) { }"
    },
    {
        "question_id": 1732,
        "intent": "Returns the integer value of the specified field . The value is obtained from whichever scan contains the field .",
        "snippet": "int function ( String arg0 ) { return concodeclass_prodscan . getInt ( arg0 ) ; }"
    },
    {
        "question_id": 1733,
        "intent": "Obtains the URL of the HTTP Request .",
        "snippet": "String function ( ) { return concodeclass_url ; }"
    },
    {
        "question_id": 1734,
        "intent": "Set the relying party of the authentication request",
        "snippet": "void function ( String arg0 ) { this . concodeclass_relyingParty = arg0 ; }"
    },
    {
        "question_id": 1735,
        "intent": "Gets the property and casts to the appropriate type",
        "snippet": "T function ( String arg0 , Class < T > arg1 ) { Object loc0 = getProperty ( arg0 ) ; if ( loc0 != null ) { return ( T ) loc0 ; } else { return null ; } }"
    },
    {
        "question_id": 1736,
        "intent": "Returns DNS names that when resolved , give IP addresses of active peers .",
        "snippet": "String [ ] function ( ) { return concodeclass_dnsSeeds ; }"
    },
    {
        "question_id": 1737,
        "intent": "Generates the parameters map . This is the complete parameters for the common case where a header only has a single parameter . Otherwise , calling methods can add additional parameters to the map .",
        "snippet": "Map < String , String > function ( final String arg0 , final String arg1 ) { final Map < String , String > loc0 = new HashMap < String , String > ( ) ; loc0 . put ( arg0 , arg1 ) ; return loc0 ; }"
    },
    {
        "question_id": 1738,
        "intent": "Checks whether the client user is the owner of the path .",
        "snippet": "void function ( LockedInodePath arg0 ) { List < Inode < ? >> loc0 = arg0 . getInodeList ( ) ; String loc1 = concodefunc_getClientUser ( ) ; List < String > loc2 = concodefunc_getGroups ( loc1 ) ; if ( concodefunc_isPrivilegedUser ( loc1 , loc2 ) ) { return ; } concodefunc_checkInodeList ( loc1 , loc2 , null , arg0 . getUri ( ) . getPath ( ) , loc0 , true ) ; }"
    },
    {
        "question_id": 1739,
        "intent": "Test method for net.sf.marineapi.nmea.util.Time java.lang.String .",
        "snippet": "void function ( ) { Time loc0 = new Time ( \"srini_string\" ) ; assertEquals ( 1 , loc0 . getHour ( ) ) ; assertEquals ( 2 , loc0 . getMinutes ( ) ) ; assertEquals ( 3.4 , loc0 . getSeconds ( ) , 0.001 ) ; }"
    },
    {
        "question_id": 1740,
        "intent": "Accessor for the socket .",
        "snippet": "Socket function ( ) { return concodeclass_m_socket ; }"
    },
    {
        "question_id": 1741,
        "intent": "Check if the rules that apply to a source of the given language use DFA .",
        "snippet": "boolean function ( Language arg0 ) { for ( RuleSet loc0 : concodeclass_ruleSets ) { if ( loc0 . usesDFA ( arg0 ) ) { return true ; } } return false ; }"
    },
    {
        "question_id": 1742,
        "intent": "Return true if this TokenProvider implementation is capable of providing a token that corresponds to the given TokenType in a given realm . The realm is ignored in this token provider .",
        "snippet": "boolean function ( String arg0 , String arg1 ) { return STSUtils . TOKEN_TYPE_SCT_05_02 . equals ( arg0 ) || STSUtils . TOKEN_TYPE_SCT_05_12 . equals ( arg0 ) ; }"
    },
    {
        "question_id": 1743,
        "intent": "Get the name of the message property from which the content type has been extracted .",
        "snippet": "String function ( ) { return concodeclass_propertyName ; }"
    },
    {
        "question_id": 1744,
        "intent": "Note : The graphic representation maps x values on row numbers x-axis in vertical direction .",
        "snippet": "int function ( int arg0 ) { return arg0 / 3 ; }"
    },
    {
        "question_id": 1745,
        "intent": "Runs the given Runnable on a new Thread and waits for it long milliseconds to finish , otherwise times out with TimeoutException .",
        "snippet": "void function ( long arg0 , Runnable arg1 ) { Future < Void > loc0 = concodefunc_async ( arg1 ) ; concodefunc_waitForMillis ( arg0 , loc0 ) ; }"
    },
    {
        "question_id": 1746,
        "intent": "Induces the decision tree from the specified set of examples",
        "snippet": "void function ( DataSet arg0 ) { List < String > loc0 = arg0 . getNonTargetAttributes ( ) ; this . concodeclass_tree = concodefunc_decisionTreeLearning ( arg0 , loc0 , new ConstantDecisonTree ( concodeclass_defaultValue ) ) ; }"
    },
    {
        "question_id": 1747,
        "intent": "Activates interest in writing from the selector thread .",
        "snippet": "void function ( ) { this . concodeclass_m_selectorManager . addChannelInterestNow ( this . concodeclass_m_socketChannel , SelectionKey . OP_WRITE ) ; }"
    },
    {
        "question_id": 1748,
        "intent": "Sets the time to live .",
        "snippet": "OutStreamOptions function ( long arg0 ) { concodeclass_mTtl = arg0 ; return this ; }"
    },
    {
        "question_id": 1749,
        "intent": "Provides the data store with an entity classifier . The classifier strongly influences the generation of the entity tree .",
        "snippet": "void function ( EntityClassifier < EntityViewInfo > arg0 ) { concodeclass_entityClassifier = arg0 ; if ( concodeclass_entityTree != null ) { concodefunc_applyClassifierAndUpdateTree ( concodeclass_entityTree . getBoundingBox ( ) ) ; concodefunc_fireMapDataEvent ( new MapEvent ( this , MapEvent . Type . MAP_MODIFIED ) ) ; } }"
    },
    {
        "question_id": 1750,
        "intent": "Test method for net.sf.marineapi.nmea.parser.HDGParser #setVariation double .",
        "snippet": "void function ( ) { final double loc0 = - 0.1 ; concodeclass_hdg . setVariation ( loc0 ) ; assertEquals ( loc0 , concodeclass_hdg . getVariation ( ) , 0.1 ) ; assertTrue ( concodeclass_hdg . toString ( ) . contains ( \"srini_string\" ) ) ; }"
    },
    {
        "question_id": 1751,
        "intent": "Sets the data set id .",
        "snippet": "void function ( Long arg0 ) { this . concodeclass_dataSetId = arg0 ; }"
    },
    {
        "question_id": 1752,
        "intent": "If requested lifetime exceeds shall it fail default or overwrite with maximum lifetime",
        "snippet": "void function ( boolean arg0 ) { this . concodeclass_failLifetimeExceedance = arg0 ; }"
    },
    {
        "question_id": 1753,
        "intent": "Can be called in leave _ to do an asynchronous state transition . The current state transition will be on hold in the old state until a final call to Transition is made . This will complete the transition and possibly call the other callbacks .",
        "snippet": "void function ( ) { concodeclass_async = true ; }"
    },
    {
        "question_id": 1754,
        "intent": "Append a hashCode for a char .",
        "snippet": "HashCodeBuilder function ( char arg0 ) { concodeclass_iTotal = concodeclass_iTotal * concodeclass_iConstant + arg0 ; return this ; }"
    },
    {
        "question_id": 1755,
        "intent": "Return the dataSourceName via the DataSource Interface method . Both the parameters are ignored",
        "snippet": "String function ( boolean arg0 , String arg1 ) { return concodefunc_getDataSourceName ( ) ; }"
    },
    {
        "question_id": 1756,
        "intent": "Set the IdentityMapper object to use .",
        "snippet": "void function ( IdentityMapper arg0 ) { this . concodeclass_identityMapper = arg0 ; }"
    },
    {
        "question_id": 1757,
        "intent": "Computes eigenvalues only",
        "snippet": "boolean function ( ) { diagSaved = concodeclass_helper . copyDiag ( diagSaved ) ; offSaved = concodeclass_helper . copyOff ( offSaved ) ; concodeclass_vector . setQ ( null ) ; concodeclass_vector . setFastEigenvalues ( true ) ; if ( ! concodeclass_vector . process ( - 1 , null , null ) ) return false ; values = concodeclass_helper . copyEigenvalues ( values ) ; return true ; }"
    },
    {
        "question_id": 1758,
        "intent": "Returns the claim dialect for claim mappings",
        "snippet": "String function ( ) { if ( concodeclass_claimDialect != null ) { return concodeclass_claimDialect ; } return \"srini_string\" ; }"
    },
    {
        "question_id": 1759,
        "intent": "Tests the WebUtils #convertMsToClockTime long method with one hour .",
        "snippet": "void function ( ) { String loc0 = WebUtils . convertMsToClockTime ( TimeUnit . HOURS . toMillis ( 1 ) ) ; Assert . assertEquals ( \"srini_string\" , loc0 ) ; }"
    },
    {
        "question_id": 1760,
        "intent": "Sets the type for the BufferedImage used as output for this renderer ; must be one of the values from java.awt.image.BufferedImage allowed in that class ' constructor as a type argument . See docs forthe type parameter in java.awt.image.BufferedImage #BufferedImage int , int , int . Defaults to RGB with no support for transparency . The type is used when the image is first created , so to change the default type do so before calling #getImage .",
        "snippet": "void function ( int arg0 ) { this . concodeclass_bufferedImageType = arg0 ; }"
    },
    {
        "question_id": 1761,
        "intent": "Clear the current page , and append it to the log file .",
        "snippet": "void function ( ) { concodefunc_setFirstRecordPosition ( concodeclass_FIRST_POS ) ; concodefunc_setLastRecordPosition ( concodeclass_LAST_POS ) ; concodeclass_currentpos = 2 * INT_SIZE ; concodeclass_currentblk = concodeclass_mypage . append ( concodeclass_logfile ) ; }"
    },
    {
        "question_id": 1762,
        "intent": "Returns the list of all users available to the login service .",
        "snippet": "List < UserModel > function ( ) { List < UserModel > loc0 = concodeclass_userService . getAllUsers ( ) ; return loc0 ; }"
    },
    {
        "question_id": 1763,
        "intent": "Computes the quality of the computed decomposition . A value close to or less than 1e-15 is considered to be within machine precision . This function must be called before the original matrix has been modified or else it will produce meaningless results .",
        "snippet": "double function ( ) { return DecompositionFactory . quality ( concodeclass_mat , concodeclass_eig ) ; }"
    },
    {
        "question_id": 1764,
        "intent": "Checks if security is enabled .",
        "snippet": "boolean function ( ) { return concodefunc_isAuthenticationEnabled ( ) && concodefunc_isAuthorizationEnabled ( ) ; }"
    },
    {
        "question_id": 1765,
        "intent": "whether the indices of subsequently tracked nodes should be tracked .",
        "snippet": "void function ( boolean arg0 ) { this . concodeclass_trackNodeReferences = arg0 ; if ( arg0 ) { concodeclass_nodeReferenceMap = new HashMap < Node , Integer > ( ) ; } }"
    },
    {
        "question_id": 1766,
        "intent": "Get the local sequence utility for a given cell in the projected q-matrix",
        "snippet": "int function ( MatrixPosition arg0 ) { return concodeclass_originalMatrix . matrixItemRemainingUtility [ arg0 . row ] [ arg0 . column ] ; }"
    },
    {
        "question_id": 1767,
        "intent": "Test method for net.sf.marineapi.nmea.parser.HDTParser #setHeading double .",
        "snippet": "void function ( ) { concodeclass_hdt . setHeading ( 123.45 ) ; assertEquals ( 123.5 , concodeclass_hdt . getHeading ( ) , 0.1 ) ; }"
    },
    {
        "question_id": 1768,
        "intent": "Which element in the submatrix was returned by next",
        "snippet": "int function ( ) { return concodeclass_index - 1 ; }"
    },
    {
        "question_id": 1769,
        "intent": "Returns a string representation of the enumeration value .",
        "snippet": "java . lang . String function ( ) { return concodeclass_literalName ; }"
    },
    {
        "question_id": 1770,
        "intent": "Operation getColumn returns the value of the attribute _ column .",
        "snippet": "int function ( ) { return concodeclass_column ; }"
    },
    {
        "question_id": 1771,
        "intent": "Set the signature Crypto object",
        "snippet": "void function ( Crypto arg0 ) { this . concodeclass_signatureCrypto = arg0 ; }"
    },
    {
        "question_id": 1772,
        "intent": "Test method for net.sf.marineapi.nmea.parser.RMCParser #setCourse double .",
        "snippet": "void function ( ) { final double loc0 = 90.55555 ; concodeclass_rmc . setCourse ( loc0 ) ; assertTrue ( concodeclass_rmc . toString ( ) . contains ( \"srini_string\" ) ) ; assertEquals ( loc0 , concodeclass_rmc . getCourse ( ) , 0.1 ) ; }"
    },
    {
        "question_id": 1773,
        "intent": "Gets Max Value .",
        "snippet": "int function ( ) { return concodeclass_progressMonitor . maxValue ; }"
    },
    {
        "question_id": 1774,
        "intent": "Set the time by java.util.Date . The date information of is ignored , only hours , minutes and seconds are relevant . Notice also that time zone offset is not affected by this method because java.util.Date does not contain zone offset .",
        "snippet": "void function ( Date arg0 ) { GregorianCalendar loc0 = new GregorianCalendar ( ) ; loc0 . setTime ( arg0 ) ; double loc1 = loc0 . get ( Calendar . SECOND ) + ( loc0 . get ( Calendar . MILLISECOND ) / 1000.0 ) ; concodefunc_setHour ( loc0 . get ( Calendar . HOUR_OF_DAY ) ) ; concodefunc_setMinutes ( loc0 . get ( Calendar . MINUTE ) ) ; concodefunc_setSeconds ( loc1 ) ; }"
    },
    {
        "question_id": 1775,
        "intent": "Close all tags in the stack and end them at the end of the builder . Used to close any remaining open tags at the end of parsing , since these tags should run to the end of the text",
        "snippet": "void function ( Stack < Tag > arg0 ) { while ( ! arg0 . empty ( ) ) { Tag loc0 = arg0 . pop ( ) ; loc0 . end = concodeclass_builder . length ( ) ; Spannable loc1 = concodeclass_tagStyles . get ( loc0 . tag ) . getStyle ( loc0 . param , concodeclass_builder . subSequence ( loc0 . start + loc0 . tagLength , loc0 . end ) ) ; concodeclass_builder . replace ( loc0 . start , loc0 . end , loc1 ) ; } }"
    },
    {
        "question_id": 1776,
        "intent": "Returns the names of all search strategies , which are supported by this factory . The indices correspond to the parameter values of method #createSearch int , int , HeuristicFunction .",
        "snippet": "String [ ] function ( ) { return new String [ ] { \"srini_string\" , \"srini_string\" , \"srini_string\" , \"srini_string\" , \"srini_string\" , \"srini_string\" , \"srini_string\" , \"srini_string\" } ; }"
    },
    {
        "question_id": 1777,
        "intent": "Set the object .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_object = arg0 ; }"
    },
    {
        "question_id": 1778,
        "intent": "Adds an unnamed value to the formatted output . It is strongly encouraged to use #add String , long instead and give value areadable name .",
        "snippet": "ToStringHelper function ( long arg0 ) { return concodefunc_addHolder ( String . valueOf ( arg0 ) ) ; }"
    },
    {
        "question_id": 1779,
        "intent": "Gets the HTTP conduit responsible for a transport-level communication with the remote service .",
        "snippet": "HTTPConduit function ( ) { Conduit loc0 = concodefunc_getConduit ( ) ; return loc0 instanceof HTTPConduit ? ( HTTPConduit ) loc0 : null ; }"
    },
    {
        "question_id": 1780,
        "intent": "Returns available capacity of this buffer .",
        "snippet": "int function ( ) { concodefunc_setInputMode ( ) ; return this . concodeclass_buffer . remaining ( ) ; }"
    },
    {
        "question_id": 1781,
        "intent": "Get the private key alias If the key alias is defined in the Security configuration take it from there otherwise key alias is taken from the Server Configuration",
        "snippet": "String function ( ) { if ( concodeclass_keyAlias == null ) { ServerConfiguration loc0 = ServerConfiguration . getInstance ( ) ; return loc0 . getFirstProperty ( \"srini_string\" ) ; } return concodeclass_keyAlias ; }"
    },
    {
        "question_id": 1782,
        "intent": "Computes the area of a trapezoid . All the lengths should be of the same unit of measure .",
        "snippet": "float function ( double arg0 , double arg1 , double arg2 ) { return ( float ) ( ( .5 * arg2 ) * ( arg0 + arg1 ) ) ; }"
    },
    {
        "question_id": 1783,
        "intent": "Returns a map of strings from the specified key .",
        "snippet": "Map < String , String > function ( String arg0 ) { Map < String , String > loc0 = new LinkedHashMap < String , String > ( ) ; for ( String loc1 : concodefunc_getStrings ( arg0 ) ) { String [ ] loc2 = loc1 . split ( \"srini_string\" , 2 ) ; String loc3 = loc2 [ 0 ] ; String loc4 = loc2 [ 1 ] ; loc0 . put ( loc3 , loc4 ) ; } return loc0 ; }"
    },
    {
        "question_id": 1784,
        "intent": "Get the action that can undo the last user interaction on this project .",
        "snippet": "AbstractAction function ( ) { return concodeclass_undoAction ; }"
    },
    {
        "question_id": 1785,
        "intent": "Dispatch the TPV event to all listeners .",
        "snippet": "void function ( T arg0 ) { for ( ProviderListener < T > loc0 : concodeclass_listeners ) { loc0 . providerUpdate ( arg0 ) ; } }"
    },
    {
        "question_id": 1786,
        "intent": "Add elements from the source to the target as long as they do n't already exist there . Return the number of items actually added .",
        "snippet": "int function ( Collection < String > arg0 , Collection < String > arg1 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( arg1 . contains ( loc1 ) ) { continue ; } arg1 . add ( loc1 ) ; loc0 ++ ; } return loc0 ; }"
    },
    {
        "question_id": 1787,
        "intent": "Adds a word to the document .",
        "snippet": "void function ( O arg0 ) { DocumentElement < O > loc0 = concodeclass_data . get ( arg0 ) ; if ( loc0 == null ) { loc0 = new DocumentElement < O > ( arg0 , new IntegerHolder ( 0 ) ) ; concodeclass_data . put ( arg0 , loc0 ) ; } loc0 . inc ( ) ; concodeclass_wordCountMultiSet ++ ; }"
    },
    {
        "question_id": 1788,
        "intent": "Sets the value of the handlerClass property .",
        "snippet": "void function ( FullyQualifiedClassType arg0 ) { this . concodeclass_handlerClass = arg0 ; }"
    },
    {
        "question_id": 1789,
        "intent": "Get the individual URI .",
        "snippet": "String function ( ) { return concodeclass_individualUri ; }"
    },
    {
        "question_id": 1790,
        "intent": "Popup an info to the user ex : `` Process complete . ''",
        "snippet": "void function ( String arg0 ) { javax . swing . JOptionPane . showMessageDialog ( null , arg0 , concodeclass_appName , JOptionPane . INFORMATION_MESSAGE ) ; }"
    },
    {
        "question_id": 1791,
        "intent": "Returns the approximate count of elements left in the format . This method does not account for repeat counts or string length encodings - so should be used as a guide only .",
        "snippet": "int function ( ) { return concodeclass_format . length ( ) - concodeclass_formatOff + concodeclass_formatRepeatCount ; }"
    },
    {
        "question_id": 1792,
        "intent": "Sets up the server before a test runs .",
        "snippet": "void function ( ) { concodeclass_mPlainSaslServer = new PlainSaslServer ( new MockCallbackHandler ( ) ) ; }"
    },
    {
        "question_id": 1793,
        "intent": "Get the sequences from this sequence database .",
        "snippet": "List < SequenceWithUtility > function ( ) { return concodeclass_sequences ; }"
    },
    {
        "question_id": 1794,
        "intent": "Returns result value as boolean .",
        "snippet": "Boolean function ( int arg0 ) { Object loc0 = concodeclass_values . get ( arg0 ) ; if ( loc0 instanceof Boolean ) { return ( Boolean ) loc0 ; } else { throw new IllegalStateException ( ) ; } }"
    },
    {
        "question_id": 1795,
        "intent": "Enable/disable drag/drop",
        "snippet": "void function ( boolean arg0 ) { this . concodeclass_enabled = arg0 ; }"
    },
    {
        "question_id": 1796,
        "intent": "A wrapper for #valueOf String . It returns null instead of throwing an exception .",
        "snippet": "CommandHandler function ( final String arg0 ) { try { return CommandHandler . valueOf ( arg0 ) ; } catch ( Exception loc0 ) { return null ; } }"
    },
    {
        "question_id": 1797,
        "intent": "Set the Subject Role Classifier Type to use . Currently accepted values are `` prefix '' or `` classname '' . Must be used in conjunction with the SUBJECT_ROLE_CLASSIFIER . The default value is `` prefix '' .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_roleClassifierType = arg0 ; }"
    },
    {
        "question_id": 1798,
        "intent": "loads a resource for the specified path",
        "snippet": "String function ( String arg0 ) { String loc0 = null ; URL loc1 = LessFilter . this . concodefunc_findResource ( arg0 ) ; if ( loc1 != null ) { InputStream loc2 = loc1 . openStream ( ) ; loc0 = IOUtils . toString ( loc2 , \"srini_string\" ) ; IOUtils . closeQuietly ( loc2 ) ; } return loc0 ; }"
    },
    {
        "question_id": 1799,
        "intent": "Methods to call during initialization",
        "snippet": "void function ( FMLInitializationEvent arg0 ) { concodeclass_proxy . registerRenders ( ) ; }"
    },
    {
        "question_id": 1800,
        "intent": "Computes the Greatest Common Divisor of two BigIntegers .",
        "snippet": "BigInteger function ( final BigInteger arg0 , final BigInteger arg1 ) { if ( arg1 . compareTo ( BigInteger . ZERO ) == 0 ) { return arg0 ; } return findGCD ( arg1 , arg0 . mod ( arg1 ) ) ; }"
    },
    {
        "question_id": 1801,
        "intent": "Size .",
        "snippet": "int function ( ) { if ( concodeclass_items != null ) { return concodeclass_items . size ( ) ; } return 0 ; }"
    },
    {
        "question_id": 1802,
        "intent": "Sets the feed id .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_feedId = arg0 ; }"
    },
    {
        "question_id": 1803,
        "intent": "A code defining the type of the value as defined above .",
        "snippet": "short function ( ) { return CSSValue . CSS_PRIMITIVE_VALUE ; }"
    },
    {
        "question_id": 1804,
        "intent": "Get the utility of a cell in the projected q-matrix at a given cell position row , column",
        "snippet": "int function ( MatrixPosition arg0 ) { return concodeclass_originalMatrix . matrixItemUtility [ arg0 . row ] [ arg0 . column ] ; }"
    },
    {
        "question_id": 1805,
        "intent": "Adds a repository permission to the team . Role may be formatted as : myrepo.git this is implicitly RW + RW + : myrepo.git",
        "snippet": "void function ( String arg0 ) { AccessPermission loc0 = AccessPermission . permissionFromRole ( arg0 ) ; String loc1 = AccessPermission . repositoryFromRole ( arg0 ) . toLowerCase ( ) ; concodeclass_repositories . add ( loc1 ) ; concodeclass_permissions . put ( loc1 , loc0 ) ; }"
    },
    {
        "question_id": 1806,
        "intent": "Append o to l , returning l .",
        "snippet": "List < T > function ( List < T > arg0 , T arg1 ) { arg0 . add ( arg1 ) ; return arg0 ; }"
    },
    {
        "question_id": 1807,
        "intent": "Returns true if this objects chainWork is higher than the others .",
        "snippet": "boolean function ( StoredBlock arg0 ) { return concodeclass_chainWork . compareTo ( arg0 . chainWork ) > 0 ; }"
    },
    {
        "question_id": 1808,
        "intent": "The Id for a place to tag with this content .",
        "snippet": "String function ( ) { return this . concodeclass_placeId ; }"
    },
    {
        "question_id": 1809,
        "intent": "Specifies whether to generate `` a = rtpmap : '' attributes for static RTP/AVP format strings . This is recommended but makes messages bigger . The default is not to write such attributes .",
        "snippet": "void function ( boolean arg0 ) { }"
    },
    {
        "question_id": 1810,
        "intent": "Converts the specified String to a ByteBuffer . The string encoding is assumed to be ASCII .",
        "snippet": "ByteBuffer function ( final String arg0 ) { try { final byte [ ] loc0 = arg0 . getBytes ( \"srini_string\" ) ; return ByteBuffer . wrap ( loc0 ) ; } catch ( final UnsupportedEncodingException loc0 ) { concodeclass_LOG . error ( \"srini_string\" , loc0 ) ; return ByteBuffer . allocate ( 0 ) ; } }"
    },
    {
        "question_id": 1811,
        "intent": "Requests a block from the server . This call will read the full block .",
        "snippet": "DataServerMessage function ( final BlockInfo arg0 ) { return request ( arg0 , 0 , - 1 ) ; }"
    },
    {
        "question_id": 1812,
        "intent": "Return whether this SecurityToken is expired or not",
        "snippet": "boolean function ( ) { if ( concodeclass_expires != null ) { Date loc0 = new Date ( ) ; if ( concodeclass_expires . before ( loc0 ) ) { return true ; } } return false ; }"
    },
    {
        "question_id": 1813,
        "intent": "Sets the replacement string for any characters outside the ` safe ' range that have no explicit replacement . If unsafeReplacement is null then no replacement will occur , ifit is '' '' then the unsafe characters are removed from the output .",
        "snippet": "Builder function ( @ Nullable String arg0 ) { this . concodeclass_unsafeReplacement = arg0 ; return this ; }"
    },
    {
        "question_id": 1814,
        "intent": "Runs an example .",
        "snippet": "boolean function ( final Callable < Boolean > arg0 ) { boolean loc0 ; try { loc0 = arg0 . call ( ) ; } catch ( Exception loc1 ) { concodeclass_LOG . error ( \"srini_string\" + arg0 , loc1 ) ; loc0 = false ; } CliUtils . printPassInfo ( loc0 ) ; return loc0 ; }"
    },
    {
        "question_id": 1815,
        "intent": "Appends a new block to the end of the specified B-tree file , having the specified flag value .",
        "snippet": "Block function ( int arg0 ) { return concodeclass_tx . append ( concodeclass_ti . fileName ( ) , new BTPageFormatter ( concodeclass_ti , arg0 ) ) ; }"
    },
    {
        "question_id": 1816,
        "intent": "Check whether finished",
        "snippet": "boolean function ( ) { for ( int loc0 = 0 ; loc0 < concodeclass_monsters . length ; loc0 ++ ) { if ( concodeclass_monstersLiving [ loc0 ] ) { return false ; } } return false ; }"
    },
    {
        "question_id": 1817,
        "intent": "Destructor cleans up .",
        "snippet": "void function ( ) { super . finalize ( ) ; concodeclass_connection . close ( ) ; }"
    },
    {
        "question_id": 1818,
        "intent": "Frees Database Connection .",
        "snippet": "void function ( Class arg0 , Connection arg1 ) { closeConnection ( arg0 . getName ( ) , arg1 ) ; }"
    },
    {
        "question_id": 1819,
        "intent": "Return the optional list of user roles which may have been captured during the authentication process",
        "snippet": "List < String > function ( ) { return concodeclass_roles ; }"
    },
    {
        "question_id": 1820,
        "intent": "Applies umask to the mode bits .",
        "snippet": "Permission function ( Mode arg0 ) { concodeclass_mMode = concodeclass_mMode . applyUMask ( arg0 ) ; return this ; }"
    },
    {
        "question_id": 1821,
        "intent": "Calls nextStep method in Fuzzy Tasker .",
        "snippet": "void function ( ) { concodeclass_futa . nextStep ( ) ; }"
    },
    {
        "question_id": 1822,
        "intent": "Get the support of the itemset represented by this utility-list",
        "snippet": "int function ( ) { return concodeclass_elements . size ( ) ; }"
    },
    {
        "question_id": 1823,
        "intent": "Right Move the drone a little to the right",
        "snippet": "void function ( ) { SpaceXGUI . getInstance ( ) . appendToConsole ( concodeclass_TAG , \"srini_string\" ) ; concodeclass_cmd . goRight ( 5 ) . doFor ( 1000 ) ; concodeclass_cmd . hover ( ) . doFor ( concodeclass_hoverTime ) ; }"
    },
    {
        "question_id": 1824,
        "intent": "If within the scope of a EL evaluation call , it gives access to the ELEvaluator instance performing the EL evaluation . This is useful for EL function methods to get access to the variables of the Evaluator . Because of this , ELEvaluator variables can be used to pass context to EL function methods which must be static methods .",
        "snippet": "ELEvaluator function ( ) { return concodeclass_current . get ( ) ; }"
    },
    {
        "question_id": 1825,
        "intent": "Returns a boolean indicating whether the file manager had to create a new database directory .",
        "snippet": "boolean function ( ) { return concodeclass_isNew ; }"
    },
    {
        "question_id": 1826,
        "intent": "Returns a function that ignores its input and always returns value . Java 8 users : use the lambda expression o - > value instead .",
        "snippet": "Function < Object , E > function ( @ Nullable E arg0 ) { return new ConstantFunction < E > ( arg0 ) ; }"
    },
    {
        "question_id": 1827,
        "intent": "Get the wsse11 TokenType attribute",
        "snippet": "String function ( ) { return concodeclass_wsse11TokenType ; }"
    },
    {
        "question_id": 1828,
        "intent": "Sets the result code .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_resultCode = arg0 ; }"
    },
    {
        "question_id": 1829,
        "intent": "Creates an RPC connection of the appropriate type and connection details / / @param type RPC type",
        "snippet": "RpcConnection function ( String arg0 , char [ ] arg1 , String arg2 , int arg3 , boolean arg4 ) { RpcConnection loc0 = new MsgRpc ( ) ; loc0 . setup ( arg0 , arg1 , arg2 , arg3 , arg4 ) ; return loc0 ; }"
    },
    {
        "question_id": 1830,
        "intent": "Test finding blacklisted sites from the repository .",
        "snippet": "void function ( ) { Mockito . when ( concodeclass_mockRepository . getAll ( ) ) . thenReturn ( concodeclass_blackListedSitesSet ) ; assertTrue ( concodeclass_service . isBlacklisted ( concodeclass_uri1 ) ) ; assertTrue ( concodeclass_service . isBlacklisted ( concodeclass_uri2 ) ) ; Mockito . verify ( concodeclass_mockRepository , times ( 2 ) ) . getAll ( ) ; }"
    },
    {
        "question_id": 1831,
        "intent": "Returns the unsigned int value represented by a string with the given radix .",
        "snippet": "int function ( String arg0 , int arg1 ) { checkNotNull ( arg0 ) ; long loc0 = Long . parseLong ( arg0 , arg1 ) ; if ( ( loc0 & concodeclass_INT_MASK ) != loc0 ) { throw new NumberFormatException ( \"srini_string\" + arg0 + \"srini_string\" + arg1 + \"srini_string\" ) ; } return ( int ) loc0 ; }"
    },
    {
        "question_id": 1832,
        "intent": "The authentication in place when this token was created .",
        "snippet": "AuthenticationHolderEntity function ( ) { return concodeclass_authenticationHolder ; }"
    },
    {
        "question_id": 1833,
        "intent": "Test method for net.sf.marineapi.nmea.parser.RTEParser #setSentenceCount int .",
        "snippet": "void function ( ) { try { concodeclass_rte . setSentenceCount ( - 1 ) ; fail ( \"srini_string\" ) ; } catch ( IllegalArgumentException loc0 ) { assertTrue ( loc0 . getMessage ( ) . contains ( \"srini_string\" ) ) ; } catch ( Exception loc0 ) { fail ( loc0 . getMessage ( ) ) ; } }"
    },
    {
        "question_id": 1834,
        "intent": "Create a program that satisfies an OP_CHECKMULTISIG program , using pre-encoded signatures . Optionally , appends the script program bytes if spending a P2SH output .",
        "snippet": "Script function ( List < byte [ ] > arg0 , @ Nullable byte [ ] arg1 ) { checkArgument ( arg0 . size ( ) <= 16 ) ; ScriptBuilder loc0 = new ScriptBuilder ( ) ; loc0 . smallNum ( 0 ) ; for ( byte [ ] loc1 : arg0 ) loc0 . data ( loc1 ) ; if ( arg1 != null ) loc0 . data ( arg1 ) ; return loc0 . build ( ) ; }"
    },
    {
        "question_id": 1835,
        "intent": "Checks if authentication is enabled .",
        "snippet": "boolean function ( ) { return ! Configuration . getEnum ( PropertyKey . SECURITY_AUTHENTICATION_TYPE , AuthType . class ) . equals ( AuthType . NOSASL ) ; }"
    },
    {
        "question_id": 1836,
        "intent": "Set the referenced revision label in B.",
        "snippet": "void function ( String arg0 ) { this . concodeclass_referencedRevisionLabelB = arg0 ; }"
    },
    {
        "question_id": 1837,
        "intent": "Calculates | z i | for all i",
        "snippet": "double [ ] function ( final double [ ] arg0 ) { if ( arg0 == null ) { throw new NullArgumentException ( ) ; } if ( arg0 . length == 0 ) { throw new NoDataException ( ) ; } final double [ ] loc0 = new double [ arg0 . length ] ; for ( int loc1 = 0 ; loc1 < arg0 . length ; ++ loc1 ) { loc0 [ loc1 ] = FastMath . abs ( arg0 [ loc1 ] ) ; } return loc0 ; }"
    },
    {
        "question_id": 1838,
        "intent": "Sets the safe range of characters for the escaper . Characters in this range that have no explicit replacement are considered ` safe ' and remain unescaped in the output . If safeMax < safeMin then the safe range is empty .",
        "snippet": "Builder function ( char arg0 , char arg1 ) { this . concodeclass_safeMin = arg0 ; this . concodeclass_safeMax = arg1 ; return this ; }"
    },
    {
        "question_id": 1839,
        "intent": "add a listener",
        "snippet": "void function ( LineListener arg0 ) { concodeclass_listeners . add ( arg0 ) ; }"
    },
    {
        "question_id": 1840,
        "intent": "Gets the total time elapsed in milliseconds .",
        "snippet": "long function ( ) { return concodeclass_timeElapsed ; }"
    },
    {
        "question_id": 1841,
        "intent": "Applies any rendering hints configured for these ScalingOptions to a Graphics2D instance before image operations are called on it . These might be",
        "snippet": "void function ( Graphics2D arg0 ) { arg0 . setRenderingHints ( concodefunc_getRenderingHints ( ) ) ; }"
    },
    {
        "question_id": 1842,
        "intent": "Get the current classname prefix .",
        "snippet": "String function ( ) { return concodeclass_classnamePrefix ; }"
    },
    {
        "question_id": 1843,
        "intent": "Reads all data from the file and send it to the sink .",
        "snippet": "void function ( File arg0 , MapBuilder arg1 ) { try { concodefunc_parseMap ( concodefunc_createFileStream ( arg0 ) , arg1 ) ; } catch ( FileNotFoundException loc0 ) { concodeclass_LOG . warning ( \"srini_string\" + arg0 + \"srini_string\" ) ; } catch ( Exception loc0 ) { concodeclass_LOG . warning ( \"srini_string\" + loc0 ) ; } }"
    },
    {
        "question_id": 1844,
        "intent": "Returns result value as binary data .",
        "snippet": "byte [ ] function ( int arg0 ) { Object loc0 = concodeclass_values . get ( arg0 ) ; if ( loc0 instanceof byte [ ] ) { return ( byte [ ] ) loc0 ; } else { throw new IllegalStateException ( ) ; } }"
    },
    {
        "question_id": 1845,
        "intent": "Calls BlockLockManager #lockBlock long , long , BlockLockType and fails if it does n'thang .",
        "snippet": "void function ( final BlockLockManager arg0 , final long arg1 ) { Thread loc0 = new Thread ( new Runnable ( ) { @ Override public void run ( ) { arg0 . lockBlock ( concodeclass_TEST_SESSION_ID , arg1 , BlockLockType . WRITE ) ; } } ) ; loc0 . start ( ) ; loc0 . join ( 200 ) ; Assert . assertTrue ( loc0 . isAlive ( ) ) ; }"
    },
    {
        "question_id": 1846,
        "intent": "Removes all elements s in the set such that s decends from o",
        "snippet": "boolean function ( Object arg0 ) { Type loc0 = ( Type ) arg0 ; boolean loc1 = false ; for ( Iterator < Type > loc2 = concodeclass_v . iterator ( ) ; loc2 . hasNext ( ) ; ) { Type loc3 = loc2 . next ( ) ; if ( concodeclass_ts . isSubtype ( loc3 , loc0 ) ) { loc1 = true ; loc2 . remove ( ) ; } } return loc1 ; }"
    },
    {
        "question_id": 1847,
        "intent": "Accessor for the FaultTo property .",
        "snippet": "EndpointReferenceType function ( ) { return concodeclass_faultTo ; }"
    },
    {
        "question_id": 1848,
        "intent": "set name of emoji icon",
        "snippet": "void function ( String arg0 ) { this . concodeclass_name = arg0 ; }"
    },
    {
        "question_id": 1849,
        "intent": "call once when this seqNo is fed back in NAK",
        "snippet": "void function ( ) { concodeclass_k ++ ; concodeclass_lastFeedbacktime = Util . getCurrentTime ( ) ; }"
    },
    {
        "question_id": 1850,
        "intent": "Set the Subject Role Classifier to use . If this value is not specified , then it tries to get roles from the supplied JAAS Subject if not null using the DefaultSecurityContext in cxf-rt-core . Otherwise it uses this value in combination with the SUBJECT_ROLE_CLASSIFIER_TYPE to get the roles from the Subject .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_roleClassifier = arg0 ; }"
    },
    {
        "question_id": 1851,
        "intent": "Tests writing an increasing byte array one byte at a time .",
        "snippet": "void function ( ) { for ( int loc0 = 0 ; loc0 < concodeclass_BLOCK_LENGTH ; loc0 ++ ) { concodeclass_mTestStream . write ( concodeclass_INCREASING_BYTES [ loc0 ] ) ; Assert . assertEquals ( loc0 + 1 , concodeclass_mTestStream . getWrittenBytes ( ) ) ; } Assert . assertArrayEquals ( concodeclass_INCREASING_BYTES , Arrays . copyOfRange ( concodeclass_mTestStream . getBuffer ( ) . array ( ) , 0 , ( int ) concodeclass_BLOCK_LENGTH ) ) ; }"
    },
    {
        "question_id": 1852,
        "intent": "Write the given short value 16-bit in big-endian order to the buffer",
        "snippet": "BufferedByteWriter function ( byte arg0 ) { return this . put16 ( ( short ) ( arg0 & 0xFF ) ) ; }"
    },
    {
        "question_id": 1853,
        "intent": "Removes a file from the bucket containing it if the file is in one of the buckets , otherwise , do nothing . Assume that no file in the buckets has ttl value that equals Constants #NO_TTL . If a file with valid ttl value is inserted to the buckets and its ttl value is going to be set to Constants #NO_TTL later , be sure to remove the file from the buckets first .",
        "snippet": "void function ( InodeFile arg0 ) { TtlBucket loc0 = concodefunc_getBucketContaining ( arg0 ) ; if ( loc0 != null ) { loc0 . removeFile ( arg0 ) ; } }"
    },
    {
        "question_id": 1854,
        "intent": "Gets the value of the noRun property .",
        "snippet": "String function ( ) { return concodeclass_noRun ; }"
    },
    {
        "question_id": 1855,
        "intent": "Checks whether a user has permission to perform a specific action on a path . This check will pass if the path is invalid .",
        "snippet": "void function ( Mode . Bits arg0 , LockedInodePath arg1 ) { if ( ! concodeclass_mPermissionCheckEnabled ) { return ; } List < Inode < ? >> loc0 = arg1 . getInodeList ( ) ; String loc1 = concodefunc_getClientUser ( ) ; List < String > loc2 = concodefunc_getGroups ( loc1 ) ; concodefunc_checkInodeList ( loc1 , loc2 , arg0 , arg1 . getUri ( ) . getPath ( ) , loc0 , false ) ; }"
    },
    {
        "question_id": 1856,
        "intent": "Execute DELETE query .",
        "snippet": "void function ( String arg0 , String arg1 , String arg2 , String arg3 , String arg4 ) { String loc0 = String . format ( \"srini_string\" % s + \"srini_string\" % s + \"srini_string\" % s + \"srini_string\" + \"srini_string\" + \"srini_string\" + \"srini_string\" , arg0 , arg1 , arg2 , arg3 , arg4 ) ; concodeclass_ep . sparql ( MediaType . TEXT_HTML , loc0 ) ; }"
    },
    {
        "question_id": 1857,
        "intent": "Tests that an exception is thrown when trying to delete a non-existing lineage via the LineageStore #deleteLineage long method .",
        "snippet": "void function ( ) { long loc0 = 1 ; concodeclass_mThrown . expect ( LineageDoesNotExistException . class ) ; concodeclass_mThrown . expectMessage ( ExceptionMessage . LINEAGE_DOES_NOT_EXIST . getMessage ( loc0 ) ) ; concodeclass_mLineageStore . deleteLineage ( loc0 ) ; }"
    },
    {
        "question_id": 1858,
        "intent": "Returns whether the socket supports urgent data or not . Subclasses should override this method .",
        "snippet": "boolean function ( ) { return false ; }"
    },
    {
        "question_id": 1859,
        "intent": "Gets the value of the handlerName property .",
        "snippet": "CString function ( ) { if ( concodeclass_handlerName == null ) { concodeclass_handlerName = new CString ( ) ; concodeclass_handlerName . setValue ( \"srini_string\" ) ; } return concodeclass_handlerName ; }"
    },
    {
        "question_id": 1860,
        "intent": "Captures SshDisconnectedEvent",
        "snippet": "void function ( SshDisconnectedEvent arg0 ) { System . out . println ( \"srini_string\" + arg0 . getHost ( ) + \"srini_string\" ) ; concodeclass_connected = false ; }"
    },
    {
        "question_id": 1861,
        "intent": "Returns the message number of the message within its sequence .",
        "snippet": "long function ( ) { return concodeclass_messageNumber ; }"
    },
    {
        "question_id": 1862,
        "intent": "Get a List of Strings that corresponds to the issuer regular expression constraints from a JAXB CertificateConstraintsType",
        "snippet": "List < String > function ( CertificateConstraintsType arg0 ) { if ( arg0 != null && arg0 . isSetIssuerDNConstraints ( ) ) { DNConstraintsType loc0 = arg0 . getIssuerDNConstraints ( ) ; return loc0 . getRegularExpression ( ) ; } return java . util . Collections . emptyList ( ) ; }"
    },
    {
        "question_id": 1863,
        "intent": "Set the list of registered audiences",
        "snippet": "void function ( List < String > arg0 ) { this . concodeclass_registeredAudiences = arg0 ; }"
    },
    {
        "question_id": 1864,
        "intent": "Create a program that satisfies an OP_CHECKMULTISIG program .",
        "snippet": "Script function ( List < TransactionSignature > arg0 ) { List < byte [ ] > loc0 = new ArrayList < byte [ ] > ( arg0 . size ( ) ) ; for ( TransactionSignature loc1 : arg0 ) { loc0 . add ( loc1 . encodeToBitcoin ( ) ) ; } return concodefunc_createMultiSigInputScriptBytes ( loc0 , null ) ; }"
    },
    {
        "question_id": 1865,
        "intent": "Returns the value of the given int as a long , when treated as unsigned .",
        "snippet": "long function ( int arg0 ) { return arg0 & concodeclass_INT_MASK ; }"
    },
    {
        "question_id": 1866,
        "intent": "Gets the file descriptor of this socket .",
        "snippet": "FileDescriptor function ( ) { return concodeclass_fd ; }"
    },
    {
        "question_id": 1867,
        "intent": "Get one site by id .",
        "snippet": "Site function ( String arg0 ) { concodeclass_log . debug ( \"srini_string\" , arg0 ) ; return concodeclass_siteRepository . findByHost ( arg0 ) ; }"
    },
    {
        "question_id": 1868,
        "intent": "Gets a ByteBuffer containing an increasing sequence of bytes starting at the givenvalue .",
        "snippet": "ByteBuffer function ( int arg0 , int arg1 ) { return ByteBuffer . wrap ( concodefunc_getIncreasingByteArray ( arg0 , arg1 ) ) ; }"
    },
    {
        "question_id": 1869,
        "intent": "Test method for net.sf.marineapi.nmea.parser.TTMParser #setStatus .",
        "snippet": "void function ( ) { concodeclass_ttm . setStatus ( TargetStatus . LOST ) ; assertTrue ( concodeclass_ttm . toString ( ) . contains ( \"srini_string\" ) ) ; }"
    },
    {
        "question_id": 1870,
        "intent": "Checks if the path is a windows path . This should be platform independent .",
        "snippet": "boolean function ( String arg0 , boolean arg1 ) { int loc0 = arg1 ? 1 : 0 ; return arg0 . length ( ) >= loc0 + 2 && ( ! arg1 || arg0 . charAt ( 0 ) == '/' ) && arg0 . charAt ( loc0 + 1 ) == ':' && ( ( arg0 . charAt ( loc0 ) >= 'A' && arg0 . charAt ( loc0 ) <= 'Z' ) || ( arg0 . charAt ( loc0 ) >= 'a' && arg0 . charAt ( loc0 ) <= 'z' ) ) ; }"
    },
    {
        "question_id": 1871,
        "intent": "Final computation for a single row of ` v ' : v = y - 1/2 & gamma ; y ^ Tu u",
        "snippet": "void function ( final int arg0 , final D1Submatrix64F arg1 , final D1Submatrix64F arg2 , int arg3 , double arg4 ) { double loc0 = BlockHouseHolder . innerProdRow ( arg0 , arg1 , arg3 , arg2 , arg3 , 1 ) ; double loc1 = arg1 . get ( arg3 , arg3 + 1 ) ; arg1 . set ( arg3 , arg3 + 1 , 1 ) ; BlockVectorOps . add_row ( arg0 , arg2 , arg3 , 1 , arg1 , arg3 , - 0.5 * arg4 * loc0 , arg2 , arg3 , arg3 + 1 , arg1 . col1 - arg1 . col0 ) ; arg1 . set ( arg3 , arg3 + 1 , loc1 ) ; }"
    },
    {
        "question_id": 1872,
        "intent": "Returns the URL without the port and the query string part .",
        "snippet": "String function ( ) { return concodeclass_url . replaceAll ( \"srini_string\" , \"srini_string\" ) . replace ( \"srini_string\" , \"srini_string\" ) ; }"
    },
    {
        "question_id": 1873,
        "intent": "Current count of white stones .",
        "snippet": "int function ( ) { BitSet loc0 = ( BitSet ) concodeclass_taken . clone ( ) ; loc0 . andNot ( concodeclass_black ) ; return loc0 . cardinality ( ) ; }"
    },
    {
        "question_id": 1874,
        "intent": "Return the preview associated with the given UUID",
        "snippet": "BookPreview function ( UUID arg0 ) { for ( BookPreview loc0 : concodeclass_data ) { if ( loc0 . getUUID ( ) . equals ( arg0 ) ) return loc0 ; } return null ; }"
    },
    {
        "question_id": 1875,
        "intent": "Checks with heap is empty or not",
        "snippet": "boolean function ( ) { return concodeclass_allNodes . size ( ) == 0 ; }"
    },
    {
        "question_id": 1876,
        "intent": "Return a Dag engine for a system user no user , no group .",
        "snippet": "DagEngine function ( ) { return new DagEngine ( ) ; }"
    },
    {
        "question_id": 1877,
        "intent": "Test of getResourceStream method , of class ResourceLoader .",
        "snippet": "void function ( ) { System . out . println ( \"srini_string\" ) ; String loc0 = \"srini_string\" ; ResourceLoader loc1 = new ResourceLoader ( ) ; InputStream loc2 = null ; InputStream loc3 = loc1 . getResourceStream ( loc0 ) ; Assert . assertNotNull ( loc3 ) ; }"
    },
    {
        "question_id": 1878,
        "intent": "Adds each member of elements as a candidate for the top k elements . Thisoperation takes amortized linear time in the length of elements . If all input data to this TopKSelector is in a single Iterable , prefer Ordering #leastOf Iterable , int , which provides a simpler API for that use case .",
        "snippet": "void function ( Iterable < ? extends T > arg0 ) { offerAll ( arg0 . iterator ( ) ) ; }"
    },
    {
        "question_id": 1879,
        "intent": "Create an instance of ProjectValidation",
        "snippet": "ProjectValidation function ( ) { return new ProjectValidation ( ) ; }"
    },
    {
        "question_id": 1880,
        "intent": "add key-value pair to map , both key and value need not null or empty",
        "snippet": "boolean function ( Map < String , String > arg0 , String arg1 , String arg2 ) { if ( arg0 == null || UtilString . isEmpty ( arg1 ) || UtilString . isEmpty ( arg2 ) ) { return false ; } arg0 . put ( arg1 , arg2 ) ; return true ; }"
    },
    {
        "question_id": 1881,
        "intent": "Return the first not null value , or null if both are null . Defined for EL as ` Object firstNotNull Object , Object ' .",
        "snippet": "Object function ( Object arg0 , Object arg1 ) { return ( arg0 != null ) ? arg0 : arg1 ; }"
    },
    {
        "question_id": 1882,
        "intent": "Gets the value of the csr property .",
        "snippet": "String function ( ) { return concodeclass_csr ; }"
    },
    {
        "question_id": 1883,
        "intent": "Send an ERROR log message .",
        "snippet": "void function ( Exception arg0 ) { if ( concodeclass_sIsLogEnabled ) { Log . e ( concodeclass_sApplicationTag , concodefunc_getContent ( concodefunc_getCurrentStackTraceElement ( ) ) + \"srini_string\" + arg0 . getMessage ( ) ) ; arg0 . printStackTrace ( ) ; } }"
    },
    {
        "question_id": 1884,
        "intent": "Getter for the recently granted permissions .",
        "snippet": "Set < String > function ( ) { return concodeclass_recentlyGrantedPermissions ; }"
    },
    {
        "question_id": 1885,
        "intent": "Returns true if the monetary value represented by this instance is less than that of the given other Coin , otherwise false .",
        "snippet": "boolean function ( Fiat arg0 ) { return concodefunc_compareTo ( arg0 ) < 0 ; }"
    },
    {
        "question_id": 1886,
        "intent": "Set the type of the request",
        "snippet": "void function ( String arg0 ) { this . concodeclass_type = arg0 ; }"
    },
    {
        "question_id": 1887,
        "intent": "Generates an MD5 key for the given text .",
        "snippet": "String function ( String arg0 ) { return CacheUtil . md5sum ( arg0 ) ; }"
    },
    {
        "question_id": 1888,
        "intent": "Write the given int value 32-bit in big-endian order to the buffer",
        "snippet": "BufferedByteWriter function ( int arg0 ) { concodefunc_ensureCapacity ( 4 ) ; concodeclass_mWriter . putInt ( arg0 ) ; return this ; }"
    },
    {
        "question_id": 1889,
        "intent": "Generate `` final '' keyword for final operations or attributes .",
        "snippet": "String function ( Object arg0 ) { if ( Model . getFacade ( ) . isAAttribute ( arg0 ) ) { if ( ! Model . getFacade ( ) . isReadOnly ( arg0 ) ) { return \"srini_string\" ; } } else { if ( Model . getFacade ( ) . isAOperation ( arg0 ) ) { if ( Model . getFacade ( ) . isLeaf ( arg0 ) ) { return \"srini_string\" ; } } } return \"srini_string\" ; }"
    },
    {
        "question_id": 1890,
        "intent": "Returns a diagonal matrix with the singular values . The singular values are ordered from largest to smallest .",
        "snippet": "T function ( ) { return concodeclass_W ; }"
    },
    {
        "question_id": 1891,
        "intent": "Creates and maintains a singleton instance of OpenIDClaimMapper",
        "snippet": "OpenIDClaimMapper function ( ) { if ( concodeclass_instance == null ) { concodeclass_instance = new OpenIDClaimMapper ( ) ; } return concodeclass_instance ; }"
    },
    {
        "question_id": 1892,
        "intent": "Frees a Hessian 2.0 deserializer",
        "snippet": "void function ( Hessian2StreamingInput arg0 ) { }"
    },
    {
        "question_id": 1893,
        "intent": "Main method for SshExample",
        "snippet": "void function ( String [ ] arg0 ) { SshExample loc0 = new SshExample ( ) ; }"
    },
    {
        "question_id": 1894,
        "intent": "removes all punctuation marks from a post",
        "snippet": "String function ( String arg0 ) { String loc0 = arg0 . replaceAll ( \"srini_string\" , \"srini_string\" ) ; String loc1 = loc0 . replaceAll ( \"srini_string\" , \"srini_string\" ) ; return loc1 ; }"
    },
    {
        "question_id": 1895,
        "intent": "Gets the abstraction with which the sink has been reached",
        "snippet": "Abstraction function ( ) { return this . concodeclass_abstraction ; }"
    },
    {
        "question_id": 1896,
        "intent": "Compares this bucket 's TTL interval start time to that of another bucket .",
        "snippet": "int function ( TtlBucket arg0 ) { long loc0 = concodefunc_getTtlIntervalStartTimeMs ( ) ; long loc1 = arg0 . getTtlIntervalStartTimeMs ( ) ; if ( loc0 < loc1 ) { return - 1 ; } if ( loc0 == loc1 ) { return 0 ; } return 1 ; }"
    },
    {
        "question_id": 1897,
        "intent": "Extract the content and metadata from the input stream . Depending on media type validation , the detector could be run against input stream in order to ensure that parser supports this type of content .",
        "snippet": "Document function ( final InputStream arg0 ) { return concodefunc_extractAll ( arg0 , null , true , true ) ; }"
    },
    {
        "question_id": 1898,
        "intent": "Returns the top k elements offered to this TopKSelector , or all elements if fewer than k have been offered , in the order specified by the factory used to createthis TopKSelector . The returned list is an unmodifiable copy and will not be affected by further changes to this TopKSelector . This method returns in O k log k time .",
        "snippet": "List < T > function ( ) { Arrays . sort ( concodeclass_buffer , 0 , concodeclass_bufferSize , concodeclass_comparator ) ; if ( concodeclass_bufferSize > concodeclass_k ) { Arrays . fill ( concodeclass_buffer , concodeclass_k , concodeclass_buffer . length , null ) ; concodeclass_bufferSize = concodeclass_k ; concodeclass_threshold = concodeclass_buffer [ concodeclass_k - 1 ] ; } return Collections . unmodifiableList ( Arrays . asList ( Arrays . copyOf ( concodeclass_buffer , concodeclass_bufferSize ) ) ) ; }"
    },
    {
        "question_id": 1899,
        "intent": "Test method for net.sf.marineapi.nmea.parser.ZDAParser #getTime .",
        "snippet": "void function ( ) { Time loc0 = concodeclass_zda . getTime ( ) ; assertNotNull ( loc0 ) ; assertEquals ( 3 , loc0 . getHour ( ) ) ; assertEquals ( 29 , loc0 . getMinutes ( ) ) ; assertEquals ( 15.0 , loc0 . getSeconds ( ) , 0.1 ) ; }"
    },
    {
        "question_id": 1900,
        "intent": "Test method for net.sf.marineapi.nmea.util.Date #getDay .",
        "snippet": "void function ( ) { assertEquals ( concodeclass_cal . get ( Calendar . DAY_OF_MONTH ) , concodeclass_instance . getDay ( ) ) ; }"
    },
    {
        "question_id": 1901,
        "intent": "Checks that the expected LanguageVersion can be found by thecombination of #terseName and #version .",
        "snippet": "void function ( ) { assertEquals ( concodeclass_expected , LanguageRegistry . findLanguageVersionByTerseName ( concodeclass_terseName ) ) ; }"
    },
    {
        "question_id": 1902,
        "intent": "Replaces the wildcards with Java 's regex semantics .",
        "snippet": "String function ( String arg0 ) { return concodefunc_escape ( arg0 ) . replace ( \"srini_string\" , \"srini_string\" ) ; }"
    },
    {
        "question_id": 1903,
        "intent": "Sets the exp data unit id .",
        "snippet": "void function ( BigDecimal arg0 ) { this . concodeclass_expDataUnitId = arg0 ; }"
    },
    {
        "question_id": 1904,
        "intent": "Returns the object used to calculate the metric . @return The calculator .",
        "snippet": "OperationMetric function ( ) { return concodeclass_calculator ; }"
    },
    {
        "question_id": 1905,
        "intent": "Test method for net.sf.marineapi.nmea.parser.GSVParser #getSentenceIndex .",
        "snippet": "void function ( ) { assertEquals ( 2 , concodeclass_gsv . getSentenceIndex ( ) ) ; }"
    },
    {
        "question_id": 1906,
        "intent": "Save a siteUrl .",
        "snippet": "SiteUrl function ( SiteUrl arg0 ) { concodeclass_log . debug ( \"srini_string\" , arg0 ) ; SiteUrl loc0 = concodeclass_siteUrlRepository . save ( arg0 ) ; return loc0 ; }"
    },
    {
        "question_id": 1907,
        "intent": "Creates a default block request message , just allocates the message header , and no attribute is set . The message is not ready to be sent .",
        "snippet": "DataServerMessage function ( ) { DataServerMessage loc0 = new DataServerMessage ( false , RPCMessage . Type . RPC_BLOCK_READ_REQUEST ) ; loc0 . mHeader = ByteBuffer . allocate ( concodeclass_REQUEST_HEADER_LENGTH ) ; return loc0 ; }"
    },
    {
        "question_id": 1908,
        "intent": "Check if transaction is active",
        "snippet": "boolean function ( ) { return concodeclass_entityManager . getTransaction ( ) . isActive ( ) ; }"
    },
    {
        "question_id": 1909,
        "intent": "Test method for net.sf.marineapi.nmea.parser.TTMParser #getTimeToCPA .",
        "snippet": "void function ( ) { assertEquals ( 20.2 , concodeclass_ttm . getTimeToCPA ( ) , 0.001 ) ; }"
    },
    {
        "question_id": 1910,
        "intent": "Captures SshDisconnectedEvent",
        "snippet": "void function ( SshDisconnectedEvent arg0 ) { System . out . println ( \"srini_string\" + arg0 . getHost ( ) + \"srini_string\" ) ; concodeclass_connected = false ; }"
    },
    {
        "question_id": 1911,
        "intent": "Get the Value value .",
        "snippet": "String function ( ) { return concodeclass_value ; }"
    },
    {
        "question_id": 1912,
        "intent": "Moves to the next record , which in this case means moving the index to the next record satisfying the selection constant , and returning false if there are no more such index records . If there is a next record , the method moves the tablescan to the corresponding data record .",
        "snippet": "boolean function ( ) { boolean loc0 = concodeclass_idx . next ( ) ; if ( loc0 ) { RID loc1 = concodeclass_idx . getDataRid ( ) ; concodeclass_ts . moveToRid ( loc1 ) ; } return loc0 ; }"
    },
    {
        "question_id": 1913,
        "intent": "Tests the UnderStoreBlockInStream #seek long method for the last block of the file .",
        "snippet": "void function ( ) { concodefunc_seekInternal ( concodeclass_mEOFBlockStream , ( int ) concodeclass_BLOCK_LENGTH ) ; }"
    },
    {
        "question_id": 1914,
        "intent": "Test method for net.sf.marineapi.nmea.util.Date #setMonth int .",
        "snippet": "void function ( ) { int loc0 = 0 ; try { concodeclass_instance . setMonth ( loc0 ) ; fail ( \"srini_string\" ) ; } catch ( IllegalArgumentException loc1 ) { } loc0 = 32 ; try { concodeclass_instance . setMonth ( loc0 ) ; fail ( \"srini_string\" ) ; } catch ( IllegalArgumentException loc1 ) { } }"
    },
    {
        "question_id": 1915,
        "intent": "Returns the best individual in the specified population , according to the specified FITNESS-FN and number of iterations .",
        "snippet": "String function ( Set < String > arg0 , FitnessFunction arg1 , int arg2 ) { String loc0 = null ; concodefunc_validatePopulation ( arg0 ) ; concodefunc_clearInstrumentation ( ) ; concodefunc_setPopulationSize ( arg0 . size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg2 ; loc1 ++ ) { loc0 = concodefunc_ga ( arg0 , arg1 ) ; } concodefunc_setIterations ( arg2 ) ; return loc0 ; }"
    },
    {
        "question_id": 1916,
        "intent": "Gets the RPPA Value .",
        "snippet": "RPPA function ( ) { return concodeclass_rppaValue ; }"
    },
    {
        "question_id": 1917,
        "intent": "Moves from the current node to the given attribute .",
        "snippet": "void function ( QName arg0 ) { concodeclass_path . addLast ( concodeclass_path . getLast ( ) . attributes . get ( arg0 ) ) ; }"
    },
    {
        "question_id": 1918,
        "intent": "Get the EncryptionProperties to be used to encrypt tokens issued for this service",
        "snippet": "EncryptionProperties function ( ) { return concodeclass_encryptionProperties ; }"
    },
    {
        "question_id": 1919,
        "intent": "Gets the access token of the shared test user with the tag for the application with the requested permissions .",
        "snippet": "AccessToken function ( List < String > arg0 , String arg1 ) { return concodefunc_getAccessTokenForUser ( arg0 , Mode . SHARED , arg1 ) ; }"
    },
    {
        "question_id": 1920,
        "intent": "Closes a Closeable , with control over whether an IOException may be thrown.This is primarily useful in a finally block , where a thrown exception needs to be logged but not propagated otherwise the original exception will be lost . If swallowIOException is true then we never throw IOException but merely logit . Example : public void useStreamNicely throws IOException SomeStream stream = new SomeStream `` foo '' ; boolean threw = true ; try / / ... code which does something with the stream ... threw = false ; finally / / If an exception occurs , rethrow it only if threw == false : Closeables.close stream , threw ;",
        "snippet": "void function ( @ Nullable Closeable arg0 , boolean arg1 ) { if ( arg0 == null ) { return ; } try { arg0 . close ( ) ; } catch ( IOException loc0 ) { if ( arg1 ) { concodeclass_logger . log ( Level . WARNING , \"srini_string\" , loc0 ) ; } else { throw loc0 ; } } }"
    },
    {
        "question_id": 1921,
        "intent": "Setter for a property . If the property already exists , the value will be overridden . Hint : This method is intended as an alternative way to set properties programmatically instead of using the fckeditor.properties . It should never used inside FCKeditor.Java !!!",
        "snippet": "void function ( final String arg0 , final String arg1 ) { concodeclass_properties . setProperty ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 1922,
        "intent": "All get methods",
        "snippet": "List < RSSItem > function ( ) { return this . concodeclass__items ; }"
    },
    {
        "question_id": 1923,
        "intent": "Adds an item stack into the inventory",
        "snippet": "void function ( Item arg0 , int arg1 ) { if ( ! this . concodefunc_isFull ( ) ) { arg1 = Math . min ( arg1 , concodeclass_limit - concodeclass_count ) ; concodeclass_count += arg1 ; if ( concodeclass_invMap . containsKey ( arg0 ) ) { int loc0 = concodeclass_invMap . get ( arg0 ) ; arg1 += loc0 ; } concodeclass_invMap . put ( arg0 , arg1 ) ; } }"
    },
    {
        "question_id": 1924,
        "intent": "Test method for net.sf.marineapi.nmea.util.Date #Date .",
        "snippet": "void function ( ) { assertEquals ( concodeclass_cal . get ( Calendar . YEAR ) , concodeclass_instance . getYear ( ) ) ; assertEquals ( concodeclass_cal . get ( Calendar . MONTH ) + 1 , concodeclass_instance . getMonth ( ) ) ; assertEquals ( concodeclass_cal . get ( Calendar . DAY_OF_MONTH ) , concodeclass_instance . getDay ( ) ) ; }"
    },
    {
        "question_id": 1925,
        "intent": "Return value on the top of the stack without popping it .",
        "snippet": "int function ( ) { if ( concodeclass_vstack . empty ( ) ) throw new Exception ( \"srini_string\" ) ; return concodeclass_vstack . peek ( ) . intValue ( ) ; }"
    },
    {
        "question_id": 1926,
        "intent": "Return everything in the path up to the last slash in a URI .",
        "snippet": "String function ( String arg0 ) { int loc0 = arg0 . lastIndexOf ( '/' ) ; String loc1 = arg0 ; if ( loc0 != - 1 ) { loc1 = arg0 . substring ( 0 , loc0 ) ; } return loc1 ; }"
    },
    {
        "question_id": 1927,
        "intent": "Tests the SetAttributeOptions #defaults method .",
        "snippet": "void function ( ) { SetAttributeOptions loc0 = SetAttributeOptions . defaults ( ) ; Assert . assertNull ( loc0 . getPinned ( ) ) ; Assert . assertNull ( loc0 . getTtl ( ) ) ; Assert . assertNull ( loc0 . getPersisted ( ) ) ; }"
    },
    {
        "question_id": 1928,
        "intent": "Returns the uint32 encoded form of the path element , including the most significant bit .",
        "snippet": "int function ( ) { return concodeclass_i ; }"
    },
    {
        "question_id": 1929,
        "intent": "Sets custom Produces media types ; can be used to override static Produces annotation value set on the provider .",
        "snippet": "void function ( List < String > arg0 ) { concodeclass_produceMediaTypes = arg0 ; }"
    },
    {
        "question_id": 1930,
        "intent": "Checks if this is a valid command or not . Mainly if its just an empty string",
        "snippet": "boolean function ( ) { return ! concodeclass_rawCommand . isEmpty ( ) ; }"
    },
    {
        "question_id": 1931,
        "intent": "Test case for S3AUnderFileSystem #delete String , boolean .",
        "snippet": "void function ( ) { Mockito . when ( concodeclass_mClient . listObjectsV2 ( Matchers . any ( ListObjectsV2Request . class ) ) ) . thenThrow ( AmazonClientException . class ) ; boolean loc0 = concodeclass_mS3UnderFileSystem . delete ( concodeclass_PATH , true ) ; Assert . assertFalse ( loc0 ) ; }"
    },
    {
        "question_id": 1932,
        "intent": "Allows third party apps to specify the camera ID , rather than determine it automatically based on available cameras and their orientation .",
        "snippet": "void function ( int arg0 ) { concodeclass_requestedCameraId = arg0 ; }"
    },
    {
        "question_id": 1933,
        "intent": "Clones a list of ByteBuffer s.",
        "snippet": "List < ByteBuffer > function ( List < ByteBuffer > arg0 ) { List < ByteBuffer > loc0 = new ArrayList < > ( arg0 . size ( ) ) ; for ( ByteBuffer loc1 : arg0 ) { loc0 . add ( concodefunc_cloneByteBuffer ( loc1 ) ) ; } return loc0 ; }"
    },
    {
        "question_id": 1934,
        "intent": "Gets the optional title for the dialog",
        "snippet": "String function ( ) { return concodeclass_title ; }"
    },
    {
        "question_id": 1935,
        "intent": "Adds a directed labeled edge to the graph . The end points of the edge are specified by vertex labels . New vertices are automatically identified and added to the graph .",
        "snippet": "void function ( VertexLabelType arg0 , VertexLabelType arg1 , EdgeLabelType arg2 ) { Hashtable < VertexLabelType , EdgeLabelType > loc0 = concodefunc_checkForNewVertex ( arg0 ) ; loc0 . put ( arg1 , arg2 ) ; concodefunc_checkForNewVertex ( arg1 ) ; }"
    },
    {
        "question_id": 1936,
        "intent": "Create Error object to be passed back to the JS callback .",
        "snippet": "WritableMap function ( @ Nullable String arg0 , String arg1 ) { WritableMap loc0 = Arguments . createMap ( ) ; loc0 . putString ( \"srini_string\" , arg1 ) ; if ( arg0 != null ) { loc0 . putString ( \"srini_string\" , arg0 ) ; } return loc0 ; }"
    },
    {
        "question_id": 1937,
        "intent": "Returns a list of all loggers that will be accessed by XRLog . Each entry is a String with a logger name , which can be used to retrieve the logger using the corresponding Logging API ; example name might be `` org.xhtmlrenderer.config ''",
        "snippet": "List function ( ) { return new ArrayList ( concodeclass_LOGGER_NAMES ) ; }"
    },
    {
        "question_id": 1938,
        "intent": "Adds a JobsGroup to the queue , and starts immediately to execute jobs on that group . If there was a previously group running , this method finishes that execution first .",
        "snippet": "void function ( JobsGroup arg0 , Context arg1 , boolean arg2 ) { this . concodefunc_finishRunningJobs ( arg1 ) ; this . concodeclass_jobs . put ( Long . valueOf ( arg0 . getId ( ) ) , arg0 ) ; arg0 . run ( this , arg2 ) ; }"
    },
    {
        "question_id": 1939,
        "intent": "Return the offset of the workflows being returned . For pagination purposes .",
        "snippet": "int function ( ) { return concodeclass_start ; }"
    },
    {
        "question_id": 1940,
        "intent": "Set the mappings from namespace URI to Javascript name prefixes .",
        "snippet": "void function ( UriPrefixPair [ ] arg0 ) { this . concodeclass_packagePrefixes = arg0 ; }"
    },
    {
        "question_id": 1941,
        "intent": "Sets the seq id .",
        "snippet": "void function ( long arg0 ) { this . concodeclass_seqId = arg0 ; }"
    },
    {
        "question_id": 1942,
        "intent": "Gets the new merged profile data object .",
        "snippet": "ProfileData function ( ) { return this . concodeclass_profileData ; }"
    },
    {
        "question_id": 1943,
        "intent": "Creates a reflector from the provided vector and gamma . Q = I - & gamma ; u uT In practice org.ejml.alg.dense.mult.VectorVectorMult #householder double , org.ejml.data.D1Matrix64F , org.ejml.data.D1Matrix64F , org.ejml.data.D1Matrix64F multHouseholder should be used for performance reasons since there is no need to calculate Q explicitly .",
        "snippet": "DenseMatrix64F function ( DenseMatrix64F arg0 , double arg1 ) { if ( ! MatrixFeatures . isVector ( arg0 ) ) throw new IllegalArgumentException ( \"srini_string\" ) ; DenseMatrix64F loc0 = CommonOps . identity ( arg0 . getNumElements ( ) ) ; CommonOps . multAddTransB ( - arg1 , arg0 , arg0 , loc0 ) ; return loc0 ; }"
    },
    {
        "question_id": 1944,
        "intent": "Creates a new mode by applying the given umask Mode to this mode .",
        "snippet": "Mode function ( Mode arg0 ) { return new Mode ( concodeclass_mOwnerBits . and ( arg0 . mOwnerBits . not ( ) ) , concodeclass_mGroupBits . and ( arg0 . mGroupBits . not ( ) ) , concodeclass_mOtherBits . and ( arg0 . mOtherBits . not ( ) ) ) ; }"
    },
    {
        "question_id": 1945,
        "intent": "Convenience method for creating a waypoint based in the Position .",
        "snippet": "Waypoint function ( String arg0 ) { return new Waypoint ( arg0 , concodefunc_getLatitude ( ) , concodefunc_getLongitude ( ) ) ; }"
    },
    {
        "question_id": 1946,
        "intent": "Sets the test id .",
        "snippet": "void function ( long arg0 ) { this . concodeclass_testId = arg0 ; }"
    },
    {
        "question_id": 1947,
        "intent": "Sets if it should internally save the W matrix before performing the decomposition . Must be set before decomposition the matrix . Saving W can result in about a 5 % savings when solving systems around a height of 5k . The price is that it needs to save a matrix the size of the input matrix .",
        "snippet": "void function ( boolean arg0 ) { this . concodeclass_saveW = arg0 ; }"
    },
    {
        "question_id": 1948,
        "intent": "Sets the protocol handler to use for this connection .",
        "snippet": "void function ( final ProtocolHandler arg0 ) { this . concodeclass_m_readHandler . setProtocolHandler ( arg0 ) ; }"
    },
    {
        "question_id": 1949,
        "intent": "Retrieves a byte array field from the stream . Creates a new byte array that is the size of the object being retrieved .",
        "snippet": "byte [ ] function ( ) { if ( ! concodeclass_isRaw ) { concodeclass_format . checkType ( 'U' , false ) ; } int loc0 = concodefunc_getByteArrayLength ( ) ; byte [ ] loc1 = new byte [ loc0 ] ; concodefunc_getByteArrayInternal ( loc0 , loc1 , 0 , loc0 ) ; return loc1 ; }"
    },
    {
        "question_id": 1950,
        "intent": "getInstance method of LogoutRequestSender , as it is a singleton",
        "snippet": "LogoutRequestSender function ( ) { return concodeclass_instance ; }"
    },
    {
        "question_id": 1951,
        "intent": "Returns numerator",
        "snippet": "int function ( ) { return concodeclass_num ; }"
    },
    {
        "question_id": 1952,
        "intent": "Gets the final component of the AlluxioURI .",
        "snippet": "String function ( ) { String loc0 = concodeclass_mUri . getPath ( ) ; int loc1 = loc0 . lastIndexOf ( concodeclass_SEPARATOR ) ; return loc0 . substring ( loc1 + 1 ) ; }"
    },
    {
        "question_id": 1953,
        "intent": "Copies Request ID to response as per XKMS specification http://www.w3.org/TR/xkms2/#XKMS_2_0_Section_1",
        "snippet": "ResultType function ( RequestAbstractType arg0 , ResultType arg1 ) { arg1 . setRequestId ( arg0 . getId ( ) ) ; return arg1 ; }"
    },
    {
        "question_id": 1954,
        "intent": "JSObject will return the String `` undefined '' at certain times , so we need to make sure we 're not getting a value that looks valid , but is n't .",
        "snippet": "Object function ( Object arg0 ) { if ( arg0 instanceof String && ( ( String ) arg0 ) . equals ( \"srini_string\" ) ) { return null ; } return arg0 ; }"
    },
    {
        "question_id": 1955,
        "intent": "Redraw the page",
        "snippet": "void function ( ) { concodefunc_getPage ( ) . draw ( concodeclass_view . canvas ) ; concodeclass_view . invalidate ( ) ; }"
    },
    {
        "question_id": 1956,
        "intent": "Test method for net.sf.marineapi.nmea.parser.PositionParser #setLatitude int , double .",
        "snippet": "void function ( ) { final double loc0 = 25 + ( 01.941 / 60 ) ; concodeclass_instance . setLatitude ( 0 , loc0 ) ; assertTrue ( concodeclass_instance . toString ( ) . contains ( \"srini_string\" ) ) ; assertEquals ( loc0 , concodeclass_instance . parseLatitude ( 0 ) , 0.000001 ) ; }"
    },
    {
        "question_id": 1957,
        "intent": "Disconnect this undo/redo from the text view .",
        "snippet": "void function ( ) { concodeclass_mTextView . removeTextChangedListener ( concodeclass_mChangeListener ) ; }"
    },
    {
        "question_id": 1958,
        "intent": "Add a high level change renaming . If the difference group identifier already exists the old high level change renaming will be overwritten .",
        "snippet": "void function ( String arg0 , HighLevelChangeRenaming arg1 ) { this . concodeclass_highLevelChangesRenaming . put ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 1959,
        "intent": "Make a request to the Facebook Graph API with the given string parameters using an HTTP GET default method . See http://developers.facebook.com/docs/api Note that this method is asynchronous and the callback will be invoked in a background thread ; operations that affect the UI will need to be posted to the UI thread or an appropriate handler . This method is deprecated . See Facebook and com.facebook.Request for more info .",
        "snippet": "void function ( String arg0 , Bundle arg1 , RequestListener arg2 , final Object arg3 ) { request ( arg0 , arg1 , \"srini_string\" , arg2 , arg3 ) ; }"
    },
    {
        "question_id": 1960,
        "intent": "Sets the rotation .",
        "snippet": "void function ( Rotation arg0 ) { this . concodeclass_rotation = arg0 ; for ( StateListener loc0 : this . concodeclass_listeners ) { loc0 . onRotationChanged ( this . concodeclass_rotation ) ; } }"
    },
    {
        "question_id": 1961,
        "intent": "Returns the length of the matched token . It is not required to be meaningful unless addChar has returned true and hasFreePart returned false or endChar returned true .",
        "snippet": "int function ( ) { return pattern . length ; }"
    },
    {
        "question_id": 1962,
        "intent": "Sets up a new ByteBuffer before a test runs .",
        "snippet": "void function ( ) { concodeclass_mBuffer = BufferUtils . getIncreasingByteBuffer ( concodeclass_LENGTH ) ; }"
    },
    {
        "question_id": 1963,
        "intent": "Test method for net.sf.marineapi.nmea.parser.RTEParser #isFirst .",
        "snippet": "void function ( ) { assertTrue ( concodeclass_rte . isFirst ( ) ) ; }"
    },
    {
        "question_id": 1964,
        "intent": "All set methods",
        "snippet": "void function ( List < RSSItem > arg0 ) { this . concodeclass__items = arg0 ; }"
    },
    {
        "question_id": 1965,
        "intent": "Sets Entrez Gene ID for Gene B.",
        "snippet": "void function ( long arg0 ) { this . concodeclass_geneB = arg0 ; }"
    },
    {
        "question_id": 1966,
        "intent": "Tests that a ClosedChannelException is thrown when trying to append to a channel afterclosing it .",
        "snippet": "void function ( ) { concodeclass_mThrown . expect ( ClosedChannelException . class ) ; ByteBuffer loc0 = BufferUtils . getIncreasingByteBuffer ( ( int ) concodeclass_TEST_BLOCK_SIZE ) ; Assert . assertEquals ( concodeclass_TEST_BLOCK_SIZE , concodeclass_mWriter . append ( loc0 ) ) ; concodeclass_mWriter . close ( ) ; concodeclass_mWriter . append ( loc0 ) ; }"
    },
    {
        "question_id": 1967,
        "intent": "Tests that the BlockId #createBlockId long , long method works correctly when creating ablock with the maximum sequence number .",
        "snippet": "void function ( ) { Assert . assertEquals ( 33554431L , BlockId . createBlockId ( 1 , BlockId . getMaxSequenceNumber ( ) ) ) ; Assert . assertEquals ( concodeclass_MAX_SEQUENCE_NUMBER , BlockId . createBlockId ( 0 , BlockId . getMaxSequenceNumber ( ) ) ) ; Assert . assertEquals ( 4294967295L , BlockId . createBlockId ( 255 , BlockId . getMaxSequenceNumber ( ) ) ) ; }"
    },
    {
        "question_id": 1968,
        "intent": "This tests everything that the test for the static file above tests , but it also does the full download .",
        "snippet": "void function ( ) { concodeclass_LOG . debug ( \"srini_string\" ) ; concodefunc_runFullTest ( new YahooImageSearcher ( null , UUID . randomUUID ( ) , \"srini_string\" , \"srini_string\" ) ) ; }"
    },
    {
        "question_id": 1969,
        "intent": "Parse a string into a Stmt AST node , applying substitutions .",
        "snippet": "Stmt function ( String arg0 , List < ? > arg1 ) { return ( Stmt ) concodefunc_parse ( concodeclass_STMT , arg0 , arg1 . toArray ( ) ) ; }"
    },
    {
        "question_id": 1970,
        "intent": "Gets a list of URIs the AuthorizationService may return the authorization code to",
        "snippet": "List < String > function ( ) { return concodeclass_redirectUris ; }"
    },
    {
        "question_id": 1971,
        "intent": "Gets the errors .",
        "snippet": "byte [ ] function ( ) { return this . concodeclass_errors ; }"
    },
    {
        "question_id": 1972,
        "intent": "Compare two cancer studies .",
        "snippet": "int function ( Object arg0 , Object arg1 ) { CancerStudy loc0 = ( CancerStudy ) arg0 ; CancerStudy loc1 = ( CancerStudy ) arg1 ; return loc0 . getName ( ) . compareTo ( loc1 . getName ( ) ) ; }"
    },
    {
        "question_id": 1973,
        "intent": "Performs domain-match as defined by the RFC2965 . Host A 's name domain-matches host B 's if their host name strings string-compare equal ; or A is a HDN string and has the form NB , where N is a non-empty name string , B has the form . B ' , and B ' is a HDN string . So , x.y.com domain-matches . Y.com but not Y.com .",
        "snippet": "boolean function ( String arg0 , String arg1 ) { boolean loc0 = arg0 . equals ( arg1 ) || ( arg1 . startsWith ( \"srini_string\" ) && arg0 . endsWith ( arg1 ) ) ; return loc0 ; }"
    },
    {
        "question_id": 1974,
        "intent": "Returns an iterator for the log records , which will be returned in reverse order starting with the most recent .",
        "snippet": "ListIterator < BasicLogRecord > function ( ) { concodefunc_flush ( ) ; return new LogIterator ( concodeclass_currentblk ) ; }"
    },
    {
        "question_id": 1975,
        "intent": "Create an instance of GetOfferDetailsResponse.Return.DetailOfferData.Merchant.Addresses",
        "snippet": "GetOfferDetailsResponse . Return . DetailOfferData . Merchant . Addresses function ( ) { return new GetOfferDetailsResponse . Return . DetailOfferData . Merchant . Addresses ( ) ; }"
    },
    {
        "question_id": 1976,
        "intent": "Appends the contents of the page to the specified file .",
        "snippet": "Block function ( String arg0 ) { return concodeclass_filemgr . append ( arg0 , concodeclass_contents ) ; }"
    },
    {
        "question_id": 1977,
        "intent": "A single Node is always valid",
        "snippet": "void function ( Node arg0 , NodeTest arg1 ) { concodeclass_actualNumNodes ++ ; }"
    },
    {
        "question_id": 1978,
        "intent": "Set the number of not approved conflicts .",
        "snippet": "void function ( int arg0 ) { this . concodeclass_conflictsNotApproved = arg0 ; }"
    },
    {
        "question_id": 1979,
        "intent": "Removes an edge from the graph .",
        "snippet": "void function ( VertexLabelType arg0 , VertexLabelType arg1 ) { Hashtable < VertexLabelType , EdgeLabelType > loc0 = concodeclass_globalEdgeLookup . get ( arg0 ) ; if ( loc0 != null ) loc0 . remove ( arg1 ) ; }"
    },
    {
        "question_id": 1980,
        "intent": "Attempts to move the AI to the attack target .",
        "snippet": "void function ( double arg0 ) { this . concodeclass_mob . getNavigator ( ) . tryMoveToEntityLiving ( concodeclass_attackTarget , arg0 ) ; }"
    },
    {
        "question_id": 1981,
        "intent": "Tries to pull the gitblit server settings from the remote gitblit instance .",
        "snippet": "Map < String , String > function ( FederationModel arg0 ) { String loc0 = concodefunc_asLink ( arg0 . loc0 , arg0 . token , FederationRequest . PULL_SETTINGS ) ; Map < String , String > loc1 = JsonUtils . retrieveJson ( loc0 , concodeclass_SETTINGS_TYPE ) ; return loc1 ; }"
    },
    {
        "question_id": 1982,
        "intent": "True when a valid surrogate pair starts at the given index in the given string . Out-of-range indexes return false .",
        "snippet": "boolean function ( CharSequence arg0 , int arg1 ) { return arg1 >= 0 && arg1 <= ( arg0 . length ( ) - 2 ) && Character . isHighSurrogate ( arg0 . charAt ( arg1 ) ) && Character . isLowSurrogate ( arg0 . charAt ( arg1 + 1 ) ) ; }"
    },
    {
        "question_id": 1983,
        "intent": "Gets the actual bind hostname on RPC service used by unit test only .",
        "snippet": "String function ( ) { return concodeclass_mAlluxioMaster . getRPCBindHost ( ) ; }"
    },
    {
        "question_id": 1984,
        "intent": "Returns a string that would replace the given character in the specified escaper , or null if no replacement should be made . This method is intended for use in tests throughthe EscaperAsserts class ; production users of UnicodeEscaper should limitthemselves to its public interface .",
        "snippet": "String function ( UnicodeEscaper arg0 , int arg1 ) { return concodefunc_stringOrNull ( arg0 . escape ( arg1 ) ) ; }"
    },
    {
        "question_id": 1985,
        "intent": "Test case for OSSUnderFileSystem #rename String , String .",
        "snippet": "void function ( ) { Mockito . when ( concodeclass_mClient . listObjects ( Matchers . any ( ListObjectsRequest . class ) ) ) . thenThrow ( ServiceException . class ) ; boolean loc0 = concodeclass_mOSSUnderFileSystem . rename ( concodeclass_SRC , concodeclass_DST ) ; Assert . assertFalse ( loc0 ) ; }"
    },
    {
        "question_id": 1986,
        "intent": "Adds the given opcode to the end of the program .",
        "snippet": "ScriptBuilder function ( int arg0 ) { return op ( concodeclass_chunks . size ( ) , arg0 ) ; }"
    },
    {
        "question_id": 1987,
        "intent": "Tests the creation of the GreedyAllocator via the Allocator.Factory #create BlockMetadataManagerView method .",
        "snippet": "void function ( ) { Configuration . set ( PropertyKey . WORKER_ALLOCATOR_CLASS , GreedyAllocator . class . getName ( ) ) ; Allocator loc0 = Allocator . Factory . create ( concodeclass_mManagerView ) ; Assert . assertTrue ( loc0 instanceof GreedyAllocator ) ; }"
    },
    {
        "question_id": 1988,
        "intent": "Set content encoding for the message",
        "snippet": "void function ( String arg0 ) { this . concodeclass_contentEncoding = arg0 ; }"
    },
    {
        "question_id": 1989,
        "intent": "Subclasses must call this method after finishing character processing , in order to ensure that any unterminated line in the buffer is passed to #handleLine .",
        "snippet": "void function ( ) { if ( concodeclass_sawReturn || concodeclass_line . length ( ) > 0 ) { concodefunc_finishLine ( false ) ; } }"
    },
    {
        "question_id": 1990,
        "intent": "Increment the use count .",
        "snippet": "void function ( ) { concodeclass__use_count ++ ; }"
    },
    {
        "question_id": 1991,
        "intent": "Moves to the next valid document .",
        "snippet": "void function ( ) { while ( concodeclass_i < concodeclass_documents . length ) { if ( concodeclass_documents [ concodeclass_i ] . isDirectory ( ) ) { File loc0 = new File ( concodeclass_documents [ concodeclass_i ] , concodeclass_fragmentFileName ) ; if ( loc0 . exists ( ) ) { break ; } } concodeclass_i ++ ; } }"
    },
    {
        "question_id": 1992,
        "intent": "Put transaction hash into result intent . Meant for usage by Bitcoin wallet applications .",
        "snippet": "void function ( final Intent arg0 , final String arg1 ) { arg0 . putExtra ( concodeclass_INTENT_EXTRA_TRANSACTION_HASH , arg1 ) ; arg0 . putExtra ( concodeclass_INTENT_EXTRA_TRANSACTION_HASH_OLD , arg1 ) ; }"
    },
    {
        "question_id": 1993,
        "intent": "Returns an iterator over orders line items .",
        "snippet": "Iterator function ( ) { return new OrderLineTypeFacade . Iterator ( concodeclass_order . getOrderLine ( ) ) ; }"
    },
    {
        "question_id": 1994,
        "intent": "Set the value of checkedFlag",
        "snippet": "void function ( FolderInfo . CheckedFlag arg0 ) { this . concodeclass_checkedFlag = arg0 ; }"
    },
    {
        "question_id": 1995,
        "intent": "Called to ask the Presenter to save its current dynamic state , so itcan later be reconstructed in a new instance of its process is restarted .",
        "snippet": "void function ( Bundle arg0 ) { }"
    },
    {
        "question_id": 1996,
        "intent": "Returns the string value stored at the specified offset of the specified block . The method first obtains an SLock on the block , then it calls the buffer to retrieve the value .",
        "snippet": "String function ( Block arg0 , int arg1 ) { concodeclass_concurMgr . sLock ( arg0 ) ; Buffer loc0 = concodeclass_myBuffers . getBuffer ( arg0 ) ; return loc0 . getString ( arg1 ) ; }"
    },
    {
        "question_id": 1997,
        "intent": "Deserializes only the header in case packet meta data is needed before decoding the payload . This method assumes you have already called seekPastMagicBytes",
        "snippet": "BitcoinPacketHeader function ( ByteBuffer arg0 ) { return new BitcoinPacketHeader ( arg0 ) ; }"
    },
    {
        "question_id": 1998,
        "intent": "Add the given Rule if it wants to participate in the RuleChain .",
        "snippet": "void function ( RuleSet arg0 , Rule arg1 ) { RuleChainVisitor loc0 = concodefunc_getRuleChainVisitor ( arg1 . getLanguage ( ) ) ; if ( loc0 != null ) { loc0 . add ( arg0 , arg1 ) ; } }"
    },
    {
        "question_id": 1999,
        "intent": "Activates the event .",
        "snippet": "void function ( ) { trigger ( null ) ; }"
    },
    {
        "question_id": 2000,
        "intent": "< a > < b > < b > < / a >",
        "snippet": "void function ( ) { ASTElement loc0 = concodefunc_element ( \"srini_string\" ) ; ASTElement loc1 = concodefunc_element ( \"srini_string\" ) ; ASTElement loc2 = concodefunc_element ( \"srini_string\" ) ; concodeclass_tagList . openTag ( loc0 ) ; concodeclass_tagList . openTag ( loc1 ) ; concodeclass_tagList . openTag ( loc2 ) ; concodeclass_tagList . closeTag ( loc0 ) ; assertFalse ( loc0 . isUnclosed ( ) ) ; assertTrue ( loc1 . isUnclosed ( ) ) ; assertTrue ( loc2 . isUnclosed ( ) ) ; }"
    }
]