[
    {
        "question_id": 1,
        "intent": "Actually walks the bag to make sure the count is correct and resets the running total",
        "snippet": "int function ( ) { concodeclass__total = concodefunc_extractList ( ) . size ( ) ; return concodeclass__total ; }"
    },
    {
        "question_id": 2,
        "intent": "Controls whether the compiler should perform statements recovery . To be effective , this method must be called before any of #getRoot , #getASTRewrite , #getImportRemover . This method has no effect if the target object has been created with #CompilationUnitRewrite ICompilationUnit , CompilationUnit . Defaults to true do perform statements recovery .",
        "snippet": "void function ( boolean arg0 ) { concodeclass_fStatementsRecovery = arg0 ; }"
    },
    {
        "question_id": 3,
        "intent": "override and return true for database updates that produce changed class metadata",
        "snippet": "boolean function ( ) { return false ; }"
    },
    {
        "question_id": 4,
        "intent": "Get identity znode .",
        "snippet": "String function ( String arg0 ) { return ZKUtil . joinZNode ( concodefunc_getIdentitiesZNode ( ) , arg0 ) ; }"
    },
    {
        "question_id": 5,
        "intent": "compareTo , lexicogaphical comparison .",
        "snippet": "int function ( GenVector < C > arg0 ) { if ( ! concodeclass_modul . equals ( arg0 . modul ) ) { return - 1 ; } List < C > loc0 = arg0 . val ; int loc1 = 0 ; for ( C loc2 : concodeclass_val ) { int loc3 = loc2 . compareTo ( loc0 . get ( loc1 ++ ) ) ; if ( loc3 != 0 ) { return loc3 ; } } return 0 ; }"
    },
    {
        "question_id": 6,
        "intent": "Sets the tag position if one is associated with the NLS element .",
        "snippet": "void function ( int arg0 , int arg1 ) { concodeclass_fTagPosition = new Region ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 7,
        "intent": "Convenience method to find a zero of a univariate real function . A default solver is used .",
        "snippet": "double function ( UnivariateRealFunction arg0 , double arg1 , double arg2 ) { concodefunc_setup ( arg0 ) ; return concodeclass_factory . newDefaultSolver ( arg0 ) . solve ( arg1 , arg2 ) ; }"
    },
    {
        "question_id": 8,
        "intent": "Do we get multiple clicks even when the individual clicks are on different frames ?",
        "snippet": "boolean function ( ) { return Platform . isWindows ( ) || Platform . isOSX ( ) || Platform . JAVA_VERSION < Platform . JAVA_1_3 ; }"
    },
    {
        "question_id": 9,
        "intent": "Gets the fractional second precision of the type qualifier of the interval data type descriptor of this field iff interval type . Gets the interval type descriptor 's fractional second precision iff interval type .",
        "snippet": "Integer function ( ) { return null == concodeclass_intervalQualifier ? null : concodeclass_intervalQualifier . getFractionalSecondPrecisionPreservingDefault ( ) ; }"
    },
    {
        "question_id": 10,
        "intent": "convert Drawable to byte array",
        "snippet": "byte [ ] function ( Drawable arg0 ) { return concodefunc_bitmapToByte ( concodefunc_drawableToBitmap ( arg0 ) ) ; }"
    },
    {
        "question_id": 11,
        "intent": "Resets migration flag . Should only be used in tests .",
        "snippet": "void function ( ) { concodeclass_migrationDone = false ; }"
    },
    {
        "question_id": 12,
        "intent": "comment f1z",
        "snippet": "void function ( ) { }"
    },
    {
        "question_id": 13,
        "intent": "Creates a dialog to present a RefactoringStatus to the user . Thefollowing values are returned from the dialogs open method : org.eclipse.jface.dialogs.IDialogConstants #OK_ID IDialogConstants #OK_ID : if the user has pressed the continue button . org.eclipse.jface.dialogs.IDialogConstants #CANCEL_ID IDialogConstants #CANCEL_ID : if the user has pressed the cancel button . org.eclipse.jface.dialogs.IDialogConstants #BACK_ID IDialogConstants #BACK_ID : if the user has pressed the back button .",
        "snippet": "Dialog function ( RefactoringStatus arg0 , Shell arg1 , String arg2 , boolean arg3 ) { return new RefactoringStatusDialog ( arg0 , arg1 , arg2 , arg3 ) ; }"
    },
    {
        "question_id": 14,
        "intent": "Gets the current stroke color",
        "snippet": "BaseColor function ( ) { return concodeclass_strokeColor ; }"
    },
    {
        "question_id": 15,
        "intent": "Test method for org.jboss.security.config.SecurityConfiguration #getApplicationPolicy java.lang.String .",
        "snippet": "void function ( ) { SecurityConfiguration . getApplicationPolicy ( \"srini_string\" ) ; }"
    },
    {
        "question_id": 16,
        "intent": "Copy method",
        "snippet": "Transformer [ ] function ( Transformer [ ] arg0 ) { if ( arg0 == null ) { return null ; } return ( Transformer [ ] ) arg0 . clone ( ) ; }"
    },
    {
        "question_id": 17,
        "intent": "Abre el libro y retorna el marcador con la pagina actual",
        "snippet": "int function ( ) { return this . concodefunc_getMarcador ( ) ; }"
    },
    {
        "question_id": 18,
        "intent": "Returns the element surrounding the selection of the given editor .",
        "snippet": "IJavaElement function ( JavaEditor arg0 , boolean arg1 ) { ITypeRoot loc0 = concodefunc_getInput ( arg0 , arg1 ) ; if ( loc0 != null ) return getElementAtOffset ( loc0 , ( ITextSelection ) arg0 . getSelectionProvider ( ) . getSelection ( ) ) ; return null ; }"
    },
    {
        "question_id": 19,
        "intent": "Coordinates building a LoadPlan that defines just a single root entity return may have fetches . Typically this includes building load plans for entity loading or cascade loading .",
        "snippet": "LoadPlan function ( LoadPlanBuildingAssociationVisitationStrategy arg0 , EntityPersister arg1 ) { MetamodelGraphWalker . visitEntity ( arg0 , arg1 ) ; return arg0 . buildLoadPlan ( ) ; }"
    },
    {
        "question_id": 20,
        "intent": "Compute a single body-body or body-cell interaction",
        "snippet": "HG function ( HG arg0 ) { MathVector loc0 = new MathVector ( ) ; loc0 . subtraction ( concodeclass_pos , arg0 . pos0 ) ; double loc1 = loc0 . dotProduct ( ) + ( concodeclass_EPS * concodeclass_EPS ) ; double loc2 = Math . sqrt ( loc1 ) ; double loc3 = concodeclass_mass / loc2 ; arg0 . phi0 -= loc3 ; double loc4 = loc3 / loc1 ; loc0 . multScalar ( loc4 ) ; arg0 . acc0 . addition ( loc0 ) ; return arg0 ; }"
    },
    {
        "question_id": 21,
        "intent": "Set the name of the Catalog to be searched , ornull to search the default Catalog .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_catalogName = arg0 ; }"
    },
    {
        "question_id": 22,
        "intent": "Return an iterator over values in a column .",
        "snippet": "ColumnValues < T > function ( int arg0 ) { return new ColumnValues < T > ( concodeclass_columns [ arg0 ] ) ; }"
    },
    {
        "question_id": 23,
        "intent": "When the login machine terminates , we might not be in the Married state , and therefore we ca n't sync . This method messages as much to the user . To avoid stopping us syncing altogether , we set a soft error rather than a hard error . In future , we would like to set a hard error if we are in , for example , the Separated state , and then have some user initiated activity mark the Android account as ready to sync again . This is tricky , though , so we play it safe for now .",
        "snippet": "void function ( State arg0 ) { concodefunc_setSyncResultSoftError ( ) ; concodeclass_latch . offer ( Result . Error ) ; }"
    },
    {
        "question_id": 24,
        "intent": "Converts the handle . Handle need not exist , but must be a source reference .",
        "snippet": "IMember function ( IMember arg0 ) { final LinkedList < IMember > loc0 = new LinkedList < > ( ) ; concodefunc_addElements ( arg0 , loc0 ) ; final IMember [ ] loc1 = concodefunc_convertElements ( loc0 . toArray ( new IMember [ 0 ] ) ) ; return loc1 [ loc1 . length - 1 ] ; }"
    },
    {
        "question_id": 25,
        "intent": "Returns the sampleDuration of the track in seconds .",
        "snippet": "Rational function ( int arg0 ) { VideoTrack loc0 = concodeclass_tracks . get ( arg0 ) ; return new Rational ( loc0 . count , 30 ) ; }"
    },
    {
        "question_id": 26,
        "intent": "Does a popularity reorder on this document set .",
        "snippet": "void function ( ) { int loc0 = concodeclass_rand . nextInt ( concodeclass_size ) ; int loc1 = concodeclass_rand . nextInt ( concodeclass_size ) ; concodeclass_log . debug ( \"srini_string\" + Simulator . getCurrentTime ( ) + \"srini_string\" + loc0 + \"srini_string\" + loc1 ) ; concodeclass_keyPopularity . add ( loc1 , concodeclass_keyPopularity . remove ( loc0 ) ) ; concodefunc_getKeyForLookup ( ) ; }"
    },
    {
        "question_id": 27,
        "intent": "Gets the child scripts that make up this block . This list is live so that it can be modified if requried",
        "snippet": "List function ( ) { return concodeclass_list ; }"
    },
    {
        "question_id": 28,
        "intent": "analyzes if the given resource is the best matching for the given release . returns true if so , false otherwise .",
        "snippet": "boolean function ( @ NotNull ResourceEntity arg0 , @ NotNull ReleaseEntity arg1 ) { return arg0 . equals ( concodefunc_getResourceEntityForRelease ( arg0 . getResourceGroup ( ) , arg1 ) ) ; }"
    },
    {
        "question_id": 29,
        "intent": "Get the docker rest uri .",
        "snippet": "URI function ( ) { return concodeclass_uri ; }"
    },
    {
        "question_id": 30,
        "intent": "Gets the value of the getcontentlanguage property .",
        "snippet": "Getcontentlanguage function ( ) { return concodeclass_getcontentlanguage ; }"
    },
    {
        "question_id": 31,
        "intent": "Indicates whether or not the factory is configured to produce parsers which converts CDATA nodes to Text nodes and appends it to the adjacent if any Text node .",
        "snippet": "boolean function ( ) { return concodeclass_coalescing ; }"
    },
    {
        "question_id": 32,
        "intent": "Gets the number of persistent connections tracked by the connection manager currently being used to execute requests . The total number of connections in the pool is equal to available plus leased .",
        "snippet": "int function ( ) { return this . concodeclass_leased ; }"
    },
    {
        "question_id": 33,
        "intent": "Log an error to the Log4j Logger with ERROR priority .",
        "snippet": "void function ( Object arg0 , Throwable arg1 ) { if ( concodeclass_is12 ) { concodefunc_getLogger ( ) . log ( concodeclass_FQCN , ( Priority ) Level . ERROR , arg0 , arg1 ) ; } else { concodefunc_getLogger ( ) . log ( concodeclass_FQCN , Level . ERROR , arg0 , arg1 ) ; } }"
    },
    {
        "question_id": 34,
        "intent": "Returns the first child element of a node that matches the given tag name .",
        "snippet": "Element function ( Node arg0 , String arg1 ) { NodeList loc0 = arg0 . getChildNodes ( ) ; for ( int loc1 = 0 ; loc1 < loc0 . getLength ( ) ; loc1 ++ ) { Node loc2 = loc0 . item ( loc1 ) ; if ( loc2 . getNodeType ( ) == Node . ELEMENT_NODE && arg1 . equals ( loc2 . getNodeName ( ) ) ) return ( Element ) loc2 ; } return null ; }"
    },
    {
        "question_id": 35,
        "intent": "Gets the value of the fcLink property .",
        "snippet": "String function ( ) { return concodeclass_fcLink ; }"
    },
    {
        "question_id": 36,
        "intent": "Checks if this PdfObject is of the type PdfDictionary .",
        "snippet": "boolean function ( ) { return ( concodeclass_type == concodeclass_DICTIONARY ) ; }"
    },
    {
        "question_id": 37,
        "intent": "Set removed pair number .",
        "snippet": "void function ( int arg0 ) { this . concodeclass_n = arg0 ; }"
    },
    {
        "question_id": 38,
        "intent": "Twosided Groebner base using pairlist class .",
        "snippet": "List < GenSolvablePolynomial < C >> function ( int arg0 , List < GenSolvablePolynomial < C >> arg1 ) { return concodeclass_sbb . twosidedGB ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 39,
        "intent": "Controls whether the compiler should provide binding information for the AST nodes it creates . To be effective , this method must be called before any of #getRoot , #getASTRewrite , #getImportRemover . This method has no effect if the target object has been created with #CompilationUnitRewrite ICompilationUnit , CompilationUnit . Defaults to true do resolve bindings .",
        "snippet": "void function ( boolean arg0 ) { concodeclass_fResolveBindings = arg0 ; }"
    },
    {
        "question_id": 40,
        "intent": "Dispatch a keyUp event .",
        "snippet": "void function ( int arg0 ) { int [ ] loc0 = concodefunc_extractKeys ( arg0 ) ; for ( int loc1 = loc0 . length - 1 ; loc1 >= 0 ; -- loc1 ) concodefunc_doKeyUp ( loc0 [ loc1 ] ) ; }"
    },
    {
        "question_id": 41,
        "intent": "Local absolute value .",
        "snippet": "Local < C > function ( ) { return new Local < C > ( concodeclass_ring , concodeclass_num . abs ( ) , concodeclass_den , true ) ; }"
    },
    {
        "question_id": 42,
        "intent": "compare two object",
        "snippet": "boolean function ( Object arg0 , Object arg1 ) { return arg0 == arg1 || ( arg0 == null ? arg1 == null : arg0 . equals ( arg1 ) ) ; }"
    },
    {
        "question_id": 43,
        "intent": "Sets all probes to false .",
        "snippet": "void function ( ) { Arrays . fill ( concodeclass_probes , false ) ; }"
    },
    {
        "question_id": 44,
        "intent": "Create an instance of ProvidedPortID",
        "snippet": "ProvidedPortID function ( ) { return new ProvidedPortID ( ) ; }"
    },
    {
        "question_id": 45,
        "intent": "Adds the given locator . Locators are queried in the sequence they have been added .",
        "snippet": "void function ( final ISourceFileLocator arg0 ) { concodeclass_delegates . add ( arg0 ) ; }"
    },
    {
        "question_id": 46,
        "intent": "Get a constant UnivPowerSeries from a java.math.BigInteger .",
        "snippet": "UnivPowerSeries < C > function ( java . math . BigInteger arg0 ) { return concodeclass_ONE . multiply ( concodeclass_coFac . fromInteger ( arg0 ) ) ; }"
    },
    {
        "question_id": 47,
        "intent": "Brings the passed Shell to the top of the drawing order so that it receives keyboard focus .",
        "snippet": "void function ( final Shell arg0 ) { Robot . syncExec ( arg0 . getDisplay ( ) , null , new Runnable ( ) { public void run ( ) { arg0 . forceActive ( ) ; arg0 . setFocus ( ) ; } } ) ; Robot . waitForIdle ( arg0 . getDisplay ( ) ) ; }"
    },
    {
        "question_id": 48,
        "intent": "Creates and adds a new Limit .",
        "snippet": "Limit function ( ) { final Limit loc0 = new Limit ( ) ; this . concodeclass_limits . add ( loc0 ) ; return loc0 ; }"
    },
    {
        "question_id": 49,
        "intent": "Skips the next char .",
        "snippet": "void function ( ) { concodeclass_pos ++ ; }"
    },
    {
        "question_id": 50,
        "intent": "Main Method Execution Steps : 1 . Configure JAXB for the classes in the com.cooksys.serialization.assignment.model package 2 . Read a session object from the / input/memphis / directory using the methods defined above 3 . Write the session object to the / output/session.xml file . JAXB Annotations and Configuration : You will have to add JAXB annotations to the classes in the com.cooksys.serialization.assignment.model package Check the XML files in the / input / directory to determine how to configure the Contact JAXB annotations The Session object should marshal to look like the following : ... ... ... ...",
        "snippet": "void function ( String [ ] arg0 ) { JAXBContext loc0 = JAXBContext . newInstance ( Session . class ) ; concodefunc_writeSession ( concodefunc_readSession ( new File ( \"srini_string\" ) , loc0 ) , new File ( \"srini_string\" ) , loc0 ) ; }"
    },
    {
        "question_id": 51,
        "intent": "The `` friendly '' name for this machine",
        "snippet": "String function ( ) { return concodeclass_name ; }"
    },
    {
        "question_id": 52,
        "intent": "Set useCriterion4 .",
        "snippet": "void function ( boolean arg0 ) { this . concodeclass_useCriterion4 = arg0 ; }"
    },
    {
        "question_id": 53,
        "intent": "Look for fields in the specified class that begin with the specified prefix .",
        "snippet": "Vector < FieldDoc > function ( ClassDoc arg0 , String arg1 ) { Vector < FieldDoc > loc0 = new Vector < FieldDoc > ( ) ; for ( FieldDoc loc1 : arg0 . fields ( ) ) { if ( loc1 . name ( ) . startsWith ( arg1 ) ) loc0 . add ( loc1 ) ; } return ( loc0 ) ; }"
    },
    {
        "question_id": 54,
        "intent": "The violated property .",
        "snippet": "Property function ( ) { return concodeclass_property ; }"
    },
    {
        "question_id": 55,
        "intent": "Does a single lookup . Added by Leo Nobach",
        "snippet": "void function ( KademliaOverlayKey arg0 , OperationCallback < DHTObject > arg1 ) { KademliaOperation < DHTObject > loc0 = concodeclass_myNode . getOperationFactory ( ) . getDataLookupOperation ( arg0 , arg1 ) ; loc0 . scheduleImmediately ( ) ; }"
    },
    {
        "question_id": 56,
        "intent": "collects all received messages",
        "snippet": "void function ( NetMessage arg0 , NetID arg1 ) { concodefunc_addReceivedMsg ( arg0 ) ; concodeclass_receivedMsg ++ ; }"
    },
    {
        "question_id": 57,
        "intent": "Log the specified exception .",
        "snippet": "void function ( Throwable arg0 ) { if ( Platform . isRunning ( ) ) Logger . log ( arg0 ) ; else { if ( concodeclass_sendToConsole ) arg0 . printStackTrace ( ) ; } }"
    },
    {
        "question_id": 58,
        "intent": "Return the items for this channel .",
        "snippet": "Item [ ] function ( ) { synchronized ( concodeclass_items ) { Item loc0 [ ] = new Item [ this . concodeclass_items . size ( ) ] ; return ( ( Item [ ] ) this . concodeclass_items . toArray ( loc0 ) ) ; } }"
    },
    {
        "question_id": 59,
        "intent": "Getter for property ` name ' .",
        "snippet": "String function ( ) { return concodeclass_name ; }"
    },
    {
        "question_id": 60,
        "intent": "Retrieves and removes the top of the stack .",
        "snippet": "StackKeeper function ( ) { try { return this . concodeclass_queue . removeFirst ( ) ; } catch ( NoSuchElementException loc0 ) { throw new NoStackException ( ) ; } }"
    },
    {
        "question_id": 61,
        "intent": "getZERO .",
        "snippet": "GenVector < C > function ( ) { return concodeclass_ZERO ; }"
    },
    {
        "question_id": 62,
        "intent": "Set level of section .",
        "snippet": "void function ( int arg0 ) { this . concodeclass_level = arg0 ; }"
    },
    {
        "question_id": 63,
        "intent": "This method is invoked at the server before the response is executed , but before the response has been formulated",
        "snippet": "void function ( RPCContext arg0 ) { }"
    },
    {
        "question_id": 64,
        "intent": "adds a parameter to the request ; if the parameter is a File , the file is uploaded , otherwise the string value of the parameter is passed in the request",
        "snippet": "void function ( String arg0 , Object arg1 ) { concodeclass_mParameters . put ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 65,
        "intent": "Returns the namespace URIs found in the given XML file",
        "snippet": "Set < String > function ( InputSource arg0 ) { XmlNamespaceFinder loc0 = concodefunc_createNamespaceFinder ( ) ; Set < String > loc1 = loc0 . parseContents ( arg0 ) ; if ( concodeclass_factory == null ) { concodeclass_factory = loc0 . getFactory ( ) ; } return loc1 ; }"
    },
    {
        "question_id": 66,
        "intent": "put list of task id to its queue",
        "snippet": "void function ( List < Integer > arg0 ) { concodeclass_takeLock . lock ( ) ; try { concodeclass_taskIdsQueue . add ( arg0 ) ; concodeclass_notEmpty . signal ( ) ; } finally { concodeclass_takeLock . unlock ( ) ; } }"
    },
    {
        "question_id": 67,
        "intent": "Enable or disable debug mode By default , debug mode is enabled for development builds and disabled for exported APKs - see BuildConfig.DEBUG",
        "snippet": "void function ( boolean arg0 ) { concodeclass_debug = arg0 ; }"
    },
    {
        "question_id": 68,
        "intent": "Returns the label of a path .",
        "snippet": "String function ( IPath arg0 , boolean arg1 ) { String loc0 ; if ( arg1 ) { loc0 = arg0 . toOSString ( ) ; } else { loc0 = arg0 . makeRelative ( ) . toString ( ) ; } return Strings . markLTR ( loc0 ) ; }"
    },
    {
        "question_id": 69,
        "intent": "Answer the condition monitor",
        "snippet": "ConditionMonitor function ( ) { return concodeclass_INSTANCE ; }"
    },
    {
        "question_id": 70,
        "intent": "Gets the value of ours",
        "snippet": "long function ( ) { return this . concodeclass_ours ; }"
    },
    {
        "question_id": 71,
        "intent": "Characteristic of this ring .",
        "snippet": "java . math . BigInteger function ( ) { return concodeclass_coFac . characteristic ( ) ; }"
    },
    {
        "question_id": 72,
        "intent": "Tests that a class available in a jar , which is added as a Class-Path manifest attribute of a . rar is available for access from within a class in a . war deployment , belonging to the same . ear top level deployment . This tests section 8.3 of Java EE6 spec",
        "snippet": "void function ( @ ArquillianResource URL arg0 ) { final String loc0 = \"srini_string\" + arg0 . getHost ( ) + \"srini_string\" + arg0 . getPort ( ) + \"srini_string\" + JarClass . class . getName ( ) ; final String loc1 = HttpRequest . get ( loc0 , 2 , TimeUnit . SECONDS ) ; Assert . assertEquals ( Servlet . SUCCESS , loc1 ) ; }"
    },
    {
        "question_id": 73,
        "intent": "Inserts all the fonts recognized by iText in the directory into the map . The encoding will be BaseFont.CP1252 but can be changed later .",
        "snippet": "int function ( String arg0 ) { File loc0 = new File ( arg0 ) ; if ( ! loc0 . exists ( ) || ! loc0 . isDirectory ( ) ) return 0 ; File loc1 [ ] = loc0 . listFiles ( ) ; if ( loc1 == null ) return 0 ; int loc2 = 0 ; for ( int loc3 = 0 ; loc3 < loc1 . length ; ++ loc3 ) { loc2 += concodefunc_insertFile ( loc1 [ loc3 ] ) ; } return loc2 ; }"
    },
    {
        "question_id": 74,
        "intent": "Log the specified message and object",
        "snippet": "void function ( String arg0 , Object arg1 ) { if ( Tracer . isDebugging ( ) ) concodefunc_printLog ( concodeclass_sysOut , arg0 , arg1 ) ; IStatus loc0 = concodefunc_createLogStatus ( arg0 , arg1 , \"srini_string\" ) ; try { concodeclass_log . log ( loc0 ) ; } catch ( Throwable loc1 ) { } }"
    },
    {
        "question_id": 75,
        "intent": "Sets the value of the nresults property .",
        "snippet": "void function ( BigInteger arg0 ) { this . concodeclass_nresults = arg0 ; }"
    },
    {
        "question_id": 76,
        "intent": "Store an invalid script exception describing the proper script usage . This should be used by derived classes whenever parsing indicates invalid input .",
        "snippet": "void function ( String arg0 ) { String loc0 = concodefunc_getUsage ( ) ; if ( arg0 != null ) { MessageFormat loc1 = new MessageFormat ( Strings . get ( \"srini_string\" ) ) ; loc0 = loc1 . format ( new Object [ ] { loc0 , arg0 } ) ; } concodefunc_setScriptError ( new InvalidScriptException ( loc0 ) ) ; }"
    },
    {
        "question_id": 77,
        "intent": "Test whether the widget in question is showing .",
        "snippet": "boolean function ( ) { return concodeclass_ui . findAll ( concodeclass_locator ) . length == 1 ; }"
    },
    {
        "question_id": 78,
        "intent": "returns a unit vector based on an angular direction . For example , angle 0 creates vector 0,1 , angle PI/2 creates vector 1,0 .",
        "snippet": "VectorXZ function ( double arg0 ) { return new VectorXZ ( sin ( arg0 ) , cos ( arg0 ) ) ; }"
    },
    {
        "question_id": 79,
        "intent": "Reads 16-bit RGB and converts it to 24-bit RGB . Endian is defined by input stream .",
        "snippet": "int function ( ImageInputStream arg0 ) { int loc0 = arg0 . readUnsignedShort ( ) ; return ( ( loc0 & 0xf800 ) << 8 ) | ( ( loc0 & 0x3800 ) << 5 ) | ( ( loc0 & 0x07e0 ) << 5 ) | ( ( loc0 & 0x0060 ) << 3 ) | ( ( loc0 & 0x001f ) << 3 ) | ( ( loc0 & 0x0007 ) ) ; }"
    },
    {
        "question_id": 80,
        "intent": "Executes the closure whose matching predicate returns true",
        "snippet": "void function ( Object arg0 ) { for ( int loc0 = 0 ; loc0 < concodeclass_iPredicates . length ; loc0 ++ ) { if ( concodeclass_iPredicates [ loc0 ] . evaluate ( arg0 ) == true ) { concodeclass_iClosures [ loc0 ] . execute ( arg0 ) ; return ; } } concodeclass_iDefault . execute ( arg0 ) ; }"
    },
    {
        "question_id": 81,
        "intent": "Read the random bytes from an input File and store them into an ArrayList .",
        "snippet": "boolean function ( ArrayList < Byte > arg0 ) { try { FileInputStream loc0 = new FileInputStream ( concodeclass_inputFile ) ; byte [ ] loc1 = new byte [ 1 ] ; while ( loc0 . read ( loc1 ) != - 1 ) { arg0 . add ( new Byte ( loc1 [ 0 ] ) ) ; } loc0 . close ( ) ; return true ; } catch ( Exception loc3 ) { loc3 . printStackTrace ( ) ; } return false ; }"
    },
    {
        "question_id": 82,
        "intent": "Returns the derivative of the polynomial spline function as a UnivariateRealFunction",
        "snippet": "UnivariateRealFunction function ( ) { return concodefunc_polynomialSplineDerivative ( ) ; }"
    },
    {
        "question_id": 83,
        "intent": "Always throw an exception .",
        "snippet": "void function ( Object arg0 ) { throw new FunctorException ( \"srini_string\" ) ; }"
    },
    {
        "question_id": 84,
        "intent": "Get the type of the rightermost child atom . Most atoms have no child atoms , so the `` left type '' and the `` right type '' are the same : the atom 's type . This also is the default implementation . But Some atoms are composed of child atoms put one after another in a horizontal row . These atoms must override this method .",
        "snippet": "int function ( ) { return concodeclass_type ; }"
    },
    {
        "question_id": 85,
        "intent": "Getter for property mu .",
        "snippet": "double function ( ) { return concodeclass_mu ; }"
    },
    {
        "question_id": 86,
        "intent": "Create an DoubleListIterator DoubleListIterator wrappingthe specified ListIterator ListIterator . When the given iterator is null , returns null .",
        "snippet": "DoubleListIterator function ( ListIterator arg0 ) { return null == arg0 ? null : new ListIteratorDoubleListIterator ( arg0 ) ; }"
    },
    {
        "question_id": 87,
        "intent": "Remove all countries that are not defined in the Set",
        "snippet": "void function ( Set < String > arg0 ) { concodeclass_countryLookup . keySet ( ) . retainAll ( arg0 ) ; }"
    },
    {
        "question_id": 88,
        "intent": "Set the parser for a given class . Returns the old one , if any .",
        "snippet": "Parser function ( Class arg0 , Parser arg1 ) { Parser loc0 = ( Parser ) concodeclass_parsers . get ( arg0 ) ; concodeclass_parsers . put ( arg0 , arg1 ) ; return loc0 ; }"
    },
    {
        "question_id": 89,
        "intent": "Return a unmodifiable list that has all elements of the given collection .",
        "snippet": "List < T > function ( Collection < T > arg0 ) { return Collections . unmodifiableList ( new ArrayList < T > ( arg0 ) ) ; }"
    },
    {
        "question_id": 90,
        "intent": "Get kdc tcp port",
        "snippet": "int function ( ) { int loc0 = concodeclass_startupOptions . getIntegerOption ( KdcServerOption . KDC_TCP_PORT ) ; if ( loc0 < 1 ) { loc0 = concodeclass_kdcConfig . getKdcTcpPort ( ) ; } if ( loc0 < 1 ) { loc0 = concodefunc_getKdcPort ( ) ; } return loc0 ; }"
    },
    {
        "question_id": 91,
        "intent": "Load a map for the current locale to translate a character into a corresponding virtual keycode-based KeyStroke .",
        "snippet": "Map function ( ) { concodefunc_loadMaps ( ) ; return concodeclass_characterMap ; }"
    },
    {
        "question_id": 92,
        "intent": "Cleans str by replacing all characters that are not valid java indentifier parts with '' _ '' .",
        "snippet": "String function ( String arg0 ) { char [ ] loc0 = arg0 . toCharArray ( ) ; for ( int loc1 = 0 ; loc1 < loc0 . length ; loc1 ++ ) { char loc2 = loc0 [ loc1 ] ; if ( ! Character . isJavaIdentifierPart ( loc2 ) ) { loc0 [ loc1 ] = '_' ; } } return new String ( loc0 ) ; }"
    },
    {
        "question_id": 93,
        "intent": "ModInteger comparison .",
        "snippet": "int function ( ModInteger arg0 ) { java . math . BigInteger loc0 = arg0 . val ; if ( concodeclass_ring != arg0 . ring ) { loc0 = loc0 . mod ( concodeclass_ring . modul ) ; } return concodeclass_val . compareTo ( loc0 ) ; }"
    },
    {
        "question_id": 94,
        "intent": "Unambiguous identification of a account",
        "snippet": "CashAccount16 function ( String arg0 ) { CashAccount16 loc0 = new CashAccount16 ( ) ; AccountIdentification4Choice loc1 = new AccountIdentification4Choice ( ) ; loc1 . setIBAN ( arg0 ) ; loc0 . setId ( loc1 ) ; return loc0 ; }"
    },
    {
        "question_id": 95,
        "intent": "Creates an Unmarshaller from the SardineUtil #JAXB_CONTEXT . Note : the unmarshaller is not thread safe , so it must be created for every request .",
        "snippet": "Unmarshaller function ( ) { try { return concodeclass_JAXB_CONTEXT . createUnmarshaller ( ) ; } catch ( JAXBException loc0 ) { throw new RuntimeException ( loc0 . getMessage ( ) , loc0 ) ; } }"
    },
    {
        "question_id": 96,
        "intent": "Discards any characters outside of the base64 alphabet see page 25 of RFC 2045 `` Any characters outside of the base64 alphabet are to be ignored in base64 encoded data . ''",
        "snippet": "byte [ ] function ( byte [ ] arg0 ) { byte loc0 [ ] = new byte [ arg0 . length ] ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0 . length ; loc2 ++ ) { if ( concodefunc_isValidBase64Byte ( arg0 [ loc2 ] ) ) { loc0 [ loc1 ++ ] = arg0 [ loc2 ] ; } } byte loc3 [ ] = new byte [ loc1 ] ; System . arraycopy ( loc0 , 0 , loc3 , 0 , loc1 ) ; return loc3 ; }"
    },
    {
        "question_id": 97,
        "intent": "Get a message with one parameter as an primitive int . The parameter will replace the string '' 1 '' found in the message .",
        "snippet": "String function ( String arg0 , int arg1 ) { return getComposedMessage ( arg0 , String . valueOf ( arg1 ) , null , null , null ) ; }"
    },
    {
        "question_id": 98,
        "intent": "Attach a non-null PropertyChangeListener to this object .",
        "snippet": "void function ( PropertyChangeListener arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( ) ; } concodeclass_pcsDelegate . addPropertyChangeListener ( arg0 ) ; }"
    },
    {
        "question_id": 99,
        "intent": "creates a new instance .",
        "snippet": "Object function ( ) { if ( concodeclass__constructor == null ) { return null ; } return concodeclass__constructor . newInstance ( concodeclass__args ) ; }"
    },
    {
        "question_id": 100,
        "intent": "Interpret a short as its binary form",
        "snippet": "byte [ ] function ( int arg0 ) { byte [ ] loc0 = new byte [ 2 ] ; loc0 [ 0 ] = ( byte ) ( arg0 >> 8 ) ; loc0 [ 1 ] = ( byte ) ( ( arg0 << 8 ) >> 8 ) ; return loc0 ; }"
    },
    {
        "question_id": 101,
        "intent": "Serialize Tree using preorder DFS",
        "snippet": "String function ( Node arg0 ) { StringBuffer loc0 = new StringBuffer ( ) ; concodefunc_serializeUtil ( arg0 , loc0 ) ; return loc0 . toString ( ) ; }"
    },
    {
        "question_id": 102,
        "intent": "Copy a file if the source exist .",
        "snippet": "void function ( final String arg0 , final String arg1 ) { fileCopyIfExist ( arg0 , arg1 , false ) ; }"
    },
    {
        "question_id": 103,
        "intent": "Check whether Servlet which uses RunAs with different role than in needed for secured EJB invocation can not correctly invoked that EJB method in HttpServlet.destroy method during stopping server .",
        "snippet": "void function ( ) { assertTrue ( \"srini_string\" + \"srini_string\" , concodefunc_readFirstLineOfFile ( concodeclass_INCORRECT_ROLE_AND_STOP_SERVER ) . contains ( DESTROY_METHOD_NOT_PASS ) ) ; }"
    },
    {
        "question_id": 104,
        "intent": "Obtains the tracked route . If a route has been tracked , it is #isConnected connected . If not connected , nothing has been tracked so far .",
        "snippet": "HttpRoute function ( ) { return ! this . concodeclass_connected ? null : new HttpRoute ( this . concodeclass_targetHost , this . concodeclass_localAddress , this . concodeclass_proxyChain , this . concodeclass_secure , this . concodeclass_tunnelled , this . concodeclass_layered ) ; }"
    },
    {
        "question_id": 105,
        "intent": "Returns always null .",
        "snippet": "Throwable function ( ) { return null ; }"
    },
    {
        "question_id": 106,
        "intent": "Gets the field type at the specifed index .",
        "snippet": "DateTimeFieldType function ( int arg0 ) { return concodefunc_getField ( arg0 , getChronology ( ) ) . getType ( ) ; }"
    },
    {
        "question_id": 107,
        "intent": "Returns whether windows send mouse motion events to AWT listeners .",
        "snippet": "boolean function ( ) { return Platform . isOSX ( ) && Platform . JAVA_VERSION >= Platform . JAVA_1_4 && Platform . JAVA_VERSION <= 0x1425 ; }"
    },
    {
        "question_id": 108,
        "intent": "Determines the difference in days between d and this Date . For example , if this Date is 12/15/1997 and d is 12/14/1997 , the difference is 1 . If this Date occurs before d , the result is negative .",
        "snippet": "int function ( Date arg0 ) { int loc0 ; int loc1 = Math . abs ( arg0 . beginOfTime ( ) - this . concodefunc_beginOfTime ( ) ) ; if ( this . concodefunc_isBefore ( arg0 ) ) { loc0 = - 1 ; } else if ( this . concodefunc_isAfter ( arg0 ) ) { loc0 = 1 ; } else { loc0 = 0 ; } return loc0 * loc1 ; }"
    },
    {
        "question_id": 109,
        "intent": "Maintains a count of the number of methods call sites resolve to . May give an idea as to how `` dynamic '' a program is .",
        "snippet": "void function ( final int arg0 ) { final Integer loc0 = new Integer ( arg0 ) ; final Integer loc1 = ( Integer ) this . concodeclass_morphicity . get ( loc0 ) ; if ( loc1 == null ) { this . concodeclass_morphicity . put ( loc0 , new Integer ( 1 ) ) ; } else { this . concodeclass_morphicity . put ( loc0 , new Integer ( loc1 . intValue ( ) + 1 ) ) ; } }"
    },
    {
        "question_id": 110,
        "intent": "Verifies that the endpoints specify an interval , throws IllegalArgumentException if not",
        "snippet": "void function ( double arg0 , double arg1 ) { if ( arg0 >= arg1 ) { throw new IllegalArgumentException ( \"srini_string\" + arg0 + \"srini_string\" + arg1 + \"srini_string\" ) ; } }"
    },
    {
        "question_id": 111,
        "intent": "Binds this connection to the given Socket . This socket will be used by the connection to send and receive data . After this method 's execution the connection status will be reported as open and the #isOpen will return true .",
        "snippet": "void function ( final Socket arg0 ) { Args . notNull ( arg0 , \"srini_string\" ) ; this . concodeclass_socket = arg0 ; this . concodeclass_open = true ; this . concodeclass_inbuffer . bind ( null ) ; this . concodeclass_outbuffer . bind ( null ) ; }"
    },
    {
        "question_id": 112,
        "intent": "constructor for handshake message",
        "snippet": "Message function ( ByteBuffer arg0 , ByteBuffer arg1 ) { Message loc0 = new Message ( arg0 ) ; loc0 . type = MessageType . Handshake ; loc0 . data . put ( \"srini_string\" , arg1 ) ; return loc0 ; }"
    },
    {
        "question_id": 113,
        "intent": "Sets the type of message that is intended to be transmitted over the connection that this collection is associated with .",
        "snippet": "void function ( String arg0 ) { concodeclass_myTopType = arg0 ; }"
    },
    {
        "question_id": 114,
        "intent": "Gets the value of the items property .",
        "snippet": "Items function ( ) { return concodeclass_items ; }"
    },
    {
        "question_id": 115,
        "intent": "Create an instance of ConsumedPort",
        "snippet": "ConsumedPort function ( ) { return new ConsumedPort ( ) ; }"
    },
    {
        "question_id": 116,
        "intent": "Getter for the right margin .",
        "snippet": "float function ( ) { return concodeclass_textRectangle . x + concodeclass_textRectangle . width ; }"
    },
    {
        "question_id": 117,
        "intent": "Decide whether or not online checking is allowed .",
        "snippet": "void function ( boolean arg0 ) { this . concodeclass_onlineCheckingAllowed = arg0 ; }"
    },
    {
        "question_id": 118,
        "intent": "Creates a new PMML object representing the PMML model defined in the InputStream specified as argument",
        "snippet": "PMML function ( InputStream arg0 ) { Objects . requireNonNull ( arg0 ) ; return IOUtil . unmarshal ( arg0 ) ; }"
    },
    {
        "question_id": 119,
        "intent": "deposit deposits `` amt '' dollars into this account .",
        "snippet": "void function ( int arg0 ) { if ( arg0 >= 0 ) { concodeclass_balance = concodeclass_balance + arg0 ; } else { System . out . println ( \"srini_string\" + arg0 ) ; } }"
    },
    {
        "question_id": 120,
        "intent": "Init the client .",
        "snippet": "KrbClient function ( File arg0 ) { KrbClient loc0 ; if ( arg0 != null ) { loc0 = new KrbClient ( arg0 ) ; } else { loc0 = new KrbClient ( ) ; } loc0 . init ( ) ; return loc0 ; }"
    },
    {
        "question_id": 121,
        "intent": "Returns the string representation of this mnemonic . Information from the mnemonic string may be retrieved using MethodMnemonic #MethodMnemonic String , and subsequently the IMethod may be retrieved with MethodMnemonic #findMethod IType",
        "snippet": "String function ( ) { StringBuilder loc0 = new StringBuilder ( ) ; loc0 . append ( concodefunc_getMethodName ( ) ) ; loc0 . append ( concodeclass_MNEMONIC_DELIMITER ) ; loc0 . append ( concodefunc_isConstructor ( ) ) ; loc0 . append ( concodeclass_MNEMONIC_DELIMITER ) ; loc0 . append ( concodefunc_getMethodSignature ( ) ) ; return loc0 . toString ( ) ; }"
    },
    {
        "question_id": 122,
        "intent": "Integer comparison .",
        "snippet": "int function ( BigInteger arg0 , BigInteger arg1 ) { if ( arg0 == null ) return - arg1 . signum ( ) ; return arg0 . compareTo ( arg1 ) ; }"
    },
    {
        "question_id": 123,
        "intent": "size of current list .",
        "snippet": "int function ( ) { return concodeclass_val . size ( ) ; }"
    },
    {
        "question_id": 124,
        "intent": "Quotient random .",
        "snippet": "Quotient < C > function ( int arg0 , Random arg1 ) { C loc0 = concodeclass_ring . random ( arg0 , arg1 ) ; C loc1 = concodeclass_ring . random ( arg0 , arg1 ) ; while ( loc1 . isZERO ( ) ) { loc1 = concodeclass_ring . random ( arg0 , arg1 ) ; } return new Quotient < C > ( this , loc0 , loc1 , false ) ; }"
    },
    {
        "question_id": 125,
        "intent": "For the given SQLException , locates the X/Open-compliant SQLState .",
        "snippet": "String function ( SQLException arg0 ) { String loc0 = arg0 . getSQLState ( ) ; SQLException loc1 = arg0 . getNextException ( ) ; while ( loc0 == null && loc1 != null ) { loc0 = loc1 . getSQLState ( ) ; loc1 = loc1 . getNextException ( ) ; } return loc0 ; }"
    },
    {
        "question_id": 126,
        "intent": "Allows for the setting of the border 's color independently of the content 's color .",
        "snippet": "void function ( CSIColor arg0 ) { concodeclass_borderColor = arg0 ; }"
    },
    {
        "question_id": 127,
        "intent": "A helper to make creating a SpringConfig easier with values mapping to the Origami values .",
        "snippet": "SpringConfig function ( double arg0 , double arg1 ) { return new SpringConfig ( OrigamiValueConverter . tensionFromOrigamiValue ( arg0 ) , OrigamiValueConverter . frictionFromOrigamiValue ( arg1 ) ) ; }"
    },
    {
        "question_id": 128,
        "intent": "Specifies that matching pairs of this character delimit string constants .",
        "snippet": "void function ( int arg0 ) { concodeclass_stok . quoteChar ( arg0 ) ; }"
    },
    {
        "question_id": 129,
        "intent": "Parse an Reader",
        "snippet": "void function ( final Reader arg0 ) { concodefunc_parseWithReader ( arg0 ) ; }"
    },
    {
        "question_id": 130,
        "intent": "Gets the leftmost x-position of the bounding box .",
        "snippet": "int function ( ) { return ( int ) Math . round ( concodeclass_x - concodeclass_xGrow ) ; }"
    },
    {
        "question_id": 131,
        "intent": "Return columns for the schema .",
        "snippet": "ColumnMetaData [ ] function ( ) { return concodeclass_columns . toArray ( new ColumnMetaData [ concodeclass_columns . size ( ) ] ) ; }"
    },
    {
        "question_id": 132,
        "intent": "The current state of this machine",
        "snippet": "State function ( ) { return concodeclass_state ; }"
    },
    {
        "question_id": 133,
        "intent": "The amount of hits for this query",
        "snippet": "long function ( ) { return concodeclass_cacheHitCount ; }"
    },
    {
        "question_id": 134,
        "intent": "Tests construction of the client chain . The created certificates can be displayed with a command like : openssl pkcs12 - nodes - info - in / tmp/test . p12 > / tmp/test . cert & & openssl x509 - noout - text - in / tmp/test . cert",
        "snippet": "void function ( ) { X509Certificate [ ] loc0 = CertificateChainFactory . getClientChain ( ) ; concodefunc_validateChain ( loc0 ) ; }"
    },
    {
        "question_id": 135,
        "intent": "parse key-value pairs to map , ignore empty key",
        "snippet": "Map < String , String > function ( String arg0 , boolean arg1 ) { return parseKeyAndValueToMap ( arg0 , concodeclass_DEFAULT_KEY_AND_VALUE_SEPARATOR , concodeclass_DEFAULT_KEY_AND_VALUE_PAIR_SEPARATOR , arg1 ) ; }"
    },
    {
        "question_id": 136,
        "intent": "Appends a column separator to the output file .",
        "snippet": "void function ( ) { if ( concodeclass_out != null ) { concodeclass_out . print ( ' ' ) ; } }"
    },
    {
        "question_id": 137,
        "intent": "Fires a label provider changed event to all registered listeners Only listeners registered at the time this method is called are notified .",
        "snippet": "void function ( final LabelProviderChangedEvent arg0 ) { for ( final ILabelProviderListener loc0 : concodeclass_fListeners ) { SafeRunner . run ( new SafeRunnable ( ) { @ Override public void run ( ) { loc0 . labelProviderChanged ( arg0 ) ; } } ) ; } }"
    },
    {
        "question_id": 138,
        "intent": "set Parser state to SpecialCharState .",
        "snippet": "XMLParser function ( ) { return concodefunc_setState ( this . concodeclass_specialChar ) ; }"
    },
    {
        "question_id": 139,
        "intent": "Pops a non-wide expression off the stack .",
        "snippet": "Expr function ( ) { final Expr loc0 = ( Expr ) concodeclass_stack . remove ( concodeclass_stack . size ( ) - 1 ) ; final Type loc1 = loc0 . loc1 ( ) ; if ( loc1 . isWide ( ) ) { throw new IllegalArgumentException ( \"srini_string\" + \"srini_string\" ) ; } concodeclass_height -- ; return loc0 ; }"
    },
    {
        "question_id": 140,
        "intent": "Notify the TestMonitor that a new Test is starting . Passing null signals that a test has ended or that none is running .",
        "snippet": "void function ( ITestIdentifier arg0 ) { if ( arg0 == null ) concodefunc_endTestCase ( ) ; else { concodefunc_logTestStart ( arg0 ) ; concodefunc_setRunningTest ( arg0 ) ; } }"
    },
    {
        "question_id": 141,
        "intent": "Extract a portion of the bytes from the given stream. , wrapping them in a new stream .",
        "snippet": "InputStream function ( InputStream arg0 , long arg1 , int arg2 ) { return new BinaryStreamImpl ( concodefunc_extractBytes ( arg0 , arg1 , arg2 ) ) ; }"
    },
    {
        "question_id": 142,
        "intent": "Just calls getNext.Override this to get notified on encountered content .",
        "snippet": "Pipeline < ? > function ( final WorkerContext arg0 , final Tag arg1 , final String arg2 , final ProcessObject arg3 ) { return concodefunc_getNext ( ) ; }"
    },
    {
        "question_id": 143,
        "intent": "ColorPolynomial summation .",
        "snippet": "ColorPolynomial < C > function ( GenPolynomial < C > arg0 , ExpVector arg1 ) { GenPolynomial < GenPolynomial < C >> loc0 , loc1 , loc2 ; loc0 = concodeclass_green ; loc1 = concodeclass_red ; loc2 = concodeclass_white ; if ( concodeclass_green . getMap ( ) . keySet ( ) . contains ( arg1 ) ) { loc0 = concodeclass_green . sum ( arg0 , arg1 ) ; } else if ( concodeclass_red . getMap ( ) . keySet ( ) . contains ( arg1 ) ) { loc1 = concodeclass_red . sum ( arg0 , arg1 ) ; } else { loc2 = concodeclass_white . sum ( arg0 , arg1 ) ; } return new ColorPolynomial < C > ( loc0 , loc1 , loc2 ) ; }"
    },
    {
        "question_id": 144,
        "intent": "Compresses the hashtable to the minimum prime size as defined by PrimeFinder that will hold all of the elements currently in the table . If you have done a lot of remove operations and plan to do a lot of queries or insertions or iteration , it is a good idea to invoke this method . Doing so will accomplish two things : You 'll free memory allocated to the table but no longer needed because of the remove s. You 'll get better query/insert/iterator performance because there wo n't be any REMOVED slots to skip over when probing for indices in the table .",
        "snippet": "void function ( ) { concodefunc_rehash ( PrimeFinder . nextPrime ( ( int ) Math . ceil ( concodefunc_size ( ) / concodeclass__loadFactor ) + 1 ) ) ; concodefunc_computeMaxSize ( concodefunc_capacity ( ) ) ; if ( concodeclass__autoCompactionFactor != 0 ) { concodefunc_computeNextAutoCompactionAmount ( concodefunc_size ( ) ) ; } }"
    },
    {
        "question_id": 145,
        "intent": "Shows other information than a stack trace .",
        "snippet": "void function ( String arg0 ) { concodefunc_clear ( ) ; TableItem loc0 = concodeclass_fFailureTableDisplay . newTableItem ( ) ; loc0 . setText ( arg0 ) ; }"
    },
    {
        "question_id": 146,
        "intent": "Read a correct answer from a file .",
        "snippet": "List < Integer > function ( String arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; try { Scanner loc1 = new Scanner ( new File ( arg0 ) ) ; while ( loc1 . hasNextInt ( ) ) { loc0 . add ( loc1 . nextInt ( ) ) ; } } catch ( Exception loc1 ) { concodeclass_feedback += \"srini_string\" ; } return loc0 ; }"
    },
    {
        "question_id": 147,
        "intent": "Called when an event is done busying up the UI Thread .",
        "snippet": "void function ( double arg0 ) { assert ( concodeclass_currentWindowStart >= 0 ) ; concodefunc_slideWindowTo ( arg0 ) ; concodeclass_blockedTimeInWindow = arg0 - concodeclass_currentMarker ; concodeclass_currentMarker = arg0 ; concodeclass_eventDepth -- ; concodeclass_warmDownTimer . schedule ( concodeclass_TICK_TIME ) ; }"
    },
    {
        "question_id": 148,
        "intent": "Compares two non-null Boolean objects according to the value of #sortsTrueFirst .",
        "snippet": "int function ( Boolean arg0 , Boolean arg1 ) { boolean loc0 = arg0 . booleanValue ( ) ; boolean loc1 = arg1 . booleanValue ( ) ; return ( loc0 ^ loc1 ) ? ( ( loc0 ^ concodeclass_trueFirst ) ? 1 : - 1 ) : 0 ; }"
    },
    {
        "question_id": 149,
        "intent": "Returns a label for a resource name .",
        "snippet": "String function ( IResource arg0 ) { return concodefunc_markLTR ( arg0 . getName ( ) , \"srini_string\" ) ; }"
    },
    {
        "question_id": 150,
        "intent": "Gets the value of the tags property . This accessor method returns a reference to the live list , not a snapshot . Therefore any modification you make to the returned list will be present inside the JAXB object . This is why there is not a set method for the tags property . For example , to add a new item , do as follows : getTags . add newItem ; Objects of the following type s are allowed in the list String",
        "snippet": "List < String > function ( ) { if ( concodeclass_tags == null ) { concodeclass_tags = new ArrayList < String > ( ) ; } return this . concodeclass_tags ; }"
    },
    {
        "question_id": 151,
        "intent": "Removes the entry at position index in the list .",
        "snippet": "E function ( int arg0 ) { final E loc0 = concodeclass_executables . remove ( arg0 ) ; if ( loc0 . getPropertySpaces ( ) != null && loc0 . getPropertySpaces ( ) . length > 0 ) { concodeclass_querySpaces = null ; } return loc0 ; }"
    },
    {
        "question_id": 152,
        "intent": "Hash code for this BigInteger .",
        "snippet": "int function ( ) { return concodeclass_val . hashCode ( ) ; }"
    },
    {
        "question_id": 153,
        "intent": "Log a message to the Log4j Logger with TRACE priority . Currently logs to DEBUG level in Log4J .",
        "snippet": "void function ( Object arg0 ) { if ( concodeclass_is12 ) { concodefunc_getLogger ( ) . log ( concodeclass_FQCN , ( Priority ) Level . DEBUG , arg0 , null ) ; } else { concodefunc_getLogger ( ) . log ( concodeclass_FQCN , Level . DEBUG , arg0 , null ) ; } }"
    },
    {
        "question_id": 154,
        "intent": "Evaluate complex polynomial . Note coefficients are always C 1 to C n , C 0 is always 0,0 .",
        "snippet": "Complex function ( Complex arg0 , Complex [ ] arg1 ) { Complex loc0 = new Complex ( arg1 [ arg1 . length - 1 ] ) ; double loc1 ; int loc2 = arg1 . length - 1 ; while ( loc2 -- > 0 ) { Complex loc3 = arg1 [ loc2 ] ; loc0 . r = loc3 . r + arg0 . r * ( loc1 = loc0 . r ) - arg0 . i * loc0 . i ; loc0 . i = loc3 . i + arg0 . r * loc0 . i + arg0 . i * loc1 ; } loc0 . r = arg0 . r * ( loc1 = loc0 . r ) - arg0 . i * loc0 . i ; loc0 . i = arg0 . r * loc0 . i + arg0 . i * loc1 ; return loc0 ; }"
    },
    {
        "question_id": 155,
        "intent": "Returns the successor or children nodes of this GraphNode .",
        "snippet": "Collection function ( ) { return concodeclass_succs ; }"
    },
    {
        "question_id": 156,
        "intent": "Verifies the default page size A4 .",
        "snippet": "void function ( ) { Assert . assertEquals ( PageSize . A4 , concodeclass_ctx . getPageSize ( ) ) ; }"
    },
    {
        "question_id": 157,
        "intent": "Return true iff this quadrant is adjacent to the boundary of an image in the given direction .",
        "snippet": "boolean function ( int arg0 ) { return ( arg0 == QuadTreeNode . SOUTH || arg0 == QuadTreeNode . WEST ) ; }"
    },
    {
        "question_id": 158,
        "intent": "The measurement has been started .",
        "snippet": "void function ( ) { }"
    },
    {
        "question_id": 159,
        "intent": "Copies the contents of the stack into a native array . Note that this will NOT pop them out of the stack .",
        "snippet": "long [ ] function ( ) { return concodeclass__list . toNativeArray ( ) ; }"
    },
    {
        "question_id": 160,
        "intent": "Get a CSSResolver implementation .",
        "snippet": "CSSResolver function ( final boolean arg0 ) { CSSResolver loc0 = new StyleAttrCSSResolver ( ) ; if ( arg0 ) { loc0 . addCss ( concodefunc_getDefaultCSS ( ) ) ; } return loc0 ; }"
    },
    {
        "question_id": 161,
        "intent": "Returns the time of the message , when it was sent , received or dropped .",
        "snippet": "long function ( ) { return concodeclass_timestamp ; }"
    },
    {
        "question_id": 162,
        "intent": "item returns this node 's item . If this node is invalid , throws an exception .",
        "snippet": "Object function ( ) { if ( ! concodefunc_isValidNode ( ) ) { throw new InvalidNodeException ( ) ; } return concodeclass_item ; }"
    },
    {
        "question_id": 163,
        "intent": "Determines whether a notification should hold a foreground service to keep Gecko alive",
        "snippet": "boolean function ( int arg0 ) { final Notification loc0 = concodeclass_mNotifications . get ( arg0 ) ; return isOngoing ( loc0 ) ; }"
    },
    {
        "question_id": 164,
        "intent": "Returns true if this registry maps one or more keys to the specified value .",
        "snippet": "boolean function ( IWidgetIdentifier arg0 ) { return concodeclass__register . containsValue ( arg0 ) ; }"
    },
    {
        "question_id": 165,
        "intent": "Process : Null arguemnts",
        "snippet": "void function ( ) { concodeclass_annotations . process ( null , null , null ) ; }"
    },
    {
        "question_id": 166,
        "intent": "Residue negate .",
        "snippet": "Residue < C > function ( ) { return new Residue < C > ( concodeclass_ring , concodeclass_val . negate ( ) ) ; }"
    },
    {
        "question_id": 167,
        "intent": "Extended Groebner base using critical pair class .",
        "snippet": "ExtendedGB < C > function ( int arg0 , List < GenPolynomial < C >> arg1 ) { throw new RuntimeException ( \"srini_string\" + this . getClass ( ) . getSimpleName ( ) ) ; }"
    },
    {
        "question_id": 168,
        "intent": "The setup of testcase is : send message + - > ejb3 mdb @RunAs - > ejb3 slsb - > ejb2 slsb & & ejb2 slsb",
        "snippet": "void function ( ) { ConnectionFactory loc0 = ( ConnectionFactory ) concodeclass_initialContext . lookup ( \"srini_string\" ) ; String loc1 = HelloBean . sendMessage ( loc0 ) ; Assert . assertEquals ( String . format ( \"srini_string\" , HowdyBean . SAYING , concodeclass_PRINCIPAL , HolaBean . SAYING , concodeclass_PRINCIPAL , GoodByeBean . SAYING ) , loc1 ) ; }"
    },
    {
        "question_id": 169,
        "intent": "Add an additional skip hour name .",
        "snippet": "void function ( String arg0 ) { synchronized ( concodeclass_skipHours ) { concodeclass_skipHours . add ( arg0 ) ; } }"
    },
    {
        "question_id": 170,
        "intent": "Checks if the PDF has to be in conformance with PDF/X -3:2002",
        "snippet": "boolean function ( ) { return concodeclass_pdfxConformance == PdfWriter . PDFX32002 ; }"
    },
    {
        "question_id": 171,
        "intent": "Set the parent WidgetLocator .",
        "snippet": "void function ( WidgetLocator arg0 ) { concodeclass__parentInfo = arg0 ; }"
    },
    {
        "question_id": 172,
        "intent": "This method attempts to find two values a and b satisfying lowerBound f a f b If f is continuous on a , b , this means that a and b bracket a root of f . The algorithm starts by setting a : = initial -1 ; b : = initial +1 , examines the value of the function at a and b and keeps moving the endpoints out by one unit each time through a loop that terminates when one of the following happens : f a f b -- success ! a = lower and b = upper -- ConvergenceException Integer.MAX _ VALUE iterations elapse -- ConvergenceException Note : this method can take Integer.MAX _ VALUE iterations to throw a ConvergenceException . Unless you are confident that there is a root between lowerBound and upperBound near initial , it is better to use #bracket UnivariateRealFunction , double , double , double , int , explicitly specifying the maximum number of iterations .",
        "snippet": "double [ ] function ( UnivariateRealFunction arg0 , double arg1 , double arg2 , double arg3 ) { return bracket ( arg0 , arg1 , arg2 , arg3 , Integer . MAX_VALUE ) ; }"
    },
    {
        "question_id": 173,
        "intent": "Returns true if o is a RoutingTableEntry and has the same KademliaOverlayContact as this . Specifics of this routing table entry such as stale counter are ignored .",
        "snippet": "boolean function ( Object arg0 ) { if ( arg0 instanceof RoutingTableEntry ) { return this . concodeclass_contact . getOverlayID ( ) . equals ( ( ( RoutingTableEntry < ? > ) arg0 ) . getContact ( ) . getOverlayID ( ) ) ; } return false ; }"
    },
    {
        "question_id": 174,
        "intent": "Get the minimal key from this map with respect to the preset Comparator for which valuePredicate holds for its associated value .",
        "snippet": "K function ( final Predicate < V > arg0 ) { for ( final Map . Entry < K , V > loc0 : concodeclass_kSmallest . entrySet ( ) ) { if ( arg0 . isTrue ( loc0 . getValue ( ) ) ) { return loc0 . getKey ( ) ; } } return null ; }"
    },
    {
        "question_id": 175,
        "intent": "Delete customer schema for fresh setup per test .",
        "snippet": "void function ( ) { try ( Connection loc0 = DriverManager . getConnection ( concodeclass_DB_URL ) ; Statement loc1 = loc0 . createStatement ( ) ) { loc1 . execute ( CustomerSchemaSql . DELETE_SCHEMA_SQL ) ; } }"
    },
    {
        "question_id": 176,
        "intent": "is this contact offline ?",
        "snippet": "boolean function ( ) { return concodeclass_isOffline || Simulator . getCurrentTime ( ) > concodeclass_ttl + concodeclass_lastAction ; }"
    },
    {
        "question_id": 177,
        "intent": "listSum computes the sum of terms in a list .",
        "snippet": "double function ( ListNode arg0 ) { if ( arg0 == null ) { return 0.0 ; } return ( ( Double ) arg0 . item ) . doubleValue ( ) + listSum ( arg0 . next ) ; }"
    },
    {
        "question_id": 178,
        "intent": "Log the specified exception .",
        "snippet": "void function ( Throwable arg0 ) { concodeclass_log ( \"srini_string\" , arg0 ) ; }"
    },
    {
        "question_id": 179,
        "intent": "Log a message and exception with trace log level .",
        "snippet": "void function ( Object arg0 , Throwable arg1 ) { concodefunc_log ( Level . FINEST , String . valueOf ( arg0 ) , arg1 ) ; }"
    },
    {
        "question_id": 180,
        "intent": "Sets the new productID .",
        "snippet": "void function ( int arg0 ) { this . concodeclass_productID = arg0 ; }"
    },
    {
        "question_id": 181,
        "intent": "Add a file to the collection .",
        "snippet": "void function ( String arg0 ) { concodeclass_files . add ( arg0 ) ; }"
    },
    {
        "question_id": 182,
        "intent": "Find the timestamp associated with the given metrics , AND remove all metrics objects from the start of the queue up to and including the one provided . Note that because of draw coalescing , the metrics object passed in here may not be the one at the head of the queue , and so we must iterate our way through the list to find it . This must only be called from the compositor thread .",
        "snippet": "long function ( DisplayPortMetrics arg0 ) { int loc0 = concodeclass_mTail ; int loc1 = ( concodeclass_mHead + 1 ) % concodeclass_BUFFER_SIZE ; while ( loc1 != loc0 ) { if ( concodeclass_mMetrics [ loc1 ] . fuzzyEquals ( arg0 ) ) { long loc2 = concodeclass_mTimestamps [ loc1 ] ; concodeclass_mHead = loc1 ; return loc2 ; } loc1 = ( loc1 + 1 ) % concodeclass_BUFFER_SIZE ; } return - 1 ; }"
    },
    {
        "question_id": 183,
        "intent": "Gets an object containing the image dictionary and bytes .",
        "snippet": "PdfImageObject function ( ) { concodefunc_prepareImageObject ( ) ; return concodeclass_imageObject ; }"
    },
    {
        "question_id": 184,
        "intent": "isValidNode returns true if this node is valid ; false otherwise .",
        "snippet": "boolean function ( ) { return concodeclass_valid ; }"
    },
    {
        "question_id": 185,
        "intent": "Compares this protocol version with another one . Only protocol versions with the same protocol name can be compared . This method does not define a total ordering , as it would be required for java.lang.Comparable .",
        "snippet": "int function ( final ProtocolVersion arg0 ) { Args . notNull ( arg0 , \"srini_string\" ) ; Args . check ( this . concodeclass_protocol . equals ( arg0 . protocol ) , \"srini_string\" , this , arg0 ) ; int loc0 = concodefunc_getMajor ( ) - arg0 . getMajor ( ) ; if ( loc0 == 0 ) { loc0 = concodefunc_getMinor ( ) - arg0 . getMinor ( ) ; } return loc0 ; }"
    },
    {
        "question_id": 186,
        "intent": "Saves the current content into the given output stream .",
        "snippet": "void function ( final OutputStream arg0 ) { final ExecutionDataWriter loc0 = new ExecutionDataWriter ( arg0 ) ; concodeclass_sessionInfos . accept ( loc0 ) ; concodeclass_executionData . accept ( loc0 ) ; }"
    },
    {
        "question_id": 187,
        "intent": "Does this registry contain the named function",
        "snippet": "boolean function ( String arg0 ) { final String loc0 = arg0 . toLowerCase ( Locale . ROOT ) ; return concodeclass_userFunctions . containsKey ( loc0 ) || concodeclass_dialect . getFunctions ( ) . containsKey ( loc0 ) ; }"
    },
    {
        "question_id": 188,
        "intent": "Generate a random power series with d = 0.7 .",
        "snippet": "UnivPowerSeries < C > function ( int arg0 , Random arg1 ) { return concodeclass_random ( arg0 , 0.7f , arg1 ) ; }"
    },
    {
        "question_id": 189,
        "intent": "Function to get Object data by its ID",
        "snippet": "String function ( int arg0 ) { return concodefunc_doSendApiRequest ( \"srini_string\" , \"srini_string\" + arg0 ) ; }"
    },
    {
        "question_id": 190,
        "intent": "Gets the cached token value from a Bundle .",
        "snippet": "String function ( Bundle arg0 ) { Validate . notNull ( arg0 , \"srini_string\" ) ; return arg0 . getString ( concodeclass_TOKEN_KEY ) ; }"
    },
    {
        "question_id": 191,
        "intent": "Get a description of the reason this OS delegate is invalid .",
        "snippet": "String function ( ) { return concodeclass_reason ; }"
    },
    {
        "question_id": 192,
        "intent": "Called when a lookup previously started succeeded .",
        "snippet": "void function ( OverlayContact arg0 , Object arg1 , int arg2 ) { concodeclass_ev . lookupSucceeded ( arg0 , arg1 , arg2 ) ; }"
    },
    {
        "question_id": 193,
        "intent": "Formats time as milliseconds with units .",
        "snippet": "String function ( double arg0 , int arg1 ) { return concodefunc_formatToFixedDecimalPoint ( arg0 , arg1 ) + concodeclass_UNIT_MILLISECONDS ; }"
    },
    {
        "question_id": 194,
        "intent": "Returns the number of covered branches starting from this instruction .",
        "snippet": "int function ( ) { return concodeclass_coveredBranches ; }"
    },
    {
        "question_id": 195,
        "intent": "returns true if a MemoryBin with the given URI name already exists in this Storage .",
        "snippet": "boolean function ( String arg0 ) { return concodeclass__binsByUri . containsKey ( arg0 ) ; }"
    },
    {
        "question_id": 196,
        "intent": "Reads the next token skipping over the comments .",
        "snippet": "boolean function ( ) { while ( concodeclass_tokeniser . nextToken ( ) ) { if ( concodeclass_tokeniser . getTokenType ( ) == TokenType . COMMENT ) continue ; return true ; } return false ; }"
    },
    {
        "question_id": 197,
        "intent": "Increase the accounting . Returns whether the allocation fit within limits .",
        "snippet": "boolean function ( long arg0 ) { final AllocationOutcome loc0 = concodefunc_allocate ( arg0 , true , true ) ; return loc0 . isOk ( ) ; }"
    },
    {
        "question_id": 198,
        "intent": "Debugging to see if the object has already been freed .",
        "snippet": "boolean function ( T arg0 ) { int loc0 = concodeclass__top . get ( ) ; for ( int loc1 = loc0 - 1 ; loc1 >= 0 ; loc1 -- ) { if ( concodeclass__freeStack . get ( loc1 ) == arg0 ) { return true ; } } return false ; }"
    },
    {
        "question_id": 199,
        "intent": "Following method performs the initialization",
        "snippet": "FileLoggerModule function ( ) { concodeclass_LOGGER . debug ( \"srini_string\" ) ; this . concodeclass_output = new PrintStream ( new FileOutputStream ( concodeclass_OUTPUT_FILE ) ) ; this . concodeclass_error = new PrintStream ( new FileOutputStream ( concodeclass_ERROR_FILE ) ) ; return this ; }"
    },
    {
        "question_id": 200,
        "intent": "Generate variable string .",
        "snippet": "String function ( int arg0 ) { if ( arg0 < 0 ) { return variable ( - arg0 ) ; } if ( arg0 > concodeclass_N ) { return \"srini_string\" ; } return concodeclass_var + arg0 ; }"
    },
    {
        "question_id": 201,
        "intent": "This method is optional . It allows automatic command hiding in situations when the command should not be visible . For example the ` entity ' command will not be made available before the user has defined his persistence settings in the Roo shell or directly in the project . You can define multiple methods annotated with CliAvailabilityIndicator if your commands have differingvisibility requirements .",
        "snippet": "boolean function ( ) { return concodeclass_operations . isCommandAvailable ( ) ; }"
    },
    {
        "question_id": 202,
        "intent": "Obtains the host string , without scheme prefix .",
        "snippet": "String function ( ) { if ( this . concodeclass_port != - 1 ) { final StringBuilder loc0 = new StringBuilder ( this . concodeclass_hostname . length ( ) + 6 ) ; loc0 . append ( this . concodeclass_hostname ) ; loc0 . append ( \"srini_string\" ) ; loc0 . append ( Integer . toString ( this . concodeclass_port ) ) ; return loc0 . toString ( ) ; } else { return this . concodeclass_hostname ; } }"
    },
    {
        "question_id": 203,
        "intent": "Must be called in the UI thread .",
        "snippet": "void function ( boolean arg0 , boolean arg1 ) { perform ( arg0 , false , arg1 ) ; }"
    },
    {
        "question_id": 204,
        "intent": "Compare equal tag names .",
        "snippet": "void function ( ) { Assert . assertTrue ( new Tag ( \"srini_string\" ) . compareTag ( new Tag ( \"srini_string\" ) ) ) ; }"
    },
    {
        "question_id": 205,
        "intent": "Transforms a list into another one , element by element , given a Transformer .",
        "snippet": "List < Tt > function ( List < Ts > arg0 , Transformer < Ts , Tt > arg1 ) { List < Tt > loc0 = new ArrayList < Tt > ( arg0 . size ( ) ) ; for ( Ts loc1 : arg0 ) loc0 . add ( arg1 . transform ( loc1 ) ) ; return loc0 ; }"
    },
    {
        "question_id": 206,
        "intent": "Adds the given ExecutionData object into the store . If there isalready execution data with this same class id , this structure is merged with the given one .",
        "snippet": "void function ( final ExecutionData arg0 ) { final Long loc0 = Long . valueOf ( arg0 . getId ( ) ) ; final ExecutionData loc1 = concodeclass_entries . get ( loc0 ) ; if ( loc1 == null ) { concodeclass_entries . put ( loc0 , arg0 ) ; concodeclass_names . add ( arg0 . getName ( ) ) ; } else { loc1 . merge ( arg0 ) ; } }"
    },
    {
        "question_id": 207,
        "intent": "All the messages will be retrieved by the ServiceExecutor by calling this method and process them . Retrieves and removes the head of this queue , or returns null if this queue is empty .",
        "snippet": "Message function ( ) { Message loc1 = null ; try { loc1 = concodeclass_blkQueue . poll ( ) ; } catch ( Exception loc0 ) { concodeclass_LOGGER . error ( loc0 . getMessage ( ) ) ; } return loc1 ; }"
    },
    {
        "question_id": 208,
        "intent": "Free up runway",
        "snippet": "void function ( ) { for ( int loc0 = 0 ; loc0 < concodeclass_larnacaAirportNumberOfRunways ; loc0 ++ ) if ( Scenario . getRunwaysArray ( ) [ loc0 ] . isRunwayOccupied ( ) ) { Scenario . getRunwaysArray ( ) [ loc0 ] . setRunwayOccupied ( false ) ; break ; } }"
    },
    {
        "question_id": 209,
        "intent": "unpack string sent from server into id and landmarkname used for search and displaying landmarks in listview",
        "snippet": "Landmark function ( ) { String [ ] loc0 = concodeclass_packedString . split ( concodeclass_SEP_CHARACTER ) ; concodeclass_id = Integer . parseInt ( loc0 [ 0 ] ) ; concodeclass_name = loc0 [ 1 ] ; return this ; }"
    },
    {
        "question_id": 210,
        "intent": "Swaps two characters in a StringBuilder object",
        "snippet": "void function ( StringBuilder arg0 , int arg1 , int arg2 ) { char loc0 = arg0 . charAt ( arg1 ) ; arg0 . setCharAt ( arg1 , arg0 . charAt ( arg2 ) ) ; arg0 . setCharAt ( arg2 , loc0 ) ; }"
    },
    {
        "question_id": 211,
        "intent": "Invokes the underlying ListIterator #remove method .",
        "snippet": "void function ( ) { concodefunc_getListIterator ( ) . remove ( ) ; }"
    },
    {
        "question_id": 212,
        "intent": "Converts a hash code in the range Integer.MIN _ VALUE ... Integer.MAX _ VALUE to a value in the range 0 ... size of hash table - 1 . This function should have package protection so we can test it , and should be used by insert , find , and remove .",
        "snippet": "int function ( int arg0 ) { return ( ( 600 * arg0 + 99 ) % 2147483647 ) % ( concodeclass_hashArray . length ) ; }"
    },
    {
        "question_id": 213,
        "intent": "Appends a byte to the buffer .",
        "snippet": "void function ( byte arg0 ) { concodefunc_ensureCapacity ( concodeclass_length + 1 ) ; concodeclass_buffer [ concodeclass_length ++ ] = arg0 ; }"
    },
    {
        "question_id": 214,
        "intent": "Return the n'th long down the stack , where 0 is the top element and size -1 is the bottom element .",
        "snippet": "long function ( int arg0 ) { if ( concodeclass_list . isEmpty ( ) ) { throw new EmptyStackException ( ) ; } return concodeclass_list . get ( concodeclass_list . size ( ) - arg0 - 1 ) ; }"
    },
    {
        "question_id": 215,
        "intent": "Removes the first occurrence of the given listener .",
        "snippet": "void function ( StyleListener arg0 ) { concodeclass_listeners . remove ( arg0 ) ; }"
    },
    {
        "question_id": 216,
        "intent": "Check for existence or lack thereof of a field .",
        "snippet": "Criteria function ( boolean arg0 ) { this . concodeclass_criteriaType = RelationalOperator . EXISTS ; this . concodeclass_right = ValueNode . toValueNode ( arg0 ) ; this . concodeclass_left = concodeclass_left . asPathNode ( ) . asExistsCheck ( arg0 ) ; return this ; }"
    },
    {
        "question_id": 217,
        "intent": "Retrieves the column names corresponding to the collection elements for the given collection role .",
        "snippet": "String [ ] function ( String arg0 , String arg1 ) { return concodefunc_getCollectionPropertyMapping ( arg0 ) . toColumns ( arg1 , CollectionPropertyNames . COLLECTION_ELEMENTS ) ; }"
    },
    {
        "question_id": 218,
        "intent": "Reset grid .",
        "snippet": "void function ( int arg0 ) { concodeclass_grid = new int [ arg0 ] [ arg0 ] ; }"
    },
    {
        "question_id": 219,
        "intent": "Subclasses may want to override this method in order to store a reference to the parent of a given node that can then be used to calculate current node 's value in #update . In that case it is important to also override #onDetachedFromNode to clear thatreference once current node gets detached .",
        "snippet": "void function ( AnimatedNode arg0 ) { }"
    },
    {
        "question_id": 220,
        "intent": "Collect a JDR report when run outside the Application Server .",
        "snippet": "JdrReport function ( CLI arg0 , String arg1 , String arg2 , int arg3 ) { return new JdrRunner ( arg0 , arg1 , arg2 , arg3 , null , null ) . collect ( ) ; }"
    },
    {
        "question_id": 221,
        "intent": "With both DEEP and SHALLOW extended persistence context inheritance , a bean creating another local bean via JNDI lookup will also use the extended persistence context inheritance rules . This tests that two levels of JNDI lookup does use the same XPC . See http://java.net/projects/jpa-spec/lists/jsr338-experts/archive/2012-06/message/28 for more details than the JPA 2.0 specification includes .",
        "snippet": "void function ( ) { TopLevelBean loc0 = concodefunc_lookup ( \"srini_string\" , TopLevelBean . class ) ; loc0 . induceCreationViaJNDILookup ( ) ; }"
    },
    {
        "question_id": 222,
        "intent": "Construye la clausula where de un statement a partir de las condiciones especificadas .",
        "snippet": "String [ ] function ( QueryCondition [ ] arg0 ) { String [ ] loc0 = new String [ arg0 . length ] ; for ( int loc1 = 0 ; loc1 < loc0 . length ; loc1 ++ ) loc0 [ loc1 ] = arg0 [ loc1 ] . getColumnName ( ) + \"srini_string\" + arg0 [ loc1 ] . getOperator ( ) . toString ( ) + \"srini_string\" ; return loc0 ; }"
    },
    {
        "question_id": 223,
        "intent": "This method sets the value of the database column SYS_IP_AREA . CITY",
        "snippet": "void function ( String arg0 ) { this . concodeclass_city = arg0 ; }"
    },
    {
        "question_id": 224,
        "intent": "Sets the path of the file to be loaded , to the given value .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_fileName = arg0 ; }"
    },
    {
        "question_id": 225,
        "intent": "Track the given document ID for eventual obsolescence and deletion , and give it priority since we know this ID has made it to the server , and we definitely do n't want to orphan it .",
        "snippet": "void function ( String arg0 ) { ExtendedJSONObject loc0 = concodefunc_getObsoleteIds ( ) ; loc0 . put ( arg0 , HealthReportConstants . DELETION_ATTEMPTS_PER_KNOWN_TO_BE_ON_SERVER_DOCUMENT_ID ) ; concodefunc_setObsoleteIds ( loc0 ) ; }"
    },
    {
        "question_id": 226,
        "intent": "Returns the 1-based position where a value is on this stack . If the value occurs as an item in this stack , this method returns the distance from the top of the stack of the occurrence nearest the top of the stack ; the topmost item on the stack is considered to be at distance 1 .",
        "snippet": "int function ( boolean arg0 ) { for ( int loc0 = concodeclass_list . size ( ) - 1 ; loc0 >= 0 ; loc0 -- ) { if ( concodeclass_list . get ( loc0 ) == arg0 ) { return concodeclass_list . size ( ) - loc0 ; } } return - 1 ; }"
    },
    {
        "question_id": 227,
        "intent": "Parse Local from String .",
        "snippet": "Local < C > function ( String arg0 ) { GenPolynomial < C > loc0 = concodeclass_ring . parse ( arg0 ) ; return new Local < C > ( this , loc0 ) ; }"
    },
    {
        "question_id": 228,
        "intent": "Returns the DF -- branch information in the form class : method : line-number",
        "snippet": "String function ( Branch arg0 , DataFlowInput arg1 ) { return ( arg0 . getClassName ( ) + \"srini_string\" + arg0 . getMethodName ( ) + \"srini_string\" + arg0 . getLineNumber ( ) ) ; }"
    },
    {
        "question_id": 229,
        "intent": "Unregister an image panel",
        "snippet": "void function ( ImagePanel arg0 ) { arg0 . removeMouseMotionListener ( concodeclass_colorDialog ) ; }"
    },
    {
        "question_id": 230,
        "intent": "Parse AlgebraicNumber from Reader .",
        "snippet": "AlgebraicNumber < C > function ( Reader arg0 ) { throw new RuntimeException ( \"srini_string\" ) ; }"
    },
    {
        "question_id": 231,
        "intent": "Get the weight of given key",
        "snippet": "Integer function ( T arg0 ) { Integer loc0 = concodeclass_nodePosition . get ( arg0 ) ; if ( loc0 == null ) { return null ; } else { return concodeclass_allNodes . get ( loc0 ) . weight ; } }"
    },
    {
        "question_id": 232,
        "intent": "Gets a Comparator that can sort Boolean objects . The parameter specifies whether true or false is sorted first . The comparator throws NullPointerException if a null value is compared .",
        "snippet": "Comparator function ( boolean arg0 ) { return BooleanComparator . getBooleanComparator ( arg0 ) ; }"
    },
    {
        "question_id": 233,
        "intent": "This is an access method for the per-call state provided by the client to the server .",
        "snippet": "Map < String , ByteBuffer > function ( ) { if ( concodeclass_requestCallMeta == null ) { concodeclass_requestCallMeta = new HashMap < String , ByteBuffer > ( ) ; } return concodeclass_requestCallMeta ; }"
    },
    {
        "question_id": 234,
        "intent": "Gets the value of the getcontenttype property .",
        "snippet": "Getcontenttype function ( ) { return concodeclass_getcontenttype ; }"
    },
    {
        "question_id": 235,
        "intent": "Converts an Element representing a location into a Location object .",
        "snippet": "Location function ( Element arg0 ) { int loc0 = Integer . parseInt ( arg0 . getAttribute ( \"srini_string\" ) ) ; char loc1 = arg0 . getAttribute ( \"srini_string\" ) . charAt ( 0 ) ; return new Location ( loc0 , loc1 ) ; }"
    },
    {
        "question_id": 236,
        "intent": "Set the context attribute key under which we will store the request Locale .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_localeKey = arg0 ; }"
    },
    {
        "question_id": 237,
        "intent": "Query if this ring is a field .",
        "snippet": "boolean function ( ) { return true ; }"
    },
    {
        "question_id": 238,
        "intent": "Override to inject .",
        "snippet": "SequenceCommandLabelProvider function ( ) { return new SequenceCommandLabelProvider ( ) ; }"
    },
    {
        "question_id": 239,
        "intent": "Sets the iterator for this iterator to use . If iteration has started , this effectively resets the iterator .",
        "snippet": "void function ( Iterator arg0 ) { this . concodeclass_iterator = arg0 ; }"
    },
    {
        "question_id": 240,
        "intent": "Returns entity content as a InputStream if set using #setStream java.io.InputStream method .",
        "snippet": "InputStream function ( ) { return concodeclass_stream ; }"
    },
    {
        "question_id": 241,
        "intent": "Sets the checks if is test .",
        "snippet": "void function ( Boolean arg0 ) { this . concodeclass_isTest = arg0 ; }"
    },
    {
        "question_id": 242,
        "intent": "Returns the clone of the passed DocumentWrapper with filled DocumentWrapper #getDocumentMetadata and DocumentWrapper #getRowId only",
        "snippet": "DocumentWrapper function ( DocumentWrapper arg0 ) { return DocumentWrapper . newBuilder ( ) . setDocumentMetadata ( arg0 . getDocumentMetadata ( ) ) . setRowId ( arg0 . getRowId ( ) ) . build ( ) ; }"
    },
    {
        "question_id": 243,
        "intent": "Removing an item . Similar to stack .",
        "snippet": "Item function ( ) { Item loc0 = concodeclass_first . item ; concodeclass_first = concodeclass_first . next ; concodeclass_size -- ; if ( concodefunc_isEmpty ( ) ) { concodeclass_last = null ; } return loc0 ; }"
    },
    {
        "question_id": 244,
        "intent": "Sets the replicated resources of the neighbor to the given set One-hop replication",
        "snippet": "void function ( Set < IResource > arg0 ) { this . concodeclass_resources = arg0 ; }"
    },
    {
        "question_id": 245,
        "intent": "Tests that the entity listeners are correctly invoked and have access to the java : comp/EJBContext when an entity is persisted via a stateless CMT bean",
        "snippet": "void function ( ) { MyListener . setInvocationCount ( 0 ) ; SLSBCMT loc0 = concodefunc_lookup ( \"srini_string\" , SLSBCMT . class ) ; this . concodefunc_doCMTTest ( loc0 , 3 ) ; }"
    },
    {
        "question_id": 246,
        "intent": "Check authorization for `` READ TABLE '' for given db.table . A HiveAccessControlException is thrownfor illegal access .",
        "snippet": "void function ( final String arg0 , final String arg1 ) { if ( ! concodeclass_authzEnabled ) { return ; } HivePrivilegeObject loc0 = new HivePrivilegeObject ( HivePrivilegeObjectType . TABLE_OR_VIEW , arg0 , arg1 ) ; concodefunc_authorize ( HiveOperationType . QUERY , ImmutableList . of ( loc0 ) , Collections . < HivePrivilegeObject > emptyList ( ) , \"srini_string\" ) ; }"
    },
    {
        "question_id": 247,
        "intent": "Gets the value of the allprop property .",
        "snippet": "Allprop function ( ) { return concodeclass_allprop ; }"
    },
    {
        "question_id": 248,
        "intent": "Checking if the value of x is equal to the sum of obstacle value x and obstacle width .",
        "snippet": "boolean function ( Obstacles arg0 ) { if ( concodeclass_x == arg0 . x + 150 ) { return true ; } return false ; }"
    },
    {
        "question_id": 249,
        "intent": "Get the tag number .",
        "snippet": "int function ( ) { return concodeclass_tagNo ; }"
    },
    {
        "question_id": 250,
        "intent": "Subtract a duration from a timestamp .",
        "snippet": "Timestamp function ( Timestamp arg0 , Duration arg1 ) { return Timestamps . subtract ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 251,
        "intent": "This factory method creates and returns a Property given the class and name parameters , where the `` name '' parameter represents either : a public getName method on the class which takes no arguments , plus an optional public setName method which takes a value of the same type returned by getName a public isName method on the class which takes no arguments , plus an optional public setName method which takes a value of the same type returned by isName a public name field on the class If either of the get/is method alternatives is found on the class , but an appropriate setName method is not found , the Property will be #isReadOnly readOnly . Calling the #set Object , Object method on sucha property is allowed , but will have no effect . If neither the methods nor the field are found on the class a NoSuchPropertyException exception will be thrown .",
        "snippet": "Property < T , V > function ( Class < T > arg0 , Class < V > arg1 , String arg2 ) { return new ReflectiveProperty < T , V > ( arg0 , arg1 , arg2 ) ; }"
    },
    {
        "question_id": 252,
        "intent": "Ensures that the object given as a method parameter is not null .",
        "snippet": "void function ( Object arg0 , String arg1 ) { if ( arg0 == null ) { throw new NullPointerException ( arg1 ) ; } }"
    },
    {
        "question_id": 253,
        "intent": "Log a message and exception with warn log level .",
        "snippet": "void function ( Object arg0 , Throwable arg1 ) { concodefunc_log ( Level . WARNING , String . valueOf ( arg0 ) , arg1 ) ; }"
    },
    {
        "question_id": 254,
        "intent": "Triggers an incremental build if this save helper did save files before .",
        "snippet": "void function ( ) { if ( concodeclass_fFilesSaved && ResourcesPlugin . getWorkspace ( ) . getDescription ( ) . isAutoBuilding ( ) ) { new GlobalBuildAction ( JavaPlugin . getActiveWorkbenchWindow ( ) , IncrementalProjectBuilder . INCREMENTAL_BUILD ) . run ( ) ; } }"
    },
    {
        "question_id": 255,
        "intent": "Returns true iff the collection contains an element equivalent to the given one , as decided by the hasher .",
        "snippet": "boolean function ( Collection < T > arg0 , Object arg1 , Hasher arg2 ) { for ( T loc0 : arg0 ) { if ( arg2 . equals ( loc0 , arg1 ) ) return true ; } return false ; }"
    },
    {
        "question_id": 256,
        "intent": "Create additional H2 schema .",
        "snippet": "void function ( String arg0 , Map arg1 ) { arg1 . put ( Environment . URL , arg1 . get ( Environment . URL ) + \"srini_string\" + arg0 ) ; }"
    },
    {
        "question_id": 257,
        "intent": "Return the disjuction of two criterions .",
        "snippet": "AuditCriterion function ( AuditCriterion arg0 , AuditCriterion arg1 ) { return new LogicalAuditExpression ( arg0 , arg1 , \"srini_string\" ) ; }"
    },
    {
        "question_id": 258,
        "intent": "Gets the composites .",
        "snippet": "Set function ( ) { return concodeclass_composites ; }"
    },
    {
        "question_id": 259,
        "intent": "Returns the z component of the cross product between vectors BC and BA .",
        "snippet": "float function ( ResultPoint arg0 , ResultPoint arg1 , ResultPoint arg2 ) { float loc0 = arg1 . x ; float loc1 = arg1 . y ; return ( ( arg2 . x - loc0 ) * ( arg0 . y - loc1 ) ) - ( ( arg2 . y - loc1 ) * ( arg0 . x - loc0 ) ) ; }"
    },
    {
        "question_id": 260,
        "intent": "Creates a ProgressRequestBody that can be used for showing uploading progress",
        "snippet": "ProgressRequestBody function ( RequestBody arg0 , ProgressRequestListener arg1 ) { return new ProgressRequestBody ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 261,
        "intent": "Checks the length of a code and if a code consists of numbers only .",
        "snippet": "boolean function ( String arg0 , int arg1 ) { if ( arg0 . length ( ) != arg1 ) return false ; for ( char loc0 : arg0 . toCharArray ( ) ) if ( loc0 < 48 || loc0 > 57 ) return false ; return true ; }"
    },
    {
        "question_id": 262,
        "intent": "Wait for the reveal action to complete .",
        "snippet": "void function ( ) { UIDriver . pause ( concodeclass_REVEAL_WAIT ) ; }"
    },
    {
        "question_id": 263,
        "intent": "Sets the start point of the subpath .",
        "snippet": "void function ( Point2D arg0 ) { setStartPoint ( ( float ) arg0 . getX ( ) , ( float ) arg0 . getY ( ) ) ; }"
    },
    {
        "question_id": 264,
        "intent": "Sets the linked list node after this one .",
        "snippet": "void function ( TLinkable arg0 ) { concodeclass__next = arg0 ; }"
    },
    {
        "question_id": 265,
        "intent": "Gets the java encoding from the IANA encoding . If the encoding can not be found it returns the input .",
        "snippet": "String function ( final String arg0 ) { String loc0 = arg0 . toUpperCase ( ) ; String loc1 = concodeclass_MAP . get ( loc0 ) ; if ( loc1 == null ) loc1 = arg0 ; return loc1 ; }"
    },
    {
        "question_id": 266,
        "intent": "Add a link to Sentence",
        "snippet": "void function ( String arg0 ) { this . concodeclass_links . add ( arg0 ) ; }"
    },
    {
        "question_id": 267,
        "intent": "Get the matcher identifying the parent of the target of this match .",
        "snippet": "IWidgetMatcher function ( ) { return concodeclass__parentMatcher ; }"
    },
    {
        "question_id": 268,
        "intent": "Returns true if the doubly-nested set did not contain v.",
        "snippet": "boolean function ( K1 arg0 , K2 arg1 , V arg2 ) { concodefunc_ensureSetExists ( arg0 , arg1 ) ; return concodeclass_dkMap . get ( arg0 , arg1 ) . add ( arg2 ) ; }"
    },
    {
        "question_id": 269,
        "intent": "Searches for the first subsequence of a that matches sub elementwise . Elements of sub are considered to match elements of a if they pass the #eq test .",
        "snippet": "int function ( double [ ] arg0 , double [ ] arg1 ) { int loc0 = arg0 . length - arg1 . length ; outer : for ( int loc1 = 0 ; loc1 <= loc0 ; loc1 ++ ) { for ( int loc2 = 0 ; loc2 < arg1 . length ; loc2 ++ ) { if ( concodefunc_ne ( arg0 [ loc1 + loc2 ] , arg1 [ loc2 ] ) ) { continue outer ; } } return ( loc1 ) ; } return ( - 1 ) ; }"
    },
    {
        "question_id": 270,
        "intent": "Sequential number of the statement , as assigned by the account servicer . The sequential number is increased incrementally for each statement sent electronically .",
        "snippet": "BigDecimal function ( ) { return concodeclass_stmt . getElctrncSeqNb ( ) ; }"
    },
    {
        "question_id": 271,
        "intent": "The globally unique id for this dataset",
        "snippet": "String function ( ) { return concodeclass_id ; }"
    },
    {
        "question_id": 272,
        "intent": "save MotorBikes that we previously put a down payment on pending DB changes should be flushed as per JPA 7.9.1 Container Responsibilities for XPC : When a business method of the stateful session bean is invoked , if the stateful session bean uses container managed transaction demarcation , and the entity manager is not already associated with the current JTA transaction , the container associates the entity manager with the current JTA transaction and calls EntityManager.joinTransaction .",
        "snippet": "void function ( ) { }"
    },
    {
        "question_id": 273,
        "intent": "Returns the maximum x value in the model .",
        "snippet": "double function ( ) { return concodeclass_values . lastKey ( ) ; }"
    },
    {
        "question_id": 274,
        "intent": "Sole entry point to application , as always .",
        "snippet": "void function ( String [ ] arg0 ) { String loc0 ; TextIO . putln ( \"srini_string\" ) ; loc0 = TextIO . getln ( ) ; TextIO . putln ( ) ; TextIO . putln ( \"srini_string\" ) ; concodefunc_printCapitalized ( loc0 ) ; }"
    },
    {
        "question_id": 275,
        "intent": "Returns an unmodifiable , empty LongList .",
        "snippet": "LongList function ( ) { return concodeclass_EMPTY_LONG_LIST ; }"
    },
    {
        "question_id": 276,
        "intent": "Return root columns ' metadata . Roots are columns that have no parent .",
        "snippet": "List < ColumnMetaData > function ( ) { List < ColumnMetaData > loc0 = new ArrayList < ColumnMetaData > ( ) ; for ( int loc1 = 0 ; loc1 < concodeclass_columnCount ; loc1 ++ ) if ( concodeclass_columns [ loc1 ] . metaData . getParent ( ) == null ) loc0 . add ( concodeclass_columns [ loc1 ] . metaData ) ; return loc0 ; }"
    },
    {
        "question_id": 277,
        "intent": "use for system classes only , since not ClassLoader or Reflector-aware",
        "snippet": "boolean function ( String arg0 , String arg1 , Class [ ] arg2 ) { return false ; }"
    },
    {
        "question_id": 278,
        "intent": "Returns a default formatted string with fields separated by '' , ''",
        "snippet": "String function ( ) { return new Date ( Long . parseLong ( concodeclass_ts ) ) . toString ( ) + \"srini_string\" + concodeclass_component + \"srini_string\" + concodeclass_task + \"srini_string\" + concodeclass_messageId + \"srini_string\" + concodeclass_values ; }"
    },
    {
        "question_id": 279,
        "intent": "Returns null if it was created , the value otherwise .",
        "snippet": "Object function ( BigInteger arg0 , StateInitializer arg1 ) { if ( concodeclass__curr . containsKey ( arg0 ) ) { return concodeclass__curr . get ( arg0 ) ; } else { concodefunc_getState ( arg0 , arg1 ) ; return null ; } }"
    },
    {
        "question_id": 280,
        "intent": "Sets the value of the fcKey property .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_fcKey = arg0 ; }"
    },
    {
        "question_id": 281,
        "intent": "Parse Residue from Reader .",
        "snippet": "Residue < C > function ( Reader arg0 ) { throw new RuntimeException ( \"srini_string\" ) ; }"
    },
    {
        "question_id": 282,
        "intent": "Easy hook to build an Identifier using the keyword safe IdentifierHelper .",
        "snippet": "Identifier function ( String arg0 , MetadataBuildingContext arg1 ) { return arg1 . getMetadataCollector ( ) . getDatabase ( ) . getJdbcEnvironment ( ) . getIdentifierHelper ( ) . toIdentifier ( arg0 ) ; }"
    },
    {
        "question_id": 283,
        "intent": "Get output data language",
        "snippet": "String function ( ) { return concodeclass_m_Language ; }"
    },
    {
        "question_id": 284,
        "intent": "Removes the data from the specified fieldNumber , if there was any .",
        "snippet": "void function ( int arg0 ) { int loc0 = concodefunc_binarySearch ( arg0 ) ; if ( loc0 >= 0 && concodeclass_mData [ loc0 ] != concodeclass_DELETED ) { concodeclass_mData [ loc0 ] = concodeclass_DELETED ; concodeclass_mGarbage = true ; } }"
    },
    {
        "question_id": 285,
        "intent": "Puts the given collection of keys into this map according to the contract of #put Object , Object . The values will be set to null . The keys are added in the order of the collection 's iterator .",
        "snippet": "void function ( final Collection < ? extends K > arg0 ) { for ( final K loc0 : arg0 ) { concodefunc_put ( loc0 , null ) ; } }"
    },
    {
        "question_id": 286,
        "intent": "Removes a script from this block",
        "snippet": "void function ( Script arg0 ) { concodeclass_list . remove ( arg0 ) ; }"
    },
    {
        "question_id": 287,
        "intent": "Set the index into the constant pool of the field 's constant value .",
        "snippet": "void function ( final int arg0 ) { if ( concodeclass_constantValue != null ) { concodeclass_constantValue . setConstantValueIndex ( arg0 ) ; } }"
    },
    {
        "question_id": 288,
        "intent": "Iterate over the PptTopLevels and trim them .",
        "snippet": "void function ( ) { for ( PptTopLevel loc0 : concodeclass_nameToPpt . values ( ) ) { loc0 . trimToSize ( ) ; } }"
    },
    {
        "question_id": 289,
        "intent": "Sets the value of the caller property .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_caller = arg0 ; }"
    },
    {
        "question_id": 290,
        "intent": "Equal iff both have the same number of RatTerms and those RatTerms are pairwise equal .",
        "snippet": "boolean function ( RatTermVec arg0 ) { if ( arg0 . size ( ) != this . concodefunc_size ( ) ) { return false ; } for ( int loc0 = 0 ; loc0 < this . concodefunc_size ( ) ; loc0 ++ ) { if ( ! this . concodefunc_get ( loc0 ) . equals ( arg0 . get ( loc0 ) ) ) { return false ; } } return true ; }"
    },
    {
        "question_id": 291,
        "intent": "returns the initial size of the MemoryFile .",
        "snippet": "int function ( ) { return concodeclass_i_initialSize ; }"
    },
    {
        "question_id": 292,
        "intent": "Checks to see whether the comparator is now locked against further changes .",
        "snippet": "void function ( ) { if ( concodeclass_isLocked ( ) ) { throw new UnsupportedOperationException ( \"srini_string\" ) ; } }"
    },
    {
        "question_id": 293,
        "intent": "Removes a template to the set .",
        "snippet": "void function ( Template arg0 ) { concodeclass_fTemplates . remove ( arg0 ) ; }"
    },
    {
        "question_id": 294,
        "intent": "Get the date time as a java.util.Date . The Date object created has exactly the same millisecond instant as this object .",
        "snippet": "Date function ( ) { return new Date ( getMillis ( ) ) ; }"
    },
    {
        "question_id": 295,
        "intent": "Query if this ring is commutative .",
        "snippet": "boolean function ( ) { return concodeclass_ring . isCommutative ( ) ; }"
    },
    {
        "question_id": 296,
        "intent": "Creates a new com.datastax.driver.core.BatchStatement.Type #LOGGED batch statement for the specified CQL statement builders .",
        "snippet": "BatchCQLStatementTupleMapper function ( CQLStatementBuilder ... arg0 ) { return concodefunc_newBatchStatementBuilder ( BatchStatement . Type . LOGGED , arg0 ) ; }"
    },
    {
        "question_id": 297,
        "intent": "Return the directory into which we put our self-extracted native libraries .",
        "snippet": "File function ( Context arg0 ) { return new File ( arg0 . getApplicationInfo ( ) . dataDir , \"srini_string\" ) ; }"
    },
    {
        "question_id": 298,
        "intent": "makes sure the passed object is in the Collection . equals comparison .",
        "snippet": "Object function ( Object arg0 ) { List4 loc0 = concodefunc_find ( arg0 ) ; if ( loc0 == null ) { concodefunc_add ( arg0 ) ; return arg0 ; } return loc0 . _element ; }"
    },
    {
        "question_id": 299,
        "intent": "Closes a given Closable .",
        "snippet": "void function ( final Closeable arg0 ) { if ( arg0 != null ) { try { arg0 . close ( ) ; } catch ( final IOException loc0 ) { loc0 . printStackTrace ( ) ; } } }"
    },
    {
        "question_id": 300,
        "intent": "Asks the user to select a string .",
        "snippet": "String function ( String arg0 , List < String > arg1 ) { while ( true ) { System . out . println ( arg0 ) ; for ( int loc0 = 0 ; loc0 < arg1 . size ( ) ; loc0 ++ ) System . out . printf ( \"srini_string\" , loc0 + 1 , arg1 . get ( loc0 ) ) ; int loc1 = concodeclass_in . nextInt ( ) ; if ( loc1 > 0 && loc1 <= arg1 . size ( ) ) return arg1 . get ( loc1 - 1 ) ; } }"
    },
    {
        "question_id": 301,
        "intent": "Getter for property ` connectedToSession ' .",
        "snippet": "boolean function ( ) { return concodefunc_getProxyOrNull ( ) != null ; }"
    },
    {
        "question_id": 302,
        "intent": "Returns the internal source viewer .",
        "snippet": "SourceViewer function ( ) { return concodeclass_fSourceViewer ; }"
    },
    {
        "question_id": 303,
        "intent": "Inserts the child as the first child of the parent , all other children are shifted over to the ` right ' .",
        "snippet": "void function ( AST arg0 , AST arg1 ) { if ( arg0 . getFirstChild ( ) == null ) { arg0 . setFirstChild ( arg1 ) ; } else { AST loc0 = arg0 . getFirstChild ( ) ; arg0 . setFirstChild ( arg1 ) ; arg1 . setNextSibling ( loc0 ) ; } }"
    },
    {
        "question_id": 304,
        "intent": "Getter to find out if filling out fields is allowed after signing .",
        "snippet": "boolean function ( ) { return concodeclass_fillInAllowed ; }"
    },
    {
        "question_id": 305,
        "intent": "Returns all the indices of statements where v is an input to the statement .",
        "snippet": "List < Integer > function ( MVariable arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( int loc1 = arg0 . getDeclIndex ( ) + 1 ; loc1 < concodefunc_size ( ) ; loc1 ++ ) { if ( concodeclass_statements . get ( loc1 ) . inputs . contains ( arg0 ) ) loc0 . add ( loc1 ) ; } return loc0 ; }"
    },
    {
        "question_id": 306,
        "intent": "Setter method for property className .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_className = arg0 ; }"
    },
    {
        "question_id": 307,
        "intent": "Get this period as an immutable Period object . The period will use PeriodType.standard .",
        "snippet": "Period function ( ) { return Period . ZERO . withFields ( this ) ; }"
    },
    {
        "question_id": 308,
        "intent": "A ClassEditor 's hash code is based upon the hash code of the name of the class it edits .",
        "snippet": "int function ( ) { return ( this . concodefunc_name ( ) . hashCode ( ) ) ; }"
    },
    {
        "question_id": 309,
        "intent": "Get the list of polynomials .",
        "snippet": "ArrayList < GenPolynomial < C >> function ( ) { return concodeclass_P ; }"
    },
    {
        "question_id": 310,
        "intent": "Evaluates the body of a tag",
        "snippet": "void function ( JellyContext arg0 , XMLOutput arg1 ) { for ( Iterator loc0 = concodeclass_list . iterator ( ) ; loc0 . hasNext ( ) ; ) { Script loc1 = ( Script ) loc0 . next ( ) ; loc1 . run ( arg0 , arg1 ) ; } }"
    },
    {
        "question_id": 311,
        "intent": "Creates a criterion using equality",
        "snippet": "Criteria function ( Object arg0 ) { return concodefunc_is ( arg0 ) ; }"
    },
    {
        "question_id": 312,
        "intent": "Pause .",
        "snippet": "void function ( long arg0 ) { try { Thread . sleep ( arg0 ) ; } catch ( InterruptedException loc0 ) { loc0 . printStackTrace ( ) ; } }"
    },
    {
        "question_id": 313,
        "intent": "This class delegates this call",
        "snippet": "void function ( ) { concodeclass_delegate . beginTextBlock ( ) ; }"
    },
    {
        "question_id": 314,
        "intent": "Creates an add operation using the specified address and parameters",
        "snippet": "ModelNode function ( PathAddress arg0 , Map < Attribute , ModelNode > arg1 ) { ModelNode loc0 = Util . createAddOperation ( arg0 ) ; for ( Map . Entry < Attribute , ModelNode > loc1 : arg1 . entrySet ( ) ) { loc0 . get ( loc1 . getKey ( ) . getName ( ) ) . set ( loc1 . getValue ( ) ) ; } return loc0 ; }"
    },
    {
        "question_id": 315,
        "intent": "Creates a new search scope with all compilation units possibly referencing javaElement , considering the visibility of the element , references only from source",
        "snippet": "IJavaSearchScope function ( IJavaElement arg0 ) { return RefactoringScopeFactory . create ( arg0 , true , true ) ; }"
    },
    {
        "question_id": 316,
        "intent": "Returns the index of the element that would be returned by a subsequent call to previous . A return value of -1 indicates that the iterator is currently at the start .",
        "snippet": "int function ( ) { return ( concodeclass_beforeFirst ? - 1 : 0 ) ; }"
    },
    {
        "question_id": 317,
        "intent": "Returns the selection mode of the given AST node regarding this selection . Possible values are INTERSECTS , BEFORE , SELECTED , and AFTER .",
        "snippet": "int function ( ASTNode arg0 ) { int loc0 = arg0 . getStartPosition ( ) ; int loc1 = loc0 + arg0 . getLength ( ) ; if ( loc1 <= concodeclass_fStart ) return concodeclass_BEFORE ; else if ( concodefunc_covers ( arg0 ) ) return concodeclass_SELECTED ; else if ( concodeclass_fExclusiveEnd <= loc0 ) return concodeclass_AFTER ; return concodeclass_INTERSECTS ; }"
    },
    {
        "question_id": 318,
        "intent": "Return a description of this script step .",
        "snippet": "String function ( ) { return concodefunc_getDescription ( ) ; }"
    },
    {
        "question_id": 319,
        "intent": "Composition 4 . a1 , a2 , a3 and a4 are objects . L is a list . M = COMP a1 , COMP a2 , COMP a3 , COMP a4 , l .",
        "snippet": "LIST < C > function ( C arg0 , C arg1 , C arg2 , C arg3 , LIST < C > arg4 ) { LIST < C > loc0 = arg4 ; if ( arg4 == null ) { loc0 = new LIST < C > ( ) ; } loc0 . list . addFirst ( arg3 ) ; loc0 . list . addFirst ( arg2 ) ; loc0 . list . addFirst ( arg1 ) ; loc0 . list . addFirst ( arg0 ) ; return loc0 ; }"
    },
    {
        "question_id": 320,
        "intent": "Returns the current state of the renderer .",
        "snippet": "int function ( ) { return concodeclass_state ; }"
    },
    {
        "question_id": 321,
        "intent": "#register OpModeManager is called by the SDK game in order to registerOpMode classes or instances that will participate in an FTC game . There are two mechanisms by which an OpMode may be registered . 1 The preferred method is by means of class annotations in the OpMode itself . See , for example the class annotations in ConceptNullOp . 2 The other , retired , method is to modify this #register OpModeManager method to include explicit calls to OpModeManager.register . This method of modifying this file directly is discouraged , as it makes updates to the SDK harder to integrate into your code .",
        "snippet": "void function ( OpModeManager arg0 ) { BlocksOpMode . registerAll ( arg0 ) ; AnnotatedOpModeRegistrar . register ( arg0 ) ; }"
    },
    {
        "question_id": 322,
        "intent": "Verify if the given writer is not ` null '",
        "snippet": "void function ( ) { final File loc0 = this . concodeclass_testFolder . newFile ( ) ; new SimpleFileWriter ( loc0 . getPath ( ) , Assert :: assertNotNull ) ; }"
    },
    {
        "question_id": 323,
        "intent": "Reads the device descriptor from the devices EEPROM .",
        "snippet": "DeviceDescriptor function ( ) { concodefunc_checkIsOpen ( ) ; return readDeviceDescriptor ( concodeclass_device . getHandle ( ) ) ; }"
    },
    {
        "question_id": 324,
        "intent": "Create an instance of ISDVInfo",
        "snippet": "ISDVInfo function ( ) { return new ISDVInfo ( ) ; }"
    },
    {
        "question_id": 325,
        "intent": "Verifies if Image is a stack owner . Should be false .",
        "snippet": "void function ( ) { Assert . assertFalse ( concodeclass_i . isStackOwner ( ) ) ; }"
    },
    {
        "question_id": 326,
        "intent": "Sets the input info .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_inputInfo = arg0 ; }"
    },
    {
        "question_id": 327,
        "intent": "Returns the label for a URL , URI or URL part . Example is ` http://www.x.xom/s.html#1 '",
        "snippet": "String function ( String arg0 ) { return concodefunc_markLTR ( arg0 , \"srini_string\" ) ; }"
    },
    {
        "question_id": 328,
        "intent": "Trace is never enabled .",
        "snippet": "boolean function ( ) { return false ; }"
    },
    {
        "question_id": 329,
        "intent": "Executes the body of the tag and returns the result as a String .",
        "snippet": "String function ( boolean arg0 ) { StringWriter loc0 = new StringWriter ( ) ; concodefunc_invokeBody ( XMLOutput . createXMLOutput ( loc0 , arg0 ) ) ; return loc0 . toString ( ) ; }"
    },
    {
        "question_id": 330,
        "intent": "opens an ObjectContainer ObjectContainer on the specified database file for local use . A database file can only be opened once , subsequent attempts to open another ObjectContainer ObjectContainer against the same file will result ina DatabaseFileLockedException DatabaseFileLockedException . Database files can only be accessed for read/write access from one process one Java VM at one time . All versions except for db4o mobile edition use an internal mechanism to lock the database file for other processes .",
        "snippet": "EmbeddedObjectContainer function ( EmbeddedConfiguration arg0 , String arg1 ) { if ( null == arg0 ) { throw new ArgumentNullException ( ) ; } return ObjectContainerFactory . openObjectContainer ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 331,
        "intent": "Log a message with error log level .",
        "snippet": "void function ( Object arg0 ) { concodefunc_log ( Level . SEVERE , String . valueOf ( arg0 ) , null ) ; }"
    },
    {
        "question_id": 332,
        "intent": "Replaces getContexts call but ensures that if list not yet initialized then empty list will be returned",
        "snippet": "Set < T > function ( ) { if ( concodefunc_getContexts ( ) == null ) { return Collections . unmodifiableSet ( new HashSet < T > ( ) ) ; } return concodefunc_getContexts ( ) ; }"
    },
    {
        "question_id": 333,
        "intent": "returns the center of the line",
        "snippet": "VectorXZ function ( ) { return ( concodeclass_startNode . getPos ( ) . add ( concodeclass_endNode . getPos ( ) ) ) . mult ( 0.5 ) ; }"
    },
    {
        "question_id": 334,
        "intent": "Returns the result so far .",
        "snippet": "String function ( ) { return concodeclass_result . toString ( ) ; }"
    },
    {
        "question_id": 335,
        "intent": "Negative of this matrix .",
        "snippet": "GenMatrix < C > function ( ) { ArrayList < ArrayList < C >> loc0 = new ArrayList < ArrayList < C >> ( concodeclass_ring . rows ) ; for ( ArrayList < C > loc1 : concodeclass_matrix ) { ArrayList < C > loc2 = new ArrayList < C > ( concodeclass_ring . cols ) ; for ( C loc3 : loc1 ) { C loc4 = loc3 . negate ( ) ; loc2 . add ( loc4 ) ; } loc0 . add ( loc2 ) ; } return new GenMatrix < C > ( concodeclass_ring , loc0 ) ; }"
    },
    {
        "question_id": 336,
        "intent": "foreignable external link",
        "snippet": "ResourceEditPropertyBuilder function ( String arg0 ) { this . concodeclass_fcExternalLink = arg0 ; return this ; }"
    },
    {
        "question_id": 337,
        "intent": "Maps a CQL value to the specified field from an input tuple .",
        "snippet": "FieldSelector function ( final String arg0 ) { return new FieldSelector ( arg0 ) ; }"
    },
    {
        "question_id": 338,
        "intent": "Decides if this response is fresh enough based Last-Modified and Date , if available . This entry is meant to be used when isResponseFresh returns false . The algorithm is as follows : if last-modified and date are defined , freshness lifetime is coefficient date-lastModified , else freshness lifetime is defaultLifetime",
        "snippet": "boolean function ( final HttpCacheEntry arg0 , final Date arg1 , final float arg2 , final long arg3 ) { return ( concodefunc_getCurrentAgeSecs ( arg0 , arg1 ) < concodefunc_getHeuristicFreshnessLifetimeSecs ( arg0 , arg2 , arg3 ) ) ; }"
    },
    {
        "question_id": 339,
        "intent": "Returns true if the underlying map is empty .",
        "snippet": "boolean function ( ) { return concodeclass__map . isEmpty ( ) ; }"
    },
    {
        "question_id": 340,
        "intent": "Return the n'th short down the stack , where 0 is the top element and size -1 is the bottom element .",
        "snippet": "short function ( int arg0 ) { if ( concodeclass_list . isEmpty ( ) ) { throw new EmptyStackException ( ) ; } return concodeclass_list . get ( concodeclass_list . size ( ) - arg0 - 1 ) ; }"
    },
    {
        "question_id": 341,
        "intent": "Clone this .",
        "snippet": "Residue < C > function ( ) { return new Residue < C > ( concodeclass_ring , concodeclass_val ) ; }"
    },
    {
        "question_id": 342,
        "intent": "Helper method to get PartitionOutgoingBatch based on the index since we may have more then one Partitioner As number of Partitioners should be very small AND this method it used very rarely , so it is OK to loop in order to find right partitioner",
        "snippet": "PartitionOutgoingBatch function ( int arg0 ) { for ( Partitioner loc0 : concodeclass_partitioners ) { PartitionOutgoingBatch loc1 = loc0 . getOutgoingBatch ( arg0 ) ; if ( loc1 != null ) { return loc1 ; } } return null ; }"
    },
    {
        "question_id": 343,
        "intent": "Sets the main window of the GUIRunner .",
        "snippet": "void function ( GUIRunner arg0 ) { this . concodeclass_runner = arg0 ; }"
    },
    {
        "question_id": 344,
        "intent": "This method creates the timer to be used , if one is desired to be used . It will also set the number of seconds for each turn .",
        "snippet": "void function ( int arg0 , int arg1 ) { if ( arg0 < 0 ) { concodeclass_isTimerRunning = false ; } else { concodeclass_isTimerRunning = true ; concodeclass_theTimer = new Timer ( ) ; } }"
    },
    {
        "question_id": 345,
        "intent": "Whether this is a smartmachine or virtualmachine dataset",
        "snippet": "Type function ( ) { return concodeclass_type ; }"
    },
    {
        "question_id": 346,
        "intent": "Check if a replacing cast function is available for the the original function",
        "snippet": "boolean function ( String arg0 , MinorType arg1 ) { return ( arg1 == MinorType . VARCHAR || arg1 == MinorType . VARBINARY || arg1 == MinorType . VAR16CHAR ) && concodeclass_CAST_FUNC_REPLACEMENT_NEEDED . contains ( arg0 ) ; }"
    },
    {
        "question_id": 347,
        "intent": "Initiates the following asynchronous state transitions : unrealized - > realizing - > realized - > prefetching - > prefetched realizing - > realized - > prefetching - > prefetched realized - > prefetching - > prefetched prefetching - > prefetched prefetched started - > throws IllegalStateException closed - > throws IllegalStateException",
        "snippet": "void function ( ) { switch ( concodefunc_getState ( ) ) { case CLOSED : throw new IllegalStateException ( \"srini_string\" ) ; case STARTED : throw new IllegalStateException ( \"srini_string\" ) ; } concodefunc_setTargetState ( PREFETCHED ) ; }"
    },
    {
        "question_id": 348,
        "intent": "Called when a given source is about to become the active source . This gives subclasses the abilty to retrieve resources , if appropriate .",
        "snippet": "void function ( RandomAccessSource arg0 ) { }"
    },
    {
        "question_id": 349,
        "intent": "Send an event to the processor . the event will be queued to be processed after any prior events are processed , once processing actually starts . If an event 's processing causes an exception , it will be added to any previous exceptions as a suppressed exception . Once all the currently queued events have been processed , a single exception will be thrown .",
        "snippet": "void function ( final T arg0 ) { synchronized ( concodeclass_queuedEvents ) { concodeclass_queuedEvents . addLast ( arg0 ) ; if ( ! concodeclass_started || concodeclass_isProcessing ) { return ; } concodeclass_isProcessing = true ; } concodefunc_processEvents ( ) ; }"
    },
    {
        "question_id": 350,
        "intent": "Returns cache data in list form .",
        "snippet": "List < UserAccount > function ( ) { List < UserAccount > loc0 = new ArrayList < > ( ) ; Node loc1 = concodeclass_head ; while ( loc1 != null ) { loc0 . add ( loc1 . userAccount ) ; loc1 = loc1 . next ; } return loc0 ; }"
    },
    {
        "question_id": 351,
        "intent": "Retrieves the name of the cache",
        "snippet": "String function ( ) { return concodeclass_cacheName ; }"
    },
    {
        "question_id": 352,
        "intent": "Generate LinearLayout with given title",
        "snippet": "LinearLayout function ( Context arg0 , String arg1 , View arg2 , TextView arg3 ) { LinearLayout loc0 = new LinearLayout ( arg0 ) ; loc0 . setOrientation ( LinearLayout . VERTICAL ) ; if ( arg3 == null ) arg3 = new TextView ( arg0 ) ; arg3 . setTextSize ( 10.0f ) ; arg3 . setText ( arg1 ) ; loc0 . addView ( arg3 ) ; loc0 . addView ( arg2 ) ; return loc0 ; }"
    },
    {
        "question_id": 353,
        "intent": "Returns the next object in the collection . If at the end of the collection , return the first element .",
        "snippet": "Object function ( ) { if ( concodeclass_collection . size ( ) == 0 ) { throw new NoSuchElementException ( \"srini_string\" ) ; } if ( concodeclass_iterator . hasNext ( ) == false ) { concodefunc_reset ( ) ; } return concodeclass_iterator . next ( ) ; }"
    },
    {
        "question_id": 354,
        "intent": "Setzt die verwendeten OverlayAdapter",
        "snippet": "void function ( List < OverlayAdapter > arg0 ) { this . concodeclass_adapters = arg0 ; }"
    },
    {
        "question_id": 355,
        "intent": "Makes sure that the upcomingRelease is initialized",
        "snippet": "Integer function ( ) { if ( concodeclass_upcomingReleaseId == null ) { this . concodeclass_upcomingReleaseId = concodeclass_dependencyResolverService . findMostRelevantRelease ( new TreeSet < ReleaseEntity > ( concodefunc_getAllReleases ( ) ) , new Date ( ) ) . getId ( ) ; } return concodeclass_upcomingReleaseId ; }"
    },
    {
        "question_id": 356,
        "intent": "In Ehcache we default to minimal puts since this should have minimal to no affect on unclustered users , and has great benefit for clustered users .",
        "snippet": "boolean function ( ) { return true ; }"
    },
    {
        "question_id": 357,
        "intent": "Returns an icon stored in the file at the specified path relative to the specified class",
        "snippet": "ImageIcon function ( Class arg0 , String arg1 ) { return getIcon ( concodefunc_getImage ( arg0 , arg1 ) ) ; }"
    },
    {
        "question_id": 358,
        "intent": "Return the current limit of this Accountant .",
        "snippet": "long function ( ) { return concodeclass_allocationLimit . get ( ) ; }"
    },
    {
        "question_id": 359,
        "intent": "Find a Widget , using the given Matcher to determine whether a given widget in the hierarchy under the given root is the desired one .",
        "snippet": "Widget function ( Widget arg0 , Matcher arg1 ) { concodeclass_dbComparisons = 0 ; Hierarchy loc0 = arg0 != null ? new SingleWidgetHierarchy ( arg0 ) : concodefunc_getHierarchy ( ) ; return find ( loc0 , arg1 ) ; }"
    },
    {
        "question_id": 360,
        "intent": "Returns the document with the buffer contents . Whitespace variables are decorated with comments .",
        "snippet": "IDocument function ( ) { concodefunc_checkState ( ) ; return concodeclass_fDocument ; }"
    },
    {
        "question_id": 361,
        "intent": "Generates a field selection based on a list of fields . Assumes that a partial path a.b is equivalent to a.b.",
        "snippet": "FieldSelection function ( List < SchemaPath > arg0 ) { if ( concodefunc_containsStar ( arg0 ) ) { return concodeclass_ALL_VALID ; } else { FieldSelection loc0 = new FieldSelection ( ) ; for ( SchemaPath loc1 : arg0 ) { loc0 . add ( loc1 . getRootSegment ( ) ) ; } return loc0 . fixNodes ( ) ; } }"
    },
    {
        "question_id": 362,
        "intent": "Creates the jdbc template bean that we use to invoke SQL queries via JDBC .",
        "snippet": "NamedParameterJdbcTemplate function ( DataSource arg0 ) { return new NamedParameterJdbcTemplate ( arg0 ) ; }"
    },
    {
        "question_id": 363,
        "intent": "Adds a list of writable .",
        "snippet": "void function ( final List < Writable > arg0 ) { concodeclass_queue . addAll ( arg0 ) ; }"
    },
    {
        "question_id": 364,
        "intent": "Implementation used to respond to SASL tokens from server .",
        "snippet": "void function ( Callback [ ] arg0 ) { for ( Callback loc0 : arg0 ) { concodeclass_LOG . info ( \"srini_string\" , loc0 . getClass ( ) ) ; } }"
    },
    {
        "question_id": 365,
        "intent": "Get the current time for use in a preauth response . If allow_unauth_time is true and the library has been configured to allow it , the current time will be offset using unauthenticated timestamp information received from the KDC in the preauth-required error , if one has been received . Otherwise , the timestamp in a preauth-required error will only be used if it is protected by a FAST channel . Only set allow_unauth_time if using an unauthenticated time offset would not create a security issue .",
        "snippet": "KerberosTime function ( ) { return KerberosTime . now ( ) ; }"
    },
    {
        "question_id": 366,
        "intent": "Following method is main executor",
        "snippet": "void function ( final String ... arg0 ) { concodeclass_fileLoggerModule . printString ( \"srini_string\" ) ; concodeclass_fileLoggerModule . printErrorString ( \"srini_string\" ) ; concodeclass_consoleLoggerModule . printString ( \"srini_string\" ) ; concodeclass_consoleLoggerModule . printErrorString ( \"srini_string\" ) ; }"
    },
    {
        "question_id": 367,
        "intent": "Filters the given set of Asset s by removing all vendor assets .",
        "snippet": "Set < Asset > function ( Set < Asset > arg0 ) { Set < Asset > loc0 = new LinkedHashSet < Asset > ( ) ; for ( Asset loc1 : arg0 ) { if ( loc1 . isNotVendor ( ) ) { loc0 . add ( loc1 ) ; } } return loc0 ; }"
    },
    {
        "question_id": 368,
        "intent": "Adds new Employee",
        "snippet": "void function ( ) { try { concodeclass_tx . begin ( ) ; concodeclass_em . persist ( concodefunc_createEmployee ( \"srini_string\" , \"srini_string\" , 100 ) ) ; concodeclass_tx . commit ( ) ; } catch ( Exception loc0 ) { throw new Exception ( \"srini_string\" ) ; } }"
    },
    {
        "question_id": 369,
        "intent": "Uses a private key to sign data in a CMS SignedData structure and returns the encoded CMS SignedData as bytes . Selected when public key encryption is used . The eContentType field for the inner type SignedData when unencrypted is id-pkinit-rkeyData 1.3.6.1.5.2.3.3 and the eContent field contains the DER encoding of the type ReplyKeyPack .",
        "snippet": "byte [ ] function ( PrivateKey arg0 , X509Certificate arg1 , ReplyKeyPack arg2 ) { byte [ ] loc0 = KrbCodec . encode ( arg2 ) ; byte [ ] loc1 ; try { loc1 = PkiUtil . getSignedData ( arg0 , arg1 , loc0 , concodeclass_ID_PKINIT_AUTHDATA ) ; } catch ( PkiException loc2 ) { throw new KrbException ( \"srini_string\" , loc2 ) ; } return loc1 ; }"
    },
    {
        "question_id": 370,
        "intent": "Adds key - > value pair to BSON object from specified Map",
        "snippet": "void function ( Map < String , Object > arg0 ) { for ( Map . Entry < String , Object > loc0 : arg0 . entrySet ( ) ) { concodefunc_put ( loc0 . getKey ( ) , loc0 . getValue ( ) ) ; } }"
    },
    {
        "question_id": 371,
        "intent": "Escape the user-provided extra string for the ext = '' '' header attribute . Hawk escapes the header ext = '' '' attribute differently than it does the extra line in the normalized request string . See https://github.com/hueniverse/hawk/blob/871cc597973110900467bd3dfb84a3c892f678fb/lib/browser.js#L385 .",
        "snippet": "String function ( String arg0 ) { return arg0 . replaceAll ( \"srini_string\" , \"srini_string\" ) . replaceAll ( \"srini_string\" | \"srini_string\" ) ; }"
    },
    {
        "question_id": 372,
        "intent": "Open bracket .",
        "snippet": "StatementBuilder function ( ) { this . concodeclass_builder . append ( \"srini_string\" ) ; return this ; }"
    },
    {
        "question_id": 373,
        "intent": "Lazily creates the shared mixer instance and returns it . Puts 8 lines into the pool .",
        "snippet": "Mixer function ( ) { if ( concodeclass_mixer == null ) { concodeclass_mixer = ( Mixer ) AudioSystem . getMixer ( AudioSystem . getMixerInfo ( ) [ 0 ] ) ; SourceDataLine [ ] loc0 = new SourceDataLine [ 16 ] ; for ( int loc1 = 0 ; loc1 < 16 ; loc1 ++ ) { loc0 [ loc1 ] = concodefunc_aquireLine ( ) ; } for ( int loc1 = 0 ; loc1 < 16 ; loc1 ++ ) { concodefunc_poolLine ( loc0 [ loc1 ] ) ; } } return concodeclass_mixer ; }"
    },
    {
        "question_id": 374,
        "intent": "Determine if the given class implements the given interface .",
        "snippet": "boolean function ( Class arg0 , Class arg1 ) { assert arg1 . isInterface ( ) : \"srini_string\" ; return arg1 . isAssignableFrom ( arg0 ) ; }"
    },
    {
        "question_id": 375,
        "intent": "Returns an unmodifiable version of the given non-null ShortListIterator .",
        "snippet": "ShortListIterator function ( ShortListIterator arg0 ) { if ( null == arg0 ) { throw new NullPointerException ( ) ; } return UnmodifiableShortListIterator . wrap ( arg0 ) ; }"
    },
    {
        "question_id": 376,
        "intent": "Returns a written-back document of object obj as a string .",
        "snippet": "String function ( String arg0 , BackToXMLWritable arg1 ) { ByteArrayOutputStream loc0 = new ByteArrayOutputStream ( ) ; OutputStreamWriter loc1 = new OutputStreamWriter ( loc0 ) ; try { concodefunc_writeBack ( loc1 , arg0 , arg1 ) ; } catch ( IOException loc2 ) { throw new IllegalStateException ( loc2 ) ; } return loc0 . toString ( ) ; }"
    },
    {
        "question_id": 377,
        "intent": "Returns the ID BigInteger",
        "snippet": "BigInteger function ( ) { return concodeclass_bigInt ; }"
    },
    {
        "question_id": 378,
        "intent": "Timing for frame relative to previous frame .",
        "snippet": "long function ( int arg0 ) { return ( ( SEQFrame ) concodeclass_frames_ . elementAt ( arg0 ) ) . getRelTime ( ) ; }"
    },
    {
        "question_id": 379,
        "intent": "Gets Integer value form cursor for column index .",
        "snippet": "Integer function ( @ NonNull Cursor arg0 , int arg1 ) { if ( arg0 . isNull ( arg1 ) ) { return null ; } return arg0 . getInt ( arg1 ) ; }"
    },
    {
        "question_id": 380,
        "intent": "Returns an StubStrategy for a method , given descriptions of the method parameters , exceptions , and return value . Parameter and return value descriptions are `` marshaller abbreviated names '' .",
        "snippet": "StubStrategy function ( String [ ] arg0 , String [ ] arg1 , String [ ] arg2 , String arg3 , ClassLoader arg4 ) { return new StubStrategy ( arg0 , arg1 , arg2 , arg3 , arg4 ) ; }"
    },
    {
        "question_id": 381,
        "intent": "Specifies that the parser produced by this code will expand entity reference nodes . By default the value of this is set to true",
        "snippet": "void function ( boolean arg0 ) { this . concodeclass_expandEntityRef = arg0 ; }"
    },
    {
        "question_id": 382,
        "intent": "creates a new dummy edge to be used in the graph",
        "snippet": "Edge function ( Node arg0 , Node arg1 ) { boolean loc0 ; DummyEdgePart loc1 = new DummyEdgePart ( ) ; Edge loc2 = new Edge ( loc1 , arg0 , arg1 ) ; loc2 . weight = 2 ; concodeclass_edgeList . add ( loc2 ) ; arg1 = arg0 ; loc0 = true ; return loc2 ; }"
    },
    {
        "question_id": 383,
        "intent": "Return all columns ' metadata .",
        "snippet": "ColumnMetaData [ ] function ( ) { ColumnMetaData [ ] loc0 = new ColumnMetaData [ concodeclass_columnCount ] ; for ( int loc1 = 0 ; loc1 < concodeclass_columnCount ; loc1 ++ ) loc0 [ loc1 ] = concodeclass_columns [ loc1 ] . metaData ; return loc0 ; }"
    },
    {
        "question_id": 384,
        "intent": "BigDecimal parse from Reader .",
        "snippet": "BigDecimal function ( Reader arg0 ) { throw new RuntimeException ( \"srini_string\" ) ; }"
    },
    {
        "question_id": 385,
        "intent": "Returns a URL pointing to the JAR file .",
        "snippet": "URL function ( ) { final URL loc0 = AgentJar . class . getResource ( concodeclass_RESOURCE ) ; if ( loc0 == null ) { throw new AssertionError ( concodeclass_ERRORMSG ) ; } return loc0 ; }"
    },
    {
        "question_id": 386,
        "intent": "Calculates the dominance frontier for a cfg and notifies the blocks in it appropriately .",
        "snippet": "void function ( final FlowGraph arg0 , boolean arg1 ) { if ( ! arg1 ) { DominanceFrontier . calcFrontier ( arg0 . source ( ) , arg0 , arg1 ) ; } else { DominanceFrontier . calcFrontier ( arg0 . sink ( ) , arg0 , arg1 ) ; } }"
    },
    {
        "question_id": 387,
        "intent": "Create a simple Dialog with an ` OK ' button and a message .",
        "snippet": "Dialog function ( Activity arg0 , String arg1 ) { return ( new AlertDialog . Builder ( arg0 ) ) . setMessage ( arg1 ) . setNeutralButton ( android . R . string . ok , null ) . create ( ) ; }"
    },
    {
        "question_id": 388,
        "intent": "Finds files with mixed line delimiters .",
        "snippet": "IResource [ ] function ( final IResource arg0 ) { Assert . fail ( \"srini_string\" ) ; return new IResource [ 0 ] ; }"
    },
    {
        "question_id": 389,
        "intent": "Tests if two types are assign compatible . Void types are never compatible .",
        "snippet": "boolean function ( ITypeBinding arg0 , ITypeBinding arg1 ) { TypeEnvironment loc0 = new TypeEnvironment ( false , true ) ; TType loc1 = loc0 . create ( arg1 ) ; TType loc2 = loc0 . create ( arg0 ) ; return loc2 . canAssignTo ( loc1 ) ; }"
    },
    {
        "question_id": 390,
        "intent": "Implement a hash code for this comparator that is consistent with #equals Object equals .",
        "snippet": "int function ( ) { return \"srini_string\" . hashCode ( ) ; }"
    },
    {
        "question_id": 391,
        "intent": "Appends a select clause fragment",
        "snippet": "void function ( String arg0 ) { if ( this . concodeclass_selectClause . length ( ) > 0 ) { this . concodeclass_selectClause . append ( \"srini_string\" ) ; this . concodeclass_guesstimatedBufferSize += 2 ; } this . concodeclass_selectClause . append ( arg0 ) ; this . concodeclass_guesstimatedBufferSize += arg0 . length ( ) ; }"
    },
    {
        "question_id": 392,
        "intent": "Log an error with warn log level .",
        "snippet": "void function ( Object arg0 , Throwable arg1 ) { if ( concodefunc_isLevelEnabled ( MemoryLog . LOG_LEVEL_WARN ) ) { concodefunc_log ( MemoryLog . LOG_LEVEL_WARN , arg0 , arg1 ) ; } }"
    },
    {
        "question_id": 393,
        "intent": "De-register the agent again .",
        "snippet": "Void function ( ) { concodeclass_server . unregisterMBean ( concodeclass_name ) ; return null ; }"
    },
    {
        "question_id": 394,
        "intent": "Should this JoinSequence use theta-style joining both a FROM and WHERE component in the rendered SQL ?",
        "snippet": "JoinSequence function ( boolean arg0 ) { this . concodeclass_useThetaStyle = arg0 ; return this ; }"
    },
    {
        "question_id": 395,
        "intent": "Gets the value of the owner property .",
        "snippet": "Owner function ( ) { return concodeclass_owner ; }"
    },
    {
        "question_id": 396,
        "intent": "Create a widget-relative hover info instance .",
        "snippet": "IHoverInfo function ( Widget arg0 , int arg1 , int arg2 ) { return new WidgetRelativeHoverInfo ( arg0 , arg1 , arg2 ) ; }"
    },
    {
        "question_id": 397,
        "intent": "Returns the menu that is current being shown .",
        "snippet": "Menu function ( ) { return concodeclass_mMenu ; }"
    },
    {
        "question_id": 398,
        "intent": "Called when the renderer is stopped . The default implementation is a no-op .",
        "snippet": "void function ( ) { }"
    },
    {
        "question_id": 399,
        "intent": "Removes the equivalent person from the address book .",
        "snippet": "void function ( ReadOnlyPerson arg0 ) { concodeclass_allPersons . remove ( arg0 ) ; }"
    },
    {
        "question_id": 400,
        "intent": "Returns the undo change of the change performed by this operation . Returns null if the change has n't been performed yet or if the change does n't provide a undo .",
        "snippet": "Change function ( ) { return concodeclass_fUndoChange ; }"
    },
    {
        "question_id": 401,
        "intent": "Mark a Task as done for now , just delete the task .",
        "snippet": "int function ( Long arg0 ) { return concodeclass_context . getContentResolver ( ) . delete ( UriUtils . buildTaskWithId ( arg0 ) , null , null ) ; }"
    },
    {
        "question_id": 402,
        "intent": "Expert : Declare a count of items to be written to an array column or a column whose parent is an array .",
        "snippet": "void function ( int arg0 , int arg1 ) { concodeclass_columns [ arg1 ] . writeLength ( arg0 ) ; }"
    },
    {
        "question_id": 403,
        "intent": "Check if the specified node exists . Sets no watches .",
        "snippet": "int function ( ZooKeeper arg0 , String arg1 ) { try { Stat loc0 = arg0 . exists ( arg1 , null ) ; return loc0 != null ? loc0 . getVersion ( ) : - 1 ; } catch ( KeeperException loc0 ) { return - 1 ; } catch ( InterruptedException loc0 ) { Thread . currentThread ( ) . interrupt ( ) ; return - 1 ; } }"
    },
    {
        "question_id": 404,
        "intent": "This method does not return until the display thread is in an `` idle '' state .",
        "snippet": "void function ( ) { waitForIdle ( Display . getDefault ( ) ) ; }"
    },
    {
        "question_id": 405,
        "intent": "Return System properties , extended by any properties specified in hibernate.properties .",
        "snippet": "Properties function ( ) { Properties loc0 = new Properties ( ) ; loc0 . putAll ( concodeclass_GLOBAL_PROPERTIES ) ; return loc0 ; }"
    },
    {
        "question_id": 406,
        "intent": "Sets the array that the ArrayIterator should iterate over . If an array has previously been set using the single-arg constructor or this method then that array is discarded in favour of this one . Iteration is restarted at the start of the new array . Although this can be used to reset iteration , the #reset methodis a more effective choice .",
        "snippet": "void function ( final Object arg0 ) { this . concodeclass_endIndex = Array . getLength ( arg0 ) ; this . concodeclass_startIndex = 0 ; this . concodeclass_array = arg0 ; this . concodeclass_index = 0 ; }"
    },
    {
        "question_id": 407,
        "intent": "Take a path string elements delimited by the ' \\ ' character and break it into tokens . If an element contains the delimeter , it must be escaped . For example : `` Edit/Find \\ \\ / Replace '' tokenizes to `` Edit '' , `` Find/Replace '' .",
        "snippet": "String [ ] function ( String arg0 ) { if ( arg0 == null ) throw new IllegalArgumentException ( \"srini_string\" ) ; return new PathTokenizer ( arg0 ) . tokenize ( ) ; }"
    },
    {
        "question_id": 408,
        "intent": "Removes a Class to Transformer Mapping in the Map .",
        "snippet": "Object function ( Class arg0 ) { return concodeclass_map . remove ( arg0 ) ; }"
    },
    {
        "question_id": 409,
        "intent": "Get the one element .",
        "snippet": "UnivPowerSeries < C > function ( ) { return concodeclass_ONE ; }"
    },
    {
        "question_id": 410,
        "intent": "Access to the intercepted entity name",
        "snippet": "String function ( ) { return concodeclass_entityName ; }"
    },
    {
        "question_id": 411,
        "intent": "Returns the programmer defined property of the receiver with the specified name , or null if it has not been set . Data mappings allow programmers to associate arbitrary key-value pairs with locator instances .",
        "snippet": "String function ( String arg0 ) { if ( arg0 == null ) throw new IllegalArgumentException ( \"srini_string\" ) ; return concodefunc_getDataMap ( ) . get ( arg0 ) ; }"
    },
    {
        "question_id": 412,
        "intent": "NOOP is the default behavior , which means that Kafka will internally handle partition assignment . If you wish to do manual partition management , you must provide an implementation of this method that will check with kafka for any changes and call the ConsumerRebalanceListener from subscribe to inform the rest of the system of those changes .",
        "snippet": "void function ( ) { }"
    },
    {
        "question_id": 413,
        "intent": "Sets the bounds for this TimeLine . A TimeLine must have sensible bounds . Left side must be < = right side .",
        "snippet": "void function ( double arg0 , double arg1 ) { assert ( arg0 <= arg1 ) ; this . concodeclass_leftBound = arg0 ; this . concodeclass_rightBound = arg1 ; concodefunc_fireBoundsChangeEvent ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 414,
        "intent": "Create a new user interface context .",
        "snippet": "IUIContext function ( Display arg0 ) { IUIContext loc0 = createContext ( IUIContext . class , arg0 ) ; return loc0 ; }"
    },
    {
        "question_id": 415,
        "intent": "Inverse . L is a list . The inverse of L is returned . The list L is modified .",
        "snippet": "LIST < C > function ( LIST < C > arg0 ) { if ( concodefunc_isNull ( arg0 ) ) { return arg0 ; } Collections . reverse ( arg0 . list ) ; return arg0 ; }"
    },
    {
        "question_id": 416,
        "intent": "Determine if any open editors are `` dirty '' .",
        "snippet": "boolean function ( ) { final boolean loc0 [ ] = new boolean [ ] { false } ; Display . getDefault ( ) . syncExec ( new Runnable ( ) { public void run ( ) { loc0 [ 0 ] = concodefunc_anyUnsavedChanges0 ( ) ; } } ) ; return loc0 [ 0 ] ; }"
    },
    {
        "question_id": 417,
        "intent": "Default implementation that simply throws a WaitTimedOutException .",
        "snippet": "void function ( ICondition arg0 ) { throw new WaitTimedOutException ( Diagnostic . toString ( \"srini_string\" , arg0 ) ) ; }"
    },
    {
        "question_id": 418,
        "intent": "This method returns the list of Sub-Coordinators , which is maintained by MetricStorage .",
        "snippet": "HashMap < BigDecimal , MetricsSubCoordinatorInfo > function ( ) { return concodeclass_listOfSubCoordinators ; }"
    },
    {
        "question_id": 419,
        "intent": "Singleton retrieval method .",
        "snippet": "IAnnotationCreator function ( ) { if ( AnnotationCreatorBubble . instance == null ) { AnnotationCreatorBubble . instance = new AnnotationCreatorBubble ( ) ; } return AnnotationCreatorBubble . instance ; }"
    },
    {
        "question_id": 420,
        "intent": "Gets the number of accounts in the bank .",
        "snippet": "int function ( ) { return concodeclass_accounts . length ; }"
    },
    {
        "question_id": 421,
        "intent": "List all filles .",
        "snippet": "void function ( ) { for ( String loc0 : concodeclass_files ) { int loc1 = concodeclass_files . indexOf ( loc0 ) ; System . out . println ( ( loc1 + 1 ) + \"srini_string\" + concodeclass_files . get ( loc1 ) ) ; } }"
    },
    {
        "question_id": 422,
        "intent": "Returns the parent tag for this tag .",
        "snippet": "Tag function ( ) { return this . concodeclass_parent ; }"
    },
    {
        "question_id": 423,
        "intent": "Returns an Environment not linked to a storage instance , butpopulated with current field values .",
        "snippet": "Environment function ( ProfileInformationProvider arg0 , ConfigurationProvider arg1 ) { Environment loc0 = new Environment ( ) { @ Override public int register ( ) { return 0 ; } } ; concodefunc_populateEnvironment ( loc0 , arg0 , arg1 ) ; return loc0 ; }"
    },
    {
        "question_id": 424,
        "intent": "Trigger removal of a resource to an index Note : the actual operation is performed in background",
        "snippet": "void function ( String arg0 , IPath arg1 ) { IIndex loc0 = concodefunc_getIndex ( arg1 , false ) ; if ( loc0 != null ) loc0 . remove ( arg0 ) ; }"
    },
    {
        "question_id": 425,
        "intent": "Set this label as a major tick .",
        "snippet": "void function ( final boolean arg0 ) { this . concodeclass_m_isMajorTick = arg0 ; }"
    },
    {
        "question_id": 426,
        "intent": "Right Groebner base using pairlist class .",
        "snippet": "List < GenSolvablePolynomial < C >> function ( int arg0 , List < GenSolvablePolynomial < C >> arg1 ) { if ( arg0 == 0 ) { return concodeclass_sbb . rightGB ( arg0 , arg1 ) ; } throw new RuntimeException ( \"srini_string\" ) ; }"
    },
    {
        "question_id": 427,
        "intent": "Get the component interceptor factory map .",
        "snippet": "Map < Method , InterceptorFactory > function ( ) { return concodeclass_componentInterceptors ; }"
    },
    {
        "question_id": 428,
        "intent": "Reads the next byte as an unsigned value .",
        "snippet": "int function ( ) { return ( concodeclass_data [ concodeclass_position ++ ] & 0xFF ) ; }"
    },
    {
        "question_id": 429,
        "intent": "Set the started status .",
        "snippet": "void function ( boolean arg0 ) { concodeclass_started_ = arg0 ; }"
    },
    {
        "question_id": 430,
        "intent": "Parses the UUID from a PSSH atom . The UUID is only parsed if the data is a valid PSSH atom .",
        "snippet": "UUID function ( byte [ ] arg0 ) { ParsableByteArray loc0 = new ParsableByteArray ( arg0 ) ; if ( ! concodefunc_isPsshAtom ( loc0 , null ) ) { return null ; } loc0 . setPosition ( Atom . FULL_HEADER_SIZE ) ; return new UUID ( loc0 . readLong ( ) , loc0 . readLong ( ) ) ; }"
    },
    {
        "question_id": 431,
        "intent": "Write the field to a class file .",
        "snippet": "void function ( final DataOutputStream arg0 ) { arg0 . writeShort ( concodeclass_modifiers ) ; arg0 . writeShort ( concodeclass_name ) ; arg0 . writeShort ( concodeclass_type ) ; arg0 . writeShort ( concodeclass_attrs . length ) ; for ( int loc0 = 0 ; loc0 < concodeclass_attrs . length ; loc0 ++ ) { arg0 . writeShort ( concodeclass_attrs [ loc0 ] . nameIndex ( ) ) ; arg0 . writeInt ( concodeclass_attrs [ loc0 ] . length ( ) ) ; concodeclass_attrs [ loc0 ] . writeData ( arg0 ) ; } }"
    },
    {
        "question_id": 432,
        "intent": "Returns a random entry from the given collection . Uses the PRNG used by the simulator . Returns null if the list is empty .",
        "snippet": "E function ( Collection < E > arg0 ) { if ( arg0 instanceof List ) return getRandomEntry ( ( List < E > ) arg0 ) ; if ( arg0 . size ( ) == 0 ) return null ; int loc0 = Simulator . getRandom ( ) . nextInt ( arg0 . size ( ) ) ; for ( E loc1 : arg0 ) { if ( loc0 <= 0 ) return loc1 ; loc0 -- ; } return null ; }"
    },
    {
        "question_id": 433,
        "intent": "Parse Product from Reader . Syntax : p1 ... pn no commas",
        "snippet": "Product < C > function ( Reader arg0 ) { throw new RuntimeException ( \"srini_string\" ) ; }"
    },
    {
        "question_id": 434,
        "intent": "A helper method to create a Change that adds an entry to the class path .",
        "snippet": "Change function ( IJavaProject arg0 , IClasspathEntry arg1 ) { return ClasspathChange . addEntryChange ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 435,
        "intent": "Query if this ring is associative .",
        "snippet": "boolean function ( ) { return concodeclass_ring . isAssociative ( ) ; }"
    },
    {
        "question_id": 436,
        "intent": "Create a condition that tests if the given widget is enabled .",
        "snippet": "IUICondition function ( boolean arg0 ) { return new IsEnabledCondition ( this , arg0 ) ; }"
    },
    {
        "question_id": 437,
        "intent": "Get name .",
        "snippet": "String function ( ) { return concodeclass_name ; }"
    },
    {
        "question_id": 438,
        "intent": "Set the directory into which commited class files should be written .",
        "snippet": "void function ( final File arg0 ) { concodeclass_outputDir = arg0 ; }"
    },
    {
        "question_id": 439,
        "intent": "Add a section without header content .",
        "snippet": "DocumentBuilder function ( int arg0 ) { concodefunc_ensureNotBuilt ( ) ; addSection ( arg0 , new ArrayList < > ( ) ) ; return this ; }"
    },
    {
        "question_id": 440,
        "intent": "Returns an array of SortedMap objects . The SortedMap object key is the ColumnName and the value is the ColumnValue . SortedMap was created using the CASE_INSENSITIVE_ORDER Comparator so the key is the case insensitive representation of the ColumnName .",
        "snippet": "SortedMap [ ] function ( ) { if ( concodeclass_rowMap == null ) { return null ; } return ( SortedMap [ ] ) concodeclass_rowMap . toArray ( new SortedMap [ 0 ] ) ; }"
    },
    {
        "question_id": 441,
        "intent": "Use a strategy that validates that a schema can be read by existing schema s according to the Avro default schema resolution .",
        "snippet": "SchemaValidatorBuilder function ( ) { this . concodeclass_strategy = new ValidateCanBeRead ( ) ; return this ; }"
    },
    {
        "question_id": 442,
        "intent": "Returns a Callable that will retain the stack trace information about where it originated from .",
        "snippet": "Callable < T > function ( final Callable < T > arg0 ) { return new ContextCallable < T > ( arg0 ) ; }"
    },
    {
        "question_id": 443,
        "intent": "Add two durations .",
        "snippet": "Duration function ( Duration arg0 , Duration arg1 ) { concodefunc_checkValid ( arg0 ) ; concodefunc_checkValid ( arg1 ) ; return concodefunc_normalizedDuration ( checkedAdd ( arg0 . getSeconds ( ) , arg1 . getSeconds ( ) ) , checkedAdd ( arg0 . getNanos ( ) , arg1 . getNanos ( ) ) ) ; }"
    },
    {
        "question_id": 444,
        "intent": "Default implementation of mouseup simply releases capture .",
        "snippet": "void function ( Event arg0 ) { concodefunc_release ( ) ; }"
    },
    {
        "question_id": 445,
        "intent": "Returns the name of the class represented by this ClassEditor .",
        "snippet": "String function ( ) { return ( this . concodeclass_classInfo ( ) . name ( ) ) ; }"
    },
    {
        "question_id": 446,
        "intent": "Get default proximity sensor if it exists . Tablet devices e.g. Nexus 7 does not support this type of sensor and false will be retured in such cases .",
        "snippet": "boolean function ( ) { if ( concodeclass_proximitySensor != null ) { return true ; } concodeclass_proximitySensor = concodeclass_sensorManager . getDefaultSensor ( Sensor . TYPE_PROXIMITY ) ; if ( concodeclass_proximitySensor == null ) { return false ; } concodefunc_logProximitySensorInfo ( ) ; return true ; }"
    },
    {
        "question_id": 447,
        "intent": "Returns the suffixed result-set column-aliases for columns making up the key for this collection i.e. , its FK to its owner .",
        "snippet": "String [ ] function ( ) { return concodeclass_keyAliases ; }"
    },
    {
        "question_id": 448,
        "intent": "Indicate if property is in testing mode",
        "snippet": "ResourceEditPropertyBuilder function ( boolean arg0 ) { this . concodeclass_isTesting = arg0 ; return this ; }"
    },
    {
        "question_id": 449,
        "intent": "Factory method to create a typed sorted bag . If there are any elements already in the bag being decorated , they are validated .",
        "snippet": "SortedBag function ( SortedBag arg0 , Class arg1 ) { return new PredicatedSortedBag ( arg0 , InstanceofPredicate . getInstance ( arg1 ) ) ; }"
    },
    {
        "question_id": 450,
        "intent": "Dump out a value .",
        "snippet": "void function ( Asn1Type arg0 ) { Asn1Dumper loc0 = new Asn1Dumper ( ) ; loc0 . dumpType ( 0 , arg0 ) ; String loc1 = loc0 . loc1 ( ) ; System . out . println ( loc1 ) ; }"
    },
    {
        "question_id": 451,
        "intent": "Test method for org.jboss.security.config.SecurityConfiguration #getCipherKey .",
        "snippet": "void function ( ) { SecurityConfiguration . getCipherKey ( ) ; }"
    },
    {
        "question_id": 452,
        "intent": "Locking key state is reported incorrectly .",
        "snippet": "boolean function ( ) { return Platform . isLinux ( ) && Platform . JAVA_VERSION <= 0x1424 ; }"
    },
    {
        "question_id": 453,
        "intent": "Get the collection of Table tables specified in the tableNames with bulk-load if the underlying storageplugin supports . It is not guaranteed that the retrieved tables would have RowType and Statistic being fully populated . Specifically , calling Table #getRowType RelDataTypeFactory or Table #getStatistic might incur UnsupportedOperationException being thrown .",
        "snippet": "List < Pair < String , ? extends Table >> function ( final List < String > arg0 ) { return concodefunc_getTablesByNames ( arg0 ) ; }"
    },
    {
        "question_id": 454,
        "intent": "Compare the two Comparable Comparable arguments.This method is equivalent to : Comparable obj1 . compareTo obj2",
        "snippet": "int function ( Object arg0 , Object arg1 ) { return ( ( Comparable ) arg0 ) . compareTo ( arg1 ) ; }"
    },
    {
        "question_id": 455,
        "intent": "Export ObjectId to plain byte array",
        "snippet": "byte [ ] function ( ) { byte [ ] loc0 = new byte [ 12 ] ; System . arraycopy ( concodeclass_data , 0 , loc0 , 0 , 12 ) ; return loc0 ; }"
    },
    {
        "question_id": 456,
        "intent": "Sets the start point of the subpath .",
        "snippet": "void function ( float arg0 , float arg1 ) { this . concodeclass_startPoint = new Point2D . Float ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 457,
        "intent": "Returns the top symbol from the stack .",
        "snippet": "Symbol function ( ) { return concodeclass_stack [ concodeclass_pos - 1 ] ; }"
    },
    {
        "question_id": 458,
        "intent": "Gets a CRL from a certificate",
        "snippet": "CRL function ( X509Certificate arg0 ) { return CertificateUtil . getCRL ( CertificateUtil . getCRLURL ( arg0 ) ) ; }"
    },
    {
        "question_id": 459,
        "intent": "Get number .",
        "snippet": "int function ( ) { return concodeclass_number ; }"
    },
    {
        "question_id": 460,
        "intent": "Returns the depth of the stack .",
        "snippet": "int function ( ) { return concodeclass_stack . size ( ) ; }"
    },
    {
        "question_id": 461,
        "intent": "Validates that the tags parent is set when adding it as a child",
        "snippet": "void function ( ) { Tag loc0 = new Tag ( \"srini_string\" ) ; Tag loc1 = new Tag ( \"srini_string\" ) ; loc0 . addChild ( loc1 ) ; Assert . assertEquals ( loc0 , loc1 . getParent ( ) ) ; }"
    },
    {
        "question_id": 462,
        "intent": "Compares if the same failures occur",
        "snippet": "boolean function ( List < Check > arg0 , List < Check > arg1 ) { return true ; }"
    },
    {
        "question_id": 463,
        "intent": "Returns the singleton instance of this class . This method is useless for now as all methods are static . It may be used in future if VM-global configuration will be put to the state of the instance . #",
        "snippet": "MathUtil function ( ) { if ( MathUtil . instance == null ) { MathUtil . instance = new MathUtil ( ) ; } return MathUtil . instance ; }"
    },
    {
        "question_id": 464,
        "intent": "Adds common classes to the given archive .",
        "snippet": "void function ( final ClassContainer < T > arg0 ) { concodeclass_LOGGER . debug ( \"srini_string\" ) ; arg0 . addClasses ( JBossPDPServiceBean . class , XACMLTestUtils . class ) ; }"
    },
    {
        "question_id": 465,
        "intent": "Calculate the greatest common divisor .",
        "snippet": "int function ( int arg0 , int arg1 ) { if ( arg0 < 0 ) { arg0 = - arg0 ; } if ( arg1 < 0 ) { arg1 = - arg1 ; } while ( arg1 != 0 ) { int loc0 = arg0 % arg1 ; arg0 = arg1 ; arg1 = loc0 ; } return arg0 ; }"
    },
    {
        "question_id": 466,
        "intent": "Gets the value of the isKeyOptional property .",
        "snippet": "boolean function ( ) { return concodeclass_isKeyOptional ; }"
    },
    {
        "question_id": 467,
        "intent": "Called when an exception is caught in test execution .",
        "snippet": "void function ( Throwable arg0 ) { concodefunc_getMonitor ( ) . exceptionCaught ( arg0 ) ; }"
    },
    {
        "question_id": 468,
        "intent": "Empty the violations list .",
        "snippet": "void function ( ) { concodeclass_violations = new ArrayList < Violation > ( ) ; }"
    },
    {
        "question_id": 469,
        "intent": "Children should override this . The default implementation does nothing .",
        "snippet": "void function ( Object arg0 ) { }"
    },
    {
        "question_id": 470,
        "intent": "Create a join sequence rooted at the given collection .",
        "snippet": "JoinSequence function ( QueryableCollection arg0 , String arg1 ) { JoinSequence loc0 = concodefunc_createJoinSequence ( ) ; loc0 . setRoot ( arg0 , arg1 ) ; loc0 . setUseThetaStyle ( true ) ; return loc0 ; }"
    },
    {
        "question_id": 471,
        "intent": "Locate a Hibernate @linkplain BasicType basic type given one of its registration names .",
        "snippet": "BasicType function ( String arg0 ) { return concodeclass_basicTypeRegistry . getRegisteredType ( arg0 ) ; }"
    },
    {
        "question_id": 472,
        "intent": "Start synchronizing , calling delegate 's callback methods .",
        "snippet": "void function ( Context arg0 , SynchronizerDelegate arg1 ) { this . concodeclass_synchronizerDelegate = arg1 ; this . concodeclass_session = concodefunc_newSynchronizerSession ( ) ; this . concodeclass_session . init ( arg0 , concodeclass_bundleA , concodeclass_bundleB ) ; }"
    },
    {
        "question_id": 473,
        "intent": "Create a path String that identifies this tree item with respect to its parent 's e.g. `` Java/Project ''",
        "snippet": "String function ( TreeItem arg0 ) { String loc0 = TextUtils . escapeSlashes ( arg0 . getText ( ) ) ; for ( TreeItem loc1 = arg0 . getParentItem ( ) ; loc1 != null ; loc1 = loc1 . getParentItem ( ) ) { loc0 = loc1 . getText ( ) + '/' + loc0 ; } return loc0 ; }"
    },
    {
        "question_id": 474,
        "intent": "Removes the value at the top of this stack and returns it .",
        "snippet": "float function ( ) { if ( concodeclass_list . isEmpty ( ) ) { throw new EmptyStackException ( ) ; } return concodeclass_list . removeElementAt ( concodeclass_list . size ( ) - 1 ) ; }"
    },
    {
        "question_id": 475,
        "intent": "length returns the length of this list .",
        "snippet": "int function ( ) { return concodeclass_size ; }"
    },
    {
        "question_id": 476,
        "intent": "Creates a Closure that will invoke a specific method on the closure 's input object by reflection .",
        "snippet": "Closure function ( String arg0 , Class [ ] arg1 , Object [ ] arg2 ) { return concodefunc_asClosure ( InvokerTransformer . getInstance ( arg0 , arg1 , arg2 ) ) ; }"
    },
    {
        "question_id": 477,
        "intent": "Gets the field type at the specified index .",
        "snippet": "DurationFieldType function ( int arg0 ) { return getPeriodType ( ) . getFieldType ( arg0 ) ; }"
    },
    {
        "question_id": 478,
        "intent": "Getter for the cell width",
        "snippet": "float function ( ) { return concodeclass_width ; }"
    },
    {
        "question_id": 479,
        "intent": "Sets the current attribute value and adds the attribute if it 's not null to the attribute map .",
        "snippet": "void function ( final String arg0 ) { if ( null != this . concodeclass_currentAttr ) { if ( concodeclass_isHtml ) { concodeclass_attr . put ( this . concodeclass_currentAttr . toLowerCase ( ) , arg0 ) ; } else { concodeclass_attr . put ( this . concodeclass_currentAttr , arg0 ) ; } this . concodeclass_currentAttr = null ; } }"
    },
    {
        "question_id": 480,
        "intent": "Create an Iterator Iterator wrappingthe specified FloatIterator FloatIterator . When the given iterator is null , returns null .",
        "snippet": "Iterator function ( FloatIterator arg0 ) { return null == arg0 ? null : new FloatIteratorIterator ( arg0 ) ; }"
    },
    {
        "question_id": 481,
        "intent": "Returns the basic block in which this Node resides .",
        "snippet": "Block function ( ) { Node loc0 = this ; while ( loc0 != null ) { if ( loc0 instanceof Tree ) { return ( ( Tree ) loc0 ) . block ( ) ; } loc0 = loc0 . parent ; } throw new RuntimeException ( this + \"srini_string\" ) ; }"
    },
    {
        "question_id": 482,
        "intent": "Verifies if the class of the elements returned by OrderedUnorderedListItem #end is a ListItem .",
        "snippet": "void function ( ) { final List < Element > loc0 = concodeclass_li . end ( concodeclass_workerContextImpl , new Tag ( \"srini_string\" ) , concodeclass_currentContent ) ; Assert . assertTrue ( loc0 . get ( 0 ) instanceof ListItem ) ; }"
    },
    {
        "question_id": 483,
        "intent": "Prior to 1.4.1 , hierarchy events are only sent if listeners are added to a given component .",
        "snippet": "boolean function ( ) { return Platform . JAVA_VERSION < Platform . JAVA_1_4 ; }"
    },
    {
        "question_id": 484,
        "intent": "Returns a String represntation of this stack .",
        "snippet": "String function ( ) { return concodeclass_stack . toString ( ) ; }"
    },
    {
        "question_id": 485,
        "intent": "The default action executed from the visit methods . This returns the default value provided at the construction time .",
        "snippet": "R function ( ) { return concodeclass_defaultValue ; }"
    },
    {
        "question_id": 486,
        "intent": "Checks if two subsequent characters in a String are are the higher and the lower character in a surrogate pair and therefore eligible for conversion to a UTF 32 character .",
        "snippet": "boolean function ( final String arg0 , final int arg1 ) { if ( arg1 < 0 || arg1 > arg0 . length ( ) - 2 ) return false ; return concodefunc_isSurrogateHigh ( arg0 . charAt ( arg1 ) ) && concodefunc_isSurrogateLow ( arg0 . charAt ( arg1 + 1 ) ) ; }"
    },
    {
        "question_id": 487,
        "intent": "Writes the text to the given file , overwriting the previous file if it existed .",
        "snippet": "void function ( File arg0 , String arg1 ) { write ( arg0 , arg1 , false ) ; }"
    },
    {
        "question_id": 488,
        "intent": "Returns the `` caller block '' for a given `` return block '' .",
        "snippet": "Block function ( final Block arg0 ) { for ( int loc0 = 0 ; loc0 < concodeclass_paths . size ( ) ; loc0 ++ ) { final Block [ ] loc1 = ( Block [ ] ) concodeclass_paths . get ( loc0 ) ; if ( loc1 [ 1 ] == arg0 ) { return loc1 [ 0 ] ; } } return null ; }"
    },
    {
        "question_id": 489,
        "intent": "Comparison with any other object .",
        "snippet": "boolean function ( Object arg0 ) { if ( ! ( arg0 instanceof BigDecimal ) ) { return false ; } BigDecimal loc0 = ( BigDecimal ) arg0 ; return concodeclass_val . equals ( loc0 . val ) ; }"
    },
    {
        "question_id": 490,
        "intent": "Computes the bounding rectangle for this line segment . The rectangle has a rotation 0 degrees with respect to the coordinate system that the line system is in . For example , if a line segment is 5 unit long and sits at a 37 degree angle from horizontal , the bounding rectangle will have origin of the lower left hand end point of the segment , with width = 4 and height = 3 .",
        "snippet": "Rectangle2D . Float function ( ) { float loc0 = concodefunc_getStartPoint ( ) . get ( Vector . I1 ) ; float loc1 = concodefunc_getStartPoint ( ) . get ( Vector . I2 ) ; float loc2 = concodefunc_getEndPoint ( ) . get ( Vector . I1 ) ; float loc3 = concodefunc_getEndPoint ( ) . get ( Vector . I2 ) ; return new Rectangle2D . Float ( Math . min ( loc0 , loc2 ) , Math . min ( loc1 , loc3 ) , Math . abs ( loc2 - loc0 ) , Math . abs ( loc3 - loc1 ) ) ; }"
    },
    {
        "question_id": 491,
        "intent": "Returns true , if the timespan of the Interpolator has elapsed since initialize was called .",
        "snippet": "boolean function ( long arg0 ) { return concodeclass_timespan <= arg0 - concodeclass_startTime ; }"
    },
    {
        "question_id": 492,
        "intent": "Gets the value of the properties property . This accessor method returns a reference to the live list , not a snapshot . Therefore any modification you make to the returned list will be present inside the JAXB object . This is why there is not a set method for the properties property . For example , to add a new item , do as follows : getProperties . add newItem ; Objects of the following type s are allowed in the list PropertyDeclaration",
        "snippet": "List < PropertyDeclaration > function ( ) { if ( concodeclass_properties == null ) { concodeclass_properties = new ArrayList < PropertyDeclaration > ( ) ; } return this . concodeclass_properties ; }"
    },
    {
        "question_id": 493,
        "intent": "Create an IntListIterator IntListIterator wrappingthe specified ListIterator ListIterator . When the given iterator is null , returns null .",
        "snippet": "IntListIterator function ( ListIterator arg0 ) { return null == arg0 ? null : new ListIteratorIntListIterator ( arg0 ) ; }"
    },
    {
        "question_id": 494,
        "intent": "Create an ByteListIterator ByteListIterator wrappingthe specified ListIterator ListIterator . When the given iterator is null , returns null .",
        "snippet": "ByteListIterator function ( ListIterator arg0 ) { return null == arg0 ? null : new ListIteratorByteListIterator ( arg0 ) ; }"
    },
    {
        "question_id": 495,
        "intent": "Returns true if any child iterator has remaining elements .",
        "snippet": "boolean function ( ) { concodefunc_start ( ) ; return concodefunc_anyValueSet ( concodeclass_valueSet ) || concodefunc_anyHasNext ( concodeclass_iterators ) ; }"
    },
    {
        "question_id": 496,
        "intent": "returns the result of rotating this vector around a freely chosen axis and origin",
        "snippet": "VectorXYZ function ( double arg0 , VectorXYZ arg1 , VectorXYZ arg2 ) { VectorXYZ loc0 = this . concodefunc_subtract ( arg1 ) ; loc0 = loc0 . rotateVec ( arg0 , arg2 ) ; loc0 = loc0 . add ( arg1 ) ; return loc0 ; }"
    },
    {
        "question_id": 497,
        "intent": "Starts the clock . Does nothing if the clock is already started .",
        "snippet": "void function ( ) { if ( ! concodeclass_started ) { concodeclass_started = true ; concodeclass_deltaUs = concodefunc_elapsedRealtimeMinus ( concodeclass_positionUs ) ; } }"
    },
    {
        "question_id": 498,
        "intent": "Return the relevant ClassLoader to use as a Map key for this request . If there is a thread context class loader , return that ; otherwise , return the class loader that loaded this class .",
        "snippet": "ClassLoader function ( ) { ClassLoader loc0 = Thread . currentThread ( ) . getContextClassLoader ( ) ; if ( loc0 == null ) { loc0 = CatalogFactory . class . getClassLoader ( ) ; } return loc0 ; }"
    },
    {
        "question_id": 499,
        "intent": "Sets the bookmarks . The list structure is defined in SimpleBookmark # .",
        "snippet": "void function ( List < HashMap < String , Object >> arg0 ) { concodeclass_fc . setOutlines ( arg0 ) ; }"
    },
    {
        "question_id": 500,
        "intent": "Asserts that any string parameter is set .",
        "snippet": "void function ( Object arg0 ) { if ( arg0 == null ) { throw new XMPException ( \"srini_string\" , XMPError . BADPARAM ) ; } else if ( ( arg0 instanceof String ) && ( ( String ) arg0 ) . length ( ) == 0 ) { throw new XMPException ( \"srini_string\" , XMPError . BADPARAM ) ; } }"
    },
    {
        "question_id": 501,
        "intent": "Invokes the underlying ListIterator #add Object method .",
        "snippet": "void function ( Object arg0 ) { concodefunc_getListIterator ( ) . add ( arg0 ) ; }"
    },
    {
        "question_id": 502,
        "intent": "transfers from right to left",
        "snippet": "T [ ] function ( T [ ] arg0 , T [ ] arg1 , int arg2 , boolean arg3 ) { return ArrayTool . transferValues ( arg0 , arg1 , arg2 , arg1 . length , arg3 ) ; }"
    },
    {
        "question_id": 503,
        "intent": "Update entity inside transaction .",
        "snippet": "boolean function ( @ NonNull Class < T > arg0 , T arg1 ) { AbstractModel < T > loc0 = concodefunc_getModelInstanceOrThrow ( arg0 ) ; return loc0 . updateInTx ( concodeclass_helper . getWritableDatabase ( ) , arg1 ) ; }"
    },
    {
        "question_id": 504,
        "intent": "Liefert den Player",
        "snippet": "Player function ( ) { return concodeclass_player ; }"
    },
    {
        "question_id": 505,
        "intent": "Has the iterator any more elements . Returns false only if the collection originally had zero elements , or all the elements have been #remove removed .",
        "snippet": "boolean function ( ) { return ( concodeclass_collection . size ( ) > 0 ) ; }"
    },
    {
        "question_id": 506,
        "intent": "Sets the value of iterations",
        "snippet": "void function ( int arg0 ) { this . concodeclass_iterations = arg0 ; }"
    },
    {
        "question_id": 507,
        "intent": "This method returns the number of clauses , of which a query currently consists .",
        "snippet": "int function ( ) { return concodeclass_addends . size ( ) ; }"
    },
    {
        "question_id": 508,
        "intent": "Sets the number of hosts that take part in the overlay network . If not set , the default value of 1 host is assumed . Has to be set before analysis is started and will be ignored else .",
        "snippet": "void function ( final int arg0 ) { if ( ! concodeclass_started ) { concodeclass_numHosts = arg0 ; } }"
    },
    {
        "question_id": 509,
        "intent": "Return the remote protocol . Accesses a ThreadLocal that 's setaround calls to #respond Protocol.Message , Object .",
        "snippet": "Protocol function ( ) { return concodeclass_REMOTE . get ( ) ; }"
    },
    {
        "question_id": 510,
        "intent": "If the child of a structured element is an array , we need to loop over the elements .",
        "snippet": "void function ( PdfArray arg0 ) { if ( arg0 == null ) return ; for ( int loc0 = 0 ; loc0 < arg0 . size ( ) ; loc0 ++ ) { concodefunc_inspectChild ( arg0 . getDirectObject ( loc0 ) ) ; } }"
    },
    {
        "question_id": 511,
        "intent": "Creates a new branch object .",
        "snippet": "Branch function ( String arg0 , String arg1 , int arg2 , int arg3 , boolean arg4 ) { Branch loc0 = new Branch ( arg0 , arg1 , arg2 , arg3 , arg4 ) ; Branch loc1 = concodeclass_savedBranchInfos . get ( loc0 ) ; if ( loc1 == null ) { concodeclass_savedBranchInfos . put ( loc0 , loc0 ) ; loc1 = loc0 ; } return loc1 ; }"
    },
    {
        "question_id": 512,
        "intent": "Resolve a constant to its actual value .",
        "snippet": "Object function ( String arg0 ) { Class loc0 ; try { loc0 = concodefunc_classForName ( StringHelper . qualifier ( arg0 ) ) ; } catch ( Throwable loc1 ) { return null ; } try { return loc0 . getField ( StringHelper . unqualify ( arg0 ) ) . get ( null ) ; } catch ( Throwable loc1 ) { return null ; } }"
    },
    {
        "question_id": 513,
        "intent": "Causes the currently executing thread to sleep temporarily cease execution for the specified number of milliseconds . The thread does not lose ownership of any monitors . If trace messages associated with the given trace option have been enabled , log the start and end of the sleep cycle along with thread information . If trace options are not enabled , then just sleep .",
        "snippet": "void function ( long arg0 , String arg1 , String arg2 ) { concodefunc_trace ( arg1 , arg2 , \"srini_string\" + arg0 ) ; try { Thread . sleep ( arg0 ) ; } catch ( InterruptedException loc0 ) { } concodefunc_trace ( arg1 , arg2 , \"srini_string\" ) ; }"
    },
    {
        "question_id": 514,
        "intent": "Gets the type of the message back .",
        "snippet": "MSG_TYPE function ( ) { return this . concodeclass_msgType ; }"
    },
    {
        "question_id": 515,
        "intent": "org.jboss.as.weld.deployment.processors.WeldDeploymentProcessor assembles a basic accessibility graph based onthe deployment structure . Here , we complete the graph by examining classloader visibility . This allows additional accessibility edges caused e.g. by the Class-Path declaration in the manifest file , to be recognized .",
        "snippet": "void function ( Iterable < BeanDeploymentArchiveImpl > arg0 ) { for ( BeanDeploymentArchiveImpl loc0 : arg0 ) { for ( BeanDeploymentArchiveImpl loc1 : arg0 ) { if ( loc0 . isAccessible ( loc1 ) ) { loc0 . addBeanDeploymentArchive ( loc1 ) ; } } } }"
    },
    {
        "question_id": 516,
        "intent": "Called by the default implementation of #writeMap to get the sizeof a map . The default implementation is for Map .",
        "snippet": "int function ( Object arg0 ) { return ( ( Map ) arg0 ) . size ( ) ; }"
    },
    {
        "question_id": 517,
        "intent": "Sorts source and adds the first n entries that match filter to dest . If source contains less than n entries , all of them are added to dest . For details , see CollectionHelpers #copyNSorted Collection , Collection , Comparator , int , except that source is filtered using filter before selecting entries to copy .",
        "snippet": "void function ( final Collection < T > arg0 , final Collection < T > arg1 , final Predicate < T > arg2 , final Comparator < T > arg3 , final int arg4 ) { final List < T > loc0 = new ArrayList < T > ( arg0 . size ( ) ) ; arg2 ( arg0 , loc0 , arg2 ) ; Collections . sort ( loc0 , arg3 ) ; final Iterator < T > loc1 = loc0 . iterator ( ) ; final int loc2 = arg1 . size ( ) + arg4 ; while ( loc1 . hasNext ( ) && arg1 . size ( ) < loc2 ) { arg1 . add ( loc1 . next ( ) ) ; } }"
    },
    {
        "question_id": 518,
        "intent": "Returns an array of String objects . The array represents the names of the columns arranged in the same order as in the getRowsByIndex method .",
        "snippet": "String [ ] function ( ) { return concodeclass_columnNames ; }"
    },
    {
        "question_id": 519,
        "intent": "Information supplied to enable the matching of an entry with the items that the transfer is intended to settle , such as commercial invoices in an accounts ' receivable system max length : 140",
        "snippet": "RemittanceInformation5 function ( String arg0 ) { concodefunc_checkMax140Text ( arg0 ) ; RemittanceInformation5 loc0 = new RemittanceInformation5 ( ) ; loc0 . getUstrd ( ) . add ( arg0 ) ; return loc0 ; }"
    },
    {
        "question_id": 520,
        "intent": "Get the number of required pairs removed from the pairlist .",
        "snippet": "int function ( ) { return concodeclass_remCount ; }"
    },
    {
        "question_id": 521,
        "intent": "Get the flag to know the character should have a space .",
        "snippet": "boolean function ( ) { return concodeclass_needBeforeSpace ; }"
    },
    {
        "question_id": 522,
        "intent": "Returns the evaluation listeners registered in this configuration",
        "snippet": "Collection < EvaluationListener > function ( ) { return concodeclass_evaluationListeners ; }"
    },
    {
        "question_id": 523,
        "intent": "Builds a JMX CompositeData view of our state",
        "snippet": "CompositeData function ( ) { try { return new CompositeDataSupport ( concodeclass_COMPOSITE_TYPE , concodeclass_ITEM_NAMES , new Object [ ] { concodeclass_roleName , concodeclass_shortName , concodeclass_loadCount , concodeclass_fetchCount , concodeclass_updateCount , concodeclass_removeCount , concodeclass_recreateCount } ) ; } catch ( OpenDataException loc0 ) { throw new RuntimeException ( loc0 ) ; } }"
    },
    {
        "question_id": 524,
        "intent": "Append ListElement .",
        "snippet": "void function ( int arg0 , List < Sentence > arg1 ) { concodeclass_listElements . add ( new ListElement ( arg0 , arg1 ) ) ; }"
    },
    {
        "question_id": 525,
        "intent": "Setup for connection success scenario .",
        "snippet": "void function ( ) { JdbcDataSource loc0 = new JdbcDataSource ( ) ; loc0 . setURL ( concodeclass_DB_URL ) ; concodeclass_dao = new DbCustomerDao ( loc0 ) ; boolean loc1 = concodeclass_dao . add ( concodeclass_existingCustomer ) ; assertTrue ( loc1 ) ; }"
    },
    {
        "question_id": 526,
        "intent": "Assert that the actual collection contains the expected elements but may contain more .",
        "snippet": "void function ( Object [ ] arg0 , Collection < Object > arg1 ) { int loc0 = concodefunc_testContains ( arg0 , arg1 ) ; if ( loc0 != - 1 ) concodefunc_fail ( \"srini_string\" + arg0 [ loc0 ] , arg0 , arg1 ) ; }"
    },
    {
        "question_id": 527,
        "intent": "Gets items from the stack where the index is zero based and the top of the stack is at an index of size -1 with the bottom of the stack at an index of 0 .",
        "snippet": "double function ( int arg0 ) { return concodeclass_list . get ( arg0 ) ; }"
    },
    {
        "question_id": 528,
        "intent": "Cardinality of property",
        "snippet": "ResourceEditPropertyBuilder function ( Integer arg0 ) { this . concodeclass_cardinalityProperty = arg0 ; return this ; }"
    },
    {
        "question_id": 529,
        "intent": "Calculate the red histogram of an image",
        "snippet": "int [ ] function ( BufferedImage arg0 ) { return concodeclass_histogram ( arg0 , concodeclass_RED ) ; }"
    },
    {
        "question_id": 530,
        "intent": "Adds negated parameters , by default with the `` and '' connective . These paremeters will be grouped in parentheses in the generated query and negated , e.g. ... not exp1 and exp2 ...",
        "snippet": "Parameters function ( ) { final Parameters loc0 = new Parameters ( concodeclass_alias , concodeclass_AND , concodeclass_queryParamCounter ) ; concodeclass_negatedParameters . add ( loc0 ) ; return loc0 ; }"
    },
    {
        "question_id": 531,
        "intent": "Concatenates a PDF document .",
        "snippet": "void function ( PdfReader arg0 ) { concodeclass_fc . addDocument ( arg0 ) ; }"
    },
    {
        "question_id": 532,
        "intent": "Returns the last exception thrown on the event dispatch thread , or null if no such exception has been thrown .",
        "snippet": "Throwable function ( ) { return EDTExceptionCatcher . getThrowable ( ) ; }"
    },
    {
        "question_id": 533,
        "intent": "Sets the value associated with the current key .",
        "snippet": "Object function ( Object arg0 ) { if ( concodeclass_last == null ) { throw new IllegalStateException ( \"srini_string\" ) ; } return concodeclass_last . setValue ( arg0 ) ; }"
    },
    {
        "question_id": 534,
        "intent": "Returns the size in pixels of an attribute dimension",
        "snippet": "int function ( Context arg0 , int arg1 ) { TypedArray loc0 = null ; try { loc0 = arg0 . getTheme ( ) . obtainStyledAttributes ( new int [ ] { arg1 } ) ; return loc0 . getDimensionPixelSize ( 0 , 0 ) ; } finally { if ( loc0 != null ) { loc0 . recycle ( ) ; } } }"
    },
    {
        "question_id": 535,
        "intent": "Module twosided Groebner base test .",
        "snippet": "boolean function ( int arg0 , List < GenSolvablePolynomial < C >> arg1 ) { return concodeclass_sbb . isTwosidedGB ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 536,
        "intent": "Negative value .",
        "snippet": "BigInteger function ( BigInteger arg0 ) { if ( arg0 == null ) return null ; return arg0 . negate ( ) ; }"
    },
    {
        "question_id": 537,
        "intent": "Compares two CanVID and gives the number of common values back . So it gives the number of common parents",
        "snippet": "int function ( CanVID arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < Math . min ( concodeclass_VID . size ( ) , arg0 . getVIDList ( ) . size ( ) ) ; loc1 ++ ) { if ( ! concodeclass_VID . get ( loc1 ) . toString ( ) . equals ( arg0 . getVIDList ( ) . get ( loc1 ) . toString ( ) ) ) break ; loc0 ++ ; } return loc0 ; }"
    },
    {
        "question_id": 538,
        "intent": "Convert mixed case to underscores",
        "snippet": "String function ( String arg0 ) { return concodefunc_addUnderscores ( arg0 ) ; }"
    },
    {
        "question_id": 539,
        "intent": "Test that javax.validation.Validation #buildDefaultValidatorFactory works fine within an EJB",
        "snippet": "void function ( ) { this . concodeclass_slsb . buildDefaultValidatorFactory ( ) ; }"
    },
    {
        "question_id": 540,
        "intent": "The name of the document origin . Interpretation is relative to the type , but might be the resource name or file URL .",
        "snippet": "String function ( ) { return concodeclass_name ; }"
    },
    {
        "question_id": 541,
        "intent": "Returns the job status for the given job id . The job status includes things like where it 's deployed , and the status of the jobs where it 's deployed , etc. .",
        "snippet": "Optional < JobStatus > function ( @ PathParam ( \"srini_string\" ) @ Valid final JobId arg0 ) { if ( ! arg0 . isFullyQualified ( ) ) { throw badRequest ( \"srini_string\" ) ; } return Optional . fromNullable ( concodeclass_model . getJobStatus ( arg0 ) ) ; }"
    },
    {
        "question_id": 542,
        "intent": "partitionBatch - decorator method to call real Partitioner s to process incoming batch uses either threading or not threading approach based on number Partitioners",
        "snippet": "void function ( final RecordBatch arg0 ) { concodefunc_executeMethodLogic ( new PartitionBatchHandlingClass ( arg0 ) ) ; }"
    },
    {
        "question_id": 543,
        "intent": "get cause",
        "snippet": "Throwable function ( ) { return concodeclass_cause ; }"
    },
    {
        "question_id": 544,
        "intent": "Return the unique identifier of the given plug-in .",
        "snippet": "String function ( Plugin arg0 ) { return arg0 . getBundle ( ) . getSymbolicName ( ) ; }"
    },
    {
        "question_id": 545,
        "intent": "Initializes resources . This must be called before MonitorResources #getResources . This allows us to avoid an evil static initializer that would pollute all the getResources call sites .",
        "snippet": "void function ( ) { concodeclass_resources = GWT . create ( Resources . class ) ; }"
    },
    {
        "question_id": 546,
        "intent": "Returns the characters in the buffer to the scanner .",
        "snippet": "void function ( ICharacterScanner arg0 ) { for ( int loc0 = concodeclass_fBuffer . length ( ) - 1 ; loc0 >= 0 ; loc0 -- ) arg0 . unread ( ) ; }"
    },
    {
        "question_id": 547,
        "intent": "moves pos and lookAt to the right in the map plane",
        "snippet": "void function ( double arg0 ) { VectorXYZ loc0 = concodefunc_getRight ( ) ; VectorXZ loc1 = new VectorXZ ( loc0 . x , loc0 . z ) . normalize ( ) ; concodefunc_move ( loc1 . x * arg0 , 0 , loc1 . z * arg0 ) ; }"
    },
    {
        "question_id": 548,
        "intent": "Create an Iterator Iterator wrappingthe specified DoubleIterator DoubleIterator . When the given iterator is null , returns null .",
        "snippet": "Iterator function ( DoubleIterator arg0 ) { return null == arg0 ? null : new DoubleIteratorIterator ( arg0 ) ; }"
    },
    {
        "question_id": 549,
        "intent": "Load all releases",
        "snippet": "List < ReleaseEntity > function ( boolean arg0 ) { return concodeclass_persistenceService . loadAllReleaseEntities ( arg0 ) ; }"
    },
    {
        "question_id": 550,
        "intent": "Is this polynomial equal to other .",
        "snippet": "boolean function ( Object arg0 ) { ColorPolynomial < C > loc0 = null ; try { loc0 = ( ColorPolynomial < C > ) arg0 ; } catch ( ClassCastException loc1 ) { return false ; } if ( loc0 == null ) { return false ; } return ( concodeclass_green . equals ( loc0 . green ) && concodeclass_red . equals ( loc0 . red ) && concodeclass_white . equals ( loc0 . white ) ) ; }"
    },
    {
        "question_id": 551,
        "intent": "A helper method to create a new instance of a type using the default constructor arguments .",
        "snippet": "T function ( Class < T > arg0 ) { try { return arg0 . newInstance ( ) ; } catch ( InstantiationException loc0 ) { throw new RuntimeException ( loc0 ) ; } catch ( IllegalAccessException loc0 ) { throw new RuntimeException ( loc0 ) ; } }"
    },
    {
        "question_id": 552,
        "intent": "This method returns the ID of the node , that measured or aggregated the metrics , which are currently stored within this class .",
        "snippet": "SkyNetNodeInfo function ( ) { return concodeclass_nodeInfo ; }"
    },
    {
        "question_id": 553,
        "intent": "Comparison with any other object .",
        "snippet": "boolean function ( Object arg0 ) { if ( ! ( arg0 instanceof ResidueRing ) ) { return false ; } ResidueRing < C > loc0 = null ; try { loc0 = ( ResidueRing < C > ) arg0 ; } catch ( ClassCastException loc1 ) { } if ( loc0 == null ) { return false ; } if ( ! concodeclass_ring . equals ( loc0 . ring ) ) { return false ; } return concodeclass_modul . equals ( loc0 . modul ) ; }"
    },
    {
        "question_id": 554,
        "intent": "Creates WAR with a secured servlet and BASIC authentication configured in web.xml deployment descriptor . It uses default security domain .",
        "snippet": "WebArchive function ( ) { return concodefunc_createWar ( concodeclass_SD_DEFAULT ) ; }"
    },
    {
        "question_id": 555,
        "intent": "Returns ReflectClass for the specified class name",
        "snippet": "ReflectClass function ( String arg0 ) { Class loc0 = concodeclass__classLoader . loadClass ( arg0 ) ; if ( loc0 == null ) { return null ; } return concodefunc_createClass ( loc0 ) ; }"
    },
    {
        "question_id": 556,
        "intent": "Returns true iff all entries of the input array are > 0 . Returns true if the array is non-null , but empty",
        "snippet": "boolean function ( double [ ] arg0 ) { for ( int loc0 = 0 ; loc0 < arg0 . length ; loc0 ++ ) { if ( arg0 [ loc0 ] <= 0 ) { return false ; } } return true ; }"
    },
    {
        "question_id": 557,
        "intent": "This method returns a org.springframework.web.method.support.HandlerMethodArgumentResolver that canconstruct org.springframework.data.domain.Sort objects by using the request params of theincoming request .",
        "snippet": "SortHandlerMethodArgumentResolver function ( ) { return new SortHandlerMethodArgumentResolver ( ) ; }"
    },
    {
        "question_id": 558,
        "intent": "Create an instance of KeyValuePairList",
        "snippet": "KeyValuePairList function ( ) { return new KeyValuePairList ( ) ; }"
    },
    {
        "question_id": 559,
        "intent": "Extended greatest common divisor . Note : Not implemented , throws RuntimeException .",
        "snippet": "Local < C > [ ] function ( Local < C > arg0 ) { throw new RuntimeException ( \"srini_string\" + this . getClass ( ) . getName ( ) ) ; }"
    },
    {
        "question_id": 560,
        "intent": "Determines if fully qualified method name is in this class Example methodName : public static String doStuff int , java.lang.Object",
        "snippet": "boolean function ( String arg0 ) { return arg0 . matches ( \"srini_string\" + concodeclass_class_name + \"srini_string\" ) ; }"
    },
    {
        "question_id": 561,
        "intent": "Start processing events as soon as the queue is n't empty . If the queue is not empty , this method will process all events already in the queue and any event that will be added while the queue is being processed .",
        "snippet": "void function ( ) { synchronized ( concodeclass_queuedEvents ) { if ( concodeclass_started ) { return ; } concodeclass_started = true ; concodeclass_isProcessing = true ; } concodefunc_processEvents ( ) ; }"
    },
    {
        "question_id": 562,
        "intent": "larnacaAirport initializer",
        "snippet": "void function ( ) { concodefunc_getLarnacaAirport ( ) . setName ( \"srini_string\" ) ; concodefunc_getLarnacaAirport ( ) . setCity ( \"srini_string\" ) ; concodefunc_getLarnacaAirport ( ) . setCountry ( \"srini_string\" ) ; concodefunc_getLarnacaAirport ( ) . setCode ( \"srini_string\" ) ; }"
    },
    {
        "question_id": 563,
        "intent": "returns language targeted by this configuration",
        "snippet": "String function ( ) { return concodeclass_lang ; }"
    },
    {
        "question_id": 564,
        "intent": "Gets the initial available numer .",
        "snippet": "List < Integer > function ( ) { return concodeclass_initialAvailableNumer ; }"
    },
    {
        "question_id": 565,
        "intent": "return is other before first",
        "snippet": "boolean function ( String arg0 , String arg1 ) { try { DateFormat loc0 = new SimpleDateFormat ( \"srini_string\" ) ; Date loc1 = loc0 . parse ( arg0 ) ; Date loc2 = loc0 . parse ( arg1 ) ; return loc2 . before ( loc1 ) ; } catch ( Exception loc0 ) { loc0 . printStackTrace ( ) ; } return false ; }"
    },
    {
        "question_id": 566,
        "intent": "Factory to create the predicate .",
        "snippet": "Predicate function ( Collection arg0 ) { Predicate [ ] loc0 = FunctorUtils . validate ( arg0 ) ; return new OnePredicate ( loc0 ) ; }"
    },
    {
        "question_id": 567,
        "intent": "Returns the bag .",
        "snippet": "Collection function ( ) { return concodeclass_bag ; }"
    },
    {
        "question_id": 568,
        "intent": "Get this widget 's index relative to its parent widget .",
        "snippet": "int function ( ) { return concodeclass__index ; }"
    },
    {
        "question_id": 569,
        "intent": "Load all resourceGroups for the given type",
        "snippet": "List < ? extends NamedIdentifiable > function ( String arg0 , Integer arg1 ) { ResourceEntity loc0 = concodeclass_resourceRepository . loadWithResourceGroupAndRelatedResourcesForId ( arg1 ) ; return concodeclass_resourceGroupService . loadGroupsForTypeNameExcludeSelected ( arg0 , Collections . singletonList ( loc0 . getResourceGroup ( ) . getId ( ) ) ) ; }"
    },
    {
        "question_id": 570,
        "intent": "Returns the trace data is added to .",
        "snippet": "ITrace2D function ( ) { return this . concodeclass_m_trace ; }"
    },
    {
        "question_id": 571,
        "intent": "Creates testing web-app module for app1.ear",
        "snippet": "Archive < ? > function ( ) { return ShrinkWrap . create ( WebArchive . class , concodeclass_MODULE_WEB + \"srini_string\" ) . setWebXML ( InterDeploymentDependenciesEarTestCase . class . getPackage ( ) , \"srini_string\" ) . addClass ( SleeperContextListener . class ) ; }"
    },
    {
        "question_id": 572,
        "intent": "Sets the constraints .",
        "snippet": "void function ( GridBagConstraints arg0 ) { this . concodeclass_constraints = arg0 ; }"
    },
    {
        "question_id": 573,
        "intent": "Gets the closures , do not modify the array .",
        "snippet": "Closure [ ] function ( ) { return concodeclass_iClosures ; }"
    },
    {
        "question_id": 574,
        "intent": "Set the output resource File . If not set , no output File will be created .",
        "snippet": "void function ( String arg0 ) { concodeclass_outputFile = new File ( arg0 ) ; concodeclass_createOutputFile = true ; }"
    },
    {
        "question_id": 575,
        "intent": "Returns the piece at the certain position .",
        "snippet": "Piece function ( int arg0 ) { Piece loc0 = new SinglePiece ( Color . red ) ; try { if ( concodefunc_isOccupied ( arg0 ) ) { loc0 = pieces [ arg0 ] ; } } catch ( ArrayIndexOutOfBoundsException loc1 ) { } catch ( NullPointerException loc1 ) { } return loc0 ; }"
    },
    {
        "question_id": 576,
        "intent": "Called when a Chunk with a generic tag is written . It is useful to pinpoint the Chunk location to generate bookmarks , for example .",
        "snippet": "void function ( PdfWriter arg0 , Document arg1 , Rectangle arg2 , String arg3 ) { PdfPageEvent loc0 ; for ( Object loc1 : concodeclass_events ) { loc0 = ( PdfPageEvent ) loc1 ; loc0 . onGenericTag ( arg0 , arg1 , arg2 , arg3 ) ; } }"
    },
    {
        "question_id": 577,
        "intent": "Sets the current cluster ID .",
        "snippet": "void function ( String arg0 ) { concodeclass_clusterId = arg0 ; }"
    },
    {
        "question_id": 578,
        "intent": "Compare the contents of two files :",
        "snippet": "void function ( IProject arg0 , String arg1 , String arg2 ) { Assert . assertNotNull ( \"srini_string\" , arg0 ) ; Assert . assertNotNull ( \"srini_string\" , arg1 ) ; Assert . assertNotNull ( \"srini_string\" , arg2 ) ; compareFileContents ( arg0 . getFile ( arg1 ) , arg2 ) ; }"
    },
    {
        "question_id": 579,
        "intent": "The current text buffer .",
        "snippet": "StringBuilder function ( ) { return concodeclass_baos ; }"
    },
    {
        "question_id": 580,
        "intent": "A lower bound on the number of elements in the set . Returns either the number of elements that have been inserted in the set , or max_size , whichever is less .",
        "snippet": "int function ( ) { return concodeclass_num_values ; }"
    },
    {
        "question_id": 581,
        "intent": "Returns the non-terminal that is the start symbol for the grammar for the given schema sc .",
        "snippet": "Symbol function ( Schema arg0 ) { return Symbol . root ( generate ( arg0 , new HashMap < LitS , Symbol > ( ) ) ) ; }"
    },
    {
        "question_id": 582,
        "intent": "Take a path string elements delimited by the ' \\ ' character and break it into tokens . If an element contains the delimeter , it must be escaped . For example : `` Edit/Find \\ \\ / Replace '' tokenizes to `` Edit '' , `` Find/Replace '' .",
        "snippet": "String [ ] function ( String arg0 ) { if ( arg0 == null ) throw new IllegalArgumentException ( \"srini_string\" ) ; return new PathTokenizer ( arg0 ) . tokenize ( ) ; }"
    },
    {
        "question_id": 583,
        "intent": "Ensures that the expression given as a method parameter is true .",
        "snippet": "void function ( boolean arg0 , String arg1 ) { if ( ! arg0 ) { throw new IllegalArgumentException ( arg1 ) ; } }"
    },
    {
        "question_id": 584,
        "intent": "Convenience method to return the text of the filter control . If the text widget is not created , then null is returned .",
        "snippet": "String function ( ) { return concodeclass_fTextControl != null ? concodeclass_fTextControl . getText ( ) : null ; }"
    },
    {
        "question_id": 585,
        "intent": "Returns whether one of the given categories is contained in this set of group categories",
        "snippet": "boolean function ( List < GroupCategory > arg0 ) { for ( Iterator < GroupCategory > loc0 = arg0 . iterator ( ) ; loc0 . hasNext ( ) ; ) { GroupCategory loc1 = loc0 . next ( ) ; if ( concodefunc_contains ( loc1 ) ) return true ; } return false ; }"
    },
    {
        "question_id": 586,
        "intent": "Checks if the space on the board contains a piece . If outside board array bounds , return true .",
        "snippet": "boolean function ( int arg0 ) { return ( arg0 >= 1 && arg0 <= 63 && pieces [ arg0 ] == null ) ? false : true ; }"
    },
    {
        "question_id": 587,
        "intent": "Appends a byte array or part of to the buffer .",
        "snippet": "void function ( byte [ ] arg0 , int arg1 , int arg2 ) { concodefunc_ensureCapacity ( concodeclass_length + arg2 ) ; System . arraycopy ( arg0 , arg1 , concodeclass_buffer , concodeclass_length , arg2 ) ; concodeclass_length += arg2 ; }"
    },
    {
        "question_id": 588,
        "intent": "Return the number of words in the dictionary . This is NOT necessarily the same as the number of TrieNodes in the trie .",
        "snippet": "int function ( ) { return concodeclass_size ; }"
    },
    {
        "question_id": 589,
        "intent": "look for @Entity annotation",
        "snippet": "boolean function ( CtClass arg0 ) { return arg0 . hasAnnotation ( Entity . class ) ; }"
    },
    {
        "question_id": 590,
        "intent": "Gets a debugging string version of this converter .",
        "snippet": "String function ( ) { return \"srini_string\" + ( getSupportedType ( ) == null ? \"srini_string\" : getSupportedType ( ) . getName ( ) ) + \"srini_string\" ; }"
    },
    {
        "question_id": 591,
        "intent": "Gets the context type .",
        "snippet": "TemplateContextType function ( ) { return concodeclass_fContextType ; }"
    },
    {
        "question_id": 592,
        "intent": "Sole entry point to application , as always .",
        "snippet": "void function ( String [ ] arg0 ) { String loc0 ; TextIO . putln ( \"srini_string\" ) ; loc0 = TextIO . getln ( ) ; TextIO . putln ( ) ; TextIO . putln ( \"srini_string\" ) ; concodefunc_printCapitalized ( loc0 ) ; }"
    },
    {
        "question_id": 593,
        "intent": "Same as c.isPrimitive but faster if this test is done very frequently as it is in Randoop .",
        "snippet": "boolean function ( Class < ? > arg0 ) { if ( arg0 == null ) throw new IllegalArgumentException ( \"srini_string\" ) ; Boolean loc0 = concodeclass_isPrimitiveCached . get ( arg0 ) ; if ( loc0 == null ) { loc0 = arg0 . isPrimitive ( ) ; concodeclass_isPrimitiveCached . put ( arg0 , loc0 ) ; } return loc0 ; }"
    },
    {
        "question_id": 594,
        "intent": "Remove Incorrect Values and repaint the panel",
        "snippet": "void function ( ActionEvent arg0 ) { if ( concodeclass_gui . isPlaying ( ) ) { this . concodeclass_gui . getPuzzle ( ) . removeIncorrect ( ) ; this . concodeclass_gui . getMainPanel ( ) . getGamePanel ( ) . paintGamePanel ( concodeclass_gui . getPuzzle ( ) ) ; this . concodeclass_gui . initiateCommandHistory ( ) ; } }"
    },
    {
        "question_id": 595,
        "intent": "Check invariants . Check if all colored systems are determined and all invariants are met .",
        "snippet": "boolean function ( ) { for ( ColoredSystem < C > loc0 : concodeclass_list ) { if ( ! loc0 . checkInvariant ( ) ) { return false ; } } return true ; }"
    },
    {
        "question_id": 596,
        "intent": "Gets the value of the technicalKey property .",
        "snippet": "String function ( ) { return concodeclass_technicalKey ; }"
    },
    {
        "question_id": 597,
        "intent": "hash code .",
        "snippet": "int function ( ) { return ( concodeclass_e1 . hashCode ( ) << 16 ) + concodeclass_e2 . hashCode ( ) ; }"
    },
    {
        "question_id": 598,
        "intent": "Verifies if a given editing owner is equals the foreignable owner or if the the user has super user chuck norris role which can overrule foreignable rules",
        "snippet": "boolean function ( ForeignableOwner arg0 , ForeignableOwner arg1 ) { return concodefunc_isChuckNorris ( ) || arg1 . isSameOwner ( arg0 ) ; }"
    },
    {
        "question_id": 599,
        "intent": "Import lockup data from an xml-file .",
        "snippet": "void function ( File arg0 ) { try { SAXReader loc0 = new SAXReader ( false ) ; Document loc1 = loc0 . read ( arg0 ) ; Element loc2 = loc1 . getRootElement ( ) ; importFromXML ( loc2 ) ; } catch ( DocumentException loc0 ) { loc0 . printStackTrace ( ) ; } }"
    },
    {
        "question_id": 600,
        "intent": "Returns the refactoring descriptor proxy . Depending on the event , this proxy may refer to an inexisting refactoring and can not be resolved to a refactoring descriptor . Clients should also be prepared to receive notifications for unknown refactorings , which are discriminated by their special id RefactoringDescriptor #ID_UNKNOWN ;",
        "snippet": "RefactoringDescriptorProxy function ( ) { return concodeclass_fProxy ; }"
    },
    {
        "question_id": 601,
        "intent": "Sets the color of this rectangle .",
        "snippet": "void function ( Color arg0 ) { concodeclass_color = arg0 ; Canvas . getInstance ( ) . repaint ( ) ; }"
    },
    {
        "question_id": 602,
        "intent": "Rebind val to name in ctx , and make sure that all intermediate contexts exist",
        "snippet": "void function ( final Context arg0 , final String arg1 , final Object arg2 ) { final Name loc0 = arg0 . getNameParser ( \"srini_string\" ) . parse ( arg1 ) ; rebind ( arg0 , loc0 , arg2 ) ; }"
    },
    {
        "question_id": 603,
        "intent": "An arbitrary number which does not correspond to an active Customer id .",
        "snippet": "int function ( ) { return 999 ; }"
    },
    {
        "question_id": 604,
        "intent": "Start a transaction in an agency database . No checking is done to ensure the agency exists ; if it does not you will get a hopefully empty DB , unless you 've done the same thing previously .",
        "snippet": "AgencyTx function ( String arg0 ) { return new AgencyTx ( concodefunc_getRawAgencyTx ( arg0 ) ) ; }"
    },
    {
        "question_id": 605,
        "intent": "Quotient absolute value .",
        "snippet": "Quotient < C > function ( ) { return new Quotient < C > ( concodeclass_ring , concodeclass_num . abs ( ) , concodeclass_den , true ) ; }"
    },
    {
        "question_id": 606,
        "intent": "Output a debugging string .",
        "snippet": "String function ( ) { return \"srini_string\" + concodefunc_getName ( ) + \"srini_string\" ; }"
    },
    {
        "question_id": 607,
        "intent": "is null or its size is 0 isEmpty null = true ; isEmpty = true ; isEmpty 1 = false ;",
        "snippet": "boolean function ( Collection < V > arg0 ) { return ( arg0 == null || arg0 . size ( ) == 0 ) ; }"
    },
    {
        "question_id": 608,
        "intent": "Return the context key under which our Catalog has beenstored .",
        "snippet": "String function ( ) { return ( this . concodeclass_catalogKey ) ; }"
    },
    {
        "question_id": 609,
        "intent": "Builds the new Person object .",
        "snippet": "Person function ( ) { return concodeclass_built ; }"
    },
    {
        "question_id": 610,
        "intent": "Returns the message source mock .",
        "snippet": "MessageSource function ( ) { return concodeclass_messageSourceMock ; }"
    },
    {
        "question_id": 611,
        "intent": "Gets the HttpClient to issue request .",
        "snippet": "HttpClient function ( ) { return this . concodeclass_backend ; }"
    },
    {
        "question_id": 612,
        "intent": "rotates a vector on the Y axis",
        "snippet": "void function ( Point3D arg0 , double arg1 , double arg2 ) { float loc0 = arg0 . loc0 ; float loc1 = arg0 . loc1 ; arg0 . loc0 = ( float ) ( arg2 * loc0 - arg1 * loc1 ) ; arg0 . loc1 = ( float ) ( arg1 * loc0 + arg2 * loc1 ) ; }"
    },
    {
        "question_id": 613,
        "intent": "Get a `` preloaded '' mock CouchDB suitable to be used as a pull replication target . It 's preloaded in the sense that it is ready serve up mock documents . This ca n't be used to simulate a Sync Gateway , because it does not support _ bulk_get",
        "snippet": "MockWebServer function ( MockDispatcher arg0 , int arg1 , int arg2 ) { return new MockPreloadedPullTarget ( arg0 , arg1 , arg2 ) . getMockWebServer ( ) ; }"
    },
    {
        "question_id": 614,
        "intent": "RGB 8-bit per channel to YCC 16-bit per channel .",
        "snippet": "void function ( int arg0 , int [ ] arg1 ) { int loc0 = ( arg0 & 0xff0000 ) >>> 16 ; int loc1 = ( arg0 & 0xff00 ) >>> 8 ; int loc2 = arg0 & 0xff ; int loc3 = 77 * loc0 + 153 * loc1 + 26 * loc2 ; int loc4 = loc0 * 256 - loc3 ; int loc5 = loc2 * 256 - loc3 ; int loc6 = ( loc5 / 2 ) + 128 * 256 ; int loc7 = ( loc4 * 5 / 8 ) + 128 * 256 ; arg1 [ 0 ] = loc3 ; arg1 [ 1 ] = loc6 ; arg1 [ 2 ] = loc7 ; }"
    },
    {
        "question_id": 615,
        "intent": "getOwner returns the name of this account 's owner .",
        "snippet": "String function ( ) { return concodeclass_name ; }"
    },
    {
        "question_id": 616,
        "intent": "Nobody get the lock when globalMutex contains nothing",
        "snippet": "boolean function ( ) { return concodeclass_globalMutex . isEmpty ( ) ; }"
    },
    {
        "question_id": 617,
        "intent": "Fail with the specified message and the content of the specified collections",
        "snippet": "void function ( String arg0 , Object [ ] arg1 , Collection arg2 ) { fail ( arg0 , arg1 , arg2 , new Comparator < Object > ( ) { public int compare ( Object arg3 , Object arg4 ) { return arg3 == arg4 ? 0 : - 1 ; } } ) ; }"
    },
    {
        "question_id": 618,
        "intent": "Looks up a key code and returns a human readable string . Sometimes this is just the key , other times it is the function of the key written out in English .",
        "snippet": "String function ( int arg0 ) { String loc0 = concodeclass_keyCodeDescMap . get ( arg0 ) ; if ( loc0 == null ) { return Character . toString ( ( char ) arg0 ) ; } return loc0 ; }"
    },
    {
        "question_id": 619,
        "intent": "Searches the list of induction variables for an induction variable with a given value number .",
        "snippet": "Object function ( final int arg0 ) { final Iterator loc0 = concodeclass_IndStore . values ( ) . iterator ( ) ; while ( loc0 . hasNext ( ) ) { final Swizzler loc1 = ( Swizzler ) loc0 . next ( ) ; if ( ( loc1 . target ( ) . valueNumber ( ) == arg0 ) || ( loc1 . ind_var ( ) . valueNumber ( ) == arg0 ) ) { return loc1 ; } } return null ; }"
    },
    {
        "question_id": 620,
        "intent": "Sole entry point to application , as always .",
        "snippet": "void function ( String [ ] arg0 ) { String loc0 ; TextIO . putln ( \"srini_string\" ) ; loc0 = TextIO . getln ( ) ; TextIO . putln ( ) ; TextIO . putln ( \"srini_string\" ) ; concodefunc_printCapitalized ( loc0 ) ; }"
    },
    {
        "question_id": 621,
        "intent": "Return the events of interest to this Recorder .",
        "snippet": "long function ( ) { return - 1 ; }"
    },
    {
        "question_id": 622,
        "intent": "This method sets a new aggregate of the complexity of the solved queries at a certain level . The complexity is attained by varying the conditions of a query .",
        "snippet": "void function ( MetricsAggregate arg0 ) { this . concodeclass_conditionVarition = arg0 ; }"
    },
    {
        "question_id": 623,
        "intent": "Perform the click . This is intended to be overridden in subclasses",
        "snippet": "Widget function ( int arg0 , Widget arg1 , Point arg2 , int arg3 ) { return concodeclass__selector . click ( arg1 , arg2 . x , arg2 . y , arg3 , arg0 ) ; }"
    },
    {
        "question_id": 624,
        "intent": "Sets a value in an object",
        "snippet": "void function ( Object arg0 , Object arg1 , Object arg2 ) { if ( concodefunc_isMap ( arg0 ) ) ( ( Map ) arg0 ) . put ( arg1 . toString ( ) , arg2 ) ; else { throw new JsonPathException ( \"srini_string\" + arg0 != null ? arg0 . getClass ( ) . getName ( ) : \"srini_string\" ) ; } }"
    },
    {
        "question_id": 625,
        "intent": "Get a topology ID from the name of a topology",
        "snippet": "Optional < String > function ( final String arg0 ) { String loc0 = null ; for ( String loc1 : concodefunc_activeStorms ( ) ) { String loc2 = concodefunc_stormBase ( loc1 , null ) . get_name ( ) ; if ( arg0 . equals ( loc2 ) ) { loc0 = loc1 ; break ; } } return Optional . ofNullable ( loc0 ) ; }"
    },
    {
        "question_id": 626,
        "intent": "Adds the specified string as an additional reason",
        "snippet": "void function ( String arg0 ) { concodeclass_discardString += \"srini_string\" + arg0 ; }"
    },
    {
        "question_id": 627,
        "intent": "Return the OSC byte stream for this packet .",
        "snippet": "byte [ ] function ( ) { if ( ! concodeclass_isByteArrayComputed ) concodefunc_computeByteArray ( ) ; return concodeclass_byteArray ; }"
    },
    {
        "question_id": 628,
        "intent": "Return all root components in the current AWT hierarchy .",
        "snippet": "Collection function ( ) { return concodeclass_tracker . getRootWindows ( ) ; }"
    },
    {
        "question_id": 629,
        "intent": "Returns an absolute path to krb5.conf file .",
        "snippet": "String function ( ) { return concodeclass_KRB5_CONF_FILE . getAbsolutePath ( ) ; }"
    },
    {
        "question_id": 630,
        "intent": "Copy BigDecimal element c.",
        "snippet": "BigDecimal function ( BigDecimal arg0 ) { return new BigDecimal ( arg0 . val , arg0 . context ) ; }"
    },
    {
        "question_id": 631,
        "intent": "The String encoding used for decoding and encoding .",
        "snippet": "String function ( ) { return this . concodeclass_charset ; }"
    },
    {
        "question_id": 632,
        "intent": "Exports the given test run session into an XML report file .",
        "snippet": "void function ( ITestRunSession arg0 , File arg1 ) { JUnitModel . exportTestRunSession ( ( TestRunSession ) arg0 , arg1 ) ; }"
    },
    {
        "question_id": 633,
        "intent": "Following method performs the initialization",
        "snippet": "void function ( ) { concodeclass_fileLoggerModule = FileLoggerModule . getSingleton ( ) . prepare ( ) ; concodeclass_consoleLoggerModule = ConsoleLoggerModule . getSingleton ( ) . prepare ( ) ; }"
    },
    {
        "question_id": 634,
        "intent": "Create a new Closure that calls each closure in turn , passing the result into the next closure . The ordering is that of the iterator method on the collection .",
        "snippet": "Closure function ( Collection arg0 ) { return ChainedClosure . getInstance ( arg0 ) ; }"
    },
    {
        "question_id": 635,
        "intent": "Find the mapping associated with this condition or null if no associated mapping can be found .",
        "snippet": "ConditionMapping function ( ICondition arg0 ) { ConditionMapping loc0 ; synchronized ( concodeclass__mappings ) { for ( Iterator loc1 = concodeclass__mappings . iterator ( ) ; loc1 . hasNext ( ) ; ) { loc0 = ( ConditionMapping ) loc1 . next ( ) ; if ( loc0 . arg0 == arg0 ) return loc0 ; } } return null ; }"
    },
    {
        "question_id": 636,
        "intent": "Check to see if a test is running . This can be used to see whether the runtime is executing in the context of a test run or a recording session .",
        "snippet": "boolean function ( ) { return concodeclass__runningTest != concodefunc_noTest ( ) ; }"
    },
    {
        "question_id": 637,
        "intent": "get response header , not avaliable now",
        "snippet": "Object function ( String arg0 ) { return concodeclass_responseHeaders == null ? null : concodeclass_responseHeaders . get ( arg0 ) ; }"
    },
    {
        "question_id": 638,
        "intent": "Get the data trimmed to the length of the actual payload read , caching the result .",
        "snippet": "byte [ ] function ( ) { if ( concodeclass_consumedData . length == concodeclass_consumedLength ) { return concodeclass_consumedData ; } concodeclass_consumedData = concodefunc_truncateBytes ( concodeclass_consumedData , concodeclass_consumedLength ) ; return concodeclass_consumedData ; }"
    },
    {
        "question_id": 639,
        "intent": "Returns the hover 's class name .",
        "snippet": "String function ( ) { return concodeclass_fElement . getAttribute ( concodeclass_CLASS_ATTRIBUTE ) ; }"
    },
    {
        "question_id": 640,
        "intent": "An unsafe operation that returns a ByteString that is backed by a subregion of theprovided buffer .",
        "snippet": "ByteString function ( byte [ ] arg0 , int arg1 , int arg2 ) { return ByteString . wrap ( arg0 , arg1 , arg2 ) ; }"
    },
    {
        "question_id": 641,
        "intent": "Get last Section .",
        "snippet": "Section function ( ) { Section loc0 = null ; if ( concodeclass_sections . size ( ) > 0 ) { loc0 = concodeclass_sections . get ( concodeclass_sections . size ( ) - 1 ) ; } return loc0 ; }"
    },
    {
        "question_id": 642,
        "intent": "Encodes the given string into a sequence of bytes using the UTF-16 charset , storing the result into a new byte array .",
        "snippet": "byte [ ] function ( String arg0 ) { return StringUtils . getBytesUnchecked ( arg0 , CharEncoding . UTF_16 ) ; }"
    },
    {
        "question_id": 643,
        "intent": "Return the quadrant of a block of equal size that is adjacent to the given side of this quadrant .",
        "snippet": "Quadrant function ( int arg0 ) { if ( arg0 == QuadTreeNode . WEST || arg0 == QuadTreeNode . EAST ) { return cSouthEast ; } return cNorthWest ; }"
    },
    {
        "question_id": 644,
        "intent": "Method to test getColTotal",
        "snippet": "void function ( String [ ] arg0 ) { concodefunc_testSetMatrix ( ) ; concodefunc_testFillPattern1 ( ) ; concodefunc_testGetCount ( ) ; concodefunc_testGetTotal ( ) ; concodefunc_testGetTotalNested ( ) ; concodefunc_testGetLargest ( ) ; concodefunc_testGetColTotal ( ) ; ( origin / master ) = $missing$ ; }"
    },
    {
        "question_id": 645,
        "intent": "setItem sets this node 's item to `` item '' . If this node is invalid , throws an exception . Performance : runs in O 1 time .",
        "snippet": "void function ( Object arg0 ) { if ( ! concodefunc_isValidNode ( ) ) { throw new InvalidNodeException ( ) ; } this . concodeclass_item = arg0 ; }"
    },
    {
        "question_id": 646,
        "intent": "Starts the input task of a device .",
        "snippet": "void function ( Device arg0 ) { startInputTask ( arg0 . getHandle ( ) ) ; }"
    },
    {
        "question_id": 647,
        "intent": "Get the end label of the protected block .",
        "snippet": "Label function ( ) { return concodeclass_end ; }"
    },
    {
        "question_id": 648,
        "intent": "Returns the linked list node after this one .",
        "snippet": "TLinkable function ( ) { return concodeclass__next ; }"
    },
    {
        "question_id": 649,
        "intent": "Delegate the call to the internal java.util.concurrent.locks.ReentrantReadWriteLock instanceand then increment the read lock count held by the thread",
        "snippet": "void function ( ) { concodeclass_delegate . readLock ( ) . lock ( ) ; concodefunc_incReadLockCount ( ) ; }"
    },
    {
        "question_id": 650,
        "intent": "This method sets the value of the database column SYS_IP_AREA . END_IP",
        "snippet": "void function ( Long arg0 ) { this . concodeclass_endIp = arg0 ; }"
    },
    {
        "question_id": 651,
        "intent": "Append a hashCode for a float .",
        "snippet": "HashCodeBuilder function ( float arg0 ) { concodeclass_iTotal = concodeclass_iTotal * concodeclass_iConstant + Float . floatToIntBits ( arg0 ) ; return this ; }"
    },
    {
        "question_id": 652,
        "intent": "Checks if this PdfObject is of the type PdfNull .",
        "snippet": "boolean function ( ) { return ( concodeclass_type == concodeclass_NULL ) ; }"
    },
    {
        "question_id": 653,
        "intent": "Deletes all the blobs in a container",
        "snippet": "void function ( String arg0 ) { concodeclass_jdbcService . deleteBlobsByContainer ( arg0 ) ; }"
    },
    {
        "question_id": 654,
        "intent": "Accessor for testing only .",
        "snippet": "int function ( ) { return concodeclass_num_sets ; }"
    },
    {
        "question_id": 655,
        "intent": "Test whether the widget in question is showing .",
        "snippet": "boolean function ( ) { MatchResult loc0 = new WidgetFinder ( ) . find ( concodeclass__display , concodeclass__matcher ) ; return loc0 . getType ( ) == WidgetFinder . MATCH ; }"
    },
    {
        "question_id": 656,
        "intent": "Get the unqualified names of the columns of the owning entity which are to be used in the join .",
        "snippet": "String [ ] function ( AssociationType arg0 , int arg1 , OuterJoinLoadable arg2 , Mapping arg3 ) { return getLHSColumnNames ( arg0 , arg1 , 0 , arg2 , arg3 ) ; }"
    },
    {
        "question_id": 657,
        "intent": "Create the filter controls .",
        "snippet": "void function ( Composite arg0 ) { concodefunc_createTextControl ( arg0 ) ; concodefunc_createClearButton ( arg0 ) ; concodefunc_updateClearButtonVisibility ( false ) ; }"
    },
    {
        "question_id": 658,
        "intent": "Getter for percentage",
        "snippet": "boolean function ( ) { return concodeclass_percentage ; }"
    },
    {
        "question_id": 659,
        "intent": "Is ModInteger number a unit .",
        "snippet": "boolean function ( ) { if ( concodefunc_isZERO ( ) ) { return false ; } if ( concodeclass_ring . isField ( ) ) { return true ; } java . math . BigInteger loc0 = concodeclass_ring . modul . gcd ( concodeclass_val ) . abs ( ) ; return ( loc0 . equals ( java . math . BigInteger . ONE ) ) ; }"
    },
    {
        "question_id": 660,
        "intent": "Returns the record 's header .",
        "snippet": "Header function ( ) { return concodeclass_myHeader ; }"
    },
    {
        "question_id": 661,
        "intent": "Returns a Duration corresponding to the the given value in days .",
        "snippet": "Duration function ( int arg0 ) { return new Duration ( arg0 , TimeUnit . DAYS ) ; }"
    },
    {
        "question_id": 662,
        "intent": "Return the class loader to be used for instantiating application objects when a context class loader is not specified . This is determined based upon the following rules : The specified class loader , if any The class loader used to load the calling class . The System class loader .",
        "snippet": "ClassLoader function ( ClassLoader arg0 , Class arg1 ) { if ( arg0 != null ) { return arg0 ; } return getClassLoader ( arg1 ) ; }"
    },
    {
        "question_id": 663,
        "intent": "Factory method to create a new Product",
        "snippet": "Product function ( ) { return new Product ( ) ; }"
    },
    {
        "question_id": 664,
        "intent": "Indic languages are written from right to left .",
        "snippet": "boolean function ( ) { return false ; }"
    },
    {
        "question_id": 665,
        "intent": "Compares two keys or two values , handling null correctly .",
        "snippet": "boolean function ( Object arg0 , Object arg1 ) { if ( arg0 == null ) { return arg1 == null ; } return arg0 . equals ( arg1 ) ; }"
    },
    {
        "question_id": 666,
        "intent": "Sets the new serialNumber .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_serialNumber = arg0 ; }"
    },
    {
        "question_id": 667,
        "intent": "Returns the image descriptor of the described category .",
        "snippet": "ImageDescriptor function ( ) { return concodeclass_fImage ; }"
    },
    {
        "question_id": 668,
        "intent": "Get the type of this request , used by each person in the chain of command to see if they should or can handle this particular request",
        "snippet": "RequestType function ( ) { return concodeclass_requestType ; }"
    },
    {
        "question_id": 669,
        "intent": "Adds a view dictionary . Part of the RichMediaContent .",
        "snippet": "PdfIndirectReference function ( PdfDictionary arg0 ) { if ( concodeclass_views == null ) throw new IllegalPdfSyntaxException ( \"srini_string\" ) ; PdfIndirectReference loc0 = concodeclass_writer . addToBody ( arg0 ) . getIndirectReference ( ) ; concodeclass_views . add ( loc0 ) ; return loc0 ; }"
    },
    {
        "question_id": 670,
        "intent": "Is Local one .",
        "snippet": "boolean function ( ) { return concodeclass_num . equals ( concodeclass_den ) ; }"
    },
    {
        "question_id": 671,
        "intent": "Return the RuleSet to be used for configuring our Digester parsing rules , creating one if necessary .",
        "snippet": "RuleSet function ( ) { if ( concodeclass_ruleSet == null ) { concodeclass_ruleSet = new ConfigRuleSet ( ) ; } return ( concodeclass_ruleSet ) ; }"
    },
    {
        "question_id": 672,
        "intent": "Reads a value attribute on an element .",
        "snippet": "String function ( final XMLExtendedStreamReader arg0 ) { return concodefunc_readRequiredAttributes ( arg0 , EnumSet . of ( Attribute . VALUE ) ) . get ( Attribute . VALUE ) ; }"
    },
    {
        "question_id": 673,
        "intent": "Get the last component of a name .",
        "snippet": "String function ( final Name arg0 ) { if ( arg0 . size ( ) > 0 ) return arg0 . get ( arg0 . size ( ) - 1 ) ; return \"srini_string\" ; }"
    },
    {
        "question_id": 674,
        "intent": "Returns the attribute with the specified name .",
        "snippet": "String function ( final String arg0 ) { return concodeclass_fAttributes . get ( arg0 ) ; }"
    },
    {
        "question_id": 675,
        "intent": "Get the default target of the switch .",
        "snippet": "Label function ( ) { return concodeclass_defaultTarget ; }"
    },
    {
        "question_id": 676,
        "intent": "Getter for text rise",
        "snippet": "float function ( ) { return concodeclass_rise ; }"
    },
    {
        "question_id": 677,
        "intent": "Disables the listeners and calls initializeWithoutListenersFrom . Listeners are disabled because it is common for listeners to be used for saving launch configurations . If a the configuration is saved during initialization , it is possible for attributes necessary for other options to be erased .",
        "snippet": "void function ( ILaunchConfiguration arg0 ) { concodeclass_fListeneredDisabled = true ; concodefunc_initializeWithoutListenersFrom ( arg0 ) ; concodeclass_fListeneredDisabled = false ; }"
    },
    {
        "question_id": 678,
        "intent": "Get removed pair number .",
        "snippet": "int function ( ) { return concodeclass_n ; }"
    },
    {
        "question_id": 679,
        "intent": "Try to make a date MIME RFC 2822/5322 - compliant . It fixes : - `` Thu , 10 Dec 09 15:08:08 GMT-0700 '' to `` Thu , 10 Dec 09 15:08:08 -0700 '' 4 digit zone value ca n't be preceded by `` GMT '' We got a report saying eBay sends a date in this format",
        "snippet": "String function ( String arg0 ) { if ( TextUtils . isEmpty ( arg0 ) ) { return arg0 ; } arg0 = concodeclass_DATE_CLEANUP_PATTERN_WRONG_TIMEZONE . matcher ( arg0 ) . replaceFirst ( \"srini_string\" ) ; return arg0 ; }"
    },
    {
        "question_id": 680,
        "intent": "Answer the product associated with the receiver",
        "snippet": "IProduct function ( ) { return concodeclass_product ; }"
    },
    {
        "question_id": 681,
        "intent": "Clear cache",
        "snippet": "void function ( ) { concodeclass_head = null ; concodeclass_end = null ; concodeclass_cache . clear ( ) ; }"
    },
    {
        "question_id": 682,
        "intent": "Utility for safely populating an output CryptoRecord .",
        "snippet": "void function ( CryptoRecord arg0 , String arg1 , String arg2 ) { if ( arg2 == null ) { return ; } arg0 . payload . put ( arg1 , arg2 ) ; }"
    },
    {
        "question_id": 683,
        "intent": "Test if the given composed message matches the expected message",
        "snippet": "void function ( final LetterComposite arg0 , final String arg1 ) { final String [ ] loc0 = arg1 . split ( \"srini_string\" ) ; assertNotNull ( arg0 ) ; assertEquals ( loc0 . length , arg0 . count ( ) ) ; arg0 . print ( ) ; assertEquals ( arg1 , new String ( this . concodeclass_stdOutBuffer . toByteArray ( ) ) . trim ( ) ) ; }"
    },
    {
        "question_id": 684,
        "intent": "Deprecated .",
        "snippet": "int [ ] function ( String arg0 ) { return concodefunc_getNamedParameterDescriptor ( arg0 ) . getSourceLocations ( ) ; }"
    },
    {
        "question_id": 685,
        "intent": "Test for the existence of the given project .",
        "snippet": "boolean function ( ) { return concodeclass__exists == concodeclass__project . exists ( ) ; }"
    },
    {
        "question_id": 686,
        "intent": "convert Integer array to int array",
        "snippet": "int [ ] function ( Integer [ ] arg0 ) { int [ ] loc0 = new int [ arg0 . length ] ; for ( int loc1 = 0 ; loc1 < arg0 . length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }"
    },
    {
        "question_id": 687,
        "intent": "Allows for setting of the color using int codes .",
        "snippet": "void function ( int arg0 ) { this . concodeclass_foreColor = this . concodeclass_foreColor . getColorFromCode ( arg0 ) ; }"
    },
    {
        "question_id": 688,
        "intent": "addOperator Runs Operator through calculate as soon as it gets it so the stack is always up to date .",
        "snippet": "void function ( Operator arg0 ) { concodefunc_calculate ( arg0 ) ; }"
    },
    {
        "question_id": 689,
        "intent": "Sets the screen brightness for this activity . The screen brightness will change immediately . As soon as the activity terminates , the brightness will return to the system brightness . Valid brightnesses range from 0 to 255 .",
        "snippet": "void function ( Window arg0 , int arg1 ) { WindowManager . LayoutParams loc0 = arg0 . getAttributes ( ) ; loc0 . screenBrightness = arg1 / 255.0f ; arg0 . setAttributes ( loc0 ) ; }"
    },
    {
        "question_id": 690,
        "intent": "Convert a Duration to the number of microseconds.The result will be rounded towards 0 to the nearest microseconds . E.g. , if the duration represents -1 nanosecond , it will be rounded to 0 .",
        "snippet": "long function ( Duration arg0 ) { return Durations . toMicros ( arg0 ) ; }"
    },
    {
        "question_id": 691,
        "intent": "Setter for the line join style . For possible values see PdfContentByte",
        "snippet": "void function ( int arg0 ) { this . concodeclass_lineJoinStyle = arg0 ; }"
    },
    {
        "question_id": 692,
        "intent": "Is this menu a submenu ?",
        "snippet": "boolean function ( Menu arg0 ) { return arg0 . getParentMenu ( ) != null ; }"
    },
    {
        "question_id": 693,
        "intent": "Notifies handler that an active transaction has completed .",
        "snippet": "void function ( int arg0 ) { concodefunc_decrementTransactionCount ( ) ; }"
    },
    {
        "question_id": 694,
        "intent": "Sign a Hawk request string .",
        "snippet": "String function ( byte [ ] arg0 , byte [ ] arg1 ) { return Base64 . encodeBase64String ( concodefunc_hmacSha256 ( arg0 , arg1 ) ) ; }"
    },
    {
        "question_id": 695,
        "intent": "Adds a test to the suite .",
        "snippet": "void function ( Test arg0 ) { concodeclass_fTests . addElement ( arg0 ) ; }"
    },
    {
        "question_id": 696,
        "intent": "Yields a flat sequence of elements . Any Iterable4 or Iterator4 found in the original sequence is recursively flattened .",
        "snippet": "Iterator4 function ( Iterator4 arg0 ) { return new FlatteningIterator ( arg0 ) ; }"
    },
    {
        "question_id": 697,
        "intent": "Comment on propertyDescriptor",
        "snippet": "ResourceEditPropertyBuilder function ( String arg0 ) { this . concodeclass_propertyComment = concodefunc_convert ( arg0 ) ; return this ; }"
    },
    {
        "question_id": 698,
        "intent": "Create a condition that tests if the given widget has the expected text .",
        "snippet": "IUICondition function ( String arg0 ) { return new HasTextCondition ( this , arg0 ) ; }"
    },
    {
        "question_id": 699,
        "intent": "Comparison with any other object .",
        "snippet": "boolean function ( Object arg0 ) { if ( ! ( arg0 instanceof LocalRing ) ) { return false ; } LocalRing < C > loc0 = null ; try { loc0 = ( LocalRing < C > ) arg0 ; } catch ( ClassCastException loc1 ) { } if ( loc0 == null ) { return false ; } if ( ! concodeclass_ring . equals ( loc0 . ring ) ) { return false ; } return concodeclass_ideal . equals ( loc0 . ideal ) ; }"
    },
    {
        "question_id": 700,
        "intent": "To be set by the configurator .",
        "snippet": "void function ( double arg0 ) { this . concodeclass_torusDimensionSize = arg0 ; this . concodeclass_halfTorusDimensionSize = arg0 * 0.5d ; }"
    },
    {
        "question_id": 701,
        "intent": "Looks up a handler matching the given request URI .",
        "snippet": "HttpRequestHandler function ( final HttpRequest arg0 ) { Args . notNull ( arg0 , \"srini_string\" ) ; return concodeclass_matcher . lookup ( concodefunc_getRequestPath ( arg0 ) ) ; }"
    },
    {
        "question_id": 702,
        "intent": "Makes a copy of the internal buffer .",
        "snippet": "byte [ ] function ( ) { byte loc0 [ ] = new byte [ concodeclass_pos ] ; System . arraycopy ( buf , 0 , loc0 , 0 , concodeclass_pos ) ; return loc0 ; }"
    },
    {
        "question_id": 703,
        "intent": "Return the n'th byte down the stack , where 0 is the top element and size -1 is the bottom element .",
        "snippet": "byte function ( int arg0 ) { if ( concodeclass_list . isEmpty ( ) ) { throw new EmptyStackException ( ) ; } return concodeclass_list . get ( concodeclass_list . size ( ) - arg0 - 1 ) ; }"
    },
    {
        "question_id": 704,
        "intent": "ModInteger remainder .",
        "snippet": "ModInteger function ( ModInteger arg0 , ModInteger arg1 ) { if ( arg0 == null ) return null ; return arg0 . remainder ( arg1 ) ; }"
    },
    {
        "question_id": 705,
        "intent": "adds a measured rtt to monitor . if there is still a rtt , it will be replaced , if the new one is smaller",
        "snippet": "void function ( Host arg0 , double arg1 ) { if ( concodeclass_cumulatedRTTs != null ) throw new IllegalStateException ( \"srini_string\" ) ; List < Double > loc0 = concodeclass_rttToMonitors . get ( arg0 ) ; if ( loc0 == null ) { loc0 = new ArrayList < Double > ( 10 ) ; concodeclass_rttToMonitors . put ( arg0 , loc0 ) ; } loc0 . add ( arg1 ) ; }"
    },
    {
        "question_id": 706,
        "intent": "Configures the fragment to be one that defines encryption data of the specified length . #definesEncryptionData is set to true , #sampleEncryptionDataLength is set tothe specified length , and #sampleEncryptionData is resized if necessary such that itis at least this length .",
        "snippet": "void function ( int arg0 ) { if ( concodeclass_sampleEncryptionData == null || concodeclass_sampleEncryptionData . limit ( ) < arg0 ) { concodeclass_sampleEncryptionData = new ParsableByteArray ( arg0 ) ; } concodeclass_sampleEncryptionDataLength = arg0 ; concodeclass_definesEncryptionData = true ; concodeclass_sampleEncryptionDataNeedsFill = true ; }"
    },
    {
        "question_id": 707,
        "intent": "scalar / dot product of this vector with other vector .",
        "snippet": "C function ( GenVector < C > arg0 ) { C loc0 = concodeclass_modul . coFac . getZERO ( ) ; List < C > loc1 = arg0 . val ; int loc2 = 0 ; for ( C loc3 : concodeclass_val ) { C loc4 = loc3 . multiply ( loc1 . get ( loc2 ++ ) ) ; loc0 = loc0 . sum ( loc4 ) ; } return loc0 ; }"
    },
    {
        "question_id": 708,
        "intent": "Returns the previous trace point that had to be painted by #paintPoint int , int , int , int , Graphics , ITracePoint2D . This value will be null if no previous point had to be painted .",
        "snippet": "ITracePoint2D function ( ) { return this . concodeclass_m_previousPoint ; }"
    },
    {
        "question_id": 709,
        "intent": "Indicate if payload size should be estimated and controlled when adding properties default is false .",
        "snippet": "void function ( boolean arg0 ) { this . concodeclass_payloadSizeEstimatedWhenAdding = arg0 ; }"
    },
    {
        "question_id": 710,
        "intent": "Returns the local WorkerContext , beware : could be a newly initialized one , if XMLWorker #close or XMLWorker #closeLocalWC has been called before .",
        "snippet": "WorkerContext function ( ) { return concodeclass_context . get ( ) ; }"
    },
    {
        "question_id": 711,
        "intent": "Sets the value of the lockscope property .",
        "snippet": "void function ( Lockscope arg0 ) { this . concodeclass_lockscope = arg0 ; }"
    },
    {
        "question_id": 712,
        "intent": "Same as call to #isStandardTypeCode int",
        "snippet": "boolean function ( Integer arg0 ) { return concodeclass_JDBC_TYPE_MAP . containsKey ( arg0 ) ; }"
    },
    {
        "question_id": 713,
        "intent": "Convert this Step into a String suitable for editing . The default is the XML representation of the Step .",
        "snippet": "String function ( ) { return concodefunc_toXMLString ( this ) ; }"
    },
    {
        "question_id": 714,
        "intent": "Starts the NIO reactor .",
        "snippet": "void function ( ) { concodeclass_reactor = new NioReactor ( concodeclass_dispatcher ) ; LoggingHandler loc0 = new LoggingHandler ( ) ; concodeclass_reactor . registerChannel ( concodefunc_tcpChannel ( 6666 , loc0 ) ) . registerChannel ( concodefunc_tcpChannel ( 6667 , loc0 ) ) . registerChannel ( concodefunc_udpChannel ( 6668 , loc0 ) ) . start ( ) ; }"
    },
    {
        "question_id": 715,
        "intent": "Translate space character into & pct ; 20 to avoid problems with paths that contain spaces on some JVMs .",
        "snippet": "String function ( String arg0 ) { while ( true ) { int loc0 = arg0 . indexOf ( ' ' ) ; if ( loc0 < 0 ) { break ; } arg0 = arg0 . substring ( 0 , loc0 ) + arg0 . substring ( loc0 + 1 ) ; } return ( arg0 ) ; }"
    },
    {
        "question_id": 716,
        "intent": "Returns the label for a URL , URI or URL part . Example is ` http://www.x.xom/s.html#1 '",
        "snippet": "String function ( String arg0 ) { return Strings . markLTR ( arg0 , concodeclass_URL_DELIMITERS ) ; }"
    },
    {
        "question_id": 717,
        "intent": "Blindly decode content and return the result ASN1 object .",
        "snippet": "Asn1Type function ( byte [ ] arg0 ) { return decode ( ByteBuffer . wrap ( arg0 ) ) ; }"
    },
    {
        "question_id": 718,
        "intent": "Method to verify the content of the bundle are correct . This method will not mutate bundle .",
        "snippet": "boolean function ( Bundle arg0 ) { if ( null == arg0 ) { return false ; } if ( ! arg0 . containsKey ( concodeclass_BUNDLE_EXTRA_STRING_MESSAGE ) ) { return false ; } return true ; }"
    },
    {
        "question_id": 719,
        "intent": "Returns the class of type of elements held in this ArrayDeclarationInfo",
        "snippet": "Class < ? > function ( ) { return this . concodeclass_elementType ; }"
    },
    {
        "question_id": 720,
        "intent": "Called after a successful flush",
        "snippet": "void function ( PersistentCollection arg0 ) { if ( concodefunc_isIgnore ( ) ) { concodeclass_ignore = false ; } else if ( ! concodefunc_isProcessed ( ) ) { throw new AssertionFailure ( \"srini_string\" + arg0 . getRole ( ) + \"srini_string\" ) ; } arg0 . setSnapshot ( concodeclass_loadedKey , concodeclass_role , concodeclass_snapshot ) ; }"
    },
    {
        "question_id": 721,
        "intent": "Returns the same citations rdd that was specified as argument .",
        "snippet": "JavaPairRDD < String , MatchableEntity > function ( JavaPairRDD < String , MatchableEntity > arg0 ) { return arg0 ; }"
    },
    {
        "question_id": 722,
        "intent": "Adds a line to the pool and makes it available for reuse . If more than 8 lines are in the cache , then the line is closed .",
        "snippet": "void function ( SourceDataLine arg0 ) { if ( concodeclass_lines . size ( ) < 16 ) { concodeclass_lines . addElement ( arg0 ) ; } else { arg0 . close ( ) ; } }"
    },
    {
        "question_id": 723,
        "intent": "Get status of a running event .",
        "snippet": "void function ( int arg0 ) { if ( ! concodeclass_eventPool . containsKey ( arg0 ) ) { throw new EventDoesNotExistException ( arg0 + \"srini_string\" ) ; } concodeclass_eventPool . get ( arg0 ) . status ( ) ; }"
    },
    {
        "question_id": 724,
        "intent": "Fail . Should be used whenever an impossible state is encountered such as the default branch of a switch over all possible values of an enum : such an assertion may save future developers time when they try to add new states",
        "snippet": "void function ( ) { concodefunc_isTrue ( false ) ; }"
    },
    {
        "question_id": 725,
        "intent": "Set a new opponent 's weight . Should be negative or zero",
        "snippet": "void function ( int arg0 ) { this . concodeclass_weight = arg0 ; }"
    },
    {
        "question_id": 726,
        "intent": "Called on the event dispatching thread not on the worker thread after the construct method has finished and after done or failed has been invoked . The default implementation does nothing . Subclasses may override this method to perform completion actions on the Event Dispatch Thread .",
        "snippet": "void function ( ) { }"
    },
    {
        "question_id": 727,
        "intent": "Updates segment tree for given range by given delta",
        "snippet": "void function ( int arg0 [ ] , int arg1 [ ] , int arg2 , int arg3 , int arg4 ) { for ( int loc0 = arg2 ; loc0 <= arg3 ; loc0 ++ ) { arg0 [ loc0 ] += arg4 ; } updateSegmentTreeRange ( arg1 , arg2 , arg3 , arg4 , 0 , arg0 . length - 1 , 0 ) ; }"
    },
    {
        "question_id": 728,
        "intent": "Access the last iteration count .",
        "snippet": "int function ( ) { if ( concodeclass_resultComputed ) { return concodeclass_iterationCount ; } else { throw new IllegalStateException ( \"srini_string\" ) ; } }"
    },
    {
        "question_id": 729,
        "intent": "Obtener las vueltas calculadas , para saber el valor de cada posicion del array podemos usar la variable : public static final int BILLETES_MONEDAS",
        "snippet": "int [ ] function ( ) { return this . concodeclass_aVueltas ; }"
    },
    {
        "question_id": 730,
        "intent": "Tests that invocation on a service deployed within a . sar , inside a . ear without an application.xml , is successful .",
        "snippet": "void function ( ) { this . concodefunc_testSarWithinEar ( \"srini_string\" ) ; }"
    },
    {
        "question_id": 731,
        "intent": "Creates a new SAX parser .",
        "snippet": "SAXParser function ( ) { try { return SAXParserFactory . newInstance ( ) . newSAXParser ( ) ; } catch ( ParserConfigurationException loc0 ) { throw new OsmosisRuntimeException ( \"srini_string\" , loc0 ) ; } catch ( SAXException loc0 ) { throw new OsmosisRuntimeException ( \"srini_string\" , loc0 ) ; } }"
    },
    {
        "question_id": 732,
        "intent": "This method returns an aggregate of the complexity of the solved queries at a certain level . The method returns the complexity , which is attained by varying the amount of searched peers .",
        "snippet": "MetricsAggregate function ( ) { return concodeclass_peerVariation ; }"
    },
    {
        "question_id": 733,
        "intent": "Verifies that the content of the ProcessObject is processed on content .",
        "snippet": "void function ( ) { concodeclass_p . content ( concodeclass_context , null , null , concodeclass_po ) ; Assert . assertEquals ( concodeclass_writable , concodeclass_lst . get ( 0 ) ) ; }"
    },
    {
        "question_id": 734,
        "intent": "Adds an interface of a given Type to the set of interfaces that the class implements .",
        "snippet": "void function ( final Type arg0 ) { final Type [ ] loc0 = new Type [ this . concodeclass_interfaces . length + 1 ] ; for ( int loc1 = 0 ; loc1 < this . concodeclass_interfaces . length ; loc1 ++ ) { loc0 [ loc1 ] = this . concodeclass_interfaces [ loc1 ] ; } loc0 [ loc0 . length - 1 ] = arg0 ; this . concodefunc_setInterfaces ( loc0 ) ; }"
    },
    {
        "question_id": 735,
        "intent": "This method creates a validator object that adds support for bean validation API 1.0 and 1.1 .",
        "snippet": "LocalValidatorFactoryBean function ( ) { return new LocalValidatorFactoryBean ( ) ; }"
    },
    {
        "question_id": 736,
        "intent": "Get the base ID URL or system ID from where URLs will be resolved .",
        "snippet": "String function ( ) { return this . concodeclass_baseID ; }"
    },
    {
        "question_id": 737,
        "intent": "creates a parentTree of all parents of a given Tag",
        "snippet": "List < String > function ( Tag arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; Tag loc1 = arg0 . getParent ( ) ; while ( loc1 != null && ! ( loc1 . getName ( ) . equals ( HTML . Tag . BODY ) ) ) { loc0 . add ( loc1 . getName ( ) ) ; loc1 = loc1 . getParent ( ) ; } return loc0 ; }"
    },
    {
        "question_id": 738,
        "intent": "Only",
        "snippet": "void function ( ) { Query loc0 = concodeclass_st . query ( ) ; loc0 . descend ( \"srini_string\" ) ; Object [ ] loc1 = concodefunc_store ( ) ; concodeclass_st . expect ( loc0 , loc1 ) ; }"
    },
    {
        "question_id": 739,
        "intent": "Substracts the given value from the internal value .",
        "snippet": "void function ( final int arg0 ) { final int loc0 = this . concodeclass_m_value ; this . concodeclass_m_value -= arg0 ; if ( loc0 < this . concodeclass_m_value ) { this . concodeclass_m_value = loc0 ; throw new ArithmeticException ( \"srini_string\" ) ; } }"
    },
    {
        "question_id": 740,
        "intent": "Sets the value of the outOfServiceByRelease property .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_outOfServiceByRelease = arg0 ; }"
    },
    {
        "question_id": 741,
        "intent": "Return the class loader to be used for instantiating application objects when required . This is determined based upon the following rules : The specified class loader , if any The thread context class loader , if it exists and useContextClassLoader is true The class loader used to load the calling class . The System class loader .",
        "snippet": "ClassLoader function ( ClassLoader arg0 , boolean arg1 , Class arg2 ) { if ( arg0 != null ) { return arg0 ; } if ( arg1 ) { ClassLoader loc0 = Thread . currentThread ( ) . getContextClassLoader ( ) ; if ( loc0 != null ) { return loc0 ; } } return getClassLoader ( arg2 ) ; }"
    },
    {
        "question_id": 742,
        "intent": "Access to the names of all named parameters",
        "snippet": "Set < String > function ( ) { return concodeclass_namedDescriptorMap . keySet ( ) ; }"
    },
    {
        "question_id": 743,
        "intent": "Programatical invocation of a dialog field change .",
        "snippet": "void function ( ) { if ( concodeclass_fDialogFieldListener != null ) { concodeclass_fDialogFieldListener . dialogFieldChanged ( this ) ; } }"
    },
    {
        "question_id": 744,
        "intent": "Returns the ip address mapped to the given hostname . If no mapping exists , the hostname is returned .",
        "snippet": "String function ( String arg0 ) { final String loc0 = concodeclass_hostToIp . get ( arg0 ) ; return loc0 == null ? arg0 : loc0 ; }"
    },
    {
        "question_id": 745,
        "intent": "Returns the ones .",
        "snippet": "List function ( ) { return concodeclass_ones ; }"
    },
    {
        "question_id": 746,
        "intent": "Transforms an object into JSON and returns the JSON as a byte array .",
        "snippet": "byte [ ] function ( Object arg0 ) { ObjectMapper loc0 = new ObjectMapper ( ) ; loc0 . setSerializationInclusion ( JsonInclude . Include . NON_NULL ) ; return loc0 . writeValueAsBytes ( arg0 ) ; }"
    },
    {
        "question_id": 747,
        "intent": "Methode toString du Vector",
        "snippet": "String function ( ) { return \"srini_string\" + concodeclass__topDistance + \"srini_string\" + concodeclass__leftDistance + \"srini_string\" + concodeclass__endTopDistance + \"srini_string\" + concodeclass__endLeftDistance + \"srini_string\" ; }"
    },
    {
        "question_id": 748,
        "intent": "Returns a set view of the mappings contained in this registry . Each element in the returned set is a Map.Entry . The set is backed by the registry , so changes to the map are reflected in the set , and vice-versa . If the registry is modified while an iteration over the set is in progress , the results of the iteration are undefined .",
        "snippet": "Set function ( ) { return concodeclass__register . entrySet ( ) ; }"
    },
    {
        "question_id": 749,
        "intent": "transfers from right to left",
        "snippet": "T [ ] function ( T [ ] arg0 , T [ ] arg1 , int arg2 , int arg3 ) { return ArrayTool . transferValues ( arg0 , arg1 , arg2 , 0 , arg3 ) ; }"
    },
    {
        "question_id": 750,
        "intent": "Header in Freemarker Syntax for function",
        "snippet": "String function ( ) { return \"srini_string\" + concodeclass_name + \"srini_string\" ; }"
    },
    {
        "question_id": 751,
        "intent": "Get a device according to his id",
        "snippet": "Device function ( String arg0 ) { if ( ( arg0 == null ) || ( arg0 . trim ( ) . equals ( \"srini_string\" ) ) ) { throw new NullIdException ( ) ; } else { if ( this . concodeclass_devices . containsKey ( arg0 ) ) { return this . concodeclass_devices . get ( arg0 ) ; } else { throw new UnknownDeviceException ( ) ; } } }"
    },
    {
        "question_id": 752,
        "intent": "Formats time as milliseconds with units .",
        "snippet": "String function ( double arg0 ) { return ( int ) arg0 + concodeclass_UNIT_MILLISECONDS ; }"
    },
    {
        "question_id": 753,
        "intent": "Create a new RawFragmentBatch based on this incoming data batch that is transferred into the provided allocator . Also increments the AckSender to expect one additional return message .",
        "snippet": "RawFragmentBatch function ( final BufferAllocator arg0 ) { final DrillBuf loc0 = concodeclass_body == null ? null : concodeclass_body . transferOwnership ( arg0 ) . buffer ; concodeclass_sender . increment ( ) ; return new RawFragmentBatch ( concodeclass_header , loc0 , concodeclass_sender ) ; }"
    },
    {
        "question_id": 754,
        "intent": "Get a Quotient element from a long value .",
        "snippet": "Quotient < C > function ( long arg0 ) { return new Quotient < C > ( this , concodeclass_ring . fromInteger ( arg0 ) ) ; }"
    },
    {
        "question_id": 755,
        "intent": "Return an list of ABIs we supported on this device ordered according to preference . Use a separate inner class to isolate the version-dependent call where it wo n't cause the whole class to fail preverification .",
        "snippet": "String [ ] function ( ) { if ( Build . VERSION . SDK_INT < Build . VERSION_CODES . LOLLIPOP ) { return new String [ ] { Build . CPU_ABI , Build . CPU_ABI2 } ; } else { return LollipopSysdeps . getSupportedAbis ( ) ; } }"
    },
    {
        "question_id": 756,
        "intent": "Creation of H2 db",
        "snippet": "DataSource function ( ) { BasicDataSource loc0 = new BasicDataSource ( ) ; loc0 . setDriverClassName ( \"srini_string\" ) ; loc0 . setUrl ( \"srini_string\" ) ; loc0 . setUsername ( \"srini_string\" ) ; loc0 . setPassword ( \"srini_string\" ) ; return ( DataSource ) loc0 ; }"
    },
    {
        "question_id": 757,
        "intent": "Get index into children array , that is hit by this planIndex",
        "snippet": "int function ( int arg0 ) { int loc0 = 0 ; while ( ( arg0 < concodefunc_lowestRangeHit ( loc0 ) ) || ( arg0 > concodefunc_highestRangeHit ( loc0 ) ) ) { loc0 ++ ; } return loc0 ; }"
    },
    {
        "question_id": 758,
        "intent": "Create a client-server topology , using one HazelcastInstance server and one HazelcastInstance client . The client is the returned as the @Bean .",
        "snippet": "HazelcastInstance function ( ) { InstanceHelper . makeServer ( \"srini_string\" + Constants . HAZELCAST_INSTANCE_NAME , concodeclass_CLUSTER_PORT ) ; HazelcastInstance loc0 = InstanceHelper . makeClient ( Constants . HAZELCAST_INSTANCE_NAME ) ; concodeclass_LOG . trace ( \"srini_string\" , loc0 ) ; return loc0 ; }"
    },
    {
        "question_id": 759,
        "intent": "Checks if given permission is available . If not a checked exception is thrown with error message containing extraInfo part .",
        "snippet": "void function ( Permission arg0 , String arg1 ) { concodeclass_permissionService . checkPermissionAndFireException ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 760,
        "intent": "Paint a cached formula",
        "snippet": "Object function ( String arg0 , int arg1 , int arg2 , int arg3 , int arg4 , Color arg5 , Graphics2D arg6 ) { return paintCachedTeXFormula ( new CachedTeXFormula ( arg0 , arg1 , arg2 , arg3 , arg4 , arg5 ) , arg6 ) ; }"
    },
    {
        "question_id": 761,
        "intent": "This method puts TreeHandler back in its initial state , if the host got off-line or if the peer left the underlying overlay .",
        "snippet": "void function ( ) { concodeclass_isRoot = false ; }"
    },
    {
        "question_id": 762,
        "intent": "Verifies that lower throws IllegalArgumentException if not",
        "snippet": "void function ( double arg0 , double arg1 , double arg2 ) { if ( ! concodefunc_isSequence ( arg0 , arg1 , arg2 ) ) { throw new IllegalArgumentException ( \"srini_string\" + arg0 + \"srini_string\" + arg1 + \"srini_string\" + arg2 ) ; } }"
    },
    {
        "question_id": 763,
        "intent": "Adds a RichMediaConfiguration . Part of the RichMediaContent .",
        "snippet": "PdfIndirectReference function ( RichMediaConfiguration arg0 ) { if ( concodeclass_configurations == null ) throw new IllegalPdfSyntaxException ( \"srini_string\" ) ; PdfIndirectReference loc0 = concodeclass_writer . addToBody ( arg0 ) . getIndirectReference ( ) ; concodeclass_configurations . add ( loc0 ) ; return loc0 ; }"
    },
    {
        "question_id": 764,
        "intent": "parse given files .",
        "snippet": "List < Document > function ( DocumentParser arg0 , File [ ] arg1 ) { List < Document > loc0 = new ArrayList < > ( ) ; for ( File loc1 : arg1 ) { loc0 . add ( arg0 . parse ( loc1 , concodeclass_sentenceExtractor , concodeclass_configuration . getTokenizer ( ) ) ) ; } return loc0 ; }"
    },
    {
        "question_id": 765,
        "intent": "Can be customized in subclasses .",
        "snippet": "void function ( MenuItemReference arg0 ) { arg0 . click ( ) ; }"
    },
    {
        "question_id": 766,
        "intent": "Set the indirect reference",
        "snippet": "void function ( PRIndirectReference arg0 ) { this . concodeclass_indRef = arg0 ; }"
    },
    {
        "question_id": 767,
        "intent": "Searchs the stored list of local variables for a local variable with a given value number .",
        "snippet": "MemExpr function ( final int arg0 ) { final Iterator loc0 = concodeclass_LocalStore . keySet ( ) . iterator ( ) ; while ( loc0 . hasNext ( ) ) { final MemExpr loc1 = ( MemExpr ) loc0 . next ( ) ; if ( loc1 . valueNumber ( ) == arg0 ) { return loc1 ; } } return null ; }"
    },
    {
        "question_id": 768,
        "intent": "Verifies that the call to content of Div returns a NoNewLineParagraph .",
        "snippet": "void function ( ) { final List < Element > loc0 = concodeclass_d . loc0 ( concodeclass_workerContextImpl , new Tag ( \"srini_string\" ) , \"srini_string\" ) ; Assert . assertTrue ( loc0 . get ( 0 ) instanceof NoNewLineParagraph ) ; }"
    },
    {
        "question_id": 769,
        "intent": "Verify if Nazgul #getInstance NazgulName returns the correct Nazgul multiton instance",
        "snippet": "void function ( ) { for ( final NazgulName loc0 : NazgulName . values ( ) ) { final Nazgul loc1 = Nazgul . getInstance ( loc0 ) ; assertNotNull ( loc1 ) ; assertSame ( loc1 , Nazgul . getInstance ( loc0 ) ) ; assertEquals ( loc0 , loc1 . getName ( ) ) ; } }"
    },
    {
        "question_id": 770,
        "intent": "Null-safe check for a context - if the given context is null , it returns the global context .",
        "snippet": "ContextEntity function ( ContextEntity arg0 ) { if ( arg0 != null ) { return arg0 ; } return concodefunc_getGlobalResourceContextEntity ( ) ; }"
    },
    {
        "question_id": 771,
        "intent": "Add a Path with a custom Schema to the list ofinputs for the map-reduce job .",
        "snippet": "void function ( JobConf arg0 , Path arg1 , Schema arg2 ) { String loc0 = arg1 . toString ( ) + \"srini_string\" + concodefunc_toBase64 ( arg2 . toString ( ) ) ; String loc1 = arg0 . get ( concodeclass_schemaKey ) ; arg0 . set ( concodeclass_schemaKey , loc1 == null ? loc0 : loc1 + \"srini_string\" + loc0 ) ; arg0 . setInputFormat ( DelegatingInputFormat . class ) ; }"
    },
    {
        "question_id": 772,
        "intent": "isEmpty returns true if this list is empty , false otherwise .",
        "snippet": "boolean function ( ) { return ( concodeclass_size == 0 ) ; }"
    },
    {
        "question_id": 773,
        "intent": "Change la figure passer en parametre",
        "snippet": "void function ( Figure arg0 ) { concodeclass__message = arg0 ; }"
    },
    {
        "question_id": 774,
        "intent": "Frees a Hessian 2.0 serializer",
        "snippet": "void function ( Hessian2StreamingOutput arg0 ) { if ( arg0 == null ) { return ; } concodefunc_freeHessian2Output ( arg0 . getHessian2Output ( ) ) ; }"
    },
    {
        "question_id": 775,
        "intent": "Create an instance of Limit",
        "snippet": "Limit function ( ) { return new Limit ( ) ; }"
    },
    {
        "question_id": 776,
        "intent": "Sets the parent of this change . Requires that this change is n't already connected to a parent . The parent can be null to disconnect this change from a parent .",
        "snippet": "void function ( Change arg0 ) { if ( arg0 != null ) Assert . isTrue ( concodeclass_fParent == null ) ; concodeclass_fParent = arg0 ; }"
    },
    {
        "question_id": 777,
        "intent": "AlgebraicNumber greatest common divisor .",
        "snippet": "AlgebraicNumber < C > function ( AlgebraicNumber < C > arg0 ) { if ( arg0 . isZERO ( ) ) { return this ; } if ( concodefunc_isZERO ( ) ) { return arg0 ; } if ( concodefunc_isUnit ( ) || arg0 . isUnit ( ) ) { return concodeclass_ring . getONE ( ) ; } return new AlgebraicNumber < C > ( concodeclass_ring , concodeclass_val . gcd ( arg0 . val ) ) ; }"
    },
    {
        "question_id": 778,
        "intent": "Returns an unmodifiable version of the given non-null IntList .",
        "snippet": "IntList function ( IntList arg0 ) { if ( null == arg0 ) { throw new NullPointerException ( ) ; } return UnmodifiableIntList . wrap ( arg0 ) ; }"
    },
    {
        "question_id": 779,
        "intent": "Stop dispatching item changed events to presenters until start | resume DispatchingItemsChanged is called . Useful when many menu operations are going to be performed as a batch .",
        "snippet": "void function ( ) { concodeclass_mDidChange = false ; concodeclass_mShouldDispatchChanges = false ; }"
    },
    {
        "question_id": 780,
        "intent": "Remove bean instance .",
        "snippet": "void function ( ServiceRegistry arg0 , BeanState arg1 , Object arg2 ) { removeInstance ( arg0 , arg1 , arg2 . getClass ( ) , arg2 ) ; }"
    },
    {
        "question_id": 781,
        "intent": "Gets the value of the message property . This accessor method returns a reference to the live list , not a snapshot . Therefore any modification you make to the returned list will be present inside the JAXB object . This is why there is not a set method for the message property . For example , to add a new item , do as follows : getMessage . add newItem ; Objects of the following type s are allowed in the list Message",
        "snippet": "List < Message > function ( ) { if ( concodeclass_message == null ) { concodeclass_message = new ArrayList < Message > ( ) ; } return this . concodeclass_message ; }"
    },
    {
        "question_id": 782,
        "intent": "Write the link tag with a reference to the external resource .",
        "snippet": "T function ( String arg0 ) { return ( T ) concodeclass_canvas . link ( type ( \"srini_string\" ) . href ( arg0 ) . rel ( \"srini_string\" ) ) ; }"
    },
    {
        "question_id": 783,
        "intent": "Returns an iterator over entries in this file . Note that this iterator is shared with other users of the file : it does not contain a separate pointer into the file .",
        "snippet": "Iterator < D > function ( ) { return this ; }"
    },
    {
        "question_id": 784,
        "intent": "Retrieves from the storm configuration the specified named query .",
        "snippet": "ContextQuery function ( final String arg0 ) { return new ContextQuery . BoundQueryContext ( arg0 ) ; }"
    },
    {
        "question_id": 785,
        "intent": "Get the JNI signaure for a member .",
        "snippet": "String function ( Member arg0 ) { return arg0 instanceof Field ? getSignature ( ( Field ) arg0 ) : arg0 instanceof Method ? getSignature ( ( Method ) arg0 ) : getSignature ( ( Constructor < ? > ) arg0 ) ; }"
    },
    {
        "question_id": 786,
        "intent": "Sets the fum .",
        "snippet": "void function ( Fum arg0 ) { this . concodeclass_fum = arg0 ; }"
    },
    {
        "question_id": 787,
        "intent": "Return the list of ISSUED and RENEWED tokens .",
        "snippet": "Token [ ] function ( ) { return new Token [ 0 ] ; }"
    },
    {
        "question_id": 788,
        "intent": "Deletes all text from the clipboard .",
        "snippet": "void function ( ) { concodefunc_setText ( null ) ; }"
    },
    {
        "question_id": 789,
        "intent": "Get objects that determines search query",
        "snippet": "String function ( String arg0 , int arg1 ) { return concodefunc_doSendApiRequest ( \"srini_string\" , \"srini_string\" + arg0 + \"srini_string\" + arg1 ) ; }"
    },
    {
        "question_id": 790,
        "intent": "Remove the local variable type table attribute LVTT from mg . Evidently some changes require this to be updated , but without BCEL support that would be hard to do . It should be safe to just delete it since it is optional and really only of use to a debugger .",
        "snippet": "void function ( MethodGen arg0 ) { for ( Attribute loc0 : arg0 . getCodeAttributes ( ) ) { if ( concodefunc_is_local_variable_type_table ( loc0 , arg0 . getConstantPool ( ) ) ) { arg0 . removeCodeAttribute ( loc0 ) ; } } }"
    },
    {
        "question_id": 791,
        "intent": "Convenience method for setting a flag .",
        "snippet": "void function ( BufferFlag arg0 ) { setFlag ( arg0 , true ) ; }"
    },
    {
        "question_id": 792,
        "intent": "The index of the statement that creates this value .",
        "snippet": "int function ( ) { return this . concodeclass_index ; }"
    },
    {
        "question_id": 793,
        "intent": "initializes the main menu background",
        "snippet": "void function ( ) { this . concodeclass_background = this . concodefunc_loadAndResizeSprite ( \"srini_string\" , 672 , 864 ) ; }"
    },
    {
        "question_id": 794,
        "intent": "Use a strategy that validates that a schema can read existing schema s , and vice-versa , according to the Avro default schema resolution .",
        "snippet": "SchemaValidatorBuilder function ( ) { this . concodeclass_strategy = new ValidateMutualRead ( ) ; return this ; }"
    },
    {
        "question_id": 795,
        "intent": "Return true iff this quadrant is adjacent to the boundary of an image in the given direction .",
        "snippet": "boolean function ( int arg0 ) { return ( arg0 == QuadTreeNode . SOUTH || arg0 == QuadTreeNode . EAST ) ; }"
    },
    {
        "question_id": 796,
        "intent": "Returns an Executor that wraps Runnables before submission to the passed in Executor .",
        "snippet": "Executor function ( final Executor arg0 ) { return new Executor ( ) { @ Override public void execute ( Runnable arg1 ) { arg0 . execute ( concodefunc_makeContextRunnable ( arg1 ) ) ; } } ; }"
    },
    {
        "question_id": 797,
        "intent": "addFish places a fish in cell x , y if the cell is empty . If the cell is already occupied , leave the cell as it is .",
        "snippet": "void function ( int arg0 , int arg1 ) { int [ ] loc0 = concodefunc_checkOffGrid ( arg0 , arg1 ) ; if ( concodeclass_gridData [ loc0 [ 0 ] ] [ loc0 [ 1 ] ] == null ) { concodeclass_gridData [ loc0 [ 0 ] ] [ loc0 [ 1 ] ] = new Animal ( 2 ) ; } }"
    },
    {
        "question_id": 798,
        "intent": "Returns the ISO two-letter country code of this country .",
        "snippet": "String function ( ) { return concodeclass_code ; }"
    },
    {
        "question_id": 799,
        "intent": "Converts an array of integer pixels into an image . The array is referenced by the image .",
        "snippet": "BufferedImage function ( int [ ] arg0 , int arg1 , int arg2 ) { return new BufferedImage ( DirectColorModel . getRGBdefault ( ) , Raster . createWritableRaster ( new SinglePixelPackedSampleModel ( DataBuffer . TYPE_INT , arg1 , arg2 , new int [ ] { 0xff00000 , 0xff00 , 0xff } ) , new DataBufferInt ( arg0 , arg1 * arg2 ) , new Point ( 0 , 0 ) ) , false , null ) ; }"
    },
    {
        "question_id": 800,
        "intent": "Create an instance of Link",
        "snippet": "Link function ( ) { return new Link ( ) ; }"
    },
    {
        "question_id": 801,
        "intent": "Returns the full path of the immediate parent of the specified node . null if passed the root node or an invalid node",
        "snippet": "String function ( String arg0 ) { int loc0 = arg0 . lastIndexOf ( concodeclass_ZNODE_PATH_SEPARATOR ) ; return loc0 <= 0 ? null : arg0 . substring ( 0 , loc0 ) ; }"
    },
    {
        "question_id": 802,
        "intent": "Returns the debug .",
        "snippet": "Object function ( ) { return concodeclass_debug ; }"
    },
    {
        "question_id": 803,
        "intent": "Sets the String to be contained .",
        "snippet": "void function ( String arg0 ) { concodeclass_rowData = arg0 ; }"
    },
    {
        "question_id": 804,
        "intent": "Create a figure info instance . Note that by default this info object is lazily populated . If you need an eagerly populated info object , use the",
        "snippet": "FigureReference function ( IFigure arg0 ) { return concodefunc_lazy ( arg0 ) ; }"
    },
    {
        "question_id": 805,
        "intent": "Cache-Aside find user account helper",
        "snippet": "UserAccount function ( String arg0 ) { UserAccount loc0 = CacheStore . get ( arg0 ) ; if ( loc0 != null ) { return loc0 ; } loc0 = DbManager . readFromDb ( arg0 ) ; if ( loc0 != null ) { CacheStore . set ( arg0 , loc0 ) ; } return loc0 ; }"
    },
    {
        "question_id": 806,
        "intent": "The position when headers/footers should be repeated on each page .",
        "snippet": "Integer function ( ) { return concodeclass_repeated ; }"
    },
    {
        "question_id": 807,
        "intent": "Key methods",
        "snippet": "String function ( ) { return concodeclass_entry . getIdentifier ( ) ; }"
    },
    {
        "question_id": 808,
        "intent": "Method to set the title for the picture frame",
        "snippet": "void function ( String arg0 ) { concodeclass_frame . setTitle ( arg0 ) ; }"
    },
    {
        "question_id": 809,
        "intent": "Get a read-only list of all the items on the top shelf",
        "snippet": "List < Potion > function ( ) { return Collections . unmodifiableList ( this . concodeclass_topShelf ) ; }"
    },
    {
        "question_id": 810,
        "intent": "Add an adapter to be returned by #getAdapter Class",
        "snippet": "void function ( Class < ? > arg0 , Object arg1 ) { if ( concodeclass_adapters == null ) concodeclass_adapters = new HashMap < Class < ? > , Object > ( ) ; concodeclass_adapters . put ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 811,
        "intent": "Returns a typed sorted bag backed by the given bag . Only objects of the specified type can be added to the bag .",
        "snippet": "SortedBag function ( SortedBag arg0 , Class arg1 ) { return TypedSortedBag . decorate ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 812,
        "intent": "Returns the capacity of the array , which may be larger than the limit .",
        "snippet": "int function ( ) { return concodeclass_data == null ? 0 : concodeclass_data . length ; }"
    },
    {
        "question_id": 813,
        "intent": "Put entity in cache with cache lock .",
        "snippet": "void function ( long arg0 , @ NonNull T arg1 ) { concodeclass_lock . lock ( ) ; try { concodeclass_map . put ( arg0 , new WeakReference < T > ( arg1 ) ) ; } finally { concodeclass_lock . unlock ( ) ; } }"
    },
    {
        "question_id": 814,
        "intent": "retrieve all SpringConfig in the registry",
        "snippet": "Map < SpringConfig , String > function ( ) { return Collections . unmodifiableMap ( concodeclass_mSpringConfigMap ) ; }"
    },
    {
        "question_id": 815,
        "intent": "Gets attribute handler CookieAttributeHandler for thegiven attribute .",
        "snippet": "CookieAttributeHandler function ( final String arg0 ) { final CookieAttributeHandler loc0 = concodefunc_findAttribHandler ( arg0 ) ; if ( loc0 == null ) { throw new IllegalStateException ( \"srini_string\" + arg0 + \"srini_string\" ) ; } else { return loc0 ; } }"
    },
    {
        "question_id": 816,
        "intent": "Updates the last republish time by setting it to the current simulation time . A republish takes place if either this or another peer sends the data item to its neighbours .",
        "snippet": "void function ( ) { concodeclass_lastRepublish = Simulator . getCurrentTime ( ) ; }"
    },
    {
        "question_id": 817,
        "intent": "Writes a complex type , that also implements BackToXMLWritable .",
        "snippet": "void function ( String arg0 , BackToXMLWritable arg1 ) { if ( arg1 == null ) return ; Element loc0 = concodeclass_curRootNode . addElement ( arg0 ) ; loc0 . addAttribute ( \"srini_string\" , arg1 . getClass ( ) . getName ( ) ) ; arg1 . writeBackToXML ( new BackWriter ( loc0 ) ) ; }"
    },
    {
        "question_id": 818,
        "intent": "Computes the dotProduct of our sliding windows and weights vectors . TODO jaimeyap : I could make this a general purpose dotProduct function , but for now , this is more performant . Trivial to add later .",
        "snippet": "double function ( double [ ] arg0 , double [ ] arg1 ) { assert ( ( arg0 . length == 3 ) && ( arg1 . length == 3 ) ) ; return ( arg0 [ 2 ] * arg1 [ 2 ] ) + ( arg0 [ 1 ] * arg1 [ 1 ] ) + ( arg0 [ 0 ] * arg1 [ 0 ] ) ; }"
    },
    {
        "question_id": 819,
        "intent": "Test method for org.jboss.security.config.SecurityConfiguration #getKeyStoreURL .",
        "snippet": "void function ( ) { SecurityConfiguration . getKeyStoreURL ( ) ; }"
    },
    {
        "question_id": 820,
        "intent": "Sets the current principal name to the invocation context . Principal name is stored to the context under the ServerSecurityInterceptor #DELEGATED_USER_KEY key .",
        "snippet": "void function ( EJBClientInvocationContext arg0 ) { Principal loc0 = SecurityContextAssociation . getPrincipal ( ) ; if ( loc0 != null ) { Map < String , Object > loc1 = arg0 . getContextData ( ) ; loc1 . put ( ServerSecurityInterceptor . DELEGATED_USER_KEY , loc0 . getName ( ) ) ; } arg0 . sendRequest ( ) ; }"
    },
    {
        "question_id": 821,
        "intent": "Fetches the message belonging to the key .",
        "snippet": "String function ( final String arg0 ) { return concodeclass_bundle . getString ( arg0 ) ; }"
    },
    {
        "question_id": 822,
        "intent": "Compare 2 arrays only at the first level",
        "snippet": "boolean function ( Object [ ] arg0 , Object [ ] arg1 ) { if ( arg0 == arg1 ) return true ; if ( arg0 == null || arg1 == null ) return false ; int loc0 = arg0 . loc0 ; if ( loc0 != arg1 . loc0 ) return false ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( ! arg0 [ loc1 ] . equals ( arg1 [ loc1 ] ) ) return false ; } return true ; }"
    },
    {
        "question_id": 823,
        "intent": "Gets the closure .",
        "snippet": "Closure function ( ) { return concodeclass_iClosure ; }"
    },
    {
        "question_id": 824,
        "intent": "Gets the predicate in use .",
        "snippet": "Predicate function ( ) { return concodeclass_iPredicate ; }"
    },
    {
        "question_id": 825,
        "intent": "Validate that the schemas provided can mutually read data written by each other according to the default Avro schema resolution rules .",
        "snippet": "void function ( Schema arg0 , Schema arg1 ) { concodefunc_canRead ( arg0 , arg1 ) ; concodefunc_canRead ( arg1 , arg0 ) ; }"
    },
    {
        "question_id": 826,
        "intent": "Determines if an item is a folder .",
        "snippet": "boolean function ( ) { return ( concodeclass_mainType == null && concodeclass_view == null ) ; }"
    },
    {
        "question_id": 827,
        "intent": "Calculate the greatest common divisor .",
        "snippet": "int function ( int arg0 , int arg1 ) { if ( arg0 < 0 ) { arg0 = - arg0 ; } if ( arg1 < 0 ) { arg1 = - arg1 ; } while ( arg1 != 0 ) { int loc0 = arg0 % arg1 ; arg0 = arg1 ; arg1 = loc0 ; } return arg0 ; }"
    },
    {
        "question_id": 828,
        "intent": "Returns a MemberRef for the field",
        "snippet": "MemberRef function ( ) { return ( new MemberRef ( this . concodefunc_declaringClass ( ) . type ( ) , this . concodefunc_nameAndType ( ) ) ) ; }"
    },
    {
        "question_id": 829,
        "intent": "Liefert die Darstellung fuer den Null-Wert .",
        "snippet": "char function ( ) { return concodeclass_zero ; }"
    },
    {
        "question_id": 830,
        "intent": "Creates a light-weight dialog to present a RefactoringStatus tothe user . The following values are returned from the dialogs open method : org.eclipse.jface.dialogs.IDialogConstants #OK_ID IDialogConstants #OK_ID : if the user has pressed the continue button . org.eclipse.jface.dialogs.IDialogConstants #CANCEL_ID IDialogConstants #CANCEL_ID : if the user has pressed the cancel button . org.eclipse.jface.dialogs.IDialogConstants #BACK_ID IDialogConstants #BACK_ID : if the user has pressed the back button .",
        "snippet": "Dialog function ( RefactoringStatus arg0 , Shell arg1 , String arg2 ) { return new RefactoringStatusDialog ( arg0 , arg1 , arg2 , false , true ) ; }"
    },
    {
        "question_id": 831,
        "intent": "Sets value of the CoreConnectionPNames #SO_KEEPALIVE parameter .",
        "snippet": "void function ( final HttpParams arg0 , final boolean arg1 ) { Args . notNull ( arg0 , \"srini_string\" ) ; arg0 . setBooleanParameter ( CoreConnectionPNames . SO_KEEPALIVE , arg1 ) ; }"
    },
    {
        "question_id": 832,
        "intent": "Removes the mapping for this key from this map if it is present .",
        "snippet": "WidgetLocator function ( String arg0 ) { WidgetLocator loc0 = concodefunc_get ( arg0 ) ; concodeclass__values . remove ( loc0 ) ; return ( WidgetLocator ) concodeclass__register . remove ( arg0 ) ; }"
    },
    {
        "question_id": 833,
        "intent": "Not used within JUnit . Clients should simply instantiate ErrorReportingRunner themselves",
        "snippet": "Request function ( Class < ? > arg0 , Throwable arg1 ) { return concodefunc_runner ( new ErrorReportingRunner ( arg0 , arg1 ) ) ; }"
    },
    {
        "question_id": 834,
        "intent": "null Object to empty string nullStrToEmpty null = '' '' ; nullStrToEmpty '' '' = '' '' ; nullStrToEmpty `` aa '' = `` aa '' ;",
        "snippet": "String function ( Object arg0 ) { return ( arg0 == null ? \"srini_string\" : ( arg0 instanceof String ? ( String ) arg0 : arg0 . toString ( ) ) ) ; }"
    },
    {
        "question_id": 835,
        "intent": "This method removes a given contact from the leaf set .",
        "snippet": "boolean function ( PastryContact arg0 ) { boolean loc0 = false ; if ( concodeclass_cwNodes . contains ( arg0 ) ) loc0 = concodeclass_cwNodes . remove ( arg0 ) ; if ( concodeclass_ccwNodes . contains ( arg0 ) ) loc0 = concodeclass_ccwNodes . remove ( arg0 ) || loc0 ; if ( loc0 ) concodeclass_lastChanged = Simulator . getCurrentTime ( ) ; return loc0 ; }"
    },
    {
        "question_id": 836,
        "intent": "Key click method that delegates to SWT Robot",
        "snippet": "void function ( final char arg0 ) { final abbot . swt . Robot loc0 = concodefunc_getAbbotRobot ( ) ; Display . getDefault ( ) . syncExec ( new Runnable ( ) { public void run ( ) { loc0 . keyPress ( ( int ) arg0 ) ; loc0 . keyRelease ( ( int ) arg0 ) ; } } ) ; }"
    },
    {
        "question_id": 837,
        "intent": "Gets the enable state of the dialog field .",
        "snippet": "boolean function ( ) { return concodeclass_fEnabled ; }"
    },
    {
        "question_id": 838,
        "intent": "Validate that the specified argument character sequence is neither null nor a length of zero no characters ; otherwise throwing an exception with the specified message . Validate.notEmpty myString , `` The string must not be empty '' ;",
        "snippet": "T function ( T arg0 , String arg1 , Object ... arg2 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( String . format ( arg1 , arg2 ) ) ; } if ( arg0 . length ( ) == 0 ) { throw new IllegalArgumentException ( String . format ( arg1 , arg2 ) ) ; } return arg0 ; }"
    },
    {
        "question_id": 839,
        "intent": "Sets the component .",
        "snippet": "void function ( Component arg0 ) { this . concodeclass_component = arg0 ; }"
    },
    {
        "question_id": 840,
        "intent": "Returns the EditPartFactory that the GraphicalViewer will use .",
        "snippet": "EditPartFactory function ( ) { return new SchemaEditPartFactory ( ) ; }"
    },
    {
        "question_id": 841,
        "intent": "Return the context attribute key under which we will store the request Locale .",
        "snippet": "String function ( ) { return ( this . concodeclass_localeKey ) ; }"
    },
    {
        "question_id": 842,
        "intent": "Grabs input focus .",
        "snippet": "void function ( ) { concodeclass_tabList . setFocus ( ) ; }"
    },
    {
        "question_id": 843,
        "intent": "Return true iff this quadrant is adjacent to the boundary of an image in the given direction .",
        "snippet": "boolean function ( int arg0 ) { return ( arg0 == QuadTreeNode . NORTH || arg0 == QuadTreeNode . WEST ) ; }"
    },
    {
        "question_id": 844,
        "intent": "Add an property .",
        "snippet": "ValidatorConfiguration function ( String arg0 , Object arg1 ) { concodeclass_properties . put ( arg0 , String . valueOf ( arg1 ) ) ; return this ; }"
    },
    {
        "question_id": 845,
        "intent": "Does the given identifier belong to a new instance ?",
        "snippet": "Boolean function ( Object arg0 ) { concodeclass_LOG . tracev ( \"srini_string\" , concodeclass_value ) ; return arg0 == null || arg0 . equals ( concodeclass_value ) ; }"
    },
    {
        "question_id": 846,
        "intent": "test d1 and d2 for d1 > d2 . IF d1 is equal to d2 using the current ratio , this returns false .",
        "snippet": "boolean function ( double arg0 , double arg1 ) { return ( ( arg0 > arg1 ) && concodefunc_ne ( arg0 , arg1 ) ) ; }"
    },
    {
        "question_id": 847,
        "intent": "Method used for copying styles from one chunk to another . Could be deprecated if the content of a chunk can be overwritten .",
        "snippet": "void function ( final Chunk arg0 , final Chunk arg1 ) { arg1 . setFont ( arg0 . getFont ( ) ) ; arg1 . setAttributes ( arg0 . getAttributes ( ) ) ; arg1 . setCharacterSpacing ( arg0 . getCharacterSpacing ( ) ) ; arg1 . setHorizontalScaling ( arg0 . getHorizontalScaling ( ) ) ; arg1 . setHorizontalScaling ( arg0 . getHorizontalScaling ( ) ) ; }"
    },
    {
        "question_id": 848,
        "intent": "Extract text from a specified page using an extraction strategy .",
        "snippet": "String function ( PdfReader arg0 , int arg1 , TextExtractionStrategy arg2 ) { return getTextFromPage ( arg0 , arg1 , arg2 , new HashMap < String , ContentOperator > ( ) ) ; }"
    },
    {
        "question_id": 849,
        "intent": "Test a RequestDispatcher forward that fails to commit the tx .",
        "snippet": "void function ( @ ArquillianResource ( TxControlServlet . class ) URL arg0 ) { concodefunc_testURL ( arg0 , false , false ) ; }"
    },
    {
        "question_id": 850,
        "intent": "Set the state of the current tag",
        "snippet": "void function ( final TagState arg0 ) { this . concodeclass_tagState = arg0 ; }"
    },
    {
        "question_id": 851,
        "intent": "Make sure that the provided keystore will be reusable .",
        "snippet": "Object function ( AppleServer arg0 , Object arg1 ) { if ( arg1 instanceof InputStream ) arg1 = concodefunc_loadKeystore ( arg0 , arg1 , false ) ; return arg1 ; }"
    },
    {
        "question_id": 852,
        "intent": "parse a matrix from a Reader .",
        "snippet": "GenMatrix < C > function ( Reader arg0 ) { throw new RuntimeException ( \"srini_string\" ) ; }"
    },
    {
        "question_id": 853,
        "intent": "This method is used in #parseTemplate String to determine what member specificvariables are expected in a template .",
        "snippet": "String [ ] function ( ) { return ToStringTemplateParser . MEMBER_RELATED_VARIABLE ; }"
    },
    {
        "question_id": 854,
        "intent": "Convert characters in a Java string to the escaped form that must be used in . properties files .",
        "snippet": "String function ( String arg0 , boolean arg1 , boolean arg2 , boolean arg3 ) { StringBuffer loc0 = new StringBuffer ( arg0 . loc1 ( ) ) ; int loc1 = arg0 . loc1 ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { char loc3 = arg0 . charAt ( loc2 ) ; loc0 . append ( escape ( loc3 , arg1 , arg2 , arg3 ) ) ; } return loc0 . toString ( ) ; }"
    },
    {
        "question_id": 855,
        "intent": "Create a singleton HazelcastInstance server @Bean .",
        "snippet": "HazelcastInstance function ( ) { HazelcastInstance loc0 = InstanceHelper . makeServer ( Constants . HAZELCAST_INSTANCE_NAME , concodeclass_CLUSTER_PORT ) ; concodeclass_LOG . trace ( \"srini_string\" , loc0 ) ; return loc0 ; }"
    },
    {
        "question_id": 856,
        "intent": "Returns a text only if it is in given language",
        "snippet": "String function ( String arg0 , String arg1 ) { LanguageIdentifierBean loc0 ; try { loc0 = new LanguageIdentifierBean ( ) ; return ( arg1 . equals ( loc0 . classify ( arg0 ) ) ) ? arg0 : \"srini_string\" ; } catch ( CeonGeneralException loc1 ) { throw new IOException ( loc1 ) ; } }"
    },
    {
        "question_id": 857,
        "intent": "Reset the simulator , so that it can be configured again for another simulation run without to restart the Java Virtual Machine . This is especially usefull for JUnit tests .",
        "snippet": "void function ( ) { concodefunc_checkRunning ( ) ; concodeclass_monitor = new DefaultMonitor ( ) ; concodeclass_scenario = null ; concodeclass_scheduler = new Scheduler ( true ) ; concodeclass_seed = 0 ; }"
    },
    {
        "question_id": 858,
        "intent": "creates a parentTree of all parent Tag objects of a given Tag",
        "snippet": "List < Tag > function ( final Tag arg0 , final List < Tag > arg1 ) { List < Tag > loc0 = new ArrayList < Tag > ( ) ; Tag loc1 = arg0 . getParent ( ) ; while ( loc1 != null && ! ( loc1 . getName ( ) . equals ( HTML . Tag . HTML ) ) ) { loc0 . add ( loc1 ) ; loc1 = loc1 . getParent ( ) ; } return loc0 ; }"
    },
    {
        "question_id": 859,
        "intent": "Random vector .",
        "snippet": "GenVector < C > function ( int arg0 , float arg1 ) { return concodeclass_random ( arg0 , arg1 , concodeclass_random ) ; }"
    },
    {
        "question_id": 860,
        "intent": "Does the line start with the given string ?",
        "snippet": "boolean function ( String arg0 ) { for ( int loc0 = 0 ; loc0 < arg0 . length ( ) ; loc0 ++ ) { if ( concodefunc_charAt ( loc0 ) != arg0 . charAt ( loc0 ) ) { return false ; } } return true ; }"
    },
    {
        "question_id": 861,
        "intent": "Inserts one or more documents . This method is equivalent to a call to the bulkWrite method . The documents will be inserted in the order provided , stopping on the first failed insertion .",
        "snippet": "void function ( List < Document > arg0 , boolean arg1 ) { InsertManyOptions loc0 = new InsertManyOptions ( ) ; if ( ! arg1 ) { loc0 . arg1 ( false ) ; } concodeclass_collection . insertMany ( arg0 , loc0 ) ; }"
    },
    {
        "question_id": 862,
        "intent": "Creates a Student object using the given studentContactFile.The studentContactFile should be an XML file containing the marshaled form of a Contact object .",
        "snippet": "Student function ( File arg0 , JAXBContext arg1 ) { Unmarshaller loc0 = arg1 . createUnmarshaller ( ) ; Student loc1 = new Student ( ) ; Contact loc2 = ( Contact ) loc0 . unmarshal ( arg0 ) ; loc1 . setContact ( loc2 ) ; return loc1 ; }"
    },
    {
        "question_id": 863,
        "intent": "Get key type znode .",
        "snippet": "String function ( String arg0 , String arg1 ) { return ZKUtil . joinZNode ( concodefunc_getKeysZNode ( arg0 ) , arg1 ) ; }"
    },
    {
        "question_id": 864,
        "intent": "Reverses all 32 bits of the provided integer value .",
        "snippet": "int function ( int arg0 ) { return reverseBits ( arg0 , 32 ) ; }"
    },
    {
        "question_id": 865,
        "intent": "Deletes an existing entry in the appropriate Properties",
        "snippet": "void function ( String arg0 , String arg1 ) { concodefunc_getProperties ( arg0 ) . remove ( arg1 ) ; System . out . println ( arg0 + \"srini_string\" + arg1 + \"srini_string\" ) ; }"
    },
    {
        "question_id": 866,
        "intent": "Reads the contents of a file to a String .",
        "snippet": "String function ( final String arg0 ) { return readFileToString ( new File ( arg0 ) ) ; }"
    },
    {
        "question_id": 867,
        "intent": "Creates a new criteria",
        "snippet": "Criteria function ( String arg0 , String arg1 , String arg2 ) { Criteria loc0 = new Criteria ( ValueNode . toValueNode ( arg0 ) ) ; loc0 . criteriaType = RelationalOperator . fromString ( arg1 ) ; loc0 . arg2 = ValueNode . toValueNode ( arg2 ) ; return loc0 ; }"
    },
    {
        "question_id": 868,
        "intent": "A simple main method that prints the version and exits",
        "snippet": "void function ( String [ ] arg0 ) { System . out . println ( \"srini_string\" + concodefunc_getSpecification ( ) ) ; System . out . println ( \"srini_string\" + concodefunc_getImplementation ( ) ) ; }"
    },
    {
        "question_id": 869,
        "intent": "End date of the period for which the account statement is issued .",
        "snippet": "Date function ( ) { return concodeclass_stmt . getFrToDt ( ) . getToDtTm ( ) . toGregorianCalendar ( ) . getTime ( ) ; }"
    },
    {
        "question_id": 870,
        "intent": "get paras map",
        "snippet": "Map < String , String > function ( ) { return concodeclass_parasMap ; }"
    },
    {
        "question_id": 871,
        "intent": "Returns a super type hierarchy that contains the given type . The returned hierarchy may actually be based on a subtype of the requested type . Therefore , queries such as ITypeHierarchy #getAllClasses or ITypeHierarchy #getRootInterfaces may return more types than the samequeries on a type hierarchy for just the given type .",
        "snippet": "ITypeHierarchy function ( IType arg0 ) { return getTypeHierarchy ( arg0 , null ) ; }"
    },
    {
        "question_id": 872,
        "intent": "Empties the contents of the stack .",
        "snippet": "void function ( ) { concodeclass_list . clear ( ) ; }"
    },
    {
        "question_id": 873,
        "intent": "Unprotected method .",
        "snippet": "String function ( ) { return RESULT ; }"
    },
    {
        "question_id": 874,
        "intent": "Set the width for this box .",
        "snippet": "void function ( float arg0 ) { concodeclass_width = arg0 ; }"
    },
    {
        "question_id": 875,
        "intent": "Search for one word in phrase . The search is not case sensitive . This method will check that the given goal is not a substring of a longer string so , for example , `` I know '' does not contain `` no '' . The search begins at the beginning of the string .",
        "snippet": "int function ( String arg0 , String arg1 ) { return findKeyword ( arg0 , arg1 , 0 ) ; }"
    },
    {
        "question_id": 876,
        "intent": "BigInteger random .",
        "snippet": "BigInteger function ( int arg0 ) { return concodeclass_ONE . random ( arg0 , concodeclass_random ) ; }"
    },
    {
        "question_id": 877,
        "intent": "Get this object as a DateTime using ISOChronology in the same zone .",
        "snippet": "DateTime function ( ) { return new DateTime ( getMillis ( ) , ISOChronology . getInstance ( concodefunc_getZone ( ) ) ) ; }"
    },
    {
        "question_id": 878,
        "intent": "Return the image associated with the receiver .",
        "snippet": "Image function ( ) { return concodeclass_image ; }"
    },
    {
        "question_id": 879,
        "intent": "closes this server .",
        "snippet": "void function ( ) { synchronized ( this ) { concodeclass_stop = true ; this . notify ( ) ; } }"
    },
    {
        "question_id": 880,
        "intent": "Creates a new Hessian 2.0 deserializer .",
        "snippet": "Hessian2Input function ( InputStream arg0 ) { Hessian2Input loc0 = new Hessian2Input ( arg0 ) ; loc0 . setSerializerFactory ( concodeclass__serializerFactory ) ; return loc0 ; }"
    },
    {
        "question_id": 881,
        "intent": "Create an instance of Activelock",
        "snippet": "Activelock function ( ) { return new Activelock ( ) ; }"
    },
    {
        "question_id": 882,
        "intent": "Returns the language names call-back used in this report .",
        "snippet": "ILanguageNames function ( ) { return concodeclass_languageNames ; }"
    },
    {
        "question_id": 883,
        "intent": "Execute an authenticated request and return the response .",
        "snippet": "HttpResponse function ( Request arg0 ) { arg0 . addHeader ( \"srini_string\" , \"srini_string\" + concodeclass_repository . getToken ( ) ) ; Response loc0 = arg0 . execute ( ) ; return loc0 . returnResponse ( ) ; }"
    },
    {
        "question_id": 884,
        "intent": "Gets the current size of the UndoQueue .",
        "snippet": "int function ( ) { return concodeclass_queue . size ( ) ; }"
    },
    {
        "question_id": 885,
        "intent": "Checks if some value is valid for a certain key .",
        "snippet": "boolean function ( PdfName arg0 , PdfName [ ] arg1 ) { for ( int loc0 = 0 ; loc0 < arg1 . length ; loc0 ++ ) { if ( arg1 [ loc0 ] . equals ( arg0 ) ) { return true ; } } return false ; }"
    },
    {
        "question_id": 886,
        "intent": "Dispatches an Event depending on it 's type .",
        "snippet": "void function ( E arg0 ) { Handler < E > loc0 = ( Handler < E > ) concodeclass_handlers . get ( arg0 . getClass ( ) ) ; if ( loc0 != null ) { loc0 . onEvent ( arg0 ) ; } }"
    },
    {
        "question_id": 887,
        "intent": "Return the child that represents this quadrant of the given node .",
        "snippet": "QuadTreeNode function ( QuadTreeNode arg0 ) { return arg0 . getNorthEast ( ) ; }"
    },
    {
        "question_id": 888,
        "intent": "Length of red and white parts .",
        "snippet": "int function ( ) { int loc0 = concodeclass_red . length ( ) + concodeclass_white . length ( ) ; return loc0 ; }"
    },
    {
        "question_id": 889,
        "intent": "Invokes #add Object for each element in the given collection .",
        "snippet": "boolean function ( Collection arg0 ) { boolean loc0 = false ; Iterator loc1 = arg0 . iterator ( ) ; while ( loc1 . hasNext ( ) ) { boolean loc2 = concodefunc_add ( loc1 . next ( ) ) ; loc0 = loc0 || loc2 ; } return loc0 ; }"
    },
    {
        "question_id": 890,
        "intent": "Advance the animation .",
        "snippet": "void function ( int arg0 , int arg1 ) { }"
    },
    {
        "question_id": 891,
        "intent": "Gets all codecs which can decode the specified format .",
        "snippet": "String [ ] function ( Format arg0 ) { return concodefunc_getCodecClasses ( null , arg0 ) ; }"
    },
    {
        "question_id": 892,
        "intent": "Get the specified section .",
        "snippet": "Section function ( int arg0 ) { return concodeclass_sections . get ( arg0 ) ; }"
    },
    {
        "question_id": 893,
        "intent": "Gets a String from an ASN1Primitive",
        "snippet": "String function ( ASN1Primitive arg0 ) { ASN1TaggedObject loc0 = ( ASN1TaggedObject ) arg0 ; return new String ( ASN1OctetString . getInstance ( loc0 , false ) . getOctets ( ) , \"srini_string\" ) ; }"
    },
    {
        "question_id": 894,
        "intent": "Gets a chunk with a symbol character .",
        "snippet": "Chunk function ( char arg0 , Font arg1 ) { char loc0 = SpecialSymbol . getCorrespondingSymbol ( arg0 ) ; if ( loc0 == ' ' ) { return new Chunk ( String . valueOf ( arg0 ) , arg1 ) ; } Font loc1 = new Font ( FontFamily . SYMBOL , arg1 . getSize ( ) , arg1 . getStyle ( ) , arg1 . getColor ( ) ) ; String loc2 = String . valueOf ( loc0 ) ; return new Chunk ( loc2 , loc1 ) ; }"
    },
    {
        "question_id": 895,
        "intent": "Create an instance of a SummaryStatistics",
        "snippet": "SummaryStatistics function ( Class arg0 ) { return ( SummaryStatistics ) arg0 . newInstance ( ) ; }"
    },
    {
        "question_id": 896,
        "intent": "Factory method to create a set from a map .",
        "snippet": "Set function ( Map arg0 , Object arg1 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new MapBackedSet ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 897,
        "intent": "Get one single phenotype where the field given has the value given .",
        "snippet": "Phenotype function ( String arg0 , String arg1 ) { List < Phenotype > loc0 = concodefunc_getPhenotypesByField ( arg0 , arg1 , true ) ; if ( loc0 . size ( ) == 0 ) { return Phenotype . NULL ; } return loc0 . get ( 0 ) ; }"
    },
    {
        "question_id": 898,
        "intent": "Double the capacity of the internal array .",
        "snippet": "void function ( ) { SimulationEvent [ ] loc0 = new SimulationEvent [ this . concodeclass_items . length * 2 ] ; System . arraycopy ( this . concodeclass_items , 0 , loc0 , 0 , this . concodeclass_size ) ; this . concodeclass_collaps = this . concodeclass_items . length / 4 ; this . concodeclass_items = loc0 ; }"
    },
    {
        "question_id": 899,
        "intent": "random node form group",
        "snippet": "GnpNetLayer function ( String arg0 ) { IPv4NetID loc0 = concodefunc_createNewID ( ) ; return newNetLayer ( loc0 ) ; }"
    },
    {
        "question_id": 900,
        "intent": "Get plugin version .",
        "snippet": "int function ( ) { return concodeclass_pluginMeta . getVersion ( ) ; }"
    },
    {
        "question_id": 901,
        "intent": "Called by Requestor #request String , Object , Callback for two-way messages using callbacks .",
        "snippet": "void function ( List < ByteBuffer > arg0 , Callback < List < ByteBuffer >> arg1 ) { try { List < ByteBuffer > loc0 = transceive ( arg0 ) ; arg1 . handleResult ( loc0 ) ; } catch ( IOException loc0 ) { arg1 . handleError ( loc0 ) ; } }"
    },
    {
        "question_id": 902,
        "intent": "Converts an input handle back to the corresponding java element .",
        "snippet": "IJavaElement function ( final String arg0 , final String arg1 , final boolean arg2 ) { return handleToElement ( null , arg0 , arg1 , arg2 ) ; }"
    },
    {
        "question_id": 903,
        "intent": "BigDecimal random .",
        "snippet": "BigDecimal function ( int arg0 , int arg1 , Random arg2 ) { java . math . BigInteger loc0 = new java . math . BigInteger ( arg0 , arg2 ) ; if ( arg2 . nextBoolean ( ) ) { loc0 = loc0 . negate ( ) ; } int loc1 = arg2 . nextInt ( arg1 ) ; if ( arg2 . nextBoolean ( ) ) { loc1 = - loc1 ; } java . math . BigDecimal loc2 = new java . math . BigDecimal ( loc0 , loc1 , concodeclass_context ) ; return new BigDecimal ( loc2 , concodeclass_context ) ; }"
    },
    {
        "question_id": 904,
        "intent": "Creates a list based on an enumeration . As the enumeration is traversed , an ArrayList of its values is created . The new list is returned .",
        "snippet": "List function ( Enumeration arg0 ) { return IteratorUtils . toList ( new EnumerationIterator ( arg0 ) ) ; }"
    },
    {
        "question_id": 905,
        "intent": "Local identifier , generated by LocalVariableDeclarationStatement .",
        "snippet": "String function ( Class < ? > arg0 ) { return concodeclass_identifier ; }"
    },
    {
        "question_id": 906,
        "intent": "Creates a RandomAccessSource based on a byte array",
        "snippet": "RandomAccessSource function ( byte [ ] arg0 ) { return new ArrayRandomAccessSource ( arg0 ) ; }"
    },
    {
        "question_id": 907,
        "intent": "Register a default non-weighted typeCode mapping",
        "snippet": "void function ( int arg0 , String arg1 ) { concodeclass_defaults . put ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 908,
        "intent": "Log a message with error log level .",
        "snippet": "void function ( Object arg0 ) { concodefunc_log ( Level . SEVERE , String . valueOf ( arg0 ) , null ) ; }"
    },
    {
        "question_id": 909,
        "intent": "Delete a directory and its contents . WARNING : Java APIs do not let us distinguish directories from symbolic links to directories . Consequently , if the directory contains symbolic links to directories , we will attempt to delete the contents of pointed-to directories .",
        "snippet": "void function ( File arg0 ) { if ( arg0 . isDirectory ( ) ) { for ( File loc0 : arg0 . listFiles ( ) ) { dumbDeleteRecrusive ( loc0 ) ; } } if ( ! arg0 . delete ( ) && arg0 . exists ( ) ) { throw new IOException ( \"srini_string\" + arg0 ) ; } }"
    },
    {
        "question_id": 910,
        "intent": "Getter for values",
        "snippet": "Map < String , ArrayList < String >> function ( ) { return concodeclass_values ; }"
    },
    {
        "question_id": 911,
        "intent": "Gets the data . Note : The array will not be cloned .",
        "snippet": "byte [ ] function ( ) { return concodeclass_data ; }"
    },
    {
        "question_id": 912,
        "intent": "Returns true for an instantiated non - `` factory '' splitter . Clients also need to check valid .",
        "snippet": "boolean function ( ) { return concodeclass_instantiated ; }"
    },
    {
        "question_id": 913,
        "intent": "Returns whether the control should make the refactorings checkable .",
        "snippet": "boolean function ( ) { return concodeclass_fCheckable ; }"
    },
    {
        "question_id": 914,
        "intent": "parses the direction tag and returns the direction or a default value as radians",
        "snippet": "double function ( TagGroup arg0 , double arg1 ) { Float loc0 = null ; if ( arg0 . containsKey ( \"srini_string\" ) ) { loc0 = parseAngle ( arg0 . getValue ( \"srini_string\" ) ) ; } if ( loc0 != null ) { return Math . toRadians ( loc0 ) ; } else { return arg1 ; } }"
    },
    {
        "question_id": 915,
        "intent": "Tests that a EJB with several Context and sub classes @Resource deploys fine and is injected as expected",
        "snippet": "void function ( ) { Assert . assertTrue ( \"srini_string\" , this . concodeclass_slsb . validContextInjections ( ) ) ; }"
    },
    {
        "question_id": 916,
        "intent": "Return the count and the quantity label as a properly pluralized string . I.e. 5 , `` item '' == > `` 5 items '' .",
        "snippet": "String function ( int arg0 , String arg1 ) { if ( arg0 == 1 ) { return NumberFormat . getNumberInstance ( ) . format ( arg0 ) + \"srini_string\" + arg1 ; } else { return NumberFormat . getNumberInstance ( ) . format ( arg0 ) + \"srini_string\" + arg1 + \"srini_string\" ; } }"
    },
    {
        "question_id": 917,
        "intent": "Adds a single author .",
        "snippet": "void function ( XMPMeta arg0 , String arg1 ) { arg0 . appendArrayItem ( XMPConst . NS_DC , concodeclass_CREATOR , new PropertyOptions ( PropertyOptions . ARRAY_ORDERED ) , arg1 , null ) ; }"
    },
    {
        "question_id": 918,
        "intent": "Cleanup by closing any open menus",
        "snippet": "void function ( ) { new SWTShowMenuOperation ( null ) . closeAllMenus ( ) . execute ( ) ; }"
    },
    {
        "question_id": 919,
        "intent": "Returns the value of the corner thickness",
        "snippet": "float function ( ) { return concodeclass_DEFAULT_CORNER_THICKNESS_DP ; }"
    },
    {
        "question_id": 920,
        "intent": "Compares the CharSequences o1 and o2 .",
        "snippet": "int function ( CharSequence arg0 , CharSequence arg1 ) { for ( int loc0 = 0 ; loc0 < Math . max ( arg0 . length ( ) , arg1 . length ( ) ) ; loc0 ++ ) { int loc1 = concodefunc_compareCharacter ( arg0 , arg1 , loc0 ) ; if ( 0 != loc1 ) { return loc1 ; } } return 0 ; }"
    },
    {
        "question_id": 921,
        "intent": "Sets the exception from failed execution and executes callback if available . Notifies any thread waiting for completion .",
        "snippet": "void function ( Exception arg0 ) { this . concodeclass_exception = arg0 ; this . concodeclass_state = concodeclass_FAILED ; this . concodeclass_callback . ifPresent ( ac -> ac . onComplete ( null , Optional . of ( arg0 ) ) ) ; synchronized ( concodeclass_lock ) { concodeclass_lock . notifyAll ( ) ; } }"
    },
    {
        "question_id": 922,
        "intent": "Create a widget reference locator for this widget .",
        "snippet": "WidgetReference < T > function ( T arg0 ) { return new WidgetReference < T > ( arg0 ) ; }"
    },
    {
        "question_id": 923,
        "intent": "Convenience method for clearing this error bar making it available for new configuration . All errors are set to #ERROR_PIXEL_NONE afterwards .",
        "snippet": "void function ( ) { this . concodeclass_m_negativeXErrorPixel = IErrorBarPixel . ERROR_PIXEL_NONE ; this . concodeclass_m_negativeYErrorPixel = IErrorBarPixel . ERROR_PIXEL_NONE ; this . concodeclass_m_positiveXErrorPixel = IErrorBarPixel . ERROR_PIXEL_NONE ; this . concodeclass_m_positiveYErrorPixel = IErrorBarPixel . ERROR_PIXEL_NONE ; }"
    },
    {
        "question_id": 924,
        "intent": "Transforms the input to result by executing a closure .",
        "snippet": "Object function ( Object arg0 ) { concodeclass_iClosure . execute ( arg0 ) ; return arg0 ; }"
    },
    {
        "question_id": 925,
        "intent": "returns the way or relation with the tags for this area",
        "snippet": "OSMElement function ( ) { return concodeclass_objectWithTags ; }"
    },
    {
        "question_id": 926,
        "intent": "Makes sure that the upcomingRelease is initialized",
        "snippet": "Date function ( ) { if ( concodeclass_upcomingReleaseDate == null ) { this . concodeclass_upcomingReleaseDate = concodeclass_dependencyResolverService . findMostRelevantRelease ( new TreeSet < ReleaseEntity > ( concodefunc_getAllReleases ( ) ) , new Date ( ) ) . getInstallationInProductionAt ( ) ; } return concodeclass_upcomingReleaseDate ; }"
    },
    {
        "question_id": 927,
        "intent": "This method exists solely to concentrate usage of javax.ws.rs.core.Response #created java.net.URI intoone place until this JIRA is resolved somehow .",
        "snippet": "Response . ResponseBuilder function ( AbstractElement arg0 , UriInfo arg1 , String arg2 ) { return Response . status ( CREATED ) . location ( arg1 . getRequestUriBuilder ( ) . segment ( arg2 ) . build ( ) ) . entity ( arg0 ) ; }"
    },
    {
        "question_id": 928,
        "intent": "This method returns the history of measured or aggregated metrics of the last ten metric-updates .",
        "snippet": "LinkedList < HashMap < String , MetricsAggregate >> function ( ) { return concodeclass_metricsHistory ; }"
    },
    {
        "question_id": 929,
        "intent": "Identical to #inTx TransactionPayload but also returns the notifications emitted from the transaction.The list of notifications is final and they have already been sent . The caller should NOT send them again .",
        "snippet": "ResultWithNofifications < R , BE > function ( TransactionPayload < R , BE > arg0 ) { return concodefunc_inCommittableTxWithNotifications ( concodeclass_context , TransactionPayload . Committing . committing ( arg0 ) ) ; }"
    },
    {
        "question_id": 930,
        "intent": "Quotient subtraction .",
        "snippet": "Quotient < C > function ( Quotient < C > arg0 ) { if ( arg0 == null || arg0 . isZERO ( ) ) { return this ; } C loc0 = concodeclass_num . multiply ( arg0 . den ) ; loc0 = loc0 . subtract ( concodeclass_den . multiply ( arg0 . num ) ) ; C loc1 = concodeclass_den . multiply ( arg0 . den ) ; return new Quotient < C > ( concodeclass_ring , loc0 , loc1 , false ) ; }"
    },
    {
        "question_id": 931,
        "intent": "Method stub . Returns false .",
        "snippet": "boolean function ( ) { return true ; }"
    },
    {
        "question_id": 932,
        "intent": "Methods to build visual elements",
        "snippet": "JPanel function ( ) { concodeclass_contentPanel = new JPanel ( ) ; concodeclass_contentPanel . setLayout ( new BorderLayout ( ) ) ; concodeclass_contentPanel . add ( concodefunc_buildEditPanel ( ) , BorderLayout . NORTH ) ; concodeclass_contentPanel . add ( concodefunc_buildSpreadsheet ( ) , BorderLayout . CENTER ) ; concodeclass_contentPanel . add ( concodefunc_buildErrorPanel ( ) , BorderLayout . SOUTH ) ; return concodeclass_contentPanel ; }"
    },
    {
        "question_id": 933,
        "intent": "Look up the method specified by either `` method '' or `` methodKey '' and invoke it , returning a boolean value as interpreted by evaluateResult .",
        "snippet": "boolean function ( Context arg0 ) { if ( this . concodefunc_getMethod ( ) == null && this . concodefunc_getMethodKey ( ) == null ) { throw new IllegalStateException ( \"srini_string\" ) ; } Method loc0 = concodefunc_extractMethod ( arg0 ) ; return concodefunc_evaluateResult ( loc0 . invoke ( this , concodefunc_getArguments ( arg0 ) ) ) ; }"
    },
    {
        "question_id": 934,
        "intent": "Sets how often eviction process should be run for the cached type .",
        "snippet": "void function ( long arg0 ) { concodefunc_markAsOverriden ( \"srini_string\" ) ; this . concodeclass_evictionWakeUpInterval = arg0 ; }"
    },
    {
        "question_id": 935,
        "intent": "Factory method to create a typed bag . If there are any elements already in the bag being decorated , they are validated .",
        "snippet": "Bag function ( Bag arg0 , Class arg1 ) { return new PredicatedBag ( arg0 , InstanceofPredicate . getInstance ( arg1 ) ) ; }"
    },
    {
        "question_id": 936,
        "intent": "Indicates whether the document is a copy , a duplicate , or a duplicate of a copy . CODU Message is being sent as a copy to a party other than the account owner , for information purposes and the message is a duplicate of a message previously sent . COPY Message is being sent as a copy to a party other than the account owner , for information purposes DUPL Message is for information/confirmation purposes . It is a duplicate of a message previously sent .",
        "snippet": "CopyDuplicate1Code function ( ) { return concodeclass_stmt . getCpyDplctInd ( ) ; }"
    },
    {
        "question_id": 937,
        "intent": "requires arg ! = null",
        "snippet": "RatNum function ( RatNum arg0 ) { concodefunc_checkRep ( ) ; return new RatNum ( this . concodeclass_numer * arg0 . denom + arg0 . numer * this . concodeclass_denom , this . concodeclass_denom * arg0 . denom ) ; }"
    },
    {
        "question_id": 938,
        "intent": "Gets the value from the Map Entry .",
        "snippet": "Object function ( ) { return concodeclass_value ; }"
    },
    {
        "question_id": 939,
        "intent": "The exception generated at the server , or null if no such exception has occured",
        "snippet": "Exception function ( ) { return concodeclass_error ; }"
    },
    {
        "question_id": 940,
        "intent": "Returns a Type object for the class 's superclass .",
        "snippet": "Type function ( ) { return concodeclass_superclass ; }"
    },
    {
        "question_id": 941,
        "intent": "equivalent of #texCoordLists List , Material , TexCoordFunction for a collection of triangle objects .",
        "snippet": "List < List < VectorXZ >> function ( Collection < TriangleXYZ > arg0 , Material arg1 , TexCoordFunction arg2 ) { List < VectorXYZ > loc0 = new ArrayList < VectorXYZ > ( arg0 . size ( ) * 3 ) ; for ( TriangleXYZ loc1 : arg0 ) { loc0 . add ( loc1 . v1 ) ; loc0 . add ( loc1 . v2 ) ; loc0 . add ( loc1 . v3 ) ; } return concodefunc_texCoordLists ( loc0 , arg1 , arg2 ) ; }"
    },
    {
        "question_id": 942,
        "intent": "Compresses the hashtable to the minimum prime size as defined by PrimeFinder that will hold all of the elements currently in the table . If you have done a lot of remove operations and plan to do a lot of queries or insertions or iteration , it is a good idea to invoke this method . Doing so will accomplish two things : You 'll free memory allocated to the table but no longer needed because of the remove s. You 'll get better query/insert/iterator performance because there wo n't be any REMOVED slots to skip over when probing for indices in the table .",
        "snippet": "void function ( ) { concodefunc_rehash ( PrimeFinder . nextPrime ( ( int ) Math . ceil ( concodefunc_size ( ) / concodeclass__loadFactor ) + 1 ) ) ; concodefunc_computeMaxSize ( concodefunc_capacity ( ) ) ; if ( concodeclass__autoCompactionFactor != 0 ) { concodefunc_computeNextAutoCompactionAmount ( concodefunc_size ( ) ) ; } }"
    },
    {
        "question_id": 943,
        "intent": "Get the list of children of the calling object pass a null parent to construct the root",
        "snippet": "List < WPTreeNode > function ( ) { return this . concodeclass_children ; }"
    },
    {
        "question_id": 944,
        "intent": "Subclasses may override .",
        "snippet": "IWindowService function ( ) { concodefunc_invalid ( ) ; return null ; }"
    },
    {
        "question_id": 945,
        "intent": "Setter for the offset . The offset is relative to the current Y position . If you want to underline something , you have to choose a negative offset .",
        "snippet": "void function ( final float arg0 ) { this . concodeclass_offset = arg0 ; }"
    },
    {
        "question_id": 946,
        "intent": "List , 2 elements . a and b are objects . L is the list a , b .",
        "snippet": "LIST < C > function ( C arg0 , C arg1 ) { LIST < C > loc0 = new LIST < C > ( ) ; loc0 . list . addFirst ( arg1 ) ; loc0 . list . addFirst ( arg0 ) ; return loc0 ; }"
    },
    {
        "question_id": 947,
        "intent": "Get the String representation as RingFactory .",
        "snippet": "String function ( ) { return \"srini_string\" + concodeclass_ring . toString ( ) + \"srini_string\" ; }"
    },
    {
        "question_id": 948,
        "intent": "Intended for AErrorBarPolicyConfigurable only .",
        "snippet": "void function ( final int arg0 ) { this . concodeclass_m_negativeYErrorPixel = arg0 ; }"
    },
    {
        "question_id": 949,
        "intent": "Clock . Returns the current CPU clock reading in milliseconds . Intervalls are system dependent .",
        "snippet": "long function ( ) { return java . lang . System . currentTimeMillis ( ) ; }"
    },
    {
        "question_id": 950,
        "intent": "Returns entity content as a File if set using #setFile java.io.File method .",
        "snippet": "File function ( ) { return concodeclass_file ; }"
    },
    {
        "question_id": 951,
        "intent": "Pushes a value onto the top of this stack .",
        "snippet": "float function ( float arg0 ) { concodeclass_list . add ( arg0 ) ; return arg0 ; }"
    },
    {
        "question_id": 952,
        "intent": "Tests that the given double is not invalid for calculation . It must not be one of : Double #NaN Double #NEGATIVE_INFINITY Double #POSITIVE_INFINITY",
        "snippet": "boolean function ( final double arg0 ) { return ! ( Double . isInfinite ( arg0 ) || Double . isNaN ( arg0 ) ) ; }"
    },
    {
        "question_id": 953,
        "intent": "Resets the references for streaming .",
        "snippet": "void function ( ) { }"
    },
    {
        "question_id": 954,
        "intent": "Get the name of this logical type . This name is set as the Schema property `` logicalType '' .",
        "snippet": "String function ( ) { return concodeclass_name ; }"
    },
    {
        "question_id": 955,
        "intent": "Parses a textual representation of a qualified name into a NameParts representation . Explicitly looks for the form catalog.schema.name .",
        "snippet": "NameParts function ( String arg0 ) { return parse ( arg0 , null , null ) ; }"
    },
    {
        "question_id": 956,
        "intent": "Returns a Runnable that will retain the stack trace information about where it originated from .",
        "snippet": "Runnable function ( final Runnable arg0 ) { return new ContextRunnable ( arg0 ) ; }"
    },
    {
        "question_id": 957,
        "intent": "The VID address is extended .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_vid . addToVID ( arg0 ) ; }"
    },
    {
        "question_id": 958,
        "intent": "Returns whether the body of this tag will be escaped or not .",
        "snippet": "boolean function ( ) { return concodeclass_escapeText ; }"
    },
    {
        "question_id": 959,
        "intent": "Deprecated .",
        "snippet": "Type function ( int arg0 ) { return concodefunc_getOrdinalParameterDescriptor ( arg0 ) . getExpectedType ( ) ; }"
    },
    {
        "question_id": 960,
        "intent": "Looks at the top of this stack without removing it .",
        "snippet": "char function ( ) { if ( concodeclass_list . isEmpty ( ) ) { throw new EmptyStackException ( ) ; } return concodeclass_list . get ( concodeclass_list . size ( ) - 1 ) ; }"
    },
    {
        "question_id": 961,
        "intent": "Temporarily exposed since Configuration is still around and much code still uses Configuration . This allows code to configure the builder and access that to configure Configuration object used from HEM atm .",
        "snippet": "Map function ( ) { return concodeclass_settings ; }"
    },
    {
        "question_id": 962,
        "intent": "Gets the topmost y-position of the line .",
        "snippet": "int function ( ) { return ( int ) Math . round ( Math . min ( concodeclass_y1 , concodeclass_y2 ) ) ; }"
    },
    {
        "question_id": 963,
        "intent": "Liefert das Signal , mit dem die letzte ' 1 ' codiert wurde .",
        "snippet": "char function ( ) { return this . concodeclass_last ; }"
    },
    {
        "question_id": 964,
        "intent": "This method should only be used by unit tests .",
        "snippet": "void function ( MessageSource arg0 ) { this . concodeclass_messageSource = arg0 ; }"
    },
    {
        "question_id": 965,
        "intent": "Called to start the traffic analysis . Messages that are sent prior to invoking this method are not taken into account for analysis . Calling this method starts a fresh measurement . The number of the participating hosts has to be set before calling this method .",
        "snippet": "void function ( ) { if ( ! concodeclass_started ) { concodeclass_started = true ; concodeclass_sentMaintenance = new HashMap < Long , Long > ( ) ; concodeclass_sentUser = new HashMap < Long , Long > ( ) ; } }"
    },
    {
        "question_id": 966,
        "intent": "Entry point to run this examples as a Java application .",
        "snippet": "void function ( final String [ ] arg0 ) { new ClassInfo ( System . out ) . execute ( arg0 ) ; }"
    },
    {
        "question_id": 967,
        "intent": "This method is used in #parseTemplate String . It returns all variables returned by #getMemberRelatedVariables and #getObjectRelatedVariables sum of sets .",
        "snippet": "String [ ] function ( ) { return ToStringTemplateParser . OBJECT_AND_MEMBER_RELATED_VARIABLES ; }"
    },
    {
        "question_id": 968,
        "intent": "Draws the obstacle with declared size .",
        "snippet": "void function ( Graphics arg0 , int arg1 ) { this . concodeclass_obstacleSize = arg1 ; if ( concodeclass_isUp ) { arg0 . setColor ( new Color ( 212 , 129 , 78 ) ) ; arg0 . fill3DRect ( concodeclass_x , concodeclass_y , 150 , concodeclass_gameHeight - arg1 - 150 , true ) ; } else { arg0 . setColor ( new Color ( 212 , 129 , 78 ) ) ; arg0 . fill3DRect ( concodeclass_x , concodeclass_y , 150 , arg1 , true ) ; } }"
    },
    {
        "question_id": 969,
        "intent": "Return the length of time elapsed to run the given runnable .",
        "snippet": "long function ( Runnable arg0 ) { long loc0 = System . currentTimeMillis ( ) ; arg0 . run ( ) ; return System . currentTimeMillis ( ) - loc0 ; }"
    },
    {
        "question_id": 970,
        "intent": "establish a connection to a remote server",
        "snippet": "IConnection function ( String arg0 , String arg1 , int arg2 ) { IConnection loc0 = concodeclass_connections . get ( concodefunc_key ( arg1 , arg2 ) ) ; if ( loc0 != null ) { return loc0 ; } IConnection loc1 = new Client ( concodeclass_storm_conf , concodeclass_clientChannelFactory , concodeclass_clientScheduleService , arg1 , arg2 , this ) ; concodeclass_connections . put ( concodefunc_key ( arg1 , arg2 ) , loc1 ) ; return loc1 ; }"
    },
    {
        "question_id": 971,
        "intent": "Obtains the ConnRoutePNames #FORCED_ROUTE FORCED_ROUTE parameter value . #NO_ROUTE will be mapped to null , to allow unsetting in a hierarchy .",
        "snippet": "HttpRoute function ( final HttpParams arg0 ) { Args . notNull ( arg0 , \"srini_string\" ) ; HttpRoute loc0 = ( HttpRoute ) arg0 . getParameter ( FORCED_ROUTE ) ; if ( ( loc0 != null ) && concodeclass_NO_ROUTE . equals ( loc0 ) ) { loc0 = null ; } return loc0 ; }"
    },
    {
        "question_id": 972,
        "intent": "Increments the failure counter and returns the new value .",
        "snippet": "int function ( ) { return ++ this . concodeclass_staleCounter ; }"
    },
    {
        "question_id": 973,
        "intent": "Returns the current number of entries in the map .",
        "snippet": "int function ( ) { return concodeclass__size ; }"
    },
    {
        "question_id": 974,
        "intent": "Signifies that we are done with this ClassFileLoader",
        "snippet": "void function ( ) { }"
    },
    {
        "question_id": 975,
        "intent": "Gets the cluster 's tasks input file .",
        "snippet": "File function ( ) { return concodeclass_fileInput ; }"
    },
    {
        "question_id": 976,
        "intent": "Is this Groebner system equal to other .",
        "snippet": "boolean function ( Object arg0 ) { GroebnerSystem < C > loc0 = null ; try { loc0 = ( GroebnerSystem < C > ) arg0 ; } catch ( ClassCastException loc1 ) { return false ; } if ( loc0 == null ) { return false ; } boolean loc2 = concodeclass_list . equals ( loc0 . list ) ; return loc2 ; }"
    },
    {
        "question_id": 977,
        "intent": "Takes a string of `` key = value '' pairs split by \\ n and creates a hash table .",
        "snippet": "Map < String , String > function ( String arg0 ) { HashMap < String , String > loc0 = new HashMap < String , String > ( ) ; String [ ] loc1 = arg0 . split ( \"srini_string\" ) ; for ( int loc2 = 0 ; loc2 < loc1 . length ; loc2 ++ ) { String [ ] loc3 = loc1 [ loc2 ] . split ( \"srini_string\" , 2 ) ; loc0 . put ( loc3 [ 0 ] . trim ( ) , loc3 [ 1 ] . trim ( ) ) ; } return loc0 ; }"
    },
    {
        "question_id": 978,
        "intent": "entity instance accessor",
        "snippet": "Object function ( ) { return concodeclass_instance ; }"
    },
    {
        "question_id": 979,
        "intent": "Get the heap min without extracting the key",
        "snippet": "T function ( ) { return concodeclass_allNodes . get ( 0 ) . key ; }"
    },
    {
        "question_id": 980,
        "intent": "Get the state of the current tag",
        "snippet": "TagState function ( ) { return this . concodeclass_tagState ; }"
    },
    {
        "question_id": 981,
        "intent": "We currently have to ensure , that the names of the resources are updated as well - therefore we have to iterate through all of them and change their name . As soon as all queries are adapted , this is not required anymore and can be removed . We execute this logic in the prepersist state because we need to ensure that we could load the resources lazy if required .",
        "snippet": "void function ( String arg0 ) { for ( ResourceEntity loc0 : getResources ( ) ) { loc0 . updateName ( arg0 ) ; } this . concodeclass_name = arg0 ; }"
    },
    {
        "question_id": 982,
        "intent": "Returns the tag position for this element . The method can return null . In this case no tag has been found for this NLS element .",
        "snippet": "Region function ( ) { return concodeclass_fTagPosition ; }"
    },
    {
        "question_id": 983,
        "intent": "Create an instance of ValidationContext",
        "snippet": "ValidationContext function ( ) { return new ValidationContext ( ) ; }"
    },
    {
        "question_id": 984,
        "intent": "Checks if the obstacle that is down intersects with the block .",
        "snippet": "boolean function ( Block arg0 ) { if ( arg0 . y + Block . HEIGHT > concodeclass_y ) { if ( arg0 . x < concodeclass_x && arg0 . x + Block . WIDTH + 3 > concodeclass_x ) { arg0 . y = concodeclass_y - Block . HEIGHT ; return true ; } else if ( arg0 . x > concodeclass_x && concodeclass_x + 150 > arg0 . x ) { arg0 . y = concodeclass_y - Block . HEIGHT ; return true ; } } return false ; }"
    },
    {
        "question_id": 985,
        "intent": "Set token provider .",
        "snippet": "void function ( TokenProvider arg0 ) { KrbRuntime . arg0 = arg0 ; }"
    },
    {
        "question_id": 986,
        "intent": "When condition checking is performed for a refactoring then the condition check is interpreted as failed if the refactoring status severity return from the condition checking operation is equal or greater than the value returned by this method .",
        "snippet": "int function ( ) { return RefactoringStatus . WARNING ; }"
    },
    {
        "question_id": 987,
        "intent": "Returns the current Hibernate Session . If a Session was previously established during the same request the already established instance is returned otherwise a new instance is retriven from the Session Factory .",
        "snippet": "Session function ( ) { if ( concodeclass_log . isDebugEnabled ( ) ) { concodeclass_log . debug ( \"srini_string\" ) ; } Session loc0 = concodefunc_getSessionFactory ( ) . getCurrentSession ( ) ; if ( ! loc0 . isOpen ( ) ) { loc0 = concodefunc_getSessionFactory ( ) . openSession ( ) ; } return loc0 ; }"
    },
    {
        "question_id": 988,
        "intent": "Add Description as a child of the receiver .",
        "snippet": "void function ( Description arg0 ) { concodefunc_getChildren ( ) . add ( arg0 ) ; }"
    },
    {
        "question_id": 989,
        "intent": "Parse a String",
        "snippet": "RGB function ( String arg0 ) { if ( arg0 . length ( ) <= 1 ) { throw new IllegalArgumentException ( concodeclass_usageText ) ; } if ( arg0 . charAt ( 0 ) == '#' ) { return concodefunc_parseHtml ( arg0 ) ; } else if ( arg0 . indexOf ( ',' ) != - 1 ) { return concodefunc_parseRGB ( arg0 ) ; } else { throw new IllegalArgumentException ( concodeclass_usageText ) ; } }"
    },
    {
        "question_id": 990,
        "intent": "See setNumericalZero",
        "snippet": "double function ( ) { return concodeclass_numericalZero ; }"
    },
    {
        "question_id": 991,
        "intent": "moves both pos and lookAt by the given vector",
        "snippet": "void function ( VectorXYZ arg0 ) { concodeclass_pos = concodeclass_pos . add ( arg0 ) ; concodeclass_lookAt = concodeclass_lookAt . add ( arg0 ) ; }"
    },
    {
        "question_id": 992,
        "intent": "Get the high value in the range the lookup values .",
        "snippet": "int function ( ) { return concodeclass_values [ concodeclass_values . length - 1 ] ; }"
    },
    {
        "question_id": 993,
        "intent": "Find a Widget , using the given Matcher to determine whether a given widget in the hierarchy used by this WidgetFinder is the desired one .",
        "snippet": "Widget function ( Matcher arg0 ) { concodeclass_dbComparisons = 0 ; concodeclass__attempts = 0 ; return concodefunc_findInShellScope ( arg0 ) ; }"
    },
    {
        "question_id": 994,
        "intent": "Sets the `` style '' of Kademlia , for example s/k/l / h.",
        "snippet": "void function ( final String arg0 ) { if ( ! concodeclass_started ) { concodeclass_style = arg0 ; } }"
    },
    {
        "question_id": 995,
        "intent": "Dispatches an interpolator for the animation thread . This will launch the animation thread if it is not already active .",
        "snippet": "void function ( Interpolator arg0 ) { synchronized ( concodeclass_newInterpolators ) { concodeclass_newInterpolators . addElement ( arg0 ) ; if ( ! concodefunc_isActive ( ) ) concodefunc_start ( ) ; } }"
    },
    {
        "question_id": 996,
        "intent": "Get the zero element .",
        "snippet": "UnivPowerSeries < C > function ( ) { return concodeclass_ZERO ; }"
    },
    {
        "question_id": 997,
        "intent": "This method was generated by MyBatis Generator . This method sets the value of the database column company.DEPT _ ID",
        "snippet": "void function ( Integer arg0 ) { this . concodeclass_deptId = arg0 ; }"
    },
    {
        "question_id": 998,
        "intent": "Adds properties of app , as and node to the map",
        "snippet": "void function ( AmwAppServerNodeModel arg0 , ApplicationResolver arg1 ) { if ( arg1 != null ) { arg1 . transform ( concodeclass_templateExceptionHandler , arg0 ) ; } }"
    },
    {
        "question_id": 999,
        "intent": "Gets the current key , which is the key returned by the last call to next .",
        "snippet": "Object function ( ) { if ( concodeclass_last == null ) { throw new IllegalStateException ( \"srini_string\" ) ; } return concodeclass_last . getKey ( ) ; }"
    },
    {
        "question_id": 1000,
        "intent": "Checks whether this Class is configured to be used .",
        "snippet": "boolean function ( Class arg0 ) { for ( LoadMetric loc0 : concodeclass_enabledMetrics ) { if ( arg0 . isInstance ( loc0 ) ) { return true ; } } return false ; }"
    },
    {
        "question_id": 1001,
        "intent": "Product of this matrix with scalar .",
        "snippet": "GenMatrix < C > function ( C arg0 ) { ArrayList < ArrayList < C >> loc0 = new ArrayList < ArrayList < C >> ( concodeclass_ring . rows ) ; for ( ArrayList < C > loc1 : concodeclass_matrix ) { ArrayList < C > loc2 = new ArrayList < C > ( concodeclass_ring . cols ) ; for ( C loc3 : loc1 ) { C loc4 = loc3 . multiply ( arg0 ) ; loc2 . add ( loc4 ) ; } loc0 . add ( loc2 ) ; } return new GenMatrix < C > ( concodeclass_ring , loc0 ) ; }"
    },
    {
        "question_id": 1002,
        "intent": "Make a request to the Facebook Graph API with the given string parameters using an HTTP GET default method . See http://developers.facebook.com/docs/api Note that this method is asynchronous and the callback will be invoked in a background thread ; operations that affect the UI will need to be posted to the UI thread or an appropriate handler . This method is deprecated . See Facebook and com.facebook.Request for more info .",
        "snippet": "void function ( String arg0 , Bundle arg1 , RequestListener arg2 , final Object arg3 ) { request ( arg0 , arg1 , \"srini_string\" , arg2 , arg3 ) ; }"
    },
    {
        "question_id": 1003,
        "intent": "Method setOutputStream .",
        "snippet": "void function ( OutputStream arg0 ) { concodeclass_m_outputStream = arg0 ; concodeclass_m_output = XMLOutput . createXMLOutput ( new OutputStreamWriter ( concodeclass_m_outputStream ) ) ; }"
    },
    {
        "question_id": 1004,
        "intent": "Uses a private key to sign data in a CMS SignedData structure and returns the encoded CMS SignedData as bytes . ` signedAuthPack ' contains a CMS type ContentInfo encoded according to RFC3852 . The contentType field of the type ContentInfo is id-signedData 1.2.840.113549.1.7.2 , and the content field is a SignedData . The eContentType field for the type SignedData is id-pkinit-authData 1.3.6.1.5.2.3.1 , and the eContent field contains the DER encoding of the type AuthPack .",
        "snippet": "byte [ ] function ( PrivateKey arg0 , X509Certificate arg1 , AuthPack arg2 ) { byte [ ] loc0 = KrbCodec . encode ( arg2 ) ; byte [ ] loc1 ; try { loc1 = PkiUtil . getSignedData ( arg0 , arg1 , loc0 , concodeclass_ID_PKINIT_AUTHDATA ) ; } catch ( PkiException loc2 ) { throw new KrbException ( \"srini_string\" , loc2 ) ; } return loc1 ; }"
    },
    {
        "question_id": 1005,
        "intent": "Factory to create the transformer . If the map is null , a transformer that always returns null is returned .",
        "snippet": "Transformer function ( Map arg0 ) { if ( arg0 == null ) { return ConstantTransformer . NULL_INSTANCE ; } return new MapTransformer ( arg0 ) ; }"
    },
    {
        "question_id": 1006,
        "intent": "Returns an unmodifiable IntListIterator containing only the specified element .",
        "snippet": "IntListIterator function ( int arg0 ) { return concodefunc_singletonIntList ( arg0 ) . listIterator ( ) ; }"
    },
    {
        "question_id": 1007,
        "intent": "get Bitmap by imageUrl",
        "snippet": "Bitmap function ( String arg0 , int arg1 , Map < String , String > arg2 ) { InputStream loc0 = concodefunc_getInputStreamFromUrl ( arg0 , arg1 , arg2 ) ; Bitmap loc1 = BitmapFactory . decodeStream ( loc0 ) ; concodefunc_closeInputStream ( loc0 ) ; return loc1 ; }"
    },
    {
        "question_id": 1008,
        "intent": "See the discussion on #disableAutoClose . This method enables the auto-closing .",
        "snippet": "StandardServiceRegistryBuilder function ( ) { this . concodeclass_autoCloseRegistry = true ; return this ; }"
    },
    {
        "question_id": 1009,
        "intent": "Gets the entity manager factory .",
        "snippet": "EntityManagerFactory function ( ) { return concodeclass_emf ; }"
    },
    {
        "question_id": 1010,
        "intent": "Get whether disabled .",
        "snippet": "boolean function ( ) { String loc0 = concodeclass_entry . get ( KerberosAttribute . KRB5_ACCOUNT_DISABLED_AT ) . getString ( ) ; return Boolean . parseBoolean ( loc0 ) ; }"
    },
    {
        "question_id": 1011,
        "intent": "This method is used for when a user has clicked on the `` Quit '' button on the GUI . It handles exiting the game .",
        "snippet": "void function ( String arg0 ) { JOptionPane . showMessageDialog ( null , \"srini_string\" + arg0 , \"srini_string\" , JOptionPane . INFORMATION_MESSAGE ) ; System . exit ( 0 ) ; }"
    },
    {
        "question_id": 1012,
        "intent": "Returns the URL last path component .",
        "snippet": "String function ( ) { if ( concodeclass_lastPathComponent == null ) { int loc0 = concodeclass_url . lastIndexOf ( '/' ) ; concodeclass_lastPathComponent = concodeclass_url . substring ( loc0 + 1 , concodeclass_url . length ( ) ) ; } return concodeclass_lastPathComponent ; }"
    },
    {
        "question_id": 1013,
        "intent": "Indexing operation . requires : 0 < = index < this.size",
        "snippet": "RatTerm function ( int arg0 ) { return ( RatTerm ) concodeclass_underlying_terms . get ( arg0 ) ; }"
    },
    {
        "question_id": 1014,
        "intent": "Create an instance of LocalizedMessage",
        "snippet": "LocalizedMessage function ( ) { return new LocalizedMessage ( ) ; }"
    },
    {
        "question_id": 1015,
        "intent": "Set the root-tags , this matters for margins . By default these are set to < body > and < div > .",
        "snippet": "HtmlPipelineContext function ( final List < String > arg0 ) { this . concodeclass_roottags = arg0 ; return this ; }"
    },
    {
        "question_id": 1016,
        "intent": "Counts the number of releases available .",
        "snippet": "int function ( ) { CriteriaQuery < Long > loc0 = concodeclass_entityManager . getCriteriaBuilder ( ) . createQuery ( Long . class ) ; loc0 . select ( concodeclass_entityManager . getCriteriaBuilder ( ) . count ( loc0 . from ( ReleaseEntity . class ) ) ) ; Long loc1 = concodeclass_entityManager . createQuery ( loc0 ) . getSingleResult ( ) ; return loc1 != null ? loc1 . intValue ( ) : 0 ; }"
    },
    {
        "question_id": 1017,
        "intent": "Sorts source and adds the first n entries to dest . If source contains less than n entries , all of them are added to dest . If adding an entry to dest does not increase the collection 's size , for example if dest is a set and already contained the inserted contact , an additional entry of source will be added , if available . This guarantees that n new , distinct entries are added to collection dest as long as this can be fulfilled with the contents of source , and as dest does recognise duplicate entries . Consequently , this guarantee does not hold for simple lists . Both collections may not be null .",
        "snippet": "void function ( final Collection < ? extends T > arg0 , final Collection < ? super T > arg1 , final Comparator < ? super T > arg2 , final int arg3 ) { final List < ? extends T > loc0 = Collections . list ( Collections . enumeration ( arg0 ) ) ; Collections . sort ( loc0 , arg2 ) ; final Iterator < ? extends T > loc1 = loc0 . iterator ( ) ; final int loc2 = arg1 . size ( ) + arg3 ; while ( loc1 . hasNext ( ) && arg1 . size ( ) < loc2 ) { arg1 . add ( loc1 . next ( ) ) ; } }"
    },
    {
        "question_id": 1018,
        "intent": "Gets a map from task id to component id .",
        "snippet": "Map < Integer , String > function ( ) { return concodeclass__taskToComponent ; }"
    },
    {
        "question_id": 1019,
        "intent": "Returns the save participant descriptor for the given id or null if no such listener is registered .",
        "snippet": "SaveParticipantDescriptor function ( String arg0 ) { concodefunc_ensureRegistered ( ) ; return concodeclass_fDescriptors . get ( arg0 ) ; }"
    },
    {
        "question_id": 1020,
        "intent": "lets the subclass update the target after the initial #fillTarget JOGLTarget .",
        "snippet": "void function ( JOGLTarget arg0 , boolean arg1 ) { }"
    },
    {
        "question_id": 1021,
        "intent": "Notifies all of this option change-listeners of the given event",
        "snippet": "void function ( IOptionChangeEvent arg0 ) { if ( ! concodeclass_fListeneredDisabled ) { for ( IOptionChangeListener loc0 : concodeclass_fListeners ) { loc0 . attributeChanged ( arg0 ) ; } } }"
    },
    {
        "question_id": 1022,
        "intent": "workaround for session scope",
        "snippet": "void function ( ) { concodeclass_releaseMap = null ; concodeclass_upcomingReleaseId = null ; concodeclass_upcomingReleaseDate = null ; }"
    },
    {
        "question_id": 1023,
        "intent": "Sole entry point to application , as always .",
        "snippet": "void function ( String [ ] arg0 ) { String loc0 ; TextIO . putln ( \"srini_string\" ) ; loc0 = TextIO . getln ( ) ; TextIO . putln ( ) ; TextIO . putln ( \"srini_string\" ) ; concodefunc_printCapitalized ( loc0 ) ; }"
    },
    {
        "question_id": 1024,
        "intent": "Gets Document to sign",
        "snippet": "Document function ( ) { return concodeclass_xfaForm . getDomDocument ( ) ; }"
    },
    {
        "question_id": 1025,
        "intent": "Make an instance DummyInvariant for this instance of the splitter , if possible on an appropriate slice from ppt .",
        "snippet": "void function ( PptTopLevel arg0 ) { }"
    },
    {
        "question_id": 1026,
        "intent": "returns true if one of the resourcetypes within tree up until root resource type has the same name as one of the comma separated values of the system property ch.puzzle.itc.mobiliar.common.util.ConfigurationService.ConfigKey #CONSUMABLE_SOFTLINK_RESOURCE_TYPES",
        "snippet": "boolean function ( Integer arg0 ) { return hasResourceConsumableSoftlinkType ( concodeclass_entityManager . find ( ResourceEntity . class , arg0 ) ) ; }"
    },
    {
        "question_id": 1027,
        "intent": "Returns a copy of this set , with the given converter removed . If the converter was not in the set , the original set is returned .",
        "snippet": "ConverterSet function ( Converter arg0 , Converter [ ] arg1 ) { Converter [ ] loc0 = concodeclass_iConverters ; int loc1 = loc0 . loc1 ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { if ( arg0 . equals ( loc0 [ loc2 ] ) ) { return remove ( loc2 , arg1 ) ; } } if ( arg1 != null ) { arg1 [ 0 ] = null ; } return this ; }"
    },
    {
        "question_id": 1028,
        "intent": "Ask the monitor to wait until the execution is finished .",
        "snippet": "void function ( ) { concodefunc_getMonitor ( ) . waitUntilFinished ( ) ; }"
    },
    {
        "question_id": 1029,
        "intent": "Compute the cosine for the given complex argument .",
        "snippet": "Complex function ( Complex arg0 ) { if ( arg0 . isNaN ( ) ) { return Complex . NaN ; } double loc0 = arg0 . getReal ( ) ; double loc1 = arg0 . getImaginary ( ) ; return new Complex ( Math . cos ( loc0 ) * MathUtils . cosh ( loc1 ) , - Math . sin ( loc0 ) * MathUtils . sinh ( loc1 ) ) ; }"
    },
    {
        "question_id": 1030,
        "intent": "Currently the server responds with an JSON object wrapped in a JSON array . We need to strip the array .",
        "snippet": "String function ( String arg0 ) { return arg0 . substring ( 1 , arg0 . length ( ) - 1 ) ; }"
    },
    {
        "question_id": 1031,
        "intent": "Returns escaped absolute path of given File instance .",
        "snippet": "String function ( File arg0 ) { return concodefunc_escapePath ( Objects . requireNonNull ( arg0 , \"srini_string\" ) . getAbsolutePath ( ) ) ; }"
    },
    {
        "question_id": 1032,
        "intent": "Write the script tag with code content . No HTML escaping applied . W3C has recommended that all scripts within an XHTML document be escaped using CDATA sections .",
        "snippet": "T function ( String arg0 ) { return ( T ) concodeclass_canvas . script ( type ( \"srini_string\" ) ) . cdata ( ) . write ( arg0 , NO_ESCAPE ) . _cdata ( ) . _script ( ) ; }"
    },
    {
        "question_id": 1033,
        "intent": "Down-grade locks to NONE for all entities in this context",
        "snippet": "void function ( ) { if ( concodeclass_head == null ) { return ; } ManagedEntity loc0 = concodeclass_head ; while ( loc0 != null ) { loc0 . $$_hibernate_getEntityEntry ( ) . setLockMode ( LockMode . NONE ) ; loc0 = loc0 . $$_hibernate_getNextManagedEntity ( ) ; } }"
    },
    {
        "question_id": 1034,
        "intent": "Run this runnable as a transaction .",
        "snippet": "Object function ( UIRunnable arg0 , IUIContext arg1 ) { concodefunc_start ( ) ; try { Object loc0 = arg0 . runWithResult ( ) ; arg1 . wait ( TransactionCompleteCondition . forTransaction ( this ) , concodeclass_TRANSACTION_TIMEOUT ) ; return loc0 ; } finally { concodefunc_stop ( ) ; } }"
    },
    {
        "question_id": 1035,
        "intent": "Sets data , offset , length and header of this buffer to that buffer . Note that this method creates copies of the data and header , so that these fields in that buffer can be discarded without affecting the contents of this buffer . FIXME - This method does not always create a copy !!",
        "snippet": "void function ( Buffer arg0 ) { this . concodeclass_offset = arg0 . offset ; this . concodeclass_length = arg0 . length ; this . concodeclass_data = concodefunc_copy ( arg0 . data , this . concodeclass_data ) ; this . concodeclass_header = concodefunc_copy ( arg0 . header , this . concodeclass_header ) ; }"
    },
    {
        "question_id": 1036,
        "intent": "This method fetches the regular expression value of the key that you are providing . The regular expressions are stored in the RegularExp.properties file .",
        "snippet": "String function ( String arg0 ) { if ( arg0 == null || arg0 . isEmpty ( ) ) return concodeclass_EMPTY_STRING ; return concodeclass_regularExpproperties . getProperty ( arg0 ) ; }"
    },
    {
        "question_id": 1037,
        "intent": "Add one tag processor that handles multiple tags .",
        "snippet": "void function ( final String arg0 , final String ... arg1 ) { for ( String loc0 : arg1 ) { addProcessor ( loc0 , arg0 ) ; } }"
    },
    {
        "question_id": 1038,
        "intent": "Compares object references for equality .",
        "snippet": "boolean function ( T arg0 , T arg1 ) { return arg0 == arg1 ; }"
    },
    {
        "question_id": 1039,
        "intent": "Puts the given key and value into this map according to the contract of #put Object , Object except that the value of an existing key mayonly be updated if allowUpdate = true .",
        "snippet": "boolean function ( final K arg0 , final V arg1 , final boolean arg2 ) { if ( ! arg2 && concodeclass_kSmallest . containsKey ( arg0 ) ) { return false ; } return put ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 1040,
        "intent": "Adds all column or formula elements .",
        "snippet": "void function ( Element arg0 , Iterator arg1 ) { while ( arg1 . hasNext ( ) ) { final Object loc0 = arg1 . next ( ) ; if ( loc0 instanceof Column ) { concodefunc_addColumn ( arg0 , ( Column ) loc0 ) ; } else if ( loc0 instanceof Formula ) { concodefunc_addFormula ( arg0 , ( Formula ) loc0 ) ; } } }"
    },
    {
        "question_id": 1041,
        "intent": "Print the message for a log entry to the specified file",
        "snippet": "void function ( PrintWriter arg0 , String arg1 ) { if ( arg1 != null ) { arg0 . println ( arg1 ) ; } }"
    },
    {
        "question_id": 1042,
        "intent": "Gets the value of the omit property .",
        "snippet": "Omit function ( ) { return concodeclass_omit ; }"
    },
    {
        "question_id": 1043,
        "intent": "Prints out the current Thread stack to the given stream .",
        "snippet": "void function ( PrintStream arg0 ) { StackTraceElement [ ] loc0 = Thread . currentThread ( ) . getStackTrace ( ) ; String loc1 = StringUtil . arrayToString ( loc0 , \"srini_string\" ) ; arg0 . println ( loc1 ) ; }"
    },
    {
        "question_id": 1044,
        "intent": "The VM name of the class .",
        "snippet": "String function ( ) { return concodeclass_name ; }"
    },
    {
        "question_id": 1045,
        "intent": "Return the native Logger instance we are using .",
        "snippet": "Logger function ( ) { if ( concodeclass_logger == null ) { concodeclass_logger = Logger . getLogger ( concodeclass_name ) ; } return ( this . concodeclass_logger ) ; }"
    },
    {
        "question_id": 1046,
        "intent": "Number of Comparators in the current ComparatorChain .",
        "snippet": "int function ( ) { return concodeclass_comparatorChain . size ( ) ; }"
    },
    {
        "question_id": 1047,
        "intent": "Converts given array to an Iterable",
        "snippet": "Iterable < ? extends Object > function ( Object arg0 ) { if ( concodefunc_isArray ( arg0 ) ) return ( ( Iterable ) arg0 ) ; else throw new JsonPathException ( \"srini_string\" + arg0 != null ? arg0 . getClass ( ) . getName ( ) : \"srini_string\" ) ; }"
    },
    {
        "question_id": 1048,
        "intent": "Get the zero element .",
        "snippet": "BigDecimal function ( ) { return concodeclass_ZERO ; }"
    },
    {
        "question_id": 1049,
        "intent": "Retrieve the name of the team",
        "snippet": "String function ( ) { return concodeclass_name ; }"
    },
    {
        "question_id": 1050,
        "intent": "Get the power series of the sinus function .",
        "snippet": "UnivPowerSeries < C > function ( ) { return concodefunc_fixPoint ( new PowerSeriesMap < C > ( ) { public UnivPowerSeries < C > map ( UnivPowerSeries < C > arg0 ) { return arg0 . negate ( ) . integrate ( concodeclass_coFac . getONE ( ) ) . integrate ( concodeclass_coFac . getZERO ( ) ) ; } } ) ; }"
    },
    {
        "question_id": 1051,
        "intent": "Looks up the DHTObject associated with key in the local database .",
        "snippet": "DHTObject function ( final KademliaOverlayKey arg0 ) { final KademliaIndexEntry loc0 = concodeclass_index . get ( arg0 ) ; if ( loc0 == null ) { return null ; } else if ( loc0 . hasExpired ( ) ) { concodeclass_index . remove ( arg0 ) ; return null ; } return loc0 . getValue ( ) ; }"
    },
    {
        "question_id": 1052,
        "intent": "Gets the SHA-1 hash of the completed piece as a byte array",
        "snippet": "byte [ ] function ( ) { return concodeclass_hash ; }"
    },
    {
        "question_id": 1053,
        "intent": "Erase the whole line",
        "snippet": "void function ( ) { for ( int loc0 = 0 ; loc0 < concodeclass_valid . size ( ) ; loc0 ++ ) { concodeclass_valid . set ( loc0 , false ) ; } concodeclass_erased = true ; }"
    },
    {
        "question_id": 1054,
        "intent": "CARBON",
        "snippet": "Rectangle function ( TabItem arg0 ) { Rectangle loc0 = concodeclass_MacExt . getTabItemBounds ( arg0 ) ; return loc0 ; }"
    },
    {
        "question_id": 1055,
        "intent": "Getter for the roman number generator instance .",
        "snippet": "RomanNumeralGenerator function ( ) { return concodeclass_romanNumeralGenerator ; }"
    },
    {
        "question_id": 1056,
        "intent": "starts the analyzer which starts the StatisticGernerationEvent",
        "snippet": "void function ( ) { concodeclass_event = new StatisticGenerationEvent ( this ) ; concodeclass_event . writerStarted ( ) ; concodeclass_event . scheduleImmediatly ( ) ; concodeclass_receivedBytes = 0 ; concodeclass_sentBytes = 0 ; concodeclass_receivedMsg = 0 ; concodeclass_sentMsg = 0 ; }"
    },
    {
        "question_id": 1057,
        "intent": "Initializes this image manager . Nothing happens if this method is invoked after a previous initialization . This method is not supposed to be invoked more than once .",
        "snippet": "void function ( URL arg0 , ImageRegistry arg1 ) { this . concodeclass_iconBaseURL = arg0 ; this . concodeclass_imageRegistry = arg1 ; }"
    },
    {
        "question_id": 1058,
        "intent": "Returns -1 if the first argument is the default working set , 1 if the second argument is the default working set and if the boolean fIsOtherWorkingSetOnTop is set , to keep the default working set on top while sorting .",
        "snippet": "int function ( IWorkingSet arg0 , IWorkingSet arg1 ) { if ( concodeclass_fIsOtherWorkingSetOnTop && IWorkingSetIDs . OTHERS . equals ( arg0 . getId ( ) ) ) return - 1 ; if ( concodeclass_fIsOtherWorkingSetOnTop && IWorkingSetIDs . OTHERS . equals ( arg1 . getId ( ) ) ) return 1 ; return concodeclass_fCollator . compare ( arg0 . getLabel ( ) , arg1 . getLabel ( ) ) ; }"
    },
    {
        "question_id": 1059,
        "intent": "Helper method to copy data based on partition",
        "snippet": "void function ( int arg0 ) { int loc0 = concodefunc_doEval ( arg0 ) ; if ( loc0 >= concodeclass_start && loc0 < concodeclass_end ) { OutgoingRecordBatch loc1 = concodeclass_outgoingBatches . get ( loc0 - concodeclass_start ) ; loc1 . copy ( arg0 ) ; } }"
    },
    {
        "question_id": 1060,
        "intent": "Sets the address stored in a LocalVariable to which this subroutine will return once it is finished .",
        "snippet": "void function ( final LocalVariable arg0 ) { this . concodeclass_returnAddress = arg0 ; }"
    },
    {
        "question_id": 1061,
        "intent": "Getter to find out if the signature is a certification signature .",
        "snippet": "boolean function ( ) { return concodeclass_certification ; }"
    },
    {
        "question_id": 1062,
        "intent": "Adds an array of Cookie HTTP cookies . Cookies are added individually and in the given array order . If any of the given cookies has already expired it will not be added , but existing values will still be removed .",
        "snippet": "void function ( final Cookie [ ] arg0 ) { if ( arg0 != null ) { for ( final Cookie loc0 : arg0 ) { this . concodefunc_addCookie ( loc0 ) ; } } }"
    },
    {
        "question_id": 1063,
        "intent": "Called to write a string . May be overridden for alternate string representations .",
        "snippet": "void function ( Schema arg0 , Object arg1 , Encoder arg2 ) { writeString ( arg1 , arg2 ) ; }"
    },
    {
        "question_id": 1064,
        "intent": "Get the post-construct interceptors for client proxy instances . This method should only be called after all interceptors have been added .",
        "snippet": "List < InterceptorFactory > function ( ) { return concodeclass_clientPostConstructInterceptors . getSortedItems ( ) ; }"
    },
    {
        "question_id": 1065,
        "intent": "parse a vector from a Reader .",
        "snippet": "GenVector < C > function ( Reader arg0 ) { throw new RuntimeException ( \"srini_string\" ) ; }"
    },
    {
        "question_id": 1066,
        "intent": "Returns the error message from the computers in this category .",
        "snippet": "String function ( ) { return concodeclass_fLastError ; }"
    },
    {
        "question_id": 1067,
        "intent": "Returns a string representing the ProjPoint in the format : ProjCoordinate X Y Z . Example : ProjCoordinate 6241.11 5218.25 12.3",
        "snippet": "String function ( ) { StringBuilder loc0 = new StringBuilder ( ) ; loc0 . append ( \"srini_string\" ) ; loc0 . append ( this . concodeclass_x ) ; loc0 . append ( \"srini_string\" ) ; loc0 . append ( this . concodeclass_y ) ; loc0 . append ( \"srini_string\" ) ; loc0 . append ( this . concodeclass_z ) ; loc0 . append ( \"srini_string\" ) ; return loc0 . toString ( ) ; }"
    },
    {
        "question_id": 1068,
        "intent": "Validate that the argument condition is true ; otherwise throwing an exception with the specified message . This method is useful when validating according to an arbitrary boolean expression , such as validating a primitive number or using your own custom validation expression . Validate.isTrue i > 0.0 , `` The value must be greater than zero : % d '' , i ; For performance reasons , the long value is passed as a separate parameter and appended to the exception message only in the case of an error .",
        "snippet": "void function ( boolean arg0 , String arg1 ) { if ( arg0 == false ) { throw new IllegalArgumentException ( arg1 ) ; } }"
    },
    {
        "question_id": 1069,
        "intent": "Returns the paths a Collection of two-element arrays of Blocks that represent the Blocks that end in a call to this subroutine and the block that begin with the return address from this subroutine .",
        "snippet": "Collection function ( ) { return concodeclass_paths ; }"
    },
    {
        "question_id": 1070,
        "intent": "power of a to the n-th .",
        "snippet": "C function ( C arg0 , long arg1 ) { return power ( concodeclass_fac , arg0 , arg1 ) ; }"
    },
    {
        "question_id": 1071,
        "intent": "Resolve the column name/alias to its index",
        "snippet": "Integer function ( String arg0 , ResultSet arg1 ) { final Integer loc0 = concodeclass_columnNameToIndexCache . get ( arg0 ) ; if ( loc0 != null ) { return loc0 ; } else { final Integer loc1 = Integer . valueOf ( arg1 . findColumn ( arg0 ) ) ; concodeclass_columnNameToIndexCache . put ( arg0 , loc1 ) ; return loc1 ; } }"
    },
    {
        "question_id": 1072,
        "intent": "Convert a Duration to the number of seconds . The result will be rounded towards 0 to the nearest second . E.g. , if the duration represents -1 nanosecond , it will be rounded to 0 .",
        "snippet": "long function ( Duration arg0 ) { return concodefunc_checkValid ( arg0 ) . getSeconds ( ) ; }"
    },
    {
        "question_id": 1073,
        "intent": "Is Local zero .",
        "snippet": "boolean function ( ) { return concodeclass_num . isZERO ( ) ; }"
    },
    {
        "question_id": 1074,
        "intent": "Return the audio resource ID of the word .",
        "snippet": "int function ( ) { return concodeclass_mAudioResourceId ; }"
    },
    {
        "question_id": 1075,
        "intent": "Set the last char",
        "snippet": "void function ( final char arg0 ) { this . concodeclass_lastChar = arg0 ; }"
    },
    {
        "question_id": 1076,
        "intent": "Gets Byte value form cursor for column index .",
        "snippet": "Byte function ( @ NonNull Cursor arg0 , int arg1 ) { if ( arg0 . isNull ( arg1 ) ) { return null ; } return ( byte ) arg0 . getInt ( arg1 ) ; }"
    },
    {
        "question_id": 1077,
        "intent": "Checks if the given resources are in sync with the underlying file system .",
        "snippet": "IStatus function ( IResource [ ] arg0 ) { IStatus loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0 . length ; loc1 ++ ) { IResource loc2 = arg0 [ loc1 ] ; if ( ! loc2 . isSynchronized ( IResource . DEPTH_INFINITE ) ) { loc0 = concodefunc_addOutOfSync ( loc0 , loc2 ) ; } } if ( loc0 != null ) return loc0 ; return Status . OK_STATUS ; }"
    },
    {
        "question_id": 1078,
        "intent": "Log a message with trace log level .",
        "snippet": "void function ( Object arg0 ) { if ( concodefunc_isLevelEnabled ( MemoryLog . LOG_LEVEL_TRACE ) ) { concodefunc_log ( MemoryLog . LOG_LEVEL_TRACE , arg0 , null ) ; } }"
    },
    {
        "question_id": 1079,
        "intent": "Gets the predicate being decorated .",
        "snippet": "Predicate [ ] function ( ) { return new Predicate [ ] { concodeclass_iPredicate } ; }"
    },
    {
        "question_id": 1080,
        "intent": "Replace the deserialized instance with its associated static object required for proper serialization .",
        "snippet": "Object function ( ) { return concodefunc_get ( concodeclass_name ) ; }"
    },
    {
        "question_id": 1081,
        "intent": "Default implementation that simply calls Thread #sleep long .",
        "snippet": "void function ( int arg0 ) { try { Thread . sleep ( arg0 ) ; } catch ( InterruptedException loc0 ) { } }"
    },
    {
        "question_id": 1082,
        "intent": "Updates a reading list item with new meta data .",
        "snippet": "void function ( final NativeJSObject arg0 ) { final ContentResolver loc0 = concodeclass_context . getContentResolver ( ) ; final ContentValues loc1 = concodefunc_getContentValues ( arg0 ) ; ThreadUtils . postToBackgroundThread ( new Runnable ( ) { @ Override public void run ( ) { concodeclass_readingListAccessor . updateReadingListItem ( loc0 , loc1 ) ; } } ) ; }"
    },
    {
        "question_id": 1083,
        "intent": "Return the job prefix which is the same as the file name .",
        "snippet": "String function ( ) { return concodeclass_prefix ; }"
    },
    {
        "question_id": 1084,
        "intent": "Asserts that two chars are equal . If they are not an AssertionFailedError is thrown with the given message .",
        "snippet": "void function ( String arg0 , char arg1 , char arg2 ) { assertEquals ( arg0 , new Character ( arg1 ) , new Character ( arg2 ) ) ; }"
    },
    {
        "question_id": 1085,
        "intent": "Returns whether mouse buttons 2/3 are swapped when using Robot .",
        "snippet": "boolean function ( ) { return Platform . isOSX ( ) && Platform . JAVA_VERSION >= Platform . JAVA_1_4 && Platform . JAVA_VERSION <= 0x1425 ; }"
    },
    {
        "question_id": 1086,
        "intent": "This method returns the value of the database column SYS_IP_AREA . PROVINCE",
        "snippet": "String function ( ) { return concodeclass_province ; }"
    },
    {
        "question_id": 1087,
        "intent": "Build a LobCreator using the given context",
        "snippet": "LobCreator function ( LobCreationContext arg0 ) { return concodeclass_useContextualLobCreation ? new ContextualLobCreator ( arg0 ) : NonContextualLobCreator . INSTANCE ; }"
    },
    {
        "question_id": 1088,
        "intent": "Returns default parameters for debug builds .",
        "snippet": "PackagerParams function ( ) { PackagerParams loc0 = new PackagerParams ( ) ; loc0 . dev = true ; loc0 . inlineSourceMap = false ; loc0 . minify = false ; loc0 . runModule = true ; loc0 . skip = true ; return loc0 ; }"
    },
    {
        "question_id": 1089,
        "intent": "Pass InterpreterOutput to capture the repl output",
        "snippet": "void function ( InterpreterOutput arg0 ) { concodeclass_outputStream . setInterpreterOutput ( arg0 ) ; }"
    },
    {
        "question_id": 1090,
        "intent": "This method calculates the score of this query with all the documents and sort the score map in the reverse order of value .",
        "snippet": "void function ( ) { for ( Integer loc0 : FileUtils . documentIdMap . keySet ( ) ) { concodefunc_calculateByW1 ( loc0 ) ; } this . concodeclass_docRankingByW1 = Util . sortByValue ( concodeclass_docRankingByW1 ) ; concodeclass_documentNameIdMap = FileUtils . documentNameIdMap ; }"
    },
    {
        "question_id": 1091,
        "intent": "Gets a uniformly distributed random value with mean = mu .",
        "snippet": "double function ( ) { return concodeclass_randomData . nextUniform ( 0 , 2 * concodeclass_mu ) ; }"
    },
    {
        "question_id": 1092,
        "intent": "Returns a string describing a method declaration . It contains the access flags public , private , static , etc , the return type , the method name , and the types of each of its arguments .",
        "snippet": "String function ( Method arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; Formatter loc1 = new Formatter ( loc0 ) ; loc1 . format ( \"srini_string\" , concodefunc_get_access_flags ( arg0 ) , arg0 . getReturnType ( ) , arg0 . getName ( ) ) ; for ( Type loc2 : arg0 . getArgumentTypes ( ) ) { loc1 . format ( \"srini_string\" , loc2 ) ; } loc1 . format ( \"srini_string\" ) ; return ( loc0 . toString ( ) . replace ( \"srini_string\" , \"srini_string\" ) ) ; }"
    },
    {
        "question_id": 1093,
        "intent": "Test that transformation from second transformer is applied on transformed name obtained from first transformer .",
        "snippet": "void function ( @ ArquillianResource URL arg0 ) { URL loc0 = concodefunc_prepareUrl ( arg0 ) ; Utils . makeCallWithBasicAuthn ( loc0 , \"srini_string\" , concodeclass_PASSWORD3 , SC_OK ) ; }"
    },
    {
        "question_id": 1094,
        "intent": "Acquires a Buffered reader usable to read the contents of a file",
        "snippet": "BufferedReader function ( String arg0 ) { BufferedReader loc0 = new BufferedReader ( new FileReader ( arg0 ) ) ; return loc0 ; }"
    },
    {
        "question_id": 1095,
        "intent": "Called when a Section is written . position will hold the height at which the section will be written to .",
        "snippet": "void function ( PdfWriter arg0 , Document arg1 , float arg2 , int arg3 , Paragraph arg4 ) { }"
    },
    {
        "question_id": 1096,
        "intent": "Build a request body out of the phenotype given .",
        "snippet": "byte [ ] function ( Phenotype arg0 ) { byte [ ] loc0 = concodeclass_mapper . writeValueAsBytes ( Issue . getRequestParams ( arg0 ) ) ; return loc0 ; }"
    },
    {
        "question_id": 1097,
        "intent": "Time to Live for a contact before it is considered offline",
        "snippet": "long function ( ) { return Math . max ( concodeclass_timeToLiveForContacts , concodeclass_timeBetweenRootPings ) ; }"
    },
    {
        "question_id": 1098,
        "intent": "Returns an index about where in the cache different variants for a given resource are stored . This maps `` variant keys '' to `` cache keys '' , where the variant key is derived from the varying request headers , and the cache key is the location in the ch.boye.httpclientandroidlib.client.cache.HttpCacheStorage where thatparticular variant is stored . The first variant returned is used as the `` parent '' entry to hold this index of the other variants .",
        "snippet": "Map < String , String > function ( ) { return Collections . unmodifiableMap ( concodeclass_variantMap ) ; }"
    },
    {
        "question_id": 1099,
        "intent": "Returns all document sets that were declared in the XML config file .",
        "snippet": "Collection < IDocumentSet > function ( ) { return Collections . unmodifiableCollection ( concodeclass_resources . values ( ) ) ; }"
    },
    {
        "question_id": 1100,
        "intent": "Get the number of aliases that have specific lock modes defined .",
        "snippet": "int function ( ) { if ( concodeclass_aliasSpecificLockModes == null ) { return 0 ; } return concodeclass_aliasSpecificLockModes . size ( ) ; }"
    },
    {
        "question_id": 1101,
        "intent": "Gets the 1.5 compression status .",
        "snippet": "boolean function ( ) { return concodeclass_fc . isFullCompression ( ) ; }"
    },
    {
        "question_id": 1102,
        "intent": "This method adds a further condition to the set of conditions of this clause .",
        "snippet": "void function ( QueryCondition < ? > arg0 ) { concodeclass_conditions . add ( arg0 ) ; }"
    },
    {
        "question_id": 1103,
        "intent": "Answer the feedback information for the product 's preference page",
        "snippet": "String function ( ) { return \"srini_string\" ; }"
    },
    {
        "question_id": 1104,
        "intent": "Sets the value of the callContext property .",
        "snippet": "void function ( CallContext arg0 ) { this . concodeclass_callContext = arg0 ; }"
    },
    {
        "question_id": 1105,
        "intent": "Builds a CacheDataDescriptionImpl from the mapping model of a collection",
        "snippet": "CacheDataDescriptionImpl function ( Collection arg0 ) { return new CacheDataDescriptionImpl ( arg0 . isMutable ( ) , arg0 . getOwner ( ) . isVersioned ( ) , arg0 . getOwner ( ) . isVersioned ( ) ? ( ( VersionType ) arg0 . getOwner ( ) . getVersion ( ) . getType ( ) ) . getComparator ( ) : null ) ; }"
    },
    {
        "question_id": 1106,
        "intent": "Set this widget 's index relative to it 's parent .",
        "snippet": "void function ( int arg0 ) { concodeclass__index = arg0 ; }"
    },
    {
        "question_id": 1107,
        "intent": "Adds an equality string to the discardString for each variable in in vis which is different from the leader",
        "snippet": "void function ( VarInfo [ ] arg0 ) { for ( int loc0 = 0 ; loc0 < arg0 . length ; loc0 ++ ) { if ( concodeclass_inv . ppt . var_infos [ loc0 ] != arg0 [ loc0 ] ) concodeclass_discardString += \"srini_string\" + concodeclass_inv . ppt . var_infos [ loc0 ] + \"srini_string\" + arg0 [ loc0 ] ; } }"
    },
    {
        "question_id": 1108,
        "intent": "Returns the maximum sum of the sizes of the entries in this cache .",
        "snippet": "int function ( ) { return concodeclass_maxSize ; }"
    },
    {
        "question_id": 1109,
        "intent": "Enumerate potions",
        "snippet": "void function ( ) { concodeclass_LOGGER . info ( \"srini_string\" ) ; for ( Potion loc0 : concodeclass_topShelf ) { loc0 . drink ( ) ; } concodeclass_LOGGER . info ( \"srini_string\" ) ; for ( Potion loc0 : concodeclass_bottomShelf ) { loc0 . drink ( ) ; } }"
    },
    {
        "question_id": 1110,
        "intent": "Residue inverse .",
        "snippet": "Residue < C > function ( ) { GenPolynomial < C > loc0 = concodeclass_ring . ideal . inverse ( concodeclass_val ) ; return new Residue < C > ( concodeclass_ring , loc0 , 1 ) ; }"
    },
    {
        "question_id": 1111,
        "intent": "Queues the change of operations request of a channel , which will change the interested operations of the channel sometime in future . This is a non-blocking method and does not guarantee that the operations have changed when this method returns .",
        "snippet": "void function ( SelectionKey arg0 , int arg1 ) { concodeclass_pendingCommands . add ( new ChangeKeyOpsCommand ( arg0 , arg1 ) ) ; concodeclass_selector . wakeup ( ) ; }"
    },
    {
        "question_id": 1112,
        "intent": "Tests if the dictionary is empty .",
        "snippet": "boolean function ( ) { return concodeclass_size == 0 ; }"
    },
    {
        "question_id": 1113,
        "intent": "Returns the message format pattern to use for refactorings . Arguments : 0 : formatted date 0 : description of refactoring",
        "snippet": "String function ( ) { return RefactoringUIMessages . RefactoringHistoryControlConfiguration_refactoring_pattern ; }"
    },
    {
        "question_id": 1114,
        "intent": "Returns the delegate queries .",
        "snippet": "ICreateTargetQueries function ( ) { return concodeclass_fDelegate ; }"
    },
    {
        "question_id": 1115,
        "intent": "returns a boundary based on the bounds in the input file if available , otherwise returns the same as #getDataBoundary",
        "snippet": "AxisAlignedBoundingBoxXZ function ( ) { if ( concodeclass_fileBoundary != null ) { return concodeclass_fileBoundary ; } else { return concodeclass_dataBoundary ; } }"
    },
    {
        "question_id": 1116,
        "intent": "Get the current roll of the device in degrees .",
        "snippet": "float function ( ) { return concodeclass_roll ; }"
    },
    {
        "question_id": 1117,
        "intent": "Gets the value of the applicationPredecessors property . This accessor method returns a reference to the live list , not a snapshot . Therefore any modification you make to the returned list will be present inside the JAXB object . This is why there is not a set method for the applicationPredecessors property . For example , to add a new item , do as follows : getApplicationPredecessors . add newItem ; Objects of the following type s are allowed in the list ApplicationPredecessorRelation",
        "snippet": "List < ApplicationPredecessorRelation > function ( ) { if ( concodeclass_applicationPredecessors == null ) { concodeclass_applicationPredecessors = new ArrayList < ApplicationPredecessorRelation > ( ) ; } return this . concodeclass_applicationPredecessors ; }"
    },
    {
        "question_id": 1118,
        "intent": "Residue division .",
        "snippet": "Residue < C > function ( Residue < C > arg0 ) { return concodefunc_multiply ( arg0 . inverse ( ) ) ; }"
    },
    {
        "question_id": 1119,
        "intent": "Gets the validator error message .",
        "snippet": "List < String > function ( ) { return concodeclass_validatorErrorMessage ; }"
    },
    {
        "question_id": 1120,
        "intent": "This method ensures both passed domains contain the same value .",
        "snippet": "void function ( final String arg0 , final String arg1 ) { final boolean loc0 = ! arg0 . equals ( arg1 ) ; if ( loc0 ) throw WSLogger . ROOT_LOGGER . multipleSecurityDomainsDetected ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 1121,
        "intent": "Writes one byte per char",
        "snippet": "void function ( char arg0 [ ] ) { concodefunc_ensureSpace ( arg0 . length ) ; for ( int loc0 = 0 ; loc0 < arg0 . length ; loc0 ++ ) concodefunc_write ( arg0 [ loc0 ] ) ; }"
    },
    {
        "question_id": 1122,
        "intent": "checks that the first and last vertex of the vertex list are equal .",
        "snippet": "void function ( List < VectorXZ > arg0 ) { if ( ! arg0 . get ( 0 ) . equals ( arg0 . get ( arg0 . size ( ) - 1 ) ) ) { throw new IllegalArgumentException ( \"srini_string\" + \"srini_string\" + arg0 ) ; } }"
    },
    {
        "question_id": 1123,
        "intent": "toString method .",
        "snippet": "String function ( ) { StringBuffer loc0 = new StringBuffer ( ) ; loc0 . append ( concodeclass_coFac . getClass ( ) . getSimpleName ( ) ) ; loc0 . append ( \"srini_string\" + concodeclass_rows + \"srini_string\" + concodeclass_cols + \"srini_string\" ) ; return loc0 . toString ( ) ; }"
    },
    {
        "question_id": 1124,
        "intent": "Gets a hashCode compatible with the equals method . Implemented per API documentation of java.util.Map.Entry #hashCode",
        "snippet": "int function ( ) { Object loc0 = concodefunc_getValue ( ) ; return ( concodefunc_getKey ( ) == null ? 0 : concodefunc_getKey ( ) . hashCode ( ) ) ^ ( loc0 == null ? 0 : loc0 . hashCode ( ) ) ; }"
    },
    {
        "question_id": 1125,
        "intent": "Gets the value from the pair .",
        "snippet": "Object function ( ) { return concodeclass_value ; }"
    },
    {
        "question_id": 1126,
        "intent": "Does the status code obtained from the given UserTransaction indicate a commit ?",
        "snippet": "boolean function ( UserTransaction arg0 ) { return isCommitted ( concodefunc_getStatus ( arg0 ) ) ; }"
    },
    {
        "question_id": 1127,
        "intent": "Returns the type of the current token .",
        "snippet": "int function ( ) { return concodeclass_stok . ttype ; }"
    },
    {
        "question_id": 1128,
        "intent": "Returns the names of the document position categories used by the document partitioners created by this object to manage their partition information . If the partitioners do n't use document position categories , the returned result is null .",
        "snippet": "String [ ] function ( ) { return new String [ ] { org . eclipse . jface . text . rules . DefaultPartitioner . CONTENT_TYPES_CATEGORY } ; }"
    },
    {
        "question_id": 1129,
        "intent": "same result as calling #normalize after #cross VectorXYZ , but avoids creating a temporary vector",
        "snippet": "VectorXYZ function ( VectorXYZ arg0 ) { double loc0 = this . concodeclass_y * arg0 . loc2 - this . concodeclass_z * arg0 . loc1 ; double loc1 = this . concodeclass_z * arg0 . loc0 - this . concodeclass_x * arg0 . loc2 ; double loc2 = this . concodeclass_x * arg0 . loc1 - this . concodeclass_y * arg0 . loc0 ; double loc3 = sqrt ( loc0 * loc0 + loc1 * loc1 + loc2 * loc2 ) ; return new VectorXYZ ( loc0 / loc3 , loc1 / loc3 , loc2 / loc3 ) ; }"
    },
    {
        "question_id": 1130,
        "intent": "Codiert die zu sendende Eingabe in eine Signalfolge .",
        "snippet": "String function ( String arg0 ) { if ( arg0 == null ) { return this . concodeclass_sender . flush ( ) ; } else { boolean [ ] loc0 = loc0 ( arg0 ) ; return this . concodeclass_sender . send ( loc0 ) ; } }"
    },
    {
        "question_id": 1131,
        "intent": "Get the DrillConfig used for the Zookeeper instance .",
        "snippet": "DrillConfig function ( ) { return concodeclass_config ; }"
    },
    {
        "question_id": 1132,
        "intent": "Returns the time of the last event related to the gesture .",
        "snippet": "long function ( ) { return concodeclass_mLastEventTime ; }"
    },
    {
        "question_id": 1133,
        "intent": "Handles a successful Execution",
        "snippet": "void function ( ShakedownTestEntity arg0 ) { ShakedownTestEntity loc0 = concodeclass_shakedownTestService . updateShakedownInfo ( arg0 . getId ( ) , arg0 . getTestResult ( ) , shakedownTest_state . success ) ; concodeclass_log . info ( \"srini_string\" + loc0 . getId ( ) + \"srini_string\" ) ; }"
    },
    {
        "question_id": 1134,
        "intent": "Creates an Instructor object using the given instructorContactFile.The instructorContactFile should be an XML file containing the marshaled form of a Contact object .",
        "snippet": "Instructor function ( File arg0 , JAXBContext arg1 ) { Unmarshaller loc0 = arg1 . createUnmarshaller ( ) ; Instructor loc1 = new Instructor ( ) ; loc1 . setContact ( ( Contact ) loc0 . unmarshal ( arg0 ) ) ; return loc1 ; }"
    },
    {
        "question_id": 1135,
        "intent": "Name for this key",
        "snippet": "String function ( ) { return concodeclass_name ; }"
    },
    {
        "question_id": 1136,
        "intent": "Returns true iff the function takes opposite signs at the endpoints .",
        "snippet": "boolean function ( double arg0 , double arg1 , UnivariateRealFunction arg2 ) { return ( arg2 . value ( arg0 ) * arg2 . value ( arg1 ) < 0 ) ; }"
    },
    {
        "question_id": 1137,
        "intent": "checks if the actual area has a common X1 corner with the betweenArea",
        "snippet": "boolean function ( CanArea arg0 ) { if ( arg0 . getArea ( ) [ 0 ] == concodeclass_area [ 1 ] ) return true ; else return false ; }"
    },
    {
        "question_id": 1138,
        "intent": "Create an ObserverEqValue from its basic parts used when reading from a serialized file .",
        "snippet": "ObserverEqValue function ( Method arg0 , Object arg1 ) { return new ObserverEqValue ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 1139,
        "intent": "Returns the label String .",
        "snippet": "String function ( ) { return this . concodeclass_m_label ; }"
    },
    {
        "question_id": 1140,
        "intent": "Is trace logging currently enabled ?",
        "snippet": "boolean function ( ) { return ( concodefunc_getLogger ( ) . isLoggable ( Level . FINEST ) ) ; }"
    },
    {
        "question_id": 1141,
        "intent": "Appends a column separator to the output file .",
        "snippet": "void function ( ) { try { concodeclass_sb . append ( ' ' ) ; } catch ( NullPointerException loc0 ) { } }"
    },
    {
        "question_id": 1142,
        "intent": "Creates builder to build UserWithRoles .",
        "snippet": "Builder function ( ) { return new Builder ( ) ; }"
    },
    {
        "question_id": 1143,
        "intent": "returns a collection factory for an ObjectContainer",
        "snippet": "CollectionFactory function ( ObjectContainer arg0 ) { if ( concodefunc_isClient ( arg0 ) ) { throw new UnsupportedOperationException ( \"srini_string\" ) ; } return new CollectionFactory ( arg0 ) ; }"
    },
    {
        "question_id": 1144,
        "intent": "Puffert das erhaltene Signal .",
        "snippet": "void function ( char arg0 ) { concodeclass_pointer ++ ; concodeclass_buffer . insert ( concodeclass_pointer , arg0 ) ; }"
    },
    {
        "question_id": 1145,
        "intent": "SET AUTOCOMMIT 1 ;",
        "snippet": "void function ( ) { concodefunc_query ( \"srini_string\" ) ; }"
    },
    {
        "question_id": 1146,
        "intent": "Append a hashCode for a boolean array .",
        "snippet": "HashCodeBuilder function ( boolean [ ] arg0 ) { if ( arg0 == null ) { concodeclass_iTotal = concodeclass_iTotal * concodeclass_iConstant ; } else { for ( boolean loc0 : arg0 ) { append ( loc0 ) ; } } return this ; }"
    },
    {
        "question_id": 1147,
        "intent": "Gets the closure called when true .",
        "snippet": "Closure function ( ) { return concodeclass_iTrueClosure ; }"
    },
    {
        "question_id": 1148,
        "intent": "Override to inject .",
        "snippet": "EventSequenceCommandFactory function ( ) { return new EventSequenceCommandFactory ( concodefunc_getSequence ( ) ) ; }"
    },
    {
        "question_id": 1149,
        "intent": "Return the defined properties as an unmodifieable Map .",
        "snippet": "Map < String , JsonNode > function ( ) { return Collections . unmodifiableMap ( concodeclass_props ) ; }"
    },
    {
        "question_id": 1150,
        "intent": "Returns the size of this document set .",
        "snippet": "void function ( int arg0 ) { this . concodeclass_size = arg0 ; }"
    },
    {
        "question_id": 1151,
        "intent": "Create an absolute hover info instance .",
        "snippet": "IHoverInfo function ( int arg0 , int arg1 ) { return new AbsolutePointHoverInfo ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 1152,
        "intent": "Loading an example plugin",
        "snippet": "HawtPlugin function ( ) { return new HawtPlugin ( \"srini_string\" , \"srini_string\" , \"srini_string\" , new String [ ] { \"srini_string\" } ) ; }"
    },
    {
        "question_id": 1153,
        "intent": "returns a random value exponentially distributed with mu = _ mu .",
        "snippet": "double function ( double arg0 ) { try { ExponentialDistributionImpl loc0 = new ExponentialDistributionImpl ( arg0 ) ; return loc0 . inverseCumulativeProbability ( Simulator . getRandom ( ) . nextDouble ( ) ) ; } catch ( MathException loc0 ) { loc0 . printStackTrace ( ) ; return 0 ; } }"
    },
    {
        "question_id": 1154,
        "intent": "Gets the underlying PdfWriter .",
        "snippet": "PdfWriter function ( ) { return concodeclass_fc ; }"
    },
    {
        "question_id": 1155,
        "intent": "Normalizes the quoting of identifiers . This form returns a String rather than an Identifier to better work with the legacy code in org.hibernate.mapping",
        "snippet": "String function ( String arg0 ) { final Identifier loc0 = concodefunc_normalizeIdentifierQuoting ( arg0 ) ; if ( loc0 == null ) { return null ; } return loc0 . render ( concodeclass_database ( ) . getDialect ( ) ) ; }"
    },
    {
        "question_id": 1156,
        "intent": "Convert bytes into format as : 02020080",
        "snippet": "String function ( byte [ ] arg0 ) { int loc0 = arg0 . length * 2 ; char [ ] loc1 = new char [ loc0 ] ; for ( int loc2 = 0 ; loc2 < arg0 . length ; loc2 ++ ) { int loc3 = arg0 [ loc2 ] & 0xFF ; loc1 [ loc2 * 2 ] = concodeclass_HEX_CHARS [ loc3 >>> 4 ] ; loc1 [ loc2 * 2 + 1 ] = concodeclass_HEX_CHARS [ loc3 & 0x0F ] ; } return new String ( loc1 ) ; }"
    },
    {
        "question_id": 1157,
        "intent": "Clear the rotation transformation , if any .",
        "snippet": "Builder function ( ) { concodeclass_rotationDegrees = 0 ; concodeclass_rotationPivotX = 0 ; concodeclass_rotationPivotY = 0 ; concodeclass_hasRotationPivot = false ; return this ; }"
    },
    {
        "question_id": 1158,
        "intent": "Sets the value of the predecessorApplication property .",
        "snippet": "void function ( ApplicationID arg0 ) { this . concodeclass_predecessorApplication = arg0 ; }"
    },
    {
        "question_id": 1159,
        "intent": "Notes that a method was inlined",
        "snippet": "void function ( ) { this . concodeclass_nInlined ++ ; }"
    },
    {
        "question_id": 1160,
        "intent": "Transforms this FluentIterable into a new one containing objects of the type T.",
        "snippet": "FluentIterable < T > function ( Function < ? super E , T > arg0 ) { List < T > loc0 = new ArrayList < > ( ) ; Iterator < E > loc1 = loc1 ( ) ; while ( loc1 . hasNext ( ) ) { loc0 . add ( arg0 . apply ( loc1 . next ( ) ) ) ; } return concodefunc_from ( loc0 ) ; }"
    },
    {
        "question_id": 1161,
        "intent": "Returns an unmodifiable version of the given non-null FloatList .",
        "snippet": "FloatList function ( FloatList arg0 ) { if ( null == arg0 ) { throw new NullPointerException ( ) ; } return UnmodifiableFloatList . wrap ( arg0 ) ; }"
    },
    {
        "question_id": 1162,
        "intent": "Program entry point .",
        "snippet": "void function ( final String [ ] arg0 ) { final CustomerDao loc0 = new InMemoryCustomerDao ( ) ; concodefunc_performOperationsUsing ( loc0 ) ; final DataSource loc1 = concodefunc_createDataSource ( ) ; concodefunc_createSchema ( loc1 ) ; final CustomerDao loc2 = new DbCustomerDao ( loc1 ) ; concodefunc_performOperationsUsing ( loc2 ) ; concodefunc_deleteSchema ( loc1 ) ; }"
    },
    {
        "question_id": 1163,
        "intent": "Get a Quotient element from a BigInteger value .",
        "snippet": "Quotient < C > function ( java . math . BigInteger arg0 ) { return new Quotient < C > ( this , concodeclass_ring . fromInteger ( arg0 ) ) ; }"
    },
    {
        "question_id": 1164,
        "intent": "Set the number of clicks associated with this event .",
        "snippet": "void function ( int arg0 ) { concodeclass__numClicks = arg0 ; }"
    },
    {
        "question_id": 1165,
        "intent": "Returns the hash code of the underlying map .",
        "snippet": "int function ( ) { return concodeclass__map . hashCode ( ) ; }"
    },
    {
        "question_id": 1166,
        "intent": "Invokes the underlying ListIterator #set Object method .",
        "snippet": "void function ( Object arg0 ) { concodefunc_getListIterator ( ) . set ( arg0 ) ; }"
    },
    {
        "question_id": 1167,
        "intent": "Random vector .",
        "snippet": "GenVector < C > function ( int arg0 ) { return concodeclass_random ( arg0 , concodeclass_density , concodeclass_random ) ; }"
    },
    {
        "question_id": 1168,
        "intent": "Configure a job 's combiner implementation .",
        "snippet": "void function ( JobConf arg0 , Class < ? extends AvroReducer > arg1 ) { arg0 . set ( concodeclass_COMBINER , arg1 . getName ( ) ) ; arg0 . setCombinerClass ( HadoopCombiner . class ) ; }"
    },
    {
        "question_id": 1169,
        "intent": "After evicting or deleting an entity , we do n't need to know the query that was used to load it anymore do n't call this after loading the entity , since we might still need to load its collections",
        "snippet": "void function ( EntityKey arg0 ) { concodeclass_subselectsByEntityKey . remove ( arg0 ) ; }"
    },
    {
        "question_id": 1170,
        "intent": "Create a Widget state map from this display .",
        "snippet": "WidgetStateMap function ( Display arg0 ) { WidgetStateMap loc0 = new WidgetStateMap ( ) ; WidgetCollector loc1 = new WidgetCollector ( arg0 ) ; Widget [ ] loc2 = loc1 . getWidgets ( ) ; for ( int loc3 = 0 ; loc3 < loc2 . length ; loc3 ++ ) { loc0 . put ( loc2 [ loc3 ] ) ; } return loc0 ; }"
    },
    {
        "question_id": 1171,
        "intent": "Check if an object is equal to this variable . A stricter comparison than comparing indices will break Hashtable lookups since a variable could have a name assigned to it after its first use .",
        "snippet": "boolean function ( final Object arg0 ) { return ( arg0 != null ) && ( arg0 instanceof LocalVariable ) && ( ( ( LocalVariable ) arg0 ) . index == concodeclass_index ) ; }"
    },
    {
        "question_id": 1172,
        "intent": "Dispatch a mouseMove event that moves the mouse to this x , y coordinate .",
        "snippet": "void function ( int arg0 , int arg1 ) { Event loc0 = new Event ( ) ; loc0 . type = SWT . MouseMove ; loc0 . arg0 = arg0 ; loc0 . arg1 = arg1 ; new SWTPushEventOperation ( loc0 ) . execute ( ) ; }"
    },
    {
        "question_id": 1173,
        "intent": "add key-value pair to map , both key and value need not null or empty",
        "snippet": "boolean function ( Map < String , String > arg0 , String arg1 , String arg2 ) { if ( arg0 == null || StringUtils . isEmpty ( arg1 ) || StringUtils . isEmpty ( arg2 ) ) { return false ; } arg0 . put ( arg1 , arg2 ) ; return true ; }"
    },
    {
        "question_id": 1174,
        "intent": "Set the label default status .",
        "snippet": "void function ( boolean arg0 ) { this . concodeclass_isDefault = arg0 ; }"
    },
    {
        "question_id": 1175,
        "intent": "returns number of days from today until next alarmclock",
        "snippet": "int function ( Calendar arg0 , int arg1 ) { if ( arg1 == 0 ) return - 1 ; int loc0 = ( arg0 . get ( Calendar . DAY_OF_WEEK ) + 5 ) % 7 ; int loc1 , loc2 ; for ( loc2 = 0 ; loc2 < 7 ; loc2 ++ ) { loc1 = ( loc0 + loc2 ) % 7 ; if ( ( arg1 & ( 1 << loc1 ) ) > 0 ) { break ; } } return loc2 ; }"
    },
    {
        "question_id": 1176,
        "intent": "Insert a new entry into the RouteSet . This method does not check whether this RouteSet is the right one to add the contact . This should be checked prior to the insertion by the routing table .",
        "snippet": "boolean function ( PastryContact arg0 ) { return concodeclass_entries . add ( arg0 ) ; }"
    },
    {
        "question_id": 1177,
        "intent": "Tests if the dictionary is empty .",
        "snippet": "boolean function ( ) { if ( concodeclass_entryNum == 0 ) { return true ; } else { return false ; } }"
    },
    {
        "question_id": 1178,
        "intent": "Set of roles to be assigned to the user .",
        "snippet": "Set < String > function ( ) { return concodeclass_roles ; }"
    },
    {
        "question_id": 1179,
        "intent": "Decode the given string .",
        "snippet": "String function ( String arg0 ) { return new String ( decode ( arg0 . getBytes ( ) ) ) ; }"
    },
    {
        "question_id": 1180,
        "intent": "Sets the signature date .",
        "snippet": "void function ( java . util . Calendar arg0 ) { this . concodeclass_signDate = arg0 ; }"
    },
    {
        "question_id": 1181,
        "intent": "Create an instance of Propertyupdate",
        "snippet": "Propertyupdate function ( ) { return new Propertyupdate ( ) ; }"
    },
    {
        "question_id": 1182,
        "intent": "Returns the number of bytes available for reading from the current position .",
        "snippet": "int function ( ) { return concodeclass_writePosition - concodeclass_readPosition ; }"
    },
    {
        "question_id": 1183,
        "intent": "Removes a previously registered listener .",
        "snippet": "void function ( PropertyChangeListener arg0 ) { concodeclass_propertyChangeSupport . addPropertyChangeListener ( arg0 ) ; }"
    },
    {
        "question_id": 1184,
        "intent": "Filters the desired Asset s on their AssetDomPosition . If no DOM position is provided , all assets required in the current page will be returned .",
        "snippet": "AssetQuery function ( AssetDomPosition arg0 ) { this . concodeclass_assetDomPosition = arg0 ; return this ; }"
    },
    {
        "question_id": 1185,
        "intent": "Check authorization for `` SHOW DATABASES '' command . A HiveAccessControlException is thrownfor illegal access .",
        "snippet": "void function ( ) { if ( ! concodeclass_authzEnabled ) { return ; } concodefunc_authorize ( HiveOperationType . SHOWDATABASES , Collections . < HivePrivilegeObject > emptyList ( ) , Collections . < HivePrivilegeObject > emptyList ( ) , \"srini_string\" ) ; }"
    },
    {
        "question_id": 1186,
        "intent": "Parses the Jerry object to an announcement object",
        "snippet": "Announcement function ( Jerry arg0 ) { String loc0 = arg0 . $ ( Constants . ANNOUNCEMENT_DATE ) . text ( ) ; Date loc1 = concodefunc_parseDate ( loc0 ) ; String loc2 = arg0 . $ ( Constants . ANNOUNCEMENT_TITLE ) . text ( ) ; String loc3 = arg0 . $ ( Constants . ANNOUNCEMENT_BODY ) . html ( ) ; return new Announcement ( loc3 , loc2 , loc1 ) ; }"
    },
    {
        "question_id": 1187,
        "intent": "What is the most recent thing that happened to this particular auction ?",
        "snippet": "String function ( ) { if ( concodeclass_mAllEvents . isEmpty ( ) ) { return ( concodeclass_mNullEvent . toString ( ) ) ; } else { return concodeclass_mAllEvents . get ( concodeclass_mAllEvents . size ( ) - 1 ) . toString ( ) ; } }"
    },
    {
        "question_id": 1188,
        "intent": "Transform a given cache into a cache that ignores return values for operations returning previous values , i.e. AdvancedCache #put Object , Object , adding an extra flag .",
        "snippet": "AdvancedCache function ( AdvancedCache arg0 , Flag arg1 ) { return arg0 . withFlags ( Flag . SKIP_CACHE_LOAD , Flag . SKIP_REMOTE_LOOKUP , arg1 ) ; }"
    },
    {
        "question_id": 1189,
        "intent": "Get list of full polynomials .",
        "snippet": "List < GenPolynomial < GenPolynomial < C >>> function ( ) { List < GenPolynomial < GenPolynomial < C >>> loc0 = new ArrayList < GenPolynomial < GenPolynomial < C >>> ( ) ; for ( ColorPolynomial < C > loc1 : concodeclass_list ) { loc0 . add ( loc1 . getPolynomial ( ) ) ; } return loc0 ; }"
    },
    {
        "question_id": 1190,
        "intent": "Called on the server during the RPC handshake",
        "snippet": "void function ( RPCContext arg0 ) { }"
    },
    {
        "question_id": 1191,
        "intent": "set Parser state to SingleQuotedAttrValueState .",
        "snippet": "XMLParser function ( ) { return concodefunc_setState ( concodeclass_singleQuoted ) ; }"
    },
    {
        "question_id": 1192,
        "intent": "Checks whether given object is of interest to this interest instance .",
        "snippet": "boolean function ( Action < ? , ? > arg0 , Object arg1 ) { return this . concodeclass_action == arg0 && arg1 != null && concodeclass_entityType . isAssignableFrom ( arg1 . getClass ( ) ) ; }"
    },
    {
        "question_id": 1193,
        "intent": "clone clones the current game board into a new object",
        "snippet": "Board function ( ) { Board loc0 = new Board ( ) ; for ( int loc1 = 0 ; loc1 < concodeclass_DIMENSION ; loc1 ++ ) { for ( int loc2 = 0 ; loc2 < concodeclass_DIMENSION ; loc2 ++ ) { loc0 . grid [ loc1 ] [ loc2 ] = this . concodefunc_getContent ( loc1 , loc2 ) ; } } loc0 . whiteChips = concodeclass_whiteChips ; loc0 . blackChips = concodeclass_blackChips ; return loc0 ; }"
    },
    {
        "question_id": 1194,
        "intent": "A describer used for stateful event descrptions",
        "snippet": "void function ( IUISemanticEvent arg0 ) { System . out . println ( \"srini_string\" + arg0 ) ; }"
    },
    {
        "question_id": 1195,
        "intent": "Setter for property mu .",
        "snippet": "void function ( double arg0 ) { this . concodeclass_mu = arg0 ; }"
    },
    {
        "question_id": 1196,
        "intent": "Called on the event dispatching thread not on the worker thread after the construct method has returned without throwing an error . The default implementation does nothing . Subclasses may override this method to perform done actions on the Event Dispatch Thread .",
        "snippet": "void function ( T arg0 ) { }"
    },
    {
        "question_id": 1197,
        "intent": "Just sticks all the strings together with ' / ' CONTRACT : user must ensure that each param is not empty .",
        "snippet": "String function ( String arg0 , String arg1 ) { return new StringBuffer ( arg0 ) . append ( concodeclass_SLASH_STRING ) . append ( arg1 ) . toString ( ) ; }"
    },
    {
        "question_id": 1198,
        "intent": "Adds the conformance .",
        "snippet": "void function ( XMPMeta arg0 , String arg1 ) { arg0 . setProperty ( XMPConst . NS_PDFA_ID , PdfAProperties . CONFORMANCE , arg1 ) ; }"
    },
    {
        "question_id": 1199,
        "intent": "The avg time to execute this query",
        "snippet": "long function ( ) { return concodeclass_executionAvgTime ; }"
    },
    {
        "question_id": 1200,
        "intent": "Closes the current subpath .",
        "snippet": "void function ( ) { Subpath loc0 = concodefunc_getLastSubpath ( ) ; loc0 . setClosed ( true ) ; Point2D loc1 = loc0 . getStartPoint ( ) ; concodefunc_moveTo ( ( float ) loc1 . getX ( ) , ( float ) loc1 . getY ( ) ) ; }"
    },
    {
        "question_id": 1201,
        "intent": "Recursive slow solution .",
        "snippet": "int function ( int arg0 [ ] , int arg1 ) { if ( arg1 == 0 ) { return arg0 [ 0 ] ; } else if ( arg1 == 1 ) { return Math . max ( arg0 [ 0 ] , arg0 [ 1 ] ) ; } return Math . max ( this . maxSum ( arg0 , arg1 - 2 ) + arg0 [ arg1 ] , this . maxSum ( arg0 , arg1 - 1 ) ) ; }"
    },
    {
        "question_id": 1202,
        "intent": "Comparison with any other object .",
        "snippet": "boolean function ( Object arg0 ) { if ( ! ( arg0 instanceof Local ) ) { return false ; } Local < C > loc0 = null ; try { loc0 = ( Local < C > ) arg0 ; } catch ( ClassCastException loc1 ) { } if ( loc0 == null ) { return false ; } return ( 0 == concodefunc_compareTo ( loc0 ) ) ; }"
    },
    {
        "question_id": 1203,
        "intent": "Test Tag #hasChild String , String .",
        "snippet": "void function ( ) { Assert . assertTrue ( concodeclass_root . hasChild ( concodeclass_CHILD1 , \"srini_string\" ) ) ; }"
    },
    {
        "question_id": 1204,
        "intent": "Gets the start date of this event",
        "snippet": "Date function ( ) { return concodeclass__start ; }"
    },
    {
        "question_id": 1205,
        "intent": "Stops event .",
        "snippet": "void function ( int arg0 ) { if ( ! concodeclass_eventPool . containsKey ( arg0 ) ) { throw new EventDoesNotExistException ( arg0 + \"srini_string\" ) ; } if ( arg0 == concodeclass_currentlyRunningSyncEvent ) { concodeclass_currentlyRunningSyncEvent = - 1 ; } concodeclass_eventPool . get ( arg0 ) . stop ( ) ; concodeclass_eventPool . remove ( arg0 ) ; }"
    },
    {
        "question_id": 1206,
        "intent": "Sets the value of the quotaUsedBytes property .",
        "snippet": "void function ( QuotaUsedBytes arg0 ) { this . concodeclass_quotaUsedBytes = arg0 ; }"
    },
    {
        "question_id": 1207,
        "intent": "Called by a server to deserialize a request , compute and serialize a response or error .",
        "snippet": "List < ByteBuffer > function ( List < ByteBuffer > arg0 ) { return respond ( arg0 , null ) ; }"
    },
    {
        "question_id": 1208,
        "intent": "Get a Java class from its name .",
        "snippet": "Class < ? > function ( String arg0 ) { try { return Class . forName ( arg0 ) ; } catch ( ClassNotFoundException loc0 ) { Thread loc1 = Thread . currentThread ( ) ; ClassLoader loc2 = loc1 . getContextClassLoader ( ) ; return Class . forName ( arg0 , false , loc2 ) ; } }"
    },
    {
        "question_id": 1209,
        "intent": "Perform validation of the filter state . This is used to verify the state of the filter after its enablement and before its use .",
        "snippet": "void function ( ) { for ( final String loc0 : concodeclass_definition . getParameterNames ( ) ) { if ( concodeclass_parameters . get ( loc0 ) == null ) { throw new HibernateException ( \"srini_string\" + concodefunc_getName ( ) + \"srini_string\" + loc0 + \"srini_string\" ) ; } } }"
    },
    {
        "question_id": 1210,
        "intent": "Get the list of Iterators unmodifiable",
        "snippet": "List function ( ) { return UnmodifiableList . decorate ( concodeclass_iteratorChain ) ; }"
    },
    {
        "question_id": 1211,
        "intent": "Leert den Puffer .",
        "snippet": "void function ( ) { concodeclass_pointer = - 1 ; }"
    },
    {
        "question_id": 1212,
        "intent": "Returns an image stored in the file at the specified path",
        "snippet": "Image function ( String arg0 ) { return getImage ( \"srini_string\" , arg0 ) ; }"
    },
    {
        "question_id": 1213,
        "intent": "RGB in the range 0,1 to YCC in the range Y = 0,1 , Cb =[ -0.5,0.5 , Cr =[ -0.5,0.5",
        "snippet": "void function ( float [ ] arg0 , float [ ] arg1 ) { float loc0 = max ( 0f , min ( 1f , arg0 [ 0 ] ) ) ; float loc1 = max ( 0f , min ( 1f , arg0 [ 1 ] ) ) ; float loc2 = max ( 0f , min ( 1f , arg0 [ 2 ] ) ) ; float loc3 = 0.3f * loc0 + 0.6f * loc1 + 0.1f * loc2 ; float loc4 = loc0 - loc3 ; float loc5 = loc2 - loc3 ; float loc6 = ( loc5 / 2f ) ; float loc7 = ( loc4 / 1.6f ) ; arg1 [ 0 ] = loc3 ; arg1 [ 1 ] = loc6 ; arg1 [ 2 ] = loc7 ; }"
    },
    {
        "question_id": 1214,
        "intent": "Read a HashMap from a Parcel , class of key and value can parcelable both",
        "snippet": "Map < K , V > function ( Parcel arg0 , ClassLoader arg1 ) { if ( arg0 == null ) { return null ; } int loc0 = arg0 . readInt ( ) ; if ( loc0 == - 1 ) { return null ; } Map < K , V > loc1 = new HashMap < K , V > ( ) ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 . put ( ( K ) arg0 . readParcelable ( arg1 ) , ( V ) arg0 . readParcelable ( arg1 ) ) ; } return loc1 ; }"
    },
    {
        "question_id": 1215,
        "intent": "To test the behavior outside of the AS i.e. org.jboss.as.naming.InitialContext is not used .",
        "snippet": "void function ( String [ ] arg0 ) { LDAPServerSetupTask loc0 = new LDAPServerSetupTask ( ) ; loc0 . setup ( null , null ) ; loc0 . tearDown ( null , null ) ; }"
    },
    {
        "question_id": 1216,
        "intent": "Executes org.jclouds.crypto.Pems #publicKeySpecFromOpenSSH com.google.common.io.InputSupplier on thestring which was OpenSSH Base64 Encoded id_rsa . pub",
        "snippet": "ECPublicKeySpec function ( String arg0 ) { try { return publicKeySpecFromOpenSSH ( ByteSource . wrap ( arg0 . getBytes ( Charsets . UTF_8 ) ) ) ; } catch ( IOException loc0 ) { throw propagate ( loc0 ) ; } }"
    },
    {
        "question_id": 1217,
        "intent": "Returns an unmodifiable FloatList containing only the specified element .",
        "snippet": "FloatList function ( float arg0 ) { FloatList loc0 = new ArrayFloatList ( 1 ) ; loc0 . add ( arg0 ) ; return UnmodifiableFloatList . wrap ( loc0 ) ; }"
    },
    {
        "question_id": 1218,
        "intent": "Checks the last token against the given tags ?",
        "snippet": "boolean function ( final String [ ] arg0 ) { return isToken ( concodeclass_fLastToken , arg0 ) ; }"
    },
    {
        "question_id": 1219,
        "intent": "Convert a Timestamp to the number of milliseconds elapsed from the epoch . The result will be rounded down to the nearest millisecond . E.g. , if the timestamp represents `` 1969-12-31T23:59:59 .999999999 Z '' , it will be rounded to -1 millisecond .",
        "snippet": "long function ( Timestamp arg0 ) { return Timestamps . toMillis ( arg0 ) ; }"
    },
    {
        "question_id": 1220,
        "intent": "Sets the output message .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_outputMessage = arg0 ; }"
    },
    {
        "question_id": 1221,
        "intent": "Replacement operation . requires : t ! = null & & 0 e.g. Given a RatTermVec v = t2 , t3 , t4 , the statement `` v.set t5 , 1 ; '' will make v_post = t2 , t5 , t4 .",
        "snippet": "void function ( RatTerm arg0 , int arg1 ) { concodeclass_underlying_terms . setElementAt ( arg0 , arg1 ) ; concodeclass_terms = ( RatTerm [ ] ) concodeclass_underlying_terms . toArray ( new RatTerm [ ] { } ) ; }"
    },
    {
        "question_id": 1222,
        "intent": "Return the singleton CatalogFactory instancefor the relevant ClassLoader . For applications that use a thread context class loader such as web applications running inside a servet container , this will return a separate instance for each application , even if this class is loaded from a shared parent class loader .",
        "snippet": "CatalogFactory function ( ) { CatalogFactory loc0 = null ; ClassLoader loc1 = concodefunc_getClassLoader ( ) ; synchronized ( concodeclass_factories ) { loc0 = ( CatalogFactory ) concodeclass_factories . get ( loc1 ) ; if ( loc0 == null ) { loc0 = new CatalogFactoryBase ( ) ; concodeclass_factories . put ( loc1 , loc0 ) ; } } return loc0 ; }"
    },
    {
        "question_id": 1223,
        "intent": "Tests that the ViewInterfaces #getPotentialViewInterfaces Class returns the correctimplementation class for groovy class implementing MessageListener interface .",
        "snippet": "void function ( ) { Set loc0 = ViewInterfaces . getPotentialViewInterfaces ( TestGroovyMessageListener . class ) ; Assert . assertEquals ( \"srini_string\" , 1 , loc0 . size ( ) ) ; Assert . assertEquals ( \"srini_string\" , MessageListener . class , loc0 . iterator ( ) . next ( ) ) ; }"
    },
    {
        "question_id": 1224,
        "intent": "Add a resolver at the beginning of the underlying resolver list . The resolver added by this method is at higher priority than any other existing resolvers .",
        "snippet": "void function ( DialectResolver arg0 ) { concodeclass_resolvers . add ( 0 , arg0 ) ; }"
    },
    {
        "question_id": 1225,
        "intent": "Get the qualified prefixed by alias names of the columns of the owning entity which are to be used in the join",
        "snippet": "String [ ] function ( AssociationType arg0 , String arg1 , int arg2 , OuterJoinLoadable arg3 , Mapping arg4 ) { return getAliasedLHSColumnNames ( arg0 , arg1 , arg2 , 0 , arg3 , arg4 ) ; }"
    },
    {
        "question_id": 1226,
        "intent": "Will construct underlying DOM element if it is not already constructed .",
        "snippet": "Element function ( ) { if ( concodeclass_element == null ) { concodeclass_element = concodefunc_createElement ( ) ; concodeclass_element . setClassName ( concodeclass_cssClassName ) ; concodefunc_hookListeners ( ) ; } return concodeclass_element ; }"
    },
    {
        "question_id": 1227,
        "intent": "Set the i-th slot to the given outcome .",
        "snippet": "void function ( int arg0 , ExecutionOutcome arg1 ) { if ( arg0 < 0 || arg0 >= concodeclass_theList . size ( ) ) throw new IllegalArgumentException ( \"srini_string\" + arg0 ) ; if ( arg1 == null ) throw new IllegalArgumentException ( \"srini_string\" ) ; concodeclass_theList . set ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 1228,
        "intent": "Creates a new Tag object from the given parameters .",
        "snippet": "Tag function ( String arg0 , final Map < String , String > arg1 , final String arg2 ) { if ( concodeclass_parseHtml ) { arg0 = arg0 . toLowerCase ( ) ; } Tag loc0 = new Tag ( arg0 , arg1 , arg2 ) ; return loc0 ; }"
    },
    {
        "question_id": 1229,
        "intent": "Creates a org.apache.drill.jdbc.NonClosableConnection connection and caches it.The returned org.apache.drill.jdbc.NonClosableConnection connection does not support java.sql.Connection #close . Consumer must call #close to close the cached connections .",
        "snippet": "Connection function ( ConnectionInfo arg0 ) { Connection loc0 = concodeclass_cache . get ( arg0 ) ; if ( loc0 == null ) { loc0 = concodeclass_delegate . getConnection ( arg0 ) ; concodeclass_cache . put ( arg0 , loc0 ) ; } return new NonClosableConnection ( loc0 ) ; }"
    },
    {
        "question_id": 1230,
        "intent": "Returns a line-by-line interator for this file .",
        "snippet": "Iterator < String > function ( ) { return this ; }"
    },
    {
        "question_id": 1231,
        "intent": "Verify if the getters of a RainbowFish return the expected values",
        "snippet": "void function ( ) { final RainbowFish loc0 = new RainbowFish ( \"srini_string\" , 1 , 2 , 3 ) ; assertEquals ( \"srini_string\" , loc0 . getName ( ) ) ; assertEquals ( 1 , loc0 . getAge ( ) ) ; assertEquals ( 2 , loc0 . getLengthMeters ( ) ) ; assertEquals ( 3 , loc0 . getWeightTons ( ) ) ; }"
    },
    {
        "question_id": 1232,
        "intent": "Returns the current player 's number",
        "snippet": "PlayerNum function ( ) { return concodeclass_number ; }"
    },
    {
        "question_id": 1233,
        "intent": "Returns Java flag",
        "snippet": "int function ( ) { return concodeclass_flag ; }"
    },
    {
        "question_id": 1234,
        "intent": "Get a Product element from a long value .",
        "snippet": "Product < C > function ( long arg0 ) { return fromInteger ( new java . math . BigInteger ( \"srini_string\" + arg0 ) ) ; }"
    },
    {
        "question_id": 1235,
        "intent": "Reads the contents of a file to a String .",
        "snippet": "String function ( final File arg0 ) { byte [ ] loc0 = new byte [ ( int ) arg0 . length ( ) ] ; FileInputStream loc1 = new FileInputStream ( arg0 ) ; loc1 . read ( loc0 ) ; return new String ( loc0 ) ; }"
    },
    {
        "question_id": 1236,
        "intent": "Return the default Value for a given ConfigKey",
        "snippet": "String function ( ConfigKey arg0 ) { return arg0 . getDefaultValue ( ) ; }"
    },
    {
        "question_id": 1237,
        "intent": "Test method for com.itextpdf.text.html.WebColors #getRGBColor java.lang.String .",
        "snippet": "void function ( ) { assertEquals ( 84 , WebColors . getRGBColor ( concodeclass_RGB_PERCENT ) . getGreen ( ) ) ; }"
    },
    {
        "question_id": 1238,
        "intent": "Given an operator type , this method returns an array of metric names indexable by metric id .",
        "snippet": "String [ ] function ( final int arg0 ) { return concodeclass_OPERATOR_METRICS [ arg0 ] ; }"
    },
    {
        "question_id": 1239,
        "intent": "Invokes the underlying Map #keySet method .",
        "snippet": "Set function ( ) { return concodeclass_map . keySet ( ) ; }"
    },
    {
        "question_id": 1240,
        "intent": "Add a node corresponding to an intersection at a Geographic Point If the location is already in the graph or null , this method does not change the graph .",
        "snippet": "boolean function ( GeographicPoint arg0 ) { return false ; }"
    },
    {
        "question_id": 1241,
        "intent": "This gets called whenever a session is invalidated because of user logout or timed out .",
        "snippet": "void function ( UserIdentity arg0 ) { final DrillUserPrincipal loc0 = ( DrillUserPrincipal ) arg0 . getUserPrincipal ( ) ; try { loc0 . close ( ) ; } catch ( final Exception loc1 ) { concodeclass_logger . error ( \"srini_string\" , loc1 ) ; } }"
    },
    {
        "question_id": 1242,
        "intent": "Gets the entry value .",
        "snippet": "Object function ( ) { return concodeclass_value ; }"
    },
    {
        "question_id": 1243,
        "intent": "Mark the deployment as a CDI one .",
        "snippet": "void function ( final DeploymentUnit arg0 ) { if ( arg0 . getParent ( ) != null ) { arg0 . getParent ( ) . putAttachment ( concodeclass_ATTACHMENT_KEY , true ) ; } else { arg0 . putAttachment ( concodeclass_ATTACHMENT_KEY , true ) ; } }"
    },
    {
        "question_id": 1244,
        "intent": "Returns content encoding of the entity , if set .",
        "snippet": "String function ( ) { return concodeclass_contentEncoding ; }"
    },
    {
        "question_id": 1245,
        "intent": "Preprocess the specified file . If no changes were necessary , the the file is not modified .",
        "snippet": "boolean function ( File arg0 ) { concodeclass_currentFile = arg0 ; String loc0 = concodefunc_process0 ( arg0 ) ; concodeclass_currentFile = null ; if ( loc0 == null ) return false ; FileWriter loc1 = new FileWriter ( arg0 ) ; try { loc1 . write ( loc0 ) ; } finally { loc1 . close ( ) ; } return true ; }"
    },
    {
        "question_id": 1246,
        "intent": "Returns whether two variables are comparable .",
        "snippet": "boolean function ( VarInfo arg0 , VarInfo arg1 ) { return comparable ( arg0 . comparability , arg1 . comparability ) ; }"
    },
    {
        "question_id": 1247,
        "intent": "Returns the sum of the sizes of the entries in this cache .",
        "snippet": "int function ( ) { return concodeclass_size ; }"
    },
    {
        "question_id": 1248,
        "intent": "Returns the JUnit test suite for this package .",
        "snippet": "Test function ( ) { TestSuite loc0 = new TestSuite ( \"srini_string\" ) ; loc0 . addTest ( TestTreeSetGreedy . loc0 ( ) ) ; loc0 . addTest ( TestRingBufferArrayFast . loc0 ( ) ) ; return loc0 ; }"
    },
    {
        "question_id": 1249,
        "intent": "Create a new TaskManger with only those tasks in milestone",
        "snippet": "TaskManager function ( String arg0 ) { TaskManager loc0 = new TaskManager ( ) ; if ( arg0 == null ) return loc0 ; for ( Task loc1 : concodeclass_tasks ) { if ( arg0 . equalsIgnoreCase ( loc1 . arg0 ) ) loc0 . add ( loc1 ) ; } return loc0 ; }"
    },
    {
        "question_id": 1250,
        "intent": "Test of equals method , of class Student .",
        "snippet": "void function ( ) { System . out . println ( \"srini_string\" ) ; Student loc0 = new Student ( ) ; loc0 . setName ( \"srini_string\" ) ; loc0 . setId ( \"srini_string\" ) ; Student loc1 = new Student ( ) ; loc1 . setName ( \"srini_string\" ) ; loc1 . setId ( \"srini_string\" ) ; assertEquals ( loc0 , loc1 ) ; }"
    },
    {
        "question_id": 1251,
        "intent": "Returns the contents of the Text widgets in the dialog in a String array .",
        "snippet": "String [ ] function ( ) { return concodeclass_values ; }"
    },
    {
        "question_id": 1252,
        "intent": "Gets the maximum number of allowed persistent connections .",
        "snippet": "int function ( ) { return this . concodeclass_max ; }"
    },
    {
        "question_id": 1253,
        "intent": "Returns true if the element has already been created .",
        "snippet": "boolean function ( ) { return concodeclass_element != null ; }"
    },
    {
        "question_id": 1254,
        "intent": "Test method for com.flatironschool.javacs.MyLinearMap #containsKey java.lang.Object .",
        "snippet": "void function ( ) { assertThat ( concodeclass_map . containsKey ( \"srini_string\" ) , is ( true ) ) ; assertThat ( concodeclass_map . containsKey ( null ) , is ( true ) ) ; assertThat ( concodeclass_map . containsKey ( \"srini_string\" ) , is ( false ) ) ; }"
    },
    {
        "question_id": 1255,
        "intent": "Get kdc flags znode .",
        "snippet": "String function ( String arg0 ) { return ZKUtil . joinZNode ( concodefunc_getIndentityZNode ( arg0 ) , concodeclass_KDC_FLAGS_ZNODE_NAME ) ; }"
    },
    {
        "question_id": 1256,
        "intent": "Returns the condition checking failed severity used by this operation .",
        "snippet": "int function ( ) { return concodeclass_fConditionCheckingFailedSeverity ; }"
    },
    {
        "question_id": 1257,
        "intent": "Random matrix .",
        "snippet": "GenMatrix < C > function ( int arg0 , Random arg1 ) { return arg1 ( arg0 , concodeclass_density , arg1 ) ; }"
    },
    {
        "question_id": 1258,
        "intent": "Random number generator used by the orignal BH benchmark .",
        "snippet": "double function ( double arg0 ) { double loc0 = 16807.0 * arg0 + 1 ; arg0 = loc0 - ( 2147483647.0 * Math . floor ( loc0 / 2147483647.0 ) ) ; return arg0 ; }"
    },
    {
        "question_id": 1259,
        "intent": "Parses a Jerry page and returns the Events found in the JSON of this page",
        "snippet": "List < Event > function ( String arg0 ) { List < Event > loc0 = new ArrayList < Event > ( ) ; JSONEvent [ ] loc1 = new Gson ( ) . fromJson ( arg0 , JSONEvent [ ] . class ) ; for ( JSONEvent loc2 : loc1 ) { loc0 . add ( new Event ( loc2 . getId ( ) , loc2 . getTitle ( ) , loc2 . getDescription ( ) , loc2 . getStart ( ) , loc2 . getEnd ( ) ) ) ; } return loc0 ; }"
    },
    {
        "question_id": 1260,
        "intent": "Gets the topmost y-position of the bounding box .",
        "snippet": "int function ( ) { return ( int ) Math . round ( concodeclass_y - concodeclass_yGrow ) ; }"
    },
    {
        "question_id": 1261,
        "intent": "Creates builder to build Path .",
        "snippet": "Builder function ( ) { return new Builder ( ) ; }"
    },
    {
        "question_id": 1262,
        "intent": "Find the Constructor for the class specified .",
        "snippet": "void function ( ) { try { concodeclass_iConstructor = concodeclass_iClassToInstantiate . getConstructor ( concodeclass_iParamTypes ) ; } catch ( NoSuchMethodException loc0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } }"
    },
    {
        "question_id": 1263,
        "intent": "returns the polygon 's vertices . First and last vertex are equal .",
        "snippet": "List < VectorXZ > function ( ) { return concodeclass_vertexLoop ; }"
    },
    {
        "question_id": 1264,
        "intent": "Creates a new TabularData",
        "snippet": "TabularData function ( ) { return new TabularDataSupport ( concodeclass_TABULAR_TYPE ) ; }"
    },
    {
        "question_id": 1265,
        "intent": "Sets the comment for the select statement .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_comment = arg0 ; this . concodeclass_guesstimatedBufferSize += arg0 . length ( ) ; }"
    },
    {
        "question_id": 1266,
        "intent": "Sets the parent link of the given entry to the given id",
        "snippet": "void function ( BaseContentEntry < ? > arg0 , String arg1 ) { arg0 . addLink ( SitesLink . Rel . PARENT , ILink . Type . ATOM , arg1 ) ; }"
    },
    {
        "question_id": 1267,
        "intent": "Adds a new row to the table .",
        "snippet": "void function ( List < PdfPCell > arg0 ) { if ( arg0 != null ) { Collections . reverse ( arg0 ) ; concodeclass_rows . add ( arg0 ) ; arg0 = null ; } }"
    },
    {
        "question_id": 1268,
        "intent": "Gets the temporary properties file .",
        "snippet": "File function ( ) { return concodeclass_tempPropertiesFile ; }"
    },
    {
        "question_id": 1269,
        "intent": "Returns the cached .",
        "snippet": "Set function ( ) { return concodeclass_cached ; }"
    },
    {
        "question_id": 1270,
        "intent": "Is fatal logging currently enabled ?",
        "snippet": "boolean function ( ) { return ( concodefunc_getLogger ( ) . isLoggable ( Level . SEVERE ) ) ; }"
    },
    {
        "question_id": 1271,
        "intent": "Gets a comparator that compares using two Comparator s . The second comparator is used if the first comparator returns equal .",
        "snippet": "Comparator function ( Comparator arg0 , Comparator arg1 ) { return chainedComparator ( new Comparator [ ] { arg0 , arg1 } ) ; }"
    },
    {
        "question_id": 1272,
        "intent": "Log an error with debug log level .",
        "snippet": "void function ( Object arg0 , Throwable arg1 ) { if ( concodefunc_isLevelEnabled ( MemoryLog . LOG_LEVEL_DEBUG ) ) { concodefunc_log ( MemoryLog . LOG_LEVEL_DEBUG , arg0 , arg1 ) ; } }"
    },
    {
        "question_id": 1273,
        "intent": "Create an instance of Locktype",
        "snippet": "Locktype function ( ) { return new Locktype ( ) ; }"
    },
    {
        "question_id": 1274,
        "intent": "Returns the interleave of frames in this movie track . This is 2 for double buffered animations , and 1 one for animations without double buffering .",
        "snippet": "int function ( ) { return concodeclass_frames_ . size ( ) > 0 && ( ( ANIMFrame ) concodeclass_frames_ . get ( concodeclass_frames_ . size ( ) - 1 ) ) . getInterleave ( ) == 1 ? 1 : 2 ; }"
    },
    {
        "question_id": 1275,
        "intent": "Returns the String of xml corresponding to this XmlElement .",
        "snippet": "String function ( ) { StringBuilder loc0 = new StringBuilder ( ) ; try { concodefunc_appendTo ( loc0 ) ; } catch ( IOException loc1 ) { throw new RuntimeException ( loc1 ) ; } return loc0 . toString ( ) ; }"
    },
    {
        "question_id": 1276,
        "intent": "Compute the base64 encoded size for a stream whose size is specified in the incoming parameter",
        "snippet": "int function ( int arg0 ) { int loc0 ; int loc1 = arg0 % 3 ; if ( loc1 == 0 ) { loc0 = 4 * arg0 / 3 ; } else { loc0 = 4 * ( ( arg0 / 3 ) + 1 ) ; } return loc0 ; }"
    },
    {
        "question_id": 1277,
        "intent": "Returns an iterator that returns aggregated values based on the delta finds the max value within each delta .",
        "snippet": "Iterator < HighlightEntry > function ( final double arg0 , final double arg1 , final double arg2 ) { return new HighlightIterator ( arg0 , arg1 , arg2 ) ; }"
    },
    {
        "question_id": 1278,
        "intent": "Apply an `` ilike '' constraint",
        "snippet": "AuditCriterion concodefunc_function ( String arg0 , MatchMode arg1 ) { return new IlikeAuditExpression ( concodeclass_propertyNameGetter , arg1 . toMatchString ( arg0 ) ) ; }"
    },
    {
        "question_id": 1279,
        "intent": "Tries to execute the script with the given script path .",
        "snippet": "void function ( String arg0 ) { if ( arg0 != null ) { concodefunc_runSystemCall ( arg0 ) ; concodeclass_log . info ( arg0 + \"srini_string\" ) ; } else { throw new ScriptExecutionException ( \"srini_string\" , REASON . NOTAVAILABLE ) ; } }"
    },
    {
        "question_id": 1280,
        "intent": "Logs the given exception using the platform 's logging mechanism . The exception is logged as an error with the error code JavaStatusConstants.INTERNAL _ ERROR .",
        "snippet": "void function ( Throwable arg0 , String arg1 ) { JavaPlugin . log ( new Status ( IStatus . ERROR , JavaPlugin . getPluginId ( ) , IJavaStatusConstants . INTERNAL_ERROR , arg1 , arg0 ) ) ; }"
    },
    {
        "question_id": 1281,
        "intent": "Format a message to the given user with the given subject and message body , including a CC list .",
        "snippet": "void function ( String arg0 , String arg1 , String arg2 , String arg3 ) { mail ( arg0 , arg1 , arg2 , arg3 , null ) ; }"
    },
    {
        "question_id": 1282,
        "intent": "Finds the first node of the specified type in the chain of children .",
        "snippet": "AST function ( AST arg0 , int arg1 ) { AST loc0 = arg0 . getFirstChild ( ) ; while ( loc0 != null && loc0 . getType ( ) != arg1 ) { loc0 = loc0 . getNextSibling ( ) ; } return loc0 ; }"
    },
    {
        "question_id": 1283,
        "intent": "Test a RequestDispatcher forward with tx commit .",
        "snippet": "void function ( @ ArquillianResource ( TxControlServlet . class ) URL arg0 ) { concodefunc_testURL ( arg0 , false , true ) ; }"
    },
    {
        "question_id": 1284,
        "intent": "Precomputes and saves the next element of the Iterable . null is considered as end of data .",
        "snippet": "boolean function ( ) { concodeclass_next = concodefunc_computeNext ( ) ; return concodeclass_next != null ; }"
    },
    {
        "question_id": 1285,
        "intent": "Get full polynomial .",
        "snippet": "GenPolynomial < GenPolynomial < C >> function ( ) { GenPolynomial < GenPolynomial < C >> loc0 = concodeclass_green . sum ( concodeclass_red ) . sum ( concodeclass_white ) ; int loc1 = concodeclass_green . length ( ) + concodeclass_red . length ( ) + concodeclass_white . length ( ) ; int loc2 = loc0 . length ( ) ; if ( loc2 != loc1 ) { throw new RuntimeException ( \"srini_string\" + loc1 + \"srini_string\" + loc2 ) ; } return loc0 ; }"
    },
    {
        "question_id": 1286,
        "intent": "Helper method that prints out a byte string as a series of integer or ASCII characters .",
        "snippet": "void function ( byte [ ] arg0 , boolean arg1 , int arg2 ) { for ( int loc0 = 0 ; loc0 < arg2 ; loc0 ++ ) System . out . print ( \"srini_string\" ) ; System . out . print ( \"srini_string\" ) ; for ( int loc0 = 0 ; loc0 < arg0 . length ; loc0 ++ ) { System . out . print ( arg1 ? ( char ) arg0 [ loc0 ] : ( int ) arg0 [ loc0 ] + \"srini_string\" ) ; } System . out . println ( ) ; }"
    },
    {
        "question_id": 1287,
        "intent": "Get the content of the given element .",
        "snippet": "String function ( final Element arg0 ) { return getElementContent ( arg0 , null ) ; }"
    },
    {
        "question_id": 1288,
        "intent": "Return root schema with schema owner as the given user .",
        "snippet": "SchemaPlus function ( final String arg0 ) { return concodeclass_schemaTreeProvider . createRootSchema ( arg0 , this ) ; }"
    },
    {
        "question_id": 1289,
        "intent": "Sets the global Config object that contains Kademlia-wide constants . This method has an effect only if a Config object has never been set before .",
        "snippet": "void function ( final String arg0 ) { if ( concodeclass_config == null ) { concodeclass_config = new FileConfig ( arg0 ) ; concodeclass_log . info ( \"srini_string\" + arg0 + \"srini_string\" ) ; } }"
    },
    {
        "question_id": 1290,
        "intent": "remove them measured rtt from host to monitor",
        "snippet": "void function ( Host arg0 ) { concodeclass_rttToMonitors . remove ( arg0 ) ; }"
    },
    {
        "question_id": 1291,
        "intent": "Sets the value associated with all existing keys to newValue .",
        "snippet": "void function ( final V arg0 ) { for ( final K loc0 : concodeclass_kSmallest . keySet ( ) ) { concodeclass_kSmallest . put ( loc0 , arg0 ) ; } }"
    },
    {
        "question_id": 1292,
        "intent": "Declare an Image in the registry table .",
        "snippet": "void function ( String arg0 , String arg1 ) { ImageDescriptor loc0 = ImageDescriptor . getMissingImageDescriptor ( ) ; try { loc0 = ImageDescriptor . createFromURL ( concodefunc_makeIconFileURL ( arg1 ) ) ; } catch ( MalformedURLException loc1 ) { DebugPlugin . log ( loc1 ) ; } concodeclass_imageRegistry . put ( arg0 , loc0 ) ; concodeclass_imageDescriptors . put ( arg0 , loc0 ) ; }"
    },
    {
        "question_id": 1293,
        "intent": "Prints the AST in ` ASCII art ' tree form to the specified print writer .",
        "snippet": "void function ( AST arg0 , PrintWriter arg1 ) { ArrayList < AST > loc0 = new ArrayList < AST > ( ) ; showAst ( loc0 , arg1 , arg0 ) ; arg1 . flush ( ) ; }"
    },
    {
        "question_id": 1294,
        "intent": "Turn type into class .",
        "snippet": "Class < ? > function ( Type arg0 ) { if ( arg0 instanceof Class ) { return ( Class ) arg0 ; } else if ( arg0 instanceof ParameterizedType ) { ParameterizedType loc0 = ( ParameterizedType ) arg0 ; return toClass ( loc0 . getRawType ( ) ) ; } else { throw PojoLogger . ROOT_LOGGER . unknownType ( arg0 ) ; } }"
    },
    {
        "question_id": 1295,
        "intent": "Transfer vectors from this to containerOut",
        "snippet": "void function ( VectorContainer arg0 ) { Preconditions . checkArgument ( this . concodeclass_wrappers . size ( ) == arg0 . wrappers . size ( ) ) ; for ( int loc0 = 0 ; loc0 < this . concodeclass_wrappers . size ( ) ; ++ loc0 ) { this . concodeclass_wrappers . get ( loc0 ) . transfer ( arg0 . wrappers . get ( loc0 ) ) ; } }"
    },
    {
        "question_id": 1296,
        "intent": "Creates a new com.datastax.driver.core.BatchStatement.Type #UNLOGGED batch statement for the specified CQL statement builders .",
        "snippet": "BatchCQLStatementTupleMapper function ( CQLStatementBuilder ... arg0 ) { return concodefunc_newBatchStatementBuilder ( BatchStatement . Type . UNLOGGED , arg0 ) ; }"
    },
    {
        "question_id": 1297,
        "intent": "Get the index into the constant pool of the type descriptor of the variable .",
        "snippet": "int function ( ) { return concodeclass_typeIndex ; }"
    },
    {
        "question_id": 1298,
        "intent": "Returns the location .",
        "snippet": "String function ( ) { return concodeclass_location ; }"
    },
    {
        "question_id": 1299,
        "intent": "Get the contents of a section given the section name .",
        "snippet": "Map < String , Object > function ( String arg0 ) { Map < String , Object > loc0 = ( HashMap ) concodeclass_items . get ( arg0 ) ; return loc0 ; }"
    },
    {
        "question_id": 1300,
        "intent": "Test method for com.itextpdf.text.html.WebColors #getRGBColor java.lang.String .",
        "snippet": "void function ( ) { assertEquals ( 127 , WebColors . getRGBColor ( concodeclass_RGB_MISSING_COLOR_VALUES ) . getRed ( ) ) ; }"
    },
    {
        "question_id": 1301,
        "intent": "The enumeration members in assorted order : / / not_discarded , obvious , bad_sample , bad_confidence , unused , not_enough_samples , non_canonical_var , implied_post_condition , only_constant_vars , derived_param , unmodified_var , control_check , exact , var filter",
        "snippet": "int function ( DiscardCode arg0 ) { Integer loc0 = new Integer ( this . concodeclass_enumValue ) ; Integer loc1 = new Integer ( arg0 . enumValue ) ; return loc0 . compareTo ( loc1 ) ; }"
    },
    {
        "question_id": 1302,
        "intent": "Create a Timestamp from the number of microseconds elapsed from the epoch .",
        "snippet": "Timestamp function ( long arg0 ) { return Timestamps . fromMicros ( arg0 ) ; }"
    },
    {
        "question_id": 1303,
        "intent": "The inverse of #registerLoadingCollectionXRef . Here , we are done processing the said collection entry , so we remove it from the load context . The idea here is that other loading collections can now reference said collection directly from the PersistenceContext because ithas completed its load cycle . Implementation note : package protected , as this is meant solely for use by CollectionLoadContext to be able to locate collectionsbeing loaded by other CollectionLoadContext s / ResultSet s.",
        "snippet": "void function ( CollectionKey arg0 ) { if ( ! concodefunc_hasRegisteredLoadingCollectionEntries ( ) ) { return ; } concodeclass_xrefLoadingCollectionEntries . remove ( arg0 ) ; }"
    },
    {
        "question_id": 1304,
        "intent": "COMMIT ;",
        "snippet": "void function ( ) { concodefunc_query ( \"srini_string\" ) ; }"
    },
    {
        "question_id": 1305,
        "intent": "Returns true of the result given is the result of an exit command",
        "snippet": "boolean function ( CommandResult arg0 ) { return arg0 . feedbackToUser . equals ( ExitCommand . MESSAGE_EXIT_ACKNOWEDGEMENT ) ; }"
    },
    {
        "question_id": 1306,
        "intent": "Finds the display-space rectangle that bounds the given Widget 's client area .",
        "snippet": "Rectangle function ( Widget arg0 ) { return getBounds ( arg0 , true ) ; }"
    },
    {
        "question_id": 1307,
        "intent": "Returns the protocol , domain and port of the URL . The origin does not typically include a trailing slash .",
        "snippet": "String function ( ) { if ( concodeclass_originUrl == null ) { concodeclass_originUrl = concodefunc_extractOriginImpl ( concodeclass_url ) ; } return concodeclass_originUrl ; }"
    },
    {
        "question_id": 1308,
        "intent": "Gets the ID for this request .",
        "snippet": "int function ( ) { return concodeclass_id ; }"
    },
    {
        "question_id": 1309,
        "intent": "ModInteger negative .",
        "snippet": "ModInteger function ( ) { return new ModInteger ( concodeclass_ring , concodeclass_val . negate ( ) ) ; }"
    },
    {
        "question_id": 1310,
        "intent": "Returns buffer as byte array",
        "snippet": "byte [ ] function ( ) { byte [ ] loc0 = new byte [ concodefunc_getActualSize ( ) ] ; System . arraycopy ( concodeclass_buffer , 0 , loc0 , 0 , concodefunc_getActualSize ( ) ) ; return loc0 ; }"
    },
    {
        "question_id": 1311,
        "intent": "Returns an empty OperationCallback , type-safe .",
        "snippet": "OperationCallback < TResult > function ( ) { return Operations . EMPTY_CALLBACK ; }"
    },
    {
        "question_id": 1312,
        "intent": "Log the specified message and object",
        "snippet": "void function ( String arg0 , Object arg1 ) { if ( Tracer . isDebugging ( ) ) concodefunc_printLog ( concodeclass_sysOut , arg0 , arg1 ) ; IStatus loc0 = concodefunc_createLogStatus ( arg0 , arg1 , \"srini_string\" ) ; try { concodeclass_log . log ( loc0 ) ; } catch ( Throwable loc1 ) { } }"
    },
    {
        "question_id": 1313,
        "intent": "Execute the discrete work encapsulated by a ReturningWork instanceusing the supplied connection , returning the result of ReturningWork #execute java.sql.Connection",
        "snippet": "T function ( ReturningWork < T > arg0 , Connection arg1 ) { return arg0 . execute ( arg1 ) ; }"
    },
    {
        "question_id": 1314,
        "intent": "Returns the change element 's parent .",
        "snippet": "PreviewNode function ( ) { return concodeclass_fParent ; }"
    },
    {
        "question_id": 1315,
        "intent": "Is this endpoint required to be in fragment endpoint assignment list ?",
        "snippet": "boolean function ( ) { return concodeclass_mandatory || Double . POSITIVE_INFINITY == concodeclass_affinity ; }"
    },
    {
        "question_id": 1316,
        "intent": "find a Db4oDatabase with the same signature as this one",
        "snippet": "Db4oDatabase function ( Transaction arg0 ) { if ( concodeclass_i_uuid > 0 ) { Db4oDatabase loc0 = query ( arg0 , true ) ; if ( loc0 != null ) { return loc0 ; } } return query ( arg0 , false ) ; }"
    },
    {
        "question_id": 1317,
        "intent": "Generates a random 8 x 8 SimpleBoard .",
        "snippet": "SimpleBoard function ( ) { SimpleBoard loc0 = new SimpleBoard ( ) ; for ( int loc1 = 0 ; loc1 < 8 ; loc1 ++ ) { for ( int loc2 = 0 ; loc2 < 8 ; loc2 ++ ) { double loc3 = Math . random ( ) * 12 ; int loc4 = ( int ) loc3 ; loc0 . setElementAt ( loc2 , loc1 , loc4 ) ; } } return loc0 ; }"
    },
    {
        "question_id": 1318,
        "intent": "Sets the fully configured DiscoverClasses instance to be used to lookup services",
        "snippet": "void function ( DiscoverClasses arg0 ) { this . concodeclass_discovery = arg0 ; }"
    },
    {
        "question_id": 1319,
        "intent": "Cache the current Display if it has not already been cached by the #launchApp method or a prior call to this method .",
        "snippet": "void function ( ) { if ( concodeclass__display == null ) concodefunc_setDisplay ( Display . getDefault ( ) ) ; }"
    },
    {
        "question_id": 1320,
        "intent": "Time to Live for a contact before it is considered offline",
        "snippet": "void function ( long arg0 ) { this . concodeclass_timeToLiveForContacts = arg0 ; }"
    },
    {
        "question_id": 1321,
        "intent": "Asserts that a schema namespace is set .",
        "snippet": "void function ( String arg0 ) { if ( arg0 == null || arg0 . length ( ) == 0 ) { throw new XMPException ( \"srini_string\" , XMPError . BADPARAM ) ; } }"
    },
    {
        "question_id": 1322,
        "intent": "Return number of elements",
        "snippet": "int function ( ) { return concodeclass_mCount ; }"
    },
    {
        "question_id": 1323,
        "intent": "Return true if past the next synchronization point after a position .",
        "snippet": "boolean function ( long arg0 ) { return ( ( concodeclass_blockStart >= arg0 + concodeclass_SYNC_SIZE ) || ( concodeclass_blockStart >= concodeclass_in . length ( ) ) ) ; }"
    },
    {
        "question_id": 1324,
        "intent": "Returns the end index .",
        "snippet": "int function ( ) { return concodeclass_end ; }"
    },
    {
        "question_id": 1325,
        "intent": "Update the cached set of add-ons . Throws on invalid input .",
        "snippet": "void function ( String arg0 ) { concodeclass_addons = new JSONObject ( arg0 ) ; concodeclass_needsWrite = true ; }"
    },
    {
        "question_id": 1326,
        "intent": "Retrieves the value of a transaction local variables . If this is the first time the variable is accessed TransactionLocal #initialValueFor Transaction will provide the initial value .",
        "snippet": "ByRef < T > function ( TransactionLocal < T > arg0 ) { final ByRef < T > loc0 = ( ByRef < T > ) concodeclass__locals . get ( arg0 ) ; if ( null != loc0 ) return loc0 ; final ByRef < T > loc1 = ByRef . newInstance ( arg0 . initialValueFor ( this ) ) ; concodeclass__locals . put ( arg0 , loc1 ) ; return loc1 ; }"
    },
    {
        "question_id": 1327,
        "intent": "Checks if the images are loaded in the cache . The variable imagesWereLoaded is used to ensure that they wo n't be loaded more then once .",
        "snippet": "void function ( ) { if ( concodeclass_imagesWereLoaded ) return ; concodefunc_addImages ( ) ; concodeclass_imagesWereLoaded = true ; }"
    },
    {
        "question_id": 1328,
        "intent": "Get the value of one of the fields of a datetime . This could be used to get a field using a different Chronology . For example : Instant dt = new Instant ; int gjYear = dt.get Chronology.getCoptic . year ;",
        "snippet": "int function ( DateTimeField arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return arg0 . get ( getMillis ( ) ) ; }"
    },
    {
        "question_id": 1329,
        "intent": "Returns the failure stack trace .",
        "snippet": "String function ( ) { return concodeclass_fTrace ; }"
    },
    {
        "question_id": 1330,
        "intent": "clean up QueryPlanCache when SessionFactory is closed",
        "snippet": "void function ( ) { concodeclass_LOG . trace ( \"srini_string\" ) ; concodeclass_queryPlanCache . clear ( ) ; concodeclass_parameterMetadataCache . clear ( ) ; }"
    },
    {
        "question_id": 1331,
        "intent": "Processes an error that occurs when the validation of an object fails .",
        "snippet": "ValidationErrorDTO function ( MethodArgumentNotValidException arg0 , Locale arg1 ) { BindingResult loc0 = arg0 . getBindingResult ( ) ; List < FieldError > loc1 = loc0 . getFieldErrors ( ) ; concodeclass_LOGGER . error ( \"srini_string\" , loc1 . size ( ) ) ; return concodefunc_constructValidationErrors ( loc1 , arg1 ) ; }"
    },
    {
        "question_id": 1332,
        "intent": "Sets the implementation for language name display . Java language names are defined by default .",
        "snippet": "void function ( final ILanguageNames arg0 ) { this . concodeclass_languageNames = arg0 ; }"
    },
    {
        "question_id": 1333,
        "intent": "Children should override this . The default implementation returns null .",
        "snippet": "Object function ( Object arg0 ) { return null ; }"
    },
    {
        "question_id": 1334,
        "intent": "Check kdc udp setting and see if any bad .",
        "snippet": "int function ( ) { if ( concodefunc_allowUdp ( ) ) { int loc0 = concodefunc_getKdcUdpPort ( ) ; if ( loc0 < 1 ) { throw new KrbException ( \"srini_string\" ) ; } return loc0 ; } return - 1 ; }"
    },
    {
        "question_id": 1335,
        "intent": "Adds a tag and its corresponding properties to the chain .",
        "snippet": "void function ( String arg0 , Map < String , String > arg1 ) { this . concodefunc_adjustFontSize ( arg1 ) ; concodeclass_chain . add ( new TagAttributes ( arg0 , arg1 ) ) ; }"
    },
    {
        "question_id": 1336,
        "intent": "Create QueryContextInformation with given defaultSchemaName . Rest of the members of the QueryContextInformation is derived from the current state of the process .",
        "snippet": "QueryContextInformation function ( final String arg0 ) { final long loc0 = System . currentTimeMillis ( ) ; final int loc1 = DateUtility . getIndex ( System . getProperty ( \"srini_string\" ) ) ; return QueryContextInformation . newBuilder ( ) . setDefaultSchemaName ( arg0 ) . setQueryStartTime ( loc0 ) . setTimeZone ( loc1 ) . build ( ) ; }"
    },
    {
        "question_id": 1337,
        "intent": "Parse AlgebraicNumber from String .",
        "snippet": "AlgebraicNumber < C > function ( String arg0 ) { throw new RuntimeException ( \"srini_string\" ) ; }"
    },
    {
        "question_id": 1338,
        "intent": "Creates a compilation unit change based on the events recorded by this compilation unit rewrite . DO NOT REMOVE , used in a product .",
        "snippet": "org . eclipse . jdt . internal . corext . refactoring . changes . CompilationUnitChange function ( ) { CompilationUnitChange loc0 = createChange ( true ) ; if ( loc0 == null ) return null ; return new org . eclipse . jdt . internal . corext . refactoring . changes . CompilationUnitChange ( loc0 ) ; }"
    },
    {
        "question_id": 1339,
        "intent": "Update this token with the given AST node . NOTE : Allowed to be used by SemanticHighlightingReconciler only .",
        "snippet": "void function ( SimpleName arg0 ) { concodefunc_clear ( ) ; concodeclass_fNode = arg0 ; }"
    },
    {
        "question_id": 1340,
        "intent": "Testet , ob der Puffer leer ist .",
        "snippet": "boolean function ( ) { return concodeclass_pointer == - 1 ; }"
    },
    {
        "question_id": 1341,
        "intent": "Note : This is an inlined version of JavaUI #getEditorInputJavaElement IEditorInput , which is not available in 3.1 .",
        "snippet": "IJavaElement function ( IEditorInput arg0 ) { Assert . isNotNull ( arg0 ) ; IJavaElement loc0 = JavaUI . getWorkingCopyManager ( ) . getWorkingCopy ( arg0 ) ; if ( loc0 != null ) return loc0 ; return arg0 . getAdapter ( IJavaElement . class ) ; }"
    },
    {
        "question_id": 1342,
        "intent": "This widget 's class name .",
        "snippet": "String function ( ) { return concodeclass_refClassName ; }"
    },
    {
        "question_id": 1343,
        "intent": "validate the input document collection . Note that this method call is NOT thread safe . RedPen instances need to be crated for each thread .",
        "snippet": "List < ValidationError > function ( Document arg0 ) { List < Document > loc0 = new ArrayList < > ( ) ; loc0 . add ( arg0 ) ; Map < Document , List < ValidationError >> loc1 = validate ( loc0 ) ; return loc1 . get ( arg0 ) ; }"
    },
    {
        "question_id": 1344,
        "intent": "Returns the value of the specified service , if the service exists and is started .",
        "snippet": "T function ( ServiceRegistry arg0 , ServiceName arg1 ) { ServiceController < T > loc0 = concodefunc_findService ( arg0 , arg1 ) ; return ( ( loc0 != null ) && ( loc0 . getState ( ) == State . UP ) ) ? loc0 . getValue ( ) : null ; }"
    },
    {
        "question_id": 1345,
        "intent": "from an Iterable of objects , this returns the one with the highest associated value of a function f",
        "snippet": "T function ( Iterable < T > arg0 , Function < T , Double > arg1 ) { T loc0 = null ; Double loc1 = null ; for ( T loc2 : arg0 ) { if ( loc0 == null || arg1 . apply ( loc2 ) > loc1 ) { loc0 = loc2 ; loc1 = arg1 . apply ( loc2 ) ; } } return loc0 ; }"
    },
    {
        "question_id": 1346,
        "intent": "Convert the abstract location into a concrete one . Returns a Point relative to the given Component .",
        "snippet": "Point function ( Component arg0 ) { return concodeclass_where != null ? new Point ( concodeclass_where ) : new Point ( arg0 . getWidth ( ) / 2 , arg0 . getHeight ( ) / 2 ) ; }"
    },
    {
        "question_id": 1347,
        "intent": "Same as toParseableString .",
        "snippet": "String function ( ) { return concodefunc_toParseableString ( ) ; }"
    },
    {
        "question_id": 1348,
        "intent": "closes the BinDecorator and the underlying Bin .",
        "snippet": "void function ( ) { concodeclass__bin . close ( ) ; }"
    },
    {
        "question_id": 1349,
        "intent": "Return the `` use context class loader '' flag . If set to true , Digester will attempt to instantiate new command and chain instances from the context class loader .",
        "snippet": "boolean function ( ) { return ( this . concodeclass_useContextClassLoader ) ; }"
    },
    {
        "question_id": 1350,
        "intent": "Stops timing , if currently RUNNING ; resets accumulated time to 0 .",
        "snippet": "void function ( ) { concodeclass_running = false ; concodeclass_tStart = 0 ; concodeclass_tFinish = 0 ; concodeclass_tAccum = 0 ; }"
    },
    {
        "question_id": 1351,
        "intent": "activate basic implementation .",
        "snippet": "void function ( ActivationPurpose arg0 ) { if ( concodeclass__activator != null ) { concodeclass__activator . activate ( arg0 ) ; } }"
    },
    {
        "question_id": 1352,
        "intent": "Factory method to create a typed list . If there are any elements already in the buffer being decorated , they are validated .",
        "snippet": "Buffer function ( Buffer arg0 , Class arg1 ) { return new PredicatedBuffer ( arg0 , InstanceofPredicate . getInstance ( arg1 ) ) ; }"
    },
    {
        "question_id": 1353,
        "intent": "Returns the programmer defined property of the receiver with the specified name , or null if it has not been set . Data mappings allow programmers to associate arbitrary key-value pairs with locator instances .",
        "snippet": "void function ( String arg0 , String arg1 ) { if ( arg0 == null ) throw new IllegalArgumentException ( \"srini_string\" ) ; concodefunc_getDataMap ( ) . put ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 1354,
        "intent": "Get the maximum number of locals used in the method .",
        "snippet": "int function ( ) { if ( concodeclass_code != null ) { return concodeclass_code . maxLocals ( ) ; } return 0 ; }"
    },
    {
        "question_id": 1355,
        "intent": "Returns value of specified field if exists , or null otherwise",
        "snippet": "Object function ( String arg0 ) { return concodeclass_data . get ( arg0 ) ; }"
    },
    {
        "question_id": 1356,
        "intent": "Write all rows added to the named output stream .",
        "snippet": "void function ( OutputStream arg0 ) { concodeclass_writer . writeTo ( arg0 ) ; }"
    },
    {
        "question_id": 1357,
        "intent": "Apply a `` like '' constraint",
        "snippet": "AuditCriterion concodefunc_function ( T arg0 ) { return new SimpleAuditExpression ( concodeclass_propertyNameGetter , arg0 , \"srini_string\" ) ; }"
    },
    {
        "question_id": 1358,
        "intent": "Add a StackKeeper to the top of the stack list .",
        "snippet": "void function ( final StackKeeper arg0 ) { this . concodeclass_queue . addFirst ( arg0 ) ; }"
    },
    {
        "question_id": 1359,
        "intent": "Removes from the underlying collection the last element returned . This method calls remove on the underlying Iterator and it may throw an UnsupportedOperationException if the underlying Iterator does not support this method .",
        "snippet": "void function ( ) { if ( concodeclass_lastUsedIterator == null ) { throw new IllegalStateException ( \"srini_string\" ) ; } concodeclass_lastUsedIterator . remove ( ) ; concodeclass_lastUsedIterator = null ; }"
    },
    {
        "question_id": 1360,
        "intent": "A test run session has been launched . The test tree is not available yet . Important : The implementor of this method must not keep a reference to the session element after #sessionFinished ITestRunSession has finished .",
        "snippet": "void function ( ITestRunSession arg0 ) { }"
    },
    {
        "question_id": 1361,
        "intent": "returns this triangle if it is counterclockwise , or the reversed triangle if it is clockwise .",
        "snippet": "TriangleXZ function ( ) { return concodefunc_makeRotationSense ( true ) ; }"
    },
    {
        "question_id": 1362,
        "intent": "Persist the phenotype given and return it - does not create it .",
        "snippet": "Phenotype function ( Phenotype arg0 ) { String loc0 = \"srini_string\" ; checkArgument ( arg0 . getId ( ) . isPresent ( ) , loc0 ) ; checkArgument ( arg0 . getIssueNumber ( ) . isPresent ( ) , loc0 ) ; concodeclass_db . savePhenotype ( arg0 ) ; concodeclass_github . patchIssue ( arg0 ) ; return arg0 ; }"
    },
    {
        "question_id": 1363,
        "intent": "Gets the iterator as a String .",
        "snippet": "String function ( ) { if ( concodeclass_last != null ) { return \"srini_string\" + concodefunc_getKey ( ) + \"srini_string\" + concodefunc_getValue ( ) + \"srini_string\" ; } else { return \"srini_string\" ; } }"
    },
    {
        "question_id": 1364,
        "intent": "Returns the id given by the given entry 's parent link , or null if it has no parent link .",
        "snippet": "String function ( BaseContentEntry < ? > arg0 ) { Link loc0 = arg0 . getLink ( SitesLink . Rel . PARENT , ILink . Type . ATOM ) ; if ( loc0 == null ) { return null ; } return loc0 . getHref ( ) ; }"
    },
    {
        "question_id": 1365,
        "intent": "Remove a formula from the cache . Take care , remove the Object o , invalidate it !",
        "snippet": "void function ( Object arg0 ) { if ( arg0 != null && arg0 instanceof CachedTeXFormula ) { concodeclass_cache . remove ( ( CachedTeXFormula ) arg0 ) ; } }"
    },
    {
        "question_id": 1366,
        "intent": "Checks if the given password matches the hash and salt . The original password should be kept in the database along with its salt .",
        "snippet": "boolean function ( String arg0 , String arg1 , char [ ] arg2 ) { byte [ ] loc0 = concodefunc_hexStringToByteArray ( arg0 ) ; return arg1 . equals ( concodefunc_hashPassword ( arg2 , loc0 ) . get ( \"srini_string\" ) ) ; }"
    },
    {
        "question_id": 1367,
        "intent": "This method is called right before a worker shuts down",
        "snippet": "void function ( ) { }"
    },
    {
        "question_id": 1368,
        "intent": "Verifies if the class of the elements returned by ParaGraph #end is a Paragraph .",
        "snippet": "void function ( ) { final List < Element > loc0 = concodeclass_p . end ( concodeclass_workerContextImpl , new Tag ( \"srini_string\" ) , concodeclass_currentContent ) ; Assert . assertTrue ( loc0 . get ( 0 ) instanceof Paragraph ) ; }"
    },
    {
        "question_id": 1369,
        "intent": "This method is invoked at the RPC server when the request is received , but before the call itself is executed",
        "snippet": "void function ( RPCContext arg0 ) { }"
    },
    {
        "question_id": 1370,
        "intent": "Insert a contact to the set",
        "snippet": "void function ( PastryContact arg0 ) { if ( arg0 . getOverlayID ( ) . equals ( concodeclass_nodeId ) ) return ; RouteSet loc0 = concodefunc_makeBestEntry ( arg0 . getOverlayID ( ) ) ; if ( ! loc0 . contains ( arg0 ) ) { loc0 . insertEntry ( arg0 ) ; concodefunc_cleanSet ( loc0 ) ; if ( loc0 . contains ( arg0 ) ) concodeclass_lastChanged = Simulator . getCurrentTime ( ) ; } }"
    },
    {
        "question_id": 1371,
        "intent": "Gets the iterator being decorated .",
        "snippet": "Iterator function ( ) { return concodeclass_iterator ; }"
    },
    {
        "question_id": 1372,
        "intent": "Returns a synchronized buffer backed by the given buffer . Much like the synchronized collections returned by java.util.Collections , you must manually synchronize on the returned buffer 's iterator to avoid non-deterministic behavior : Buffer b = BufferUtils.synchronizedBuffer myBuffer ; synchronized b Iterator i = b.iterator ; while i.hasNext process i.next ;",
        "snippet": "Buffer function ( Buffer arg0 ) { return SynchronizedBuffer . decorate ( arg0 ) ; }"
    },
    {
        "question_id": 1373,
        "intent": "Returns the text edits managed by the underlying text edit group .",
        "snippet": "TextEdit [ ] function ( ) { return concodeclass_fTextEditGroup . getTextEdits ( ) ; }"
    },
    {
        "question_id": 1374,
        "intent": "Helper method that prints out an integer .",
        "snippet": "void function ( Integer arg0 , int arg1 ) { for ( int loc0 = 0 ; loc0 < arg1 ; loc0 ++ ) System . out . print ( \"srini_string\" ) ; System . out . println ( \"srini_string\" + arg0 ) ; }"
    },
    {
        "question_id": 1375,
        "intent": "Get preauth handler .",
        "snippet": "PreauthHandler function ( ) { return concodeclass_preauthHandler ; }"
    },
    {
        "question_id": 1376,
        "intent": "Get a set of tokenized words in the sentence .",
        "snippet": "List < TokenElement > function ( ) { return concodeclass_tokens ; }"
    },
    {
        "question_id": 1377,
        "intent": "Check if there are any free cells .",
        "snippet": "boolean function ( ) { for ( int loc0 = 0 ; loc0 < concodeclass_grid . length ; loc0 ++ ) { for ( int loc1 = 0 ; loc1 < concodeclass_grid . length ; loc1 ++ ) { if ( concodeclass_grid [ loc0 ] [ loc1 ] == 0 ) return false ; } } return true ; }"
    },
    {
        "question_id": 1378,
        "intent": "Returns what kind of occurrences the query should look for .",
        "snippet": "int function ( ) { return concodeclass_fLimitTo ; }"
    },
    {
        "question_id": 1379,
        "intent": "Return root schema with schema owner as the given user .",
        "snippet": "SchemaPlus function ( final String arg0 , final SchemaConfigInfoProvider arg1 ) { final String loc0 = concodeclass_isImpersonationEnabled ? arg0 : ImpersonationUtil . getProcessUserName ( ) ; final SchemaConfig loc1 = SchemaConfig . newBuilder ( loc0 , arg1 ) . build ( ) ; return createRootSchema ( loc1 ) ; }"
    },
    {
        "question_id": 1380,
        "intent": "Create and return a builder from System properties .",
        "snippet": "SysPropsBuildr function ( ) { return new SysPropsBuildr ( ) ; }"
    },
    {
        "question_id": 1381,
        "intent": "Returns an unmodifiable version of the given non-null IntListIterator .",
        "snippet": "IntListIterator function ( IntListIterator arg0 ) { if ( null == arg0 ) { throw new NullPointerException ( ) ; } return UnmodifiableIntListIterator . wrap ( arg0 ) ; }"
    },
    {
        "question_id": 1382,
        "intent": "maybe return directly context",
        "snippet": "Query function ( Integer arg0 ) { return concodeclass_entityManager . createQuery ( \"srini_string\" ) . setParameter ( \"srini_string\" , arg0 ) ; }"
    },
    {
        "question_id": 1383,
        "intent": "Also starts the stopwatch .",
        "snippet": "void function ( ) { concodeclass_startTime = 0 ; concodeclass_elapsedMillis = 0 ; concodefunc_start ( ) ; }"
    },
    {
        "question_id": 1384,
        "intent": "Clears the stack , reseting its capacity to the default .",
        "snippet": "void function ( ) { concodeclass__list . clear ( concodeclass_DEFAULT_CAPACITY ) ; }"
    },
    {
        "question_id": 1385,
        "intent": "Append newString to the end of oldString .",
        "snippet": "byte [ ] function ( byte arg0 [ ] , byte arg1 ) { int loc0 = arg0 . loc0 ; byte loc1 [ ] = new byte [ loc0 + 1 ] ; System . arraycopy ( arg0 , 0 , loc1 , 0 , loc0 ) ; loc1 [ loc0 ] = arg1 ; return loc1 ; }"
    },
    {
        "question_id": 1386,
        "intent": "Invokes the underlying Map #put Object , Object method .",
        "snippet": "Object function ( Object arg0 , Object arg1 ) { return concodeclass_map . put ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 1387,
        "intent": "Get the loader for the given class .",
        "snippet": "ClassLoader function ( Class arg0 ) { ClassLoader loc0 = arg0 . getClassLoader ( ) ; if ( loc0 == null ) { loc0 = ClassLoader . getSystemClassLoader ( ) ; } return loc0 ; }"
    },
    {
        "question_id": 1388,
        "intent": "a helper to get the string fields from the R class",
        "snippet": "String [ ] function ( Context arg0 ) { Class loc0 = concodefunc_resolveRClass ( arg0 . getPackageName ( ) ) ; if ( loc0 != null ) { return Libs . toStringArray ( loc0 . getFields ( ) ) ; } return new String [ 0 ] ; }"
    },
    {
        "question_id": 1389,
        "intent": "Attach a non-null PropertyChangeListener to this object .",
        "snippet": "void function ( PropertyChangeListener arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( ) ; } concodeclass_pcsDelegate . addPropertyChangeListener ( arg0 ) ; }"
    },
    {
        "question_id": 1390,
        "intent": "Essentially the same as #resolveRootUrl Class , but here we convert the root URL to a File directory reference . In fact we delegate to #resolveRootUrl Class and simply convert itsreturn into a File reference .",
        "snippet": "File function ( Class arg0 ) { try { return new File ( concodefunc_resolveRootUrl ( arg0 ) . toURI ( ) ) ; } catch ( URISyntaxException loc0 ) { throw new RuntimeException ( \"srini_string\" , loc0 ) ; } }"
    },
    {
        "question_id": 1391,
        "intent": "Makes a note of the resource adapter identifier with which a resource adapter named raName is registered in the org.jboss.jca.core.spi.rar.ResourceAdapterRepository . Subsequent calls to #getRegisteredResourceAdapterIdentifier String with the passed raName returnthe raIdentifier",
        "snippet": "void function ( final String arg0 , final String arg1 ) { synchronized ( concodeclass_resourceAdapterRepositoryIdentifiers ) { concodeclass_resourceAdapterRepositoryIdentifiers . put ( arg0 , arg1 ) ; } }"
    },
    {
        "question_id": 1392,
        "intent": "Enables periodic lookups for measurement purposes . These look up random keys and are scheduled in a constant interval .",
        "snippet": "void function ( ) { concodeclass_lookupEnabled = true ; concodefunc_beginPeriodicLookups ( ) ; }"
    },
    {
        "question_id": 1393,
        "intent": "Parses the Splitter info .",
        "snippet": "SpinfoFileParser function ( File arg0 ) { if ( concodeclass_tempdir == null ) { concodeclass_tempdir = concodefunc_createTempDir ( ) ; } if ( ! concodeclass_dkconfig_delete_splitters_on_exit ) { System . out . println ( \"srini_string\" + concodeclass_tempdir ) ; } return new SpinfoFileParser ( arg0 , concodeclass_tempdir ) ; }"
    },
    {
        "question_id": 1394,
        "intent": "Sole entry point to application , as always .",
        "snippet": "void function ( String [ ] arg0 ) { String loc0 ; TextIO . putln ( \"srini_string\" ) ; loc0 = TextIO . getln ( ) ; TextIO . putln ( ) ; TextIO . putln ( \"srini_string\" ) ; concodefunc_printCapitalized ( loc0 ) ; }"
    },
    {
        "question_id": 1395,
        "intent": "Encode a float to the byte array at the given position . Will throw IndexOutOfBounds if it overflows . Users should ensure that there are at least 4 bytes left in the buffer before calling this method .",
        "snippet": "int function ( float arg0 , byte [ ] arg1 , int arg2 ) { int loc0 = 1 ; int loc1 = Float . floatToRawIntBits ( arg0 ) ; arg1 [ arg2 ] = ( byte ) ( ( loc1 ) & 0xFF ) ; arg1 [ arg2 + loc0 ++ ] = ( byte ) ( ( loc1 >>> 8 ) & 0xFF ) ; arg1 [ arg2 + loc0 ++ ] = ( byte ) ( ( loc1 >>> 16 ) & 0xFF ) ; arg1 [ arg2 + loc0 ++ ] = ( byte ) ( ( loc1 >>> 24 ) & 0xFF ) ; return 4 ; }"
    },
    {
        "question_id": 1396,
        "intent": "Returns an unmodifiable , empty ShortList .",
        "snippet": "ShortList function ( ) { return concodeclass_EMPTY_SHORT_LIST ; }"
    },
    {
        "question_id": 1397,
        "intent": "For testing purposes only . Clears the cached buffer to force a new allocation on the next invocation .",
        "snippet": "void function ( ) { concodeclass_BUFFER . set ( null ) ; }"
    },
    {
        "question_id": 1398,
        "intent": "Paints an overlay edge",
        "snippet": "EdgeHandle function ( NetID arg0 , NetID arg1 ) { return addEdge ( arg0 , arg1 , null , Color . GREEN , \"srini_string\" ) ; }"
    },
    {
        "question_id": 1399,
        "intent": "Gets the current Undoable pointed to by the internal cursor if it is an UndoableEdit object .",
        "snippet": "UndoableEdit function ( ) { Undoable loc0 = concodefunc_get ( ) ; if ( loc0 instanceof UndoableEdit ) { return ( UndoableEdit ) loc0 ; } else { return null ; } }"
    },
    {
        "question_id": 1400,
        "intent": "Add a scoreboard for a player",
        "snippet": "void function ( final Player arg0 ) { Scoreboard loc0 = arg0 . getScoreboard ( ) ; if ( loc0 != null ) { this . concodeclass_originalScoreboard . put ( arg0 . getName ( ) , loc0 ) ; } arg0 . setScoreboard ( this . concodeclass_scoreboard ) ; }"
    },
    {
        "question_id": 1401,
        "intent": "Checks if a given string is a valid person email .",
        "snippet": "boolean function ( String arg0 ) { return arg0 . matches ( concodeclass_EMAIL_VALIDATION_REGEX ) ; }"
    },
    {
        "question_id": 1402,
        "intent": "Register a process ' handle",
        "snippet": "void function ( String arg0 , Shutdownable arg1 ) { concodeclass_processMap . put ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 1403,
        "intent": "Returns an array of all the EventSources",
        "snippet": "EventSource [ ] function ( ) { return new EventSource [ ] { EventSource . CENTAURO , EventSource . COURSE , EventSource . PLATFORM , EventSource . PERSONAL } ; }"
    },
    {
        "question_id": 1404,
        "intent": "Ends up being a bit faster than Math.round . This merely rounds its argument to the nearest int , where x. 5 rounds up .",
        "snippet": "int function ( float arg0 ) { return ( int ) ( arg0 + 0.5f ) ; }"
    },
    {
        "question_id": 1405,
        "intent": "Query if this ring is a field .",
        "snippet": "boolean function ( ) { return true ; }"
    },
    {
        "question_id": 1406,
        "intent": "Gets the job output key schema .",
        "snippet": "Schema function ( Configuration arg0 ) { String loc0 = arg0 . get ( concodeclass_CONF_OUTPUT_KEY_SCHEMA ) ; return loc0 != null ? Schema . parse ( loc0 ) : null ; }"
    },
    {
        "question_id": 1407,
        "intent": "Adds a new item , which compares as equal to the given existing item .",
        "snippet": "boolean function ( Object arg0 , Object arg1 ) { concodefunc_checkLocked ( ) ; Integer loc0 = ( Integer ) concodeclass_map . get ( arg0 ) ; if ( loc0 == null ) { throw new IllegalArgumentException ( arg0 + \"srini_string\" + this ) ; } Object loc1 = concodeclass_map . put ( arg1 , loc0 ) ; return ( loc1 == null ) ; }"
    },
    {
        "question_id": 1408,
        "intent": "This method verifies and ensures display initialization . Verification is based on synchronous execution of empty Runnable .",
        "snippet": "void function ( Display arg0 ) { while ( ! arg0 . isDisposed ( ) ) { try { new DisplayReference ( arg0 ) . execute ( new Callable < Boolean > ( ) { public Boolean call ( ) throws Exception { return true ; } } , 30000 ) ; break ; } catch ( Throwable loc0 ) { continue ; } } }"
    },
    {
        "question_id": 1409,
        "intent": "isEmpty returns true if this Queue is empty , false otherwise .",
        "snippet": "boolean function ( ) { return concodeclass_size == 0 ; }"
    },
    {
        "question_id": 1410,
        "intent": "Return the set of engines that we support given as an argument but the user has n't explicitly declined on another device . Can return the input if the user has n't declined any engines .",
        "snippet": "Set < String > function ( Set < String > arg0 ) { if ( this . concodeclass_declined == null || this . concodeclass_declined . isEmpty ( ) ) { return arg0 ; } final Set < String > loc0 = new HashSet < String > ( arg0 ) ; loc0 . removeAll ( this . concodeclass_declined ) ; return loc0 ; }"
    },
    {
        "question_id": 1411,
        "intent": "Returns the `` return block '' for a given `` caller block '' .",
        "snippet": "Block function ( final Block arg0 ) { for ( int loc0 = 0 ; loc0 < concodeclass_paths . size ( ) ; loc0 ++ ) { final Block [ ] loc1 = ( Block [ ] ) concodeclass_paths . get ( loc0 ) ; if ( loc1 [ 0 ] == arg0 ) { return loc1 [ 1 ] ; } } return null ; }"
    },
    {
        "question_id": 1412,
        "intent": "Intended for info.monitorenter.gui.chart.axis.AAxis only .",
        "snippet": "IAxis < ? > function ( ) { return this . concodeclass_m_axis ; }"
    },
    {
        "question_id": 1413,
        "intent": "Internal use only",
        "snippet": "void function ( RunListener arg0 ) { concodeclass_fListeners . add ( arg0 ) ; }"
    },
    {
        "question_id": 1414,
        "intent": "Perform the click . This is intended to be overridden in subclasses",
        "snippet": "Widget function ( int arg0 , Widget arg1 , Point arg2 , int arg3 ) { return concodeclass__selector . click ( arg1 , arg2 . x , arg2 . y , arg3 , arg0 ) ; }"
    },
    {
        "question_id": 1415,
        "intent": "Return the directory into which we put our self-extracted native libraries and make sure it exists .",
        "snippet": "File function ( Context arg0 ) { File loc0 = concodefunc_getLibsDirectory ( arg0 ) ; if ( ! loc0 . isDirectory ( ) && ! loc0 . mkdirs ( ) ) { throw new RuntimeException ( \"srini_string\" ) ; } return loc0 ; }"
    },
    {
        "question_id": 1416,
        "intent": "Returns if the status ' severity is INFO .",
        "snippet": "boolean function ( ) { return concodeclass_fSeverity == IStatus . INFO ; }"
    },
    {
        "question_id": 1417,
        "intent": "Create a new Closure that calls one of the closures depending on the predicates . The Map consists of Predicate keys and Closure values . A closure is called if its matching predicate returns true . Each predicate is evaluated until one returns true . If no predicates evaluate to true , the default closure is called . The default closure is set in the map with a null key . The ordering is that of the iterator method on the entryset collection of the map .",
        "snippet": "Closure function ( Map arg0 ) { return SwitchClosure . getInstance ( arg0 ) ; }"
    },
    {
        "question_id": 1418,
        "intent": "Gets the iterator this iterator is using .",
        "snippet": "Iterator function ( ) { return concodeclass_iterator ; }"
    },
    {
        "question_id": 1419,
        "intent": "Create an Iterator Iterator wrappingthe specified LongIterator LongIterator . When the given iterator is null , returns null .",
        "snippet": "Iterator function ( LongIterator arg0 ) { return null == arg0 ? null : new LongIteratorIterator ( arg0 ) ; }"
    },
    {
        "question_id": 1420,
        "intent": "Verifies that the data was signed with the given signature , and returns the verified purchase . The data is in JSON format and signed with a private key . The data also contains the PurchaseState and product ID of the purchase .",
        "snippet": "boolean function ( String arg0 , String arg1 , String arg2 ) { if ( TextUtils . isEmpty ( arg1 ) || TextUtils . isEmpty ( arg0 ) || TextUtils . isEmpty ( arg2 ) ) { } PublicKey loc0 = Security . generatePublicKey ( arg0 ) ; return Security . verify ( loc0 , arg1 , arg2 ) ; }"
    },
    {
        "question_id": 1421,
        "intent": "Implement a hash code for this comparator that is consistent with #equals Object equals .",
        "snippet": "int function ( ) { int loc0 = \"srini_string\" . hashCode ( ) ; return concodeclass_trueFirst ? - 1 * loc0 : loc0 ; }"
    },
    {
        "question_id": 1422,
        "intent": "This method attempts to grow an array by allocating a new array and copying all elements .",
        "snippet": "Object [ ] function ( Object [ ] arg0 , int arg1 ) { Object [ ] loc0 = new Object [ arg1 ] ; System . arraycopy ( arg0 , 0 , loc0 , 0 , Math . min ( arg0 . length , arg1 ) ) ; return loc0 ; }"
    },
    {
        "question_id": 1423,
        "intent": "Perform actions",
        "snippet": "void function ( Action ... arg0 ) { for ( Action loc0 : arg0 ) { loc0 ( loc0 ) ; } }"
    },
    {
        "question_id": 1424,
        "intent": "Has an association with the specified key been visited already ?",
        "snippet": "boolean function ( AssociationKey arg0 ) { return concodeclass_visitedAssociationKeys . contains ( arg0 ) || concodeclass_strategy . isDuplicateAssociationKey ( arg0 ) ; }"
    },
    {
        "question_id": 1425,
        "intent": "Parses a style given an externalized string representation",
        "snippet": "Style function ( String arg0 ) { if ( SELECT . arg0 . equals ( arg0 ) ) { return SELECT ; } else { return JOIN ; } }"
    },
    {
        "question_id": 1426,
        "intent": "When syncing entities under some sync root , the user can restrict what types of entities will be synced . I.e. you can issue a sync of a feed but restrict the sync only to resource types . This will in effect make sure that the feed only defines the resource types you instruct it to but all the metric types , resource , metrics , etc. that exist under the feed but were not mentioned in the provided inventory structure will be left intact .",
        "snippet": "Set < SegmentType > function ( ) { return concodeclass_syncedTypes ; }"
    },
    {
        "question_id": 1427,
        "intent": "Create JUnitAll.java that calls all testclasses suites to be generated .",
        "snippet": "void function ( String arg0 ) { if ( concodeclass_fw != null ) { return ; } assert arg0 != null ; File loc0 = CreateFileUtil . createOutFile ( arg0 , \"srini_string\" ) ; try { concodeclass_fw = new FileWriter ( loc0 ) ; concodeclass_fw . write ( junitAllHeader ) ; } catch ( IOException loc1 ) { loc1 . printStackTrace ( ) ; } }"
    },
    {
        "question_id": 1428,
        "intent": "Test method for org.jboss.security.config.SecurityConfiguration #getCipherAlgorithm .",
        "snippet": "void function ( ) { SecurityConfiguration . getCipherAlgorithm ( ) ; }"
    },
    {
        "question_id": 1429,
        "intent": "Sets the color to the graphics context if it is different and returns the previous one of the graphics context or null if there was no change .",
        "snippet": "Color function ( final Graphics arg0 ) { Color loc0 = null ; if ( this . concodeclass_m_color != null ) { final Color loc1 = arg0 . getColor ( ) ; if ( ! loc1 . equals ( this . concodeclass_m_color ) ) { loc0 = loc1 ; arg0 . setColor ( this . concodeclass_m_color ) ; } } return loc0 ; }"
    },
    {
        "question_id": 1430,
        "intent": "Called to write an enum value . May be overridden for alternate enum representations .",
        "snippet": "void function ( Schema arg0 , Object arg1 , Encoder arg2 ) { if ( ! concodeclass_data . isEnum ( arg1 ) ) throw new AvroTypeException ( \"srini_string\" + arg1 ) ; arg2 . writeEnum ( arg0 . getEnumOrdinal ( arg1 . toString ( ) ) ) ; }"
    },
    {
        "question_id": 1431,
        "intent": "Test method for com.flatironschool.javacs.MyLinearMap #values .",
        "snippet": "void function ( ) { Collection < Integer > loc0 = concodeclass_map . values ( ) ; assertThat ( loc0 . size ( ) , is ( 4 ) ) ; assertThat ( loc0 . contains ( 3 ) , is ( true ) ) ; assertThat ( loc0 . contains ( 0 ) , is ( true ) ) ; assertThat ( loc0 . contains ( 4 ) , is ( false ) ) ; }"
    },
    {
        "question_id": 1432,
        "intent": "Finds a single todo entry .",
        "snippet": "TodoDTO function ( @ PathVariable ( \"srini_string\" ) Long arg0 ) { concodeclass_LOGGER . info ( \"srini_string\" , arg0 ) ; TodoDTO loc0 = concodeclass_crudService . findById ( arg0 ) ; concodeclass_LOGGER . info ( \"srini_string\" , loc0 ) ; return loc0 ; }"
    },
    {
        "question_id": 1433,
        "intent": "Return true if debugging is enabled .",
        "snippet": "boolean function ( ) { return concodeclass_isDebugging ; }"
    },
    {
        "question_id": 1434,
        "intent": "In output , M = modified , U = unmodified , X = missing . Capital letters indicate the specified modbit does occur , lowercase letters indicate it does not occur .",
        "snippet": "String function ( int arg0 ) { return ( ( concodefunc_tuplemodHasModified ( arg0 ) ? \"srini_string\" : \"srini_string\" ) + ( concodefunc_tuplemodHasUnmodified ( arg0 ) ? \"srini_string\" : \"srini_string\" ) + ( concodefunc_tuplemodHasMissingNonsensical ( arg0 ) ? \"srini_string\" : \"srini_string\" ) + ( concodefunc_tuplemodHasMissingFlow ( arg0 ) ? \"srini_string\" : \"srini_string\" ) ) ; }"
    },
    {
        "question_id": 1435,
        "intent": "Perform a code resolve in a separate thread .",
        "snippet": "IJavaElement [ ] function ( JavaEditor arg0 , boolean arg1 ) { ITypeRoot loc0 = concodefunc_getInput ( arg0 , arg1 ) ; if ( loc0 != null ) return concodefunc_performForkedCodeResolve ( loc0 , ( ITextSelection ) arg0 . getSelectionProvider ( ) . getSelection ( ) ) ; return concodeclass_EMPTY_RESULT ; }"
    },
    {
        "question_id": 1436,
        "intent": "Retrieves the path to the log file .",
        "snippet": "String function ( ) { return concodeclass_path ; }"
    },
    {
        "question_id": 1437,
        "intent": "The maximum number of reconnect attempts before an error is reported back to the client on the first attempt by the client to connect to a server . Set to -1 to use unlimited attempts . Defaults to -1 .",
        "snippet": "void function ( long arg0 ) { this . concodeclass_connectAttemptsMax = arg0 ; }"
    },
    {
        "question_id": 1438,
        "intent": "clears the tile in a specific direction",
        "snippet": "void function ( Direction arg0 ) { concodefunc_digHole ( arg0 , concodeclass_NUM_DIG_STATES ) ; }"
    },
    {
        "question_id": 1439,
        "intent": "Lock cache access .",
        "snippet": "void function ( ) { concodeclass_lock . lock ( ) ; }"
    },
    {
        "question_id": 1440,
        "intent": "Gets the package name for the Java class .",
        "snippet": "String function ( ) { return concodeclass_packageName ; }"
    },
    {
        "question_id": 1441,
        "intent": "Dump a cursor to the debug log , ignoring any log level settings . The position in the cursor is maintained . Caller is responsible for opening and closing cursor .",
        "snippet": "void function ( Cursor arg0 ) { dumpCursor ( arg0 , 18 , \"srini_string\" ) ; }"
    },
    {
        "question_id": 1442,
        "intent": "Quotient multiplication .",
        "snippet": "Quotient < C > function ( Quotient < C > arg0 ) { if ( arg0 == null || arg0 . isZERO ( ) ) { return arg0 ; } if ( concodeclass_num . isZERO ( ) ) { return this ; } if ( arg0 . isONE ( ) ) { return this ; } if ( this . concodefunc_isONE ( ) ) { return arg0 ; } C loc0 = concodeclass_num . multiply ( arg0 . num ) ; C loc1 = concodeclass_den . multiply ( arg0 . den ) ; return new Quotient < C > ( concodeclass_ring , loc0 , loc1 , false ) ; }"
    },
    {
        "question_id": 1443,
        "intent": "comment f",
        "snippet": "void function ( ) { }"
    },
    {
        "question_id": 1444,
        "intent": "Creates a JSONAsserter",
        "snippet": "JsonAsserter function ( Reader arg0 ) { return new JsonAsserterImpl ( JsonPath . parse ( concodefunc_convertReaderToString ( arg0 ) ) . json ( ) ) ; }"
    },
    {
        "question_id": 1445,
        "intent": "Gets the number of connection requests being blocked awaiting a free connection . This can happen only if there are more worker threads contending for fewer connections .",
        "snippet": "int function ( ) { return this . concodeclass_pending ; }"
    },
    {
        "question_id": 1446,
        "intent": "Create a VarComparability based on comparabilities of indices .",
        "snippet": "VarComparability function ( String arg0 , VarComparability arg1 ) { if ( arg1 instanceof VarComparabilityNone ) { return VarComparabilityNone . it ; } else { throw new Error ( \"srini_string\" ) ; } }"
    },
    {
        "question_id": 1447,
        "intent": "Returns the response 's identifier , which matches the pushed notification 's .",
        "snippet": "int function ( ) { return concodeclass_identifier ; }"
    },
    {
        "question_id": 1448,
        "intent": "Remove a PropertyChangeListener from this component .",
        "snippet": "void function ( PropertyChangeListener arg0 ) { if ( arg0 != null ) { concodeclass_pcsDelegate . removePropertyChangeListener ( arg0 ) ; } }"
    },
    {
        "question_id": 1449,
        "intent": "Extract discrete keys from this possibly compound key .",
        "snippet": "int [ ] function ( int arg0 ) { return KeyStrokeDecoder . extractModifiers ( arg0 ) ; }"
    },
    {
        "question_id": 1450,
        "intent": "Convert integer to character",
        "snippet": "char function ( int arg0 ) { return ( char ) ( arg0 + 'A' ) ; }"
    },
    {
        "question_id": 1451,
        "intent": "Get the subject widget 's class name",
        "snippet": "String function ( ) { if ( concodeclass_classRef != null ) return concodeclass_classRef . getName ( ) ; else return null ; }"
    },
    {
        "question_id": 1452,
        "intent": "Adds the service into the cache map",
        "snippet": "void function ( Service arg0 ) { concodeclass_serviceCache . put ( arg0 . getName ( ) , arg0 ) ; }"
    },
    {
        "question_id": 1453,
        "intent": "Checks whether the field specified is supported by this period .",
        "snippet": "boolean function ( DurationFieldType arg0 ) { return getPeriodType ( ) . isSupported ( arg0 ) ; }"
    },
    {
        "question_id": 1454,
        "intent": "Init with krbsetting .",
        "snippet": "void function ( KrbSetting arg0 ) { this . concodeclass_krbSetting = arg0 ; concodeclass_preauthHandler = new PreauthHandler ( ) ; concodeclass_preauthHandler . init ( this ) ; }"
    },
    {
        "question_id": 1455,
        "intent": "Get the directory into which commited class files should be written .",
        "snippet": "File function ( ) { return concodeclass_outputDir ; }"
    },
    {
        "question_id": 1456,
        "intent": "look for @OneToMany , @ManyToMany and @ElementCollection annotations",
        "snippet": "boolean function ( CtField arg0 ) { return arg0 . hasAnnotation ( OneToMany . class ) || arg0 . hasAnnotation ( ManyToMany . class ) || arg0 . hasAnnotation ( ElementCollection . class ) ; }"
    },
    {
        "question_id": 1457,
        "intent": "Return the character at the given position . Erase characters will return 0 rather than the actual character",
        "snippet": "char function ( int arg0 ) { return charAt ( arg0 , false ) ; }"
    },
    {
        "question_id": 1458,
        "intent": "Equals does not take into account the range of this contact , as this information might change over time and should be updated rather than force a new Contact",
        "snippet": "boolean function ( Object arg0 ) { if ( arg0 instanceof MercuryContact ) { MercuryContact loc0 = ( MercuryContact ) arg0 ; return loc0 . getAttribute ( ) . equals ( this . concodefunc_getAttribute ( ) ) && loc0 . getTransInfo ( ) . equals ( this . concodefunc_getTransInfo ( ) ) ; } return false ; }"
    },
    {
        "question_id": 1459,
        "intent": "YCC 8-bit per channel to RGB 8-bit per channel .",
        "snippet": "void function ( int [ ] arg0 , int [ ] arg1 ) { int loc0 = arg0 [ 0 ] ; int loc1 = arg0 [ 1 ] ; int loc2 = arg0 [ 2 ] ; int loc3 = ( 299 * loc0 + 587 * loc1 + 114 * loc2 ) / 1000 ; int loc4 = ( - 1687 * loc0 - 3313 * loc1 + 5000 * loc2 ) / 10000 + 128 ; int loc5 = ( 5000 * loc0 - 4187 * loc1 - 813 * loc2 ) / 10000 + 128 ; arg1 [ 0 ] = min ( 255 , max ( 0 , loc3 ) ) ; arg1 [ 1 ] = min ( 255 , max ( 0 , loc4 ) ) ; arg1 [ 2 ] = min ( 255 , max ( 0 , loc5 ) ) ; }"
    },
    {
        "question_id": 1460,
        "intent": "Copy AlgebraicNumber element c.",
        "snippet": "AlgebraicNumber < C > function ( AlgebraicNumber < C > arg0 ) { return new AlgebraicNumber < C > ( this , arg0 . val ) ; }"
    },
    {
        "question_id": 1461,
        "intent": "Returns a test which will fail and log a warning message .",
        "snippet": "Test function ( final String arg0 ) { return new TestCase ( \"srini_string\" ) { protected void concodefunc_runTest ( ) { fail ( arg0 ) ; } } ; }"
    },
    {
        "question_id": 1462,
        "intent": "Convert a VarCharHolder to a String . VarCharHolders are designed specifically for object reuse and mutability , only use this method when absolutely necessary for interacting with interfaces that must take a String .",
        "snippet": "String function ( VarCharHolder arg0 ) { return concodefunc_toStringFromUTF8 ( arg0 . start , arg0 . end , arg0 . buffer ) ; }"
    },
    {
        "question_id": 1463,
        "intent": "Checks is buffer contains needed bytes",
        "snippet": "void function ( int arg0 ) { if ( arg0 > concodeclass_limit - concodeclass_position ) { throw new BSONException ( \"srini_string\" ) ; } }"
    },
    {
        "question_id": 1464,
        "intent": "Main run method . Should never be run on the event dispatch thread , although no check is explicitly done here .",
        "snippet": "void function ( ) { if ( concodeclass_invalidScriptError != null ) throw concodeclass_invalidScriptError ; Log . debug ( \"srini_string\" + concodefunc_toString ( ) ) ; concodefunc_runStep ( ) ; }"
    },
    {
        "question_id": 1465,
        "intent": "Return a view based on layout id",
        "snippet": "View function ( int arg0 , String arg1 ) { View loc0 = concodeclass_mInflater . inflate ( arg0 , null , false ) ; loc0 . setTag ( arg1 ) ; loc0 . setVisibility ( View . GONE ) ; View loc1 = loc0 . findViewById ( R . id . exception_button ) ; if ( loc1 != null ) loc1 . setOnClickListener ( this . concodeclass_mClickListener ) ; return loc0 ; }"
    },
    {
        "question_id": 1466,
        "intent": "Calculate the greatest common divisor .",
        "snippet": "int function ( int arg0 , int arg1 ) { if ( arg0 < 0 ) { arg0 = - arg0 ; } if ( arg1 < 0 ) { arg1 = - arg1 ; } while ( arg1 != 0 ) { int loc0 = arg0 % arg1 ; arg0 = arg1 ; arg1 = loc0 ; } return arg0 ; }"
    },
    {
        "question_id": 1467,
        "intent": "Convert a string into a byte for use with the actual registry functions .",
        "snippet": "byte [ ] function ( String arg0 ) { byte [ ] loc0 = new byte [ arg0 . length ( ) + 1 ] ; for ( int loc1 = 0 ; loc1 < arg0 . length ( ) ; loc1 ++ ) { loc0 [ loc1 ] = ( byte ) arg0 . charAt ( loc1 ) ; } loc0 [ arg0 . length ( ) ] = 0 ; return loc0 ; }"
    },
    {
        "question_id": 1468,
        "intent": "Return the starting location of this move .",
        "snippet": "int function ( ) { return concodeclass_startingLocation ; }"
    },
    {
        "question_id": 1469,
        "intent": "This method starts a SupportPeerRequestOperation , which begs a chosen node for the execution of the role as Support Peer .",
        "snippet": "int function ( SkyNetNodeInfo arg0 , SkyNetNodeInfo arg1 , SkyNetNodeInfo arg2 , long arg3 , OperationCallback < SupportPeerRequestACKMsg > arg4 ) { SupportPeerRequestOperation loc0 = new SupportPeerRequestOperation ( concodeclass_skyNetNode , arg0 , arg1 , arg2 , arg3 , arg4 ) ; loc0 . scheduleImmediately ( ) ; return loc0 . getOperationID ( ) ; }"
    },
    {
        "question_id": 1470,
        "intent": "Sets the string name of this document set",
        "snippet": "void function ( String arg0 ) { this . concodeclass_name = arg0 ; System . out . println ( \"srini_string\" = \"srini_string\" ) ; }"
    },
    {
        "question_id": 1471,
        "intent": "Handles the given InvocationTargetException .",
        "snippet": "void function ( InvocationTargetException arg0 , Shell arg1 , String arg2 , String arg3 ) { concodeclass_fgInstance . perform ( arg0 , arg1 , arg2 , arg3 ) ; }"
    },
    {
        "question_id": 1472,
        "intent": "Get this object as a MutablePeriod . This will always return a new MutablePeriod with the same fields . The period will use PeriodType.standard .",
        "snippet": "MutablePeriod function ( ) { MutablePeriod loc0 = new MutablePeriod ( ) ; loc0 . add ( this ) ; return loc0 ; }"
    },
    {
        "question_id": 1473,
        "intent": "Returns the iText version as shown in the producer line . iText is a product developed by iText Group NV . iText Group requests that you retain the iText producer line in every PDF that is created or manipulated using iText .",
        "snippet": "String function ( ) { return concodeclass_iTextVersion ; }"
    },
    {
        "question_id": 1474,
        "intent": "Computes the min ts across all streams .",
        "snippet": "long function ( ) { long loc0 = 0 ; if ( concodeclass_streamToTs . size ( ) >= concodeclass_inputStreams . size ( ) ) { loc0 = Long . MAX_VALUE ; for ( Map . Entry < GlobalStreamId , Long > loc1 : concodeclass_streamToTs . entrySet ( ) ) { loc0 = Math . min ( loc0 , loc1 . getValue ( ) ) ; } } return loc0 - concodeclass_eventTsLag ; }"
    },
    {
        "question_id": 1475,
        "intent": "Creates a criterion using the < operator",
        "snippet": "Criteria function ( Object arg0 ) { this . concodeclass_criteriaType = RelationalOperator . LT ; this . concodeclass_right = ValueNode . toValueNode ( arg0 ) ; return this ; }"
    },
    {
        "question_id": 1476,
        "intent": "Sets the CSS class for the element we will eventually create . Blows away any previously set or added class names .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_cssClassName = arg0 ; }"
    },
    {
        "question_id": 1477,
        "intent": "Set the log implementation/log implementation factory by the name of the class . The given class must implement Log , and provide a constructor that takes a single String argument containing the nameof the log .",
        "snippet": "void function ( String arg0 ) { try { Class loc0 = Class . forName ( arg0 ) ; Class [ ] loc1 = new Class [ 1 ] ; loc1 [ 0 ] = \"srini_string\" . getClass ( ) ; concodeclass_logImplctor = loc0 . getConstructor ( loc1 ) ; } catch ( Throwable loc0 ) { concodeclass_logImplctor = null ; } }"
    },
    {
        "question_id": 1478,
        "intent": "Indicates whether or not this operation expects to include default values .",
        "snippet": "boolean function ( ModelNode arg0 ) { return arg0 . hasDefined ( ModelDescriptionConstants . INCLUDE_DEFAULTS ) ? arg0 . get ( ModelDescriptionConstants . INCLUDE_DEFAULTS ) . asBoolean ( ) : true ; }"
    },
    {
        "question_id": 1479,
        "intent": "get type type to mark this response , default is 0 it will be used in HttpCache #HttpCache android.content.Context , int",
        "snippet": "int function ( ) { return concodeclass_type ; }"
    },
    {
        "question_id": 1480,
        "intent": "Empties the contents of the stack .",
        "snippet": "void function ( ) { concodeclass_list . clear ( ) ; }"
    },
    {
        "question_id": 1481,
        "intent": "Returns the sum of the squares of the available values .",
        "snippet": "double function ( ) { return concodefunc_apply ( new SumOfSquares ( ) ) ; }"
    },
    {
        "question_id": 1482,
        "intent": "Converts an ISO 8601 string to an XMPDateTime . Parse a date according to ISO 8601 and http://www.w3.org/TR/NOTE-datetime : YYYY YYYY-MM YYYY-MM-DD YYYY-MM-DDThh : mmTZD YYYY-MM-DDThh : mm : ssTZD YYYY-MM-DDThh : mm : ss.sTZD Data fields : YYYY = four-digit year MM = two-digit month 01 = January , etc. DD = two-digit day of month 01 through 31 hh = two digits of hour 00 through 23 mm = two digits of minute 00 through 59 ss = two digits of second 00 through 59 s = one or more digits representing a decimal fraction of a second TZD = time zone designator Z or + hh : mm or - hh : mm Note that ISO 8601 does not seem to allow years less than 1000 or greater than 9999 . We allow any year , even negative ones . The year is formatted as '' % .4 d '' . Note : Tolerate missing TZD , assume is UTC . Photoshop 8 writes dates like this for exif : GPSTimeStamp . Note : DOES NOT APPLY ANYMORE . Tolerate missing date portion , in case someone foolishly writes a time-only value that way .",
        "snippet": "XMPDateTime function ( String arg0 ) { return parse ( arg0 , new XMPDateTimeImpl ( ) ) ; }"
    },
    {
        "question_id": 1483,
        "intent": "Special handler for deserialization .",
        "snippet": "Object function ( ) { return this . concodefunc_intern ( ) ; }"
    },
    {
        "question_id": 1484,
        "intent": "Handles an incoming selection event .",
        "snippet": "void function ( ) { concodefunc_handleChange ( new Change ( TypingRun . SELECTION , - 1 ) ) ; }"
    },
    {
        "question_id": 1485,
        "intent": "Get ring factory at index i.",
        "snippet": "RingFactory < C > function ( int arg0 ) { if ( concodeclass_nCopies != 0 ) { if ( 0 <= arg0 && arg0 < concodeclass_nCopies ) { return concodeclass_ring ; } throw new RuntimeException ( \"srini_string\" + this . getClass ( ) . getName ( ) ) ; } else { return concodeclass_ringList . get ( arg0 ) ; } }"
    },
    {
        "question_id": 1486,
        "intent": "Checks if the x value of the hash should be in this area",
        "snippet": "boolean function ( CanArea arg0 ) { if ( concodefunc_sameXValue ( arg0 ) && concodefunc_sameYValue ( arg0 ) ) return true ; return false ; }"
    },
    {
        "question_id": 1487,
        "intent": "Sets a new value instance overwriting the old value which is returned . You may use null . But you will get it back next call !",
        "snippet": "K function ( final K arg0 ) { final K loc0 = this . concodeclass_m_value ; this . concodeclass_m_value = arg0 ; return loc0 ; }"
    },
    {
        "question_id": 1488,
        "intent": "Intended only for use from testing .",
        "snippet": "void function ( DialectResolver arg0 ) { this . concodeclass_dialectResolver = arg0 ; }"
    },
    {
        "question_id": 1489,
        "intent": "We 've finished writing the concatenated document .",
        "snippet": "void function ( ) { concodeclass_document . close ( ) ; }"
    },
    {
        "question_id": 1490,
        "intent": "Timing for frame relative to previous frame .",
        "snippet": "long function ( int arg0 ) { return ( ( ANIMFrame ) concodeclass_frames_ . elementAt ( arg0 ) ) . getRelTime ( ) ; }"
    },
    {
        "question_id": 1491,
        "intent": "If the #call method throws an exception , then this method is called tohandle that exception . This method may either handle the exception and return a value or rethrow the exception . The default implementation just rethrows the exception . Subclasses may extend or override .",
        "snippet": "void function ( Throwable arg0 ) { throw arg0 ; }"
    },
    {
        "question_id": 1492,
        "intent": "Returns the ith digit of the ID in base 2 ^ b . i = 0 returns the least significant digit .",
        "snippet": "int function ( int arg0 ) { BigInteger loc0 ; int loc1 = arg0 * PastryConstants . ID_BASE_BIT_LENGTH ; loc0 = concodeclass_id . shiftRight ( loc1 ) ; loc0 = loc0 . mod ( concodeclass_TWO . pow ( PastryConstants . ID_BASE_BIT_LENGTH ) ) ; if ( loc0 . compareTo ( BigInteger . valueOf ( Integer . MAX_VALUE ) ) <= 0 ) return loc0 . intValue ( ) ; else return - 1 ; }"
    },
    {
        "question_id": 1493,
        "intent": "Hash code for this local .",
        "snippet": "int function ( ) { int loc0 ; loc0 = concodeclass_ring . hashCode ( ) ; loc0 = 37 * loc0 + concodeclass_num . hashCode ( ) ; loc0 = 37 * loc0 + concodeclass_den . hashCode ( ) ; return loc0 ; }"
    },
    {
        "question_id": 1494,
        "intent": "what is this for ?",
        "snippet": "MiniPair function ( ) { return new MiniPair ( concodeclass_i , concodeclass_j ) ; }"
    },
    {
        "question_id": 1495,
        "intent": "Check whether the Log4j Logger used is enabled for WARN priority .",
        "snippet": "boolean function ( ) { if ( concodeclass_is12 ) { return concodefunc_getLogger ( ) . isEnabledFor ( ( Priority ) Level . WARN ) ; } else { return concodefunc_getLogger ( ) . isEnabledFor ( Level . WARN ) ; } }"
    },
    {
        "question_id": 1496,
        "intent": "For test use",
        "snippet": "boolean function ( String arg0 , String arg1 ) { if ( \"srini_string\" . equals ( arg0 ) && \"srini_string\" . equals ( arg1 ) ) return true ; Entry loc0 = concodeclass_sessions . get ( arg0 ) ; return loc0 != null && loc0 . arg1 . equals ( arg1 ) ; }"
    },
    {
        "question_id": 1497,
        "intent": "Gets the number chosen .",
        "snippet": "String function ( ) { return concodeclass_numberChosen ; }"
    },
    {
        "question_id": 1498,
        "intent": "Gets the transformers , do not modify the array .",
        "snippet": "Transformer [ ] function ( ) { return concodeclass_iTransformers ; }"
    },
    {
        "question_id": 1499,
        "intent": "Flashes the output area a specified color . Currently inoperable .",
        "snippet": "void function ( int arg0 ) { }"
    },
    {
        "question_id": 1500,
        "intent": "Get the index into the constant pool of the field 's constant value , if any . Returns 0 if the field does not have a constant value .",
        "snippet": "int function ( ) { if ( concodeclass_constantValue != null ) { return concodeclass_constantValue . constantValueIndex ( ) ; } return 0 ; }"
    },
    {
        "question_id": 1501,
        "intent": "Sets the sigma parameter Unit is msec",
        "snippet": "void function ( double arg0 ) { this . concodeclass_sigma = arg0 ; }"
    },
    {
        "question_id": 1502,
        "intent": "Returns an unmodifiable , empty DoubleIterator",
        "snippet": "DoubleIterator function ( ) { return concodeclass_EMPTY_DOUBLE_ITERATOR ; }"
    },
    {
        "question_id": 1503,
        "intent": "If a response packet regarding this notification was received , this method returns it . Otherwise it returns null .",
        "snippet": "ResponsePacket function ( ) { return concodeclass_response ; }"
    },
    {
        "question_id": 1504,
        "intent": "Create a new Perspective Locator that identifies perspectives by name .",
        "snippet": "PerspectiveLocator function ( String arg0 ) { return new PerspectiveLocator ( PerspectiveFinder . findByNameInRegistry ( arg0 ) ) ; }"
    },
    {
        "question_id": 1505,
        "intent": "Returns an unmodifiable version of the given non-null ShortList .",
        "snippet": "ShortList function ( ShortList arg0 ) { if ( null == arg0 ) { throw new NullPointerException ( ) ; } return UnmodifiableShortList . wrap ( arg0 ) ; }"
    },
    {
        "question_id": 1506,
        "intent": "Log a message and exception with debug log level .",
        "snippet": "void function ( Object arg0 , Throwable arg1 ) { concodefunc_log ( Level . FINE , String . valueOf ( arg0 ) , arg1 ) ; }"
    },
    {
        "question_id": 1507,
        "intent": "Run the query given and return one result from it .",
        "snippet": "Phenotype function ( SolrQuery arg0 ) { try { QueryResponse loc0 = concodeclass_server . query ( arg0 ) ; List < SolrDocument > loc1 = loc0 . getResults ( ) ; if ( loc1 . size ( ) == 0 ) { return Phenotype . NULL ; } return concodeclass_mapper . fromDoc ( loc1 . get ( 0 ) ) ; } catch ( SolrServerException loc0 ) { throw new IOException ( loc0 ) ; } }"
    },
    {
        "question_id": 1508,
        "intent": "Get the expression that is depth expressions from the top of the stack , but do not modify the stack .",
        "snippet": "Expr function ( int arg0 ) { for ( int loc0 = concodeclass_stack . size ( ) - 1 ; loc0 >= 0 ; loc0 -- ) { final Expr loc1 = ( Expr ) concodeclass_stack . get ( loc0 ) ; if ( arg0 == 0 ) { return loc1 ; } arg0 -= loc1 . type ( ) . stackHeight ( ) ; } throw new IllegalArgumentException ( \"srini_string\" ) ; }"
    },
    {
        "question_id": 1509,
        "intent": "Create a condition that tests if the workbench shell is maximized .",
        "snippet": "IUIConditionHandler function ( ) { return new WorkbenchIsMaximizedCondition ( ) ; }"
    },
    {
        "question_id": 1510,
        "intent": "Adds a log event to the cache . If the number of events reach the capacity of the batch , they will be published .",
        "snippet": "void function ( LoggingEvent arg0 ) { boolean loc0 = false ; synchronized ( concodeclass_EVENTQUEUELOCK ) { if ( concodeclass_eventQueueLength < concodeclass_capacity ) { concodeclass_eventQueue . add ( arg0 ) ; concodeclass_eventQueueLength ++ ; } else { loc0 = true ; } } if ( loc0 ) { concodefunc_flushAndPublishQueue ( false ) ; } }"
    },
    {
        "question_id": 1511,
        "intent": "Retrieve the current timeout setting . The timeout is the amount of time , in milliseconds , we should instruct the database to wait for any requested pessimistic lock acquisition . #NO_WAIT , #WAIT_FOREVER or #SKIP_LOCKED represent 3 `` magic '' values .",
        "snippet": "int function ( ) { return concodeclass_timeout ; }"
    },
    {
        "question_id": 1512,
        "intent": "Test method for com.itextpdf.text.html.WebColors #getRGBColor java.lang.String .",
        "snippet": "void function ( ) { assertEquals ( 255 , WebColors . getRGBColor ( concodeclass_RGB_PERCENT ) . getRed ( ) ) ; }"
    },
    {
        "question_id": 1513,
        "intent": "Hash code for this quotient ring .",
        "snippet": "int function ( ) { int loc0 ; loc0 = concodeclass_ring . hashCode ( ) ; return loc0 ; }"
    },
    {
        "question_id": 1514,
        "intent": "Returns a set that maintains the order of elements that are added backed by the given set . If an element is added twice , the order is determined by the first add . The order is observed through the iterator or toArray .",
        "snippet": "Set function ( Set arg0 ) { return ListOrderedSet . decorate ( arg0 ) ; }"
    },
    {
        "question_id": 1515,
        "intent": "Add one metric to this record to be displayed on the custom dashboard .",
        "snippet": "void function ( String arg0 , Double arg1 ) { concodeclass_valid = true ; concodeclass_customMetrics . put ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 1516,
        "intent": "Get composite ID sub-attribute definitions .",
        "snippet": "Iterable < AttributeDefinition > function ( AbstractEntityPersister arg0 ) { return concodefunc_getSingularSubAttributes ( arg0 , arg0 , ( CompositeType ) arg0 . getIdentifierType ( ) , arg0 . getTableName ( ) , arg0 . getRootTableIdentifierColumnNames ( ) ) ; }"
    },
    {
        "question_id": 1517,
        "intent": "Should archive validation be performed",
        "snippet": "boolean function ( ) { return concodeclass_archiveValidation . get ( ) ; }"
    },
    {
        "question_id": 1518,
        "intent": "The validation logic can either be defined in the property validation logic or as a regex of the property type . This method distincts between those different possibility and returns the actual validation pattern .",
        "snippet": "String function ( ) { String loc0 = null ; if ( concodefunc_isCustomType ( ) ) { loc0 = this . concodeclass_validationLogic == null ? concodeclass_DEFAULTVALIDATIONEXPRESSION : this . concodeclass_validationLogic ; } else { loc0 = this . concodeclass_validationLogic == null ? concodefunc_getPropertyTypeValidationRegex ( ) : this . concodeclass_validationLogic ; } return loc0 ; }"
    },
    {
        "question_id": 1519,
        "intent": "Microservice entry point",
        "snippet": "void function ( String [ ] arg0 ) { SpringApplication . run ( PriceApplication . class , arg0 ) ; }"
    },
    {
        "question_id": 1520,
        "intent": "Retrieve the overall lock mode in effect for this set of options . In certain contexts hql and criteria , lock-modes can be defined in an even more granular #setAliasSpecificLockMode String , LockMode per-alias fashion",
        "snippet": "LockMode function ( ) { return concodeclass_lockMode ; }"
    },
    {
        "question_id": 1521,
        "intent": "Hash the member reference .",
        "snippet": "int function ( ) { return concodeclass_declaringClass . hashCode ( ) ^ concodeclass_nameAndType . hashCode ( ) ; }"
    },
    {
        "question_id": 1522,
        "intent": "Returns the LoggerFactory",
        "snippet": "LoggerFactory function ( ) { return concodeclass_myself ; }"
    },
    {
        "question_id": 1523,
        "intent": "Appends the given string to the buffer .",
        "snippet": "XMLParser function ( final String arg0 ) { this . concodeclass_memory . current ( ) . append ( arg0 ) ; return this ; }"
    },
    {
        "question_id": 1524,
        "intent": "isValidNode returns true if this node is valid ; false otherwise . By default , an invalid node is one that does n't belong to a list myList is null , but subclasses can override this definition .",
        "snippet": "boolean function ( ) { return concodeclass_myList != null ; }"
    },
    {
        "question_id": 1525,
        "intent": "Static method to get single instance of class",
        "snippet": "ConsoleLoggerModule function ( ) { if ( ConsoleLoggerModule . singleton == null ) { ConsoleLoggerModule . singleton = new ConsoleLoggerModule ( ) ; } return ConsoleLoggerModule . singleton ; }"
    },
    {
        "question_id": 1526,
        "intent": "There is no relation defined in the uppermost hierarchy instance - this is an inconsistency and shall result in a runtime exception",
        "snippet": "void function ( ) { AppServerRelationHierarchyEntity loc0 = new AppServerRelationHierarchyEntity ( ) ; concodeclass_entity . setParentRelation ( loc0 ) ; concodeclass_entity . getApplicationServer ( ) ; }"
    },
    {
        "question_id": 1527,
        "intent": "transfers from right to left",
        "snippet": "T [ ] function ( T [ ] arg0 , T [ ] arg1 ) { return ArrayTool . transferValues ( arg0 , arg1 , 0 , arg1 . length ) ; }"
    },
    {
        "question_id": 1528,
        "intent": "Mark a client as collapsed .",
        "snippet": "boolean function ( String arg0 , boolean arg1 ) { return concodefunc_updateClientMembership ( concodeclass_PREF_COLLAPSED_CLIENT_GUIDS , concodeclass_collapsedClients , arg0 , arg1 ) ; }"
    },
    {
        "question_id": 1529,
        "intent": "Gets the value of the billTo property .",
        "snippet": "USAddress function ( ) { return concodeclass_billTo ; }"
    },
    {
        "question_id": 1530,
        "intent": "Get sentence containing the error .",
        "snippet": "Sentence function ( ) { return concodeclass_sentence ; }"
    },
    {
        "question_id": 1531,
        "intent": "Get the type name as in the static field names defined on java.sql.Types . If a type code is not recognized , it is reported as UNKNOWN ? where ' ? ' is replace with the given type code.Intended as useful for logging purposes ...",
        "snippet": "String function ( Integer arg0 ) { String loc0 = concodeclass_JDBC_TYPE_MAP . get ( arg0 ) ; if ( loc0 == null ) { return \"srini_string\" + arg0 + \"srini_string\" ; } return loc0 ; }"
    },
    {
        "question_id": 1532,
        "intent": "Returns whether there may be some scenarios in which the robot does not function properly .",
        "snippet": "boolean function ( ) { return Platform . isWindows ( ) || Platform . isOSX ( ) ; }"
    },
    {
        "question_id": 1533,
        "intent": "If both parameters are null , returns true . If one parameter is null and the other is n't , returns false . Otherwise , returns o1.equals o2 .",
        "snippet": "boolean function ( Object arg0 , Object arg1 ) { if ( arg0 == null ) { return arg1 == null ; } if ( arg1 == null ) { return false ; } return ( arg0 . equals ( arg1 ) ) ; }"
    },
    {
        "question_id": 1534,
        "intent": "Returns an array of all of this bag 's elements .",
        "snippet": "Object [ ] function ( Object [ ] arg0 ) { return concodefunc_extractList ( ) . toArray ( arg0 ) ; }"
    },
    {
        "question_id": 1535,
        "intent": "Adds a listener for problem marker changes .",
        "snippet": "void function ( IProblemChangedListener arg0 ) { if ( concodeclass_fListeners . isEmpty ( ) ) { JavaPlugin . getWorkspace ( ) . addResourceChangeListener ( this ) ; JavaPlugin . getDefault ( ) . getCompilationUnitDocumentProvider ( ) . addGlobalAnnotationModelListener ( this ) ; } concodeclass_fListeners . add ( arg0 ) ; }"
    },
    {
        "question_id": 1536,
        "intent": "Starts the timeout thread if it is not currently running . Nothing happens if a thread is already running .",
        "snippet": "Timeout function ( long arg0 ) { Assert . assertTrue ( arg0 > 0 ) ; synchronized ( concodeclass_fMutex ) { switch ( concodeclass_fState ) { case concodeclass_STOPPED : concodefunc_startThread ( ) ; concodefunc_setNextTimeout ( arg0 ) ; break ; case concodeclass_IDLE : concodefunc_unhold ( ) ; concodefunc_setNextTimeout ( arg0 ) ; break ; default : break ; } return concodeclass_fCurrentTimeoutState ; } }"
    },
    {
        "question_id": 1537,
        "intent": "Registers the given tag library class name against the given namespace URI . The class will be loaded via the given ClassLoader This should be called before the parser is used .",
        "snippet": "void function ( String arg0 , String arg1 ) { if ( concodeclass_m_context != null ) concodeclass_m_context . registerTagLibrary ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 1538,
        "intent": "The result of running JUnit on type",
        "snippet": "PrintableResult function ( Class < ? > arg0 ) { return testResult ( Request . aClass ( arg0 ) ) ; }"
    },
    {
        "question_id": 1539,
        "intent": "Notification that the payment was canceled .",
        "snippet": "void function ( String arg0 ) { concodefunc_fireJavaScriptEvent ( \"srini_string\" , mpl . getPaymentResults ( \"srini_string\" , \"srini_string\" , \"srini_string\" ) ) ; }"
    },
    {
        "question_id": 1540,
        "intent": "Return true if debugging is enabled .",
        "snippet": "boolean function ( ) { return concodeclass_isDebugging ; }"
    },
    {
        "question_id": 1541,
        "intent": "Returns the execution data store with data for all loaded classes .",
        "snippet": "ExecutionDataStore function ( ) { return concodeclass_executionData ; }"
    },
    {
        "question_id": 1542,
        "intent": "Indicates whether the origin response indicated the associated resource had variants i.e. that the Vary header was set on the origin response .",
        "snippet": "boolean function ( ) { return concodefunc_getFirstHeader ( HeaderConstants . VARY ) != null ; }"
    },
    {
        "question_id": 1543,
        "intent": "Get an issue title for the phenotype with the name given .",
        "snippet": "String function ( String arg0 ) { return \"srini_string\" + arg0 ; }"
    },
    {
        "question_id": 1544,
        "intent": "Sets the currently used node factory .",
        "snippet": "void function ( final AbstractNodeFactory arg0 ) { concodeclass_nodeFactory = arg0 ; }"
    },
    {
        "question_id": 1545,
        "intent": "Sets entity content as a parameter list . This method is mutually exclusive with #setText String , #setBinary byte , #setStream java.io.InputStream , #setSerializable java.io.Serializable , #setFile java.io.File methods .",
        "snippet": "EntityBuilder function ( final NameValuePair ... arg0 ) { return setParameters ( Arrays . asList ( arg0 ) ) ; }"
    },
    {
        "question_id": 1546,
        "intent": "Returns the memory bin for the given URI for external use .",
        "snippet": "Bin function ( String arg0 ) { return concodeclass__binsByUri . get ( arg0 ) ; }"
    },
    {
        "question_id": 1547,
        "intent": "Sets the reconciling strategies for this composite strategy .",
        "snippet": "void function ( IReconcilingStrategy [ ] arg0 ) { concodeclass_fStrategies = arg0 ; }"
    },
    {
        "question_id": 1548,
        "intent": "Gets the value of the applications property . This accessor method returns a reference to the live list , not a snapshot . Therefore any modification you make to the returned list will be present inside the JAXB object . This is why there is not a set method for the applications property . For example , to add a new item , do as follows : getApplications . add newItem ; Objects of the following type s are allowed in the list Application",
        "snippet": "List < Application > function ( ) { if ( concodeclass_applications == null ) { concodeclass_applications = new ArrayList < Application > ( ) ; } return this . concodeclass_applications ; }"
    },
    {
        "question_id": 1549,
        "intent": "Move to the specified synchronization point , as returned by DataFileWriter #sync .",
        "snippet": "void function ( long arg0 ) { concodeclass_in . seek ( arg0 ) ; concodeclass_blockCount = 0 ; concodeclass_blockStart = arg0 ; concodeclass_vin = DecoderFactory . get ( ) . binaryDecoder ( concodeclass_in , concodeclass_vin ) ; }"
    },
    {
        "question_id": 1550,
        "intent": "Reads an unsigned Exp-Golomb-coded format integer .",
        "snippet": "int function ( ) { return concodefunc_readExpGolombCodeNum ( ) ; }"
    },
    {
        "question_id": 1551,
        "intent": "Compares this object with the specified object for ascending millisecond instant order . This ordering is inconsistent with equals , as it ignores the Chronology . All ReadableInstant instances are accepted .",
        "snippet": "int function ( ReadableInstant arg0 ) { if ( this == arg0 ) { return 0 ; } long loc0 = arg0 . getMillis ( ) ; long loc1 = getMillis ( ) ; if ( loc1 == loc0 ) { return 0 ; } if ( loc1 < loc0 ) { return - 1 ; } else { return 1 ; } }"
    },
    {
        "question_id": 1552,
        "intent": "Returns whether a java.awt.FileDialog misreports its screenlocation .",
        "snippet": "boolean function ( ) { return ( Platform . isOSX ( ) && Platform . JAVA_VERSION <= 0x1425 ) || ( Platform . isWindows ( ) && Platform . JAVA_VERSION <= Platform . JAVA_1_5 ) ; }"
    },
    {
        "question_id": 1553,
        "intent": "Returns the last sibling of ` a ' .",
        "snippet": "AST function ( AST arg0 ) { AST loc0 = null ; while ( arg0 != null ) { loc0 = arg0 ; arg0 = arg0 . getNextSibling ( ) ; } return loc0 ; }"
    },
    {
        "question_id": 1554,
        "intent": "Return the current amount of allocated memory that this Accountant is managing accounting for . Note this does not include reservation memory that has n't been allocated .",
        "snippet": "long function ( ) { return concodeclass_locallyHeldMemory . get ( ) ; }"
    },
    {
        "question_id": 1555,
        "intent": "Retrieve a PropertyMapping describing the given collection role .",
        "snippet": "PropertyMapping function ( String arg0 ) { return concodeclass_collectionPropertyMappingByRole . get ( arg0 ) ; }"
    },
    {
        "question_id": 1556,
        "intent": "Delegate method for JavaInformationProvider #getInformationPresenterControlCreator",
        "snippet": "IInformationControlCreator function ( ) { return new IInformationControlCreator ( ) { @ Override public IInformationControl createInformationControl ( Shell arg0 ) { return new DefaultInformationControl ( arg0 , true ) ; } } ; }"
    },
    {
        "question_id": 1557,
        "intent": "Release a port from the reference count , and update isDone if all is done .",
        "snippet": "boolean function ( int arg0 , LocalAssignment arg1 ) { PortNAssignment loc0 = new PortNAssignment ( arg0 , arg1 ) ; boolean loc1 = concodeclass__references . remove ( loc0 ) ; if ( loc1 && concodeclass__references . isEmpty ( ) ) { concodeclass__isDone = true ; } return loc1 ; }"
    },
    {
        "question_id": 1558,
        "intent": "Getter for property currentTextColor .",
        "snippet": "BaseColor function ( ) { return concodeclass_currentTextColor ; }"
    },
    {
        "question_id": 1559,
        "intent": "Returns cpi resources which reference consume a given ppi resource",
        "snippet": "List < ResourceEntity > function ( ResourceEntity arg0 ) { if ( arg0 . getId ( ) != null ) { return concodeclass_entityManager . createQuery ( \"srini_string\" , ResourceEntity . class ) . setParameter ( \"srini_string\" , arg0 . getSoftlinkId ( ) ) . getResultList ( ) ; } return Collections . emptyList ( ) ; }"
    },
    {
        "question_id": 1560,
        "intent": "Reads data lookup quality information from the given file .",
        "snippet": "void function ( final String arg0 ) { concodeclass_dataQuality = new HashMap < Integer , DataLookupQuality > ( ) ; FileReader loc0 = new FileReader ( arg0 ) ; BufferedReader loc1 = new BufferedReader ( loc0 ) ; String loc2 = null ; DataLookupQuality loc3 ; loc1 . readLine ( ) ; while ( ( loc2 = loc1 . readLine ( ) ) != null ) { loc3 = DataLookupQuality . fromString ( loc2 ) ; } }"
    },
    {
        "question_id": 1561,
        "intent": "Returns the serialized payload of the request in this RPC . Will only be generated from a Requestor and will not include handshake or meta-data . If the request payload has not been set yet , returns null .",
        "snippet": "List < ByteBuffer > function ( ) { return this . concodeclass_requestPayload ; }"
    },
    {
        "question_id": 1562,
        "intent": "Create and return a RemoteBuildr instance .",
        "snippet": "RemoteBuildr function ( ) { return new RemoteBuildr ( ) ; }"
    },
    {
        "question_id": 1563,
        "intent": "Removes all the elements from this collection that are returned by iterable .",
        "snippet": "void function ( Iterable4 arg0 ) { removeAll ( arg0 . iterator ( ) ) ; }"
    },
    {
        "question_id": 1564,
        "intent": "Test that stopping the hibernate-osgi bundle happens cleanly . TODO : This will be really simplistic at first , but should be expanded upon .",
        "snippet": "void function ( ) { concodefunc_commonTests ( ) ; concodefunc_findHibernateBundle ( \"srini_string\" ) . stop ( ) ; concodefunc_testHibernateBundle ( \"srini_string\" , Bundle . RESOLVED ) ; assertNull ( concodeclass_context . getServiceReference ( OsgiSessionFactoryService . class ) ) ; assertNull ( concodeclass_context . getServiceReference ( OsgiPersistenceProviderService . class ) ) ; }"
    },
    {
        "question_id": 1565,
        "intent": "Called when a Chunk with a generic tag is written . It is useful to pinpoint the Chunk location to generate bookmarks , for example .",
        "snippet": "void function ( PdfWriter arg0 , Document arg1 , Rectangle arg2 , String arg3 ) { }"
    },
    {
        "question_id": 1566,
        "intent": "Returns the artifact type .",
        "snippet": "String function ( ) { return concodeclass_m_type ; }"
    },
    {
        "question_id": 1567,
        "intent": "Returns a scanner which is configured to scan Java multi-line comments .",
        "snippet": "RuleBasedScanner function ( ) { return concodeclass_fMultilineCommentScanner ; }"
    },
    {
        "question_id": 1568,
        "intent": "Returns the number of hits that match the given query .",
        "snippet": "int function ( ) { return concodeclass_numberOfHits ; }"
    },
    {
        "question_id": 1569,
        "intent": "Check to see if the given item is in an array .",
        "snippet": "boolean function ( int arg0 , int [ ] arg1 ) { for ( int loc0 = 0 ; loc0 < arg1 . length ; ++ loc0 ) { if ( arg1 [ loc0 ] == arg0 ) return true ; } return false ; }"
    },
    {
        "question_id": 1570,
        "intent": "Get a list of nodes that have no outbound edges .",
        "snippet": "Collection < V > function ( ) { return concodefunc_convert ( concodefunc_getInternalLeafNodes ( ) ) ; }"
    },
    {
        "question_id": 1571,
        "intent": "Remove a value from the map",
        "snippet": "T function ( S arg0 , S arg1 ) { Map < S , T > loc0 ; if ( ( loc0 = concodeclass_values . get ( arg0 ) ) != null ) { if ( loc0 . containsKey ( arg1 ) ) return loc0 . remove ( arg1 ) ; } return null ; }"
    },
    {
        "question_id": 1572,
        "intent": "Sets the error messages directly from a Reader .",
        "snippet": "void function ( Reader arg0 ) { concodeclass_currentLanguage = concodefunc_readLanguageStream ( arg0 ) ; }"
    },
    {
        "question_id": 1573,
        "intent": "Getter for property backgroundMode .",
        "snippet": "int function ( ) { return concodeclass_backgroundMode ; }"
    },
    {
        "question_id": 1574,
        "intent": "Return the directory into which we put our self-extracted native libraries and make sure it exists .",
        "snippet": "File function ( Context arg0 ) { File loc0 = concodefunc_getLibsDirectory ( arg0 ) ; if ( ! loc0 . isDirectory ( ) && ! loc0 . mkdirs ( ) ) { throw new RuntimeException ( \"srini_string\" ) ; } return loc0 ; }"
    },
    {
        "question_id": 1575,
        "intent": "Returns the number of values = v.",
        "snippet": "long function ( Object arg0 ) { if ( arg0 instanceof Integer ) { return getCount ( ( ( Integer ) arg0 ) . longValue ( ) ) ; } long loc0 = 0 ; try { Long loc1 = ( Long ) concodeclass_freqTable . get ( arg0 ) ; if ( loc1 != null ) { loc0 = loc1 . longValue ( ) ; } } catch ( ClassCastException loc1 ) { } return loc0 ; }"
    },
    {
        "question_id": 1576,
        "intent": "writes a buffer to the seeked address",
        "snippet": "void function ( byte [ ] arg0 ) { write ( arg0 , arg0 . length ) ; }"
    },
    {
        "question_id": 1577,
        "intent": "Scalar product of vector of polynomials with polynomial .",
        "snippet": "List < GenPolynomial < C >> function ( List < GenPolynomial < C >> arg0 , GenPolynomial < C > arg1 ) { List < GenPolynomial < C >> loc0 = new ArrayList < GenPolynomial < C >> ( arg0 . size ( ) ) ; for ( GenPolynomial < C > loc1 : arg0 ) { if ( loc1 != null ) { loc1 = loc1 . multiply ( arg1 ) ; } loc0 . add ( loc1 ) ; } return loc0 ; }"
    },
    {
        "question_id": 1578,
        "intent": "Return a library that loads the structure-only from code.jquery.com",
        "snippet": "JQueryLibrary function ( String arg0 ) { return new JQueryLibrary ( concodeclass_BASE_RESOURCE_URL + \"srini_string\" + arg0 + \"srini_string\" + arg0 + \"srini_string\" ) ; }"
    },
    {
        "question_id": 1579,
        "intent": "Returns 0-15 15/16 times . Returns 0-255 255/256 times . Returns 0-4095 4095/4096 times . Returns 0-65535 every time .",
        "snippet": "int function ( Random arg0 ) { int loc0 = arg0 . nextInt ( ) ; if ( loc0 < 0 ) loc0 = - loc0 ; return loc0 & ( ( loc0 & 0xF0000 ) != 0 ? 0xF : ( ( loc0 & 0xFF0000 ) != 0 ? 0xFF : ( ( loc0 & 0xFFF0000 ) != 0 ? 0xFFF : 0xFFFF ) ) ) ; }"
    },
    {
        "question_id": 1580,
        "intent": "Called once before initial sorting starts the first time . Note : As of 3.8 a completion proposal computer can request that proposals are resorted . If such a computer is active , then this method will not be called . Clients may override , the default implementation does nothing .",
        "snippet": "void function ( ContentAssistInvocationContext arg0 ) { }"
    },
    {
        "question_id": 1581,
        "intent": "Returns true if the experiment has aditional values .",
        "snippet": "boolean function ( ) { return SwitchBoard . hasExperimentValues ( concodeclass_context , concodeclass_experimentName ) ; }"
    },
    {
        "question_id": 1582,
        "intent": "Opens the given url in the browser as choosen in the preferences .",
        "snippet": "void function ( final URL arg0 , Display arg1 ) { arg1 . syncExec ( new Runnable ( ) { @ Override public void run ( ) { concodefunc_internalOpen ( arg0 , false ) ; } } ) ; }"
    },
    {
        "question_id": 1583,
        "intent": "transfers from right to left",
        "snippet": "byte [ ] function ( byte [ ] arg0 , byte [ ] arg1 ) { return ArrayTool . transferValues ( arg0 , arg1 , 0 , arg1 . length ) ; }"
    },
    {
        "question_id": 1584,
        "intent": "Setter for the font provider",
        "snippet": "void function ( final FontProvider arg0 ) { this . concodeclass_provider = arg0 ; }"
    },
    {
        "question_id": 1585,
        "intent": "Creates a criterion using the > operator",
        "snippet": "Criteria function ( Object arg0 ) { this . concodeclass_criteriaType = RelationalOperator . GT ; this . concodeclass_right = ValueNode . toValueNode ( arg0 ) ; return this ; }"
    },
    {
        "question_id": 1586,
        "intent": "Only exposed so that Script may invoke it on load from disk .",
        "snippet": "void function ( Map arg0 ) { Log . debug ( \"srini_string\" + getClass ( ) ) ; concodeclass_description = ( String ) arg0 . get ( TAG_DESC ) ; }"
    },
    {
        "question_id": 1587,
        "intent": "Assertion which requires list of one element as a result of indefinite path search .",
        "snippet": "void function ( final String arg0 , final String arg1 , Configuration arg2 ) { concodefunc_assertHasResults ( arg0 , arg1 , 1 , arg2 ) ; }"
    },
    {
        "question_id": 1588,
        "intent": "Sets the suffix of the output file including the file extension . The file name will be constructed by appending the prefix , some configuration and version information , and the suffix . If that file already exists , it will be overwritten . If not , it will be created . If the path does not exist , it is attempted to create it as well . A new file is created only if none has been opened by this Analyzer before . If one file is still open from an earlier Analyzer run , it will be used . The output file is constructed with this prefix only if #setOutputFile String has never been called before setting thecomplete output file path disables prefix/suffix settings . The contents of this output file is aimed at supporting in-depth analysis of the measurement results . It is not the same as the contents written onto the Writer passed to #stop Writer as that contents isintended to be displayed after the simulation run . Calls to this method are ignored if this Analyzer has already been started .",
        "snippet": "void function ( final String arg0 ) { if ( ! concodeclass_started ) { concodeclass_fileSuffix = arg0 ; } }"
    },
    {
        "question_id": 1589,
        "intent": "Returns a boolean indicating whether the subpath is degenerate or not . A degenerate subpath is the subpath consisting of a single-point closed path or of two or more points at the same coordinates .",
        "snippet": "boolean function ( ) { if ( concodeclass_segments . size ( ) > 0 && concodeclass_closed ) { return false ; } for ( Shape loc0 : concodeclass_segments ) { Set < Point2D > loc1 = new HashSet < Point2D > ( loc0 . getBasePoints ( ) ) ; if ( loc1 . size ( ) != 1 ) { return false ; } } return concodeclass_segments . size ( ) > 0 || concodeclass_closed ; }"
    },
    {
        "question_id": 1590,
        "intent": "Gets the first codec which can decode the specified format .",
        "snippet": "Codec function ( Format arg0 ) { return concodefunc_getCodec ( arg0 , null ) ; }"
    },
    {
        "question_id": 1591,
        "intent": "Get the index into the local variable array .",
        "snippet": "int function ( ) { return concodeclass_index ; }"
    },
    {
        "question_id": 1592,
        "intent": "Returns the number of expressions on the stack .",
        "snippet": "int function ( ) { return concodeclass_stack . size ( ) ; }"
    },
    {
        "question_id": 1593,
        "intent": "Verifies if Div is a stack owner . Should be true .",
        "snippet": "void function ( ) { Assert . assertTrue ( concodeclass_d . isStackOwner ( ) ) ; }"
    },
    {
        "question_id": 1594,
        "intent": "Normally , the propagation of messages through channels and routers of the Internet is affected by the propagation delays of the physical media , and the processing - , queuing - , and transmission delays of the routers . The so called Internet propagation delay is modeled as the sum of a fixed part that combines the aforementioned router and propagation delays , and a variable part to reproduce the jitter . Invoking this method returns the Internet propagation delay in ms between two hosts in the Internet . Note that this delay is derived from measurement data , and it therefore estimates the one-way delay of the measured round-trip-times between the specified hosts .",
        "snippet": "double function ( NetID arg0 , NetID arg1 ) { NetLayer loc0 = concodeclass_subnet . getNetLayer ( arg0 ) ; NetLayer loc1 = concodeclass_subnet . getNetLayer ( arg1 ) ; return concodeclass_lm . getPropagationDelay ( ( GnpNetLayer ) loc0 , ( GnpNetLayer ) loc1 ) / ( double ) Simulator . MILLISECOND_UNIT ; }"
    },
    {
        "question_id": 1595,
        "intent": "Create a widget not found match result .",
        "snippet": "MatchResult function ( ) { return new MatchResult ( concodeclass_WIDGET_NOT_FOUND ) ; }"
    },
    {
        "question_id": 1596,
        "intent": "Returns an unmodifiable view of the given bag . Any modification attempts to the returned bag will raise an UnsupportedOperationException .",
        "snippet": "Bag function ( Bag arg0 ) { return UnmodifiableBag . decorate ( arg0 ) ; }"
    },
    {
        "question_id": 1597,
        "intent": "Empty payload object has no syncID or storageVersion and should call freshStart .",
        "snippet": "void function ( ) { MockServer loc0 = new MockServer ( 200 , TestMetaGlobal . TEST_META_GLOBAL_EMPTY_PAYLOAD_RESPONSE ) ; concodefunc_doSession ( loc0 ) ; assertTrue ( concodeclass_calledFreshStart ) ; }"
    },
    {
        "question_id": 1598,
        "intent": "Verify if the thief uses the provided stealing method",
        "snippet": "void function ( ) { final StealingMethod loc0 = mock ( StealingMethod . class ) ; final HalflingThief loc1 = new HalflingThief ( loc0 ) ; loc1 . steal ( ) ; verify ( loc0 ) . steal ( ) ; verifyNoMoreInteractions ( loc0 ) ; }"
    },
    {
        "question_id": 1599,
        "intent": "Checks if given port is open on ` localhost '",
        "snippet": "boolean function ( Integer arg0 ) { Socket loc0 = new Socket ( ) ; boolean loc1 = false ; int loc2 = 0 ; boolean loc3 = false ; while ( loc3 = concodefunc_tryToConnect ( loc0 , arg0 ) && loc2 < 10 ) { loc1 = loc3 ; concodefunc_tryToClose ( loc0 ) ; loc2 ++ ; loc0 = new Socket ( ) ; } return loc1 ; }"
    },
    {
        "question_id": 1600,
        "intent": "Like #assign AutoCloseable , except that any exception thrown by closing the previously held pointer is wrapped with an unchecked RuntimeException .",
        "snippet": "void function ( final T arg0 ) { try { concodefunc_assign ( arg0 ) ; } catch ( final Exception loc0 ) { throw new RuntimeException ( loc0 ) ; } }"
    },
    {
        "question_id": 1601,
        "intent": "Gets the position back",
        "snippet": "Point function ( ) { return concodeclass_position ; }"
    },
    {
        "question_id": 1602,
        "intent": "Answers the UIContext . Notice this is acting as a context factory .",
        "snippet": "IUIContext function ( ) { if ( concodeclass__ui == null ) concodeclass__ui = concodefunc_createUI ( ) ; return concodeclass__ui ; }"
    },
    {
        "question_id": 1603,
        "intent": "Returns the position of the first digit in the trailing number of the given string or -1 if the string does not end with number Example : Alice has got a cat 12 - will return 20 the position of ' 1 ' Alice has got a black cat - will return -1 no trailing number in the string",
        "snippet": "int function ( String arg0 ) { int loc0 ; for ( loc0 = arg0 . length ( ) - 1 ; loc0 >= 0 ; loc0 -- ) { char loc1 = arg0 . charAt ( loc0 ) ; if ( ! Character . isDigit ( loc1 ) ) { break ; } } if ( loc0 == arg0 . length ( ) - 1 ) { return - 1 ; } return loc0 + 1 ; }"
    },
    {
        "question_id": 1604,
        "intent": "Calculate the SRP verifier v value .",
        "snippet": "BigInteger function ( byte [ ] arg0 , byte [ ] arg1 , byte [ ] arg2 , BigInteger arg3 , BigInteger arg4 ) { BigInteger loc0 = concodefunc_srpVerifierLowercaseX ( arg0 , arg1 , arg2 ) ; BigInteger loc1 = arg3 . modPow ( loc0 , arg4 ) ; return loc1 ; }"
    },
    {
        "question_id": 1605,
        "intent": "Method to get exception details",
        "snippet": "String function ( Throwable arg0 ) { return ( arg0 . getCause ( ) != null ) ? arg0 . getCause ( ) . getMessage ( ) : arg0 . getMessage ( ) ; }"
    },
    {
        "question_id": 1606,
        "intent": "Sets the value of the machineInterpretationKey property .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_machineInterpretationKey = arg0 ; }"
    },
    {
        "question_id": 1607,
        "intent": "Checks if a CharSequence is empty '' '' or null . StringUtils.isEmpty null = true StringUtils.isEmpty '' '' = true StringUtils.isEmpty '' '' = false StringUtils.isEmpty `` bob '' = false StringUtils.isEmpty '' bob '' = false NOTE : This method changed in Lang version 2.0 . It no longer trims the CharSequence . That functionality is available in isBlank .",
        "snippet": "boolean function ( CharSequence arg0 ) { return arg0 == null || arg0 . length ( ) == 0 ; }"
    },
    {
        "question_id": 1608,
        "intent": "Gets Date value form cursor for column index .",
        "snippet": "Date function ( @ NonNull Cursor arg0 , int arg1 ) { if ( arg0 . isNull ( arg1 ) ) { return null ; } return new Date ( arg0 . getLong ( arg1 ) ) ; }"
    },
    {
        "question_id": 1609,
        "intent": "Sets the invoked .",
        "snippet": "void function ( boolean arg0 ) { this . concodeclass_invoked = arg0 ; }"
    },
    {
        "question_id": 1610,
        "intent": "Returns the character used for escaping values where the field delimiter is part of the value . Defaults to ' '' '",
        "snippet": "byte function ( ) { return concodeclass_quote ; }"
    },
    {
        "question_id": 1611,
        "intent": "For use by subclasses when an error is encountered during parsing . Should only be used by the XML parsing ctors .",
        "snippet": "void function ( Throwable arg0 ) { if ( concodeclass_invalidScriptError != null ) concodeclass_invalidScriptError = arg0 ; else Log . warn ( \"srini_string\" + arg0 ) ; }"
    },
    {
        "question_id": 1612,
        "intent": "Returns all the headers that were on the origin response .",
        "snippet": "Header [ ] function ( ) { return concodeclass_responseHeaders . getAllHeaders ( ) ; }"
    },
    {
        "question_id": 1613,
        "intent": "Gets the error that was thrown during RPC execution . Does not block . Either #get or #get long , TimeUnit should be called first because these methods block until the RPC has completed .",
        "snippet": "Throwable function ( ) { return concodeclass_error ; }"
    },
    {
        "question_id": 1614,
        "intent": "Called when the document is opened .",
        "snippet": "void function ( PdfWriter arg0 , Document arg1 ) { for ( PdfPageEvent loc0 : concodeclass_events ) { loc0 . onOpenDocument ( arg0 , arg1 ) ; } }"
    },
    {
        "question_id": 1615,
        "intent": "Removes the softlinkrelation of a cpi resource .",
        "snippet": "void function ( ResourceEntity arg0 ) { List < SoftlinkRelationEntity > loc0 = concodefunc_getSoftlinksForCpi ( arg0 ) ; arg0 . clearSoftlinkRelations ( ) ; for ( SoftlinkRelationEntity loc1 : loc0 ) { concodeclass_entityManager . remove ( loc1 ) ; } }"
    },
    {
        "question_id": 1616,
        "intent": "Constructor that takes already-interned arguments .",
        "snippet": "ValueTuple function ( Object [ ] arg0 , int [ ] arg1 ) { return new ValueTuple ( arg0 , arg1 , true ) ; }"
    },
    {
        "question_id": 1617,
        "intent": "Returns a list of all loaded frequency adjusters of the function",
        "snippet": "List < FrequencyAdjuster > function ( ) { return this . concodeclass_frequencyAdjusters ; }"
    },
    {
        "question_id": 1618,
        "intent": "Returns true if the arguments form a strictly increasing sequence",
        "snippet": "boolean function ( double arg0 , double arg1 , double arg2 ) { return ( arg0 < arg1 ) && ( arg1 < arg2 ) ; }"
    },
    {
        "question_id": 1619,
        "intent": "Create an instance of Getcontentlanguage",
        "snippet": "Getcontentlanguage function ( ) { return new Getcontentlanguage ( ) ; }"
    },
    {
        "question_id": 1620,
        "intent": "Gets the view at given path in the UI hierarchy , ignoring modals .",
        "snippet": "T function ( ViewGroup arg0 , int ... arg1 ) { ViewGroup loc0 = arg0 ; View loc1 = loc0 . getChildAt ( 0 ) ; for ( int loc2 = 0 ; loc2 < arg1 . length ; loc2 ++ ) { loc1 = ( ( ViewGroup ) loc1 ) . getChildAt ( arg1 [ loc2 ] ) ; } return ( T ) loc1 ; }"
    },
    {
        "question_id": 1621,
        "intent": "isValidNode returns true if this node is valid ; false otherwise . By default , an invalid node is one that does n't belong to a list myList is null , but subclasses can override this definition .",
        "snippet": "boolean function ( ) { return concodeclass_myList != null ; }"
    },
    {
        "question_id": 1622,
        "intent": "Uses heuristics to deduce the proper Type given a string naming the type or Java class . The search goes as follows : search for a basic type with ` typeName ' as a registration key look for ` typeName ' as a class name and if it names a Type implementor , return an instanceif it names a CompositeUserType or a UserType , return an instance of class wrapped intot the appropriate Type adapterif it implements Lifecycle , return the corresponding entity type if it implements Serializable , return the corresponding serializable type",
        "snippet": "Type function ( String arg0 , Properties arg1 ) { Type loc0 = concodefunc_basic ( arg0 ) ; if ( loc0 != null ) { return loc0 ; } try { Class loc1 = ReflectHelper . classForName ( arg0 ) ; if ( loc1 != null ) { return concodeclass_typeFactory . byClass ( loc1 , arg1 ) ; } } catch ( ClassNotFoundException loc1 ) { } return null ; }"
    },
    {
        "question_id": 1623,
        "intent": "invokes the close method",
        "snippet": "void function ( ) { concodefunc_close ( ) ; super . finalize ( ) ; }"
    },
    {
        "question_id": 1624,
        "intent": "Return solutionGrid",
        "snippet": "Grid function ( ) { return concodeclass_solutionGrid ; }"
    },
    {
        "question_id": 1625,
        "intent": "Emits the beginning of the open tag . This method has to be called before other other methods are called on this element .",
        "snippet": "void function ( ) { concodeclass_writer . write ( concodeclass_LT ) ; concodeclass_writer . write ( concodeclass_name ) ; }"
    },
    {
        "question_id": 1626,
        "intent": "Returns whether the group is enabled or not .",
        "snippet": "boolean function ( ) { return concodeclass_fIsEnabled ; }"
    },
    {
        "question_id": 1627,
        "intent": "Creates a new selection from the given start and length .",
        "snippet": "Selection function ( int arg0 , int arg1 ) { Assert . isTrue ( arg0 >= 0 && arg1 >= 0 ) ; Selection loc0 = new Selection ( ) ; loc0 . fStart = arg0 ; loc0 . fLength = arg1 ; loc0 . fExclusiveEnd = arg0 + arg1 ; return loc0 ; }"
    },
    {
        "question_id": 1628,
        "intent": "Get padata type .",
        "snippet": "PaDataType [ ] function ( ) { return concodeclass_pluginMeta . getPaTypes ( ) ; }"
    },
    {
        "question_id": 1629,
        "intent": "Gets the index of the specified field , or -1 if the field is unsupported .",
        "snippet": "int function ( DateTimeFieldType arg0 ) { for ( int loc0 = 0 , loc1 = size ( ) ; loc0 < loc1 ; loc0 ++ ) { if ( concodefunc_getFieldType ( loc0 ) == arg0 ) { return loc0 ; } } return - 1 ; }"
    },
    {
        "question_id": 1630,
        "intent": "Returns a copy of the interpolating polynomials array . Returns a fresh copy of the array . Changes made to the copy will not affect the polynomials property .",
        "snippet": "PolynomialFunction [ ] function ( ) { PolynomialFunction loc0 [ ] = new PolynomialFunction [ concodeclass_n ] ; System . arraycopy ( polynomials , 0 , loc0 , 0 , concodeclass_n ) ; return loc0 ; }"
    },
    {
        "question_id": 1631,
        "intent": "Return the color of this player",
        "snippet": "Color function ( ) { return concodeclass_playerColor ; }"
    },
    {
        "question_id": 1632,
        "intent": "Removes any components sequences added so far , except for seed sequences , which are preserved .",
        "snippet": "void function ( ) { concodeclass_gralComponents . clear ( ) ; concodeclass_gralComponents . addAll ( this . concodeclass_gralSeeds ) ; }"
    },
    {
        "question_id": 1633,
        "intent": "Sets the flow control mode for this port . Note : This method only supports modes different from XON XOFF , because for this mode additional parameters are needed . In order to set XON XOFF mode use #setFlowControl FlowControl , char , char instead .",
        "snippet": "void function ( FlowControl arg0 ) { if ( arg0 == FlowControl . XON_XOFF ) throw new IllegalArgumentException ( Localizer . getLocalizedMessage ( Port . class , \"srini_string\" ) ) ; setFlowControl ( concodeclass_device . getHandle ( ) , arg0 . value , ( char ) 0 , ( char ) 0 ) ; }"
    },
    {
        "question_id": 1634,
        "intent": "Sort the results by the property in ascending order",
        "snippet": "AuditOrder concodefunc_function ( ) { return new PropertyAuditOrder ( concodeclass_propertyNameGetter , true ) ; }"
    },
    {
        "question_id": 1635,
        "intent": "It is not possible to remove a watcher ... so we just set the tracker in destroyed mode which will simply ignore all subsequent event .",
        "snippet": "void function ( ) { synchronized ( concodeclass__lock ) { concodeclass__destroyed = true ; } }"
    },
    {
        "question_id": 1636,
        "intent": "Get useCriterion3 .",
        "snippet": "boolean function ( ) { return this . concodeclass_useCriterion3 ; }"
    },
    {
        "question_id": 1637,
        "intent": "compare two object About result if v1 > v2 , return 1 if v1 = v2 , return 0 if v1 About rule if v1 is null , v2 is null , then return 0 if v1 is null , v2 is not null , then return -1 if v1 is not null , v2 is null , then return 1 return v1 . Comparable #compareTo Object",
        "snippet": "int function ( V arg0 , V arg1 ) { return arg0 == null ? ( arg1 == null ? 0 : - 1 ) : ( arg1 == null ? 1 : ( ( Comparable ) arg0 ) . compareTo ( arg1 ) ) ; }"
    },
    {
        "question_id": 1638,
        "intent": "Throw an invalid script exception describing the proper script usage . This should be used by derived classes whenever parsing indicates invalid input .",
        "snippet": "void function ( ) { usage ( null ) ; }"
    },
    {
        "question_id": 1639,
        "intent": "Override the default screen capture strategy with a user-defined one .",
        "snippet": "void function ( IScreenCaptureHandler arg0 ) { ScreenCapture . arg0 = arg0 ; }"
    },
    {
        "question_id": 1640,
        "intent": "Obtains default SSL socket factory with an SSL context based on the standard JSSE trust material cacerts file in the security properties directory . System properties are not taken into consideration .",
        "snippet": "SSLConnectionSocketFactory function ( ) { return new SSLConnectionSocketFactory ( SSLContexts . createDefault ( ) , concodeclass_BROWSER_COMPATIBLE_HOSTNAME_VERIFIER ) ; }"
    },
    {
        "question_id": 1641,
        "intent": "Determine suitable proxy for gcd algorithms , case BigRational .",
        "snippet": "GreatestCommonDivisor < BigRational > function ( BigRational arg0 ) { GreatestCommonDivisorAbstract < BigRational > loc0 , loc1 ; return concodefunc_getImplementation ( arg0 ) ; }"
    },
    {
        "question_id": 1642,
        "intent": "NOTE : it is callers responsibility to validate post exec .",
        "snippet": "void function ( ) { run ( WorkbenchFinder . getActiveWindow ( ) ) ; }"
    },
    {
        "question_id": 1643,
        "intent": "Evaluates the predicate returning false if any stored predicate returns false .",
        "snippet": "boolean function ( Object arg0 ) { for ( int loc0 = 0 ; loc0 < concodeclass_iPredicates . length ; loc0 ++ ) { if ( concodeclass_iPredicates [ loc0 ] . evaluate ( arg0 ) ) { return false ; } } return true ; }"
    },
    {
        "question_id": 1644,
        "intent": "Returns an unmodifiable buffer backed by the given buffer .",
        "snippet": "Buffer function ( Buffer arg0 ) { return UnmodifiableBuffer . decorate ( arg0 ) ; }"
    },
    {
        "question_id": 1645,
        "intent": "Return the name of the Command that we will look up anddelegate execution to .",
        "snippet": "String function ( ) { return ( this . concodeclass_name ) ; }"
    },
    {
        "question_id": 1646,
        "intent": "Returns a RealMatrix whose entries are the the values in thethe input array . The input array is copied , not referenced .",
        "snippet": "RealMatrix function ( double [ ] [ ] arg0 ) { return new RealMatrixImpl ( arg0 ) ; }"
    },
    {
        "question_id": 1647,
        "intent": "Called when the Javadoc ANT script is generated .",
        "snippet": "void function ( Element arg0 ) { }"
    },
    {
        "question_id": 1648,
        "intent": "Return the count of records in the buffer . Used for task input only .",
        "snippet": "int function ( ) { return concodeclass_count ; }"
    },
    {
        "question_id": 1649,
        "intent": "Inserts a symbol map into the set of available symbol maps , keyed by resource URL .",
        "snippet": "void function ( String arg0 , JsSymbolMap arg1 ) { concodeclass_resourceSymbols . put ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 1650,
        "intent": "Track the passed Persistence units for the application",
        "snippet": "void function ( PersistenceUnitMetadataHolder arg0 ) { concodeclass_persistenceUnitMetadataHolderList . add ( arg0 ) ; }"
    },
    {
        "question_id": 1651,
        "intent": "Prints the AST in ` ASCII art ' form to the specified print stream .",
        "snippet": "void function ( AST arg0 , PrintStream arg1 ) { showAst ( arg0 , new PrintWriter ( arg1 ) ) ; }"
    },
    {
        "question_id": 1652,
        "intent": "This method returns the value of the database column SYS_IP_AREA . COMPANY",
        "snippet": "String function ( ) { return concodeclass_company ; }"
    },
    {
        "question_id": 1653,
        "intent": "Is the ISelectionempty or null ?",
        "snippet": "boolean function ( ISelection arg0 ) { if ( ( arg0 == null ) || ( arg0 . isEmpty ( ) ) ) { return true ; } else { return false ; } }"
    },
    {
        "question_id": 1654,
        "intent": "Add a resolver at the end of the underlying resolver list . The resolver added by this method is at lower priority than any other existing resolvers .",
        "snippet": "void function ( DialectResolver arg0 ) { concodeclass_resolvers . add ( arg0 ) ; }"
    },
    {
        "question_id": 1655,
        "intent": "Clear the update-timestamps data .",
        "snippet": "void function ( ) { concodeclass_region . evictAll ( ) ; }"
    },
    {
        "question_id": 1656,
        "intent": "This method returns the value of the database column SYS_IP_AREA . START_IP",
        "snippet": "Long function ( ) { return concodeclass_startIp ; }"
    },
    {
        "question_id": 1657,
        "intent": "Add a single element to the list of elements .",
        "snippet": "void function ( final Element arg0 ) { concodeclass_list . add ( arg0 ) ; }"
    },
    {
        "question_id": 1658,
        "intent": "Returns the number of values for each vertex in the vertex buffer layout .",
        "snippet": "int function ( ) { return 4 ; }"
    },
    {
        "question_id": 1659,
        "intent": "Gets the StatementReplacer for the replace statements in the file parsed .",
        "snippet": "StatementReplacer function ( ) { return concodeclass_statementReplacer ; }"
    },
    {
        "question_id": 1660,
        "intent": "Build a properly sized map , especially handling load size and load factor to prevent immediate resizing . Especially helpful for copy map contents .",
        "snippet": "Map < K , V > function ( int arg0 ) { return new HashMap < K , V > ( concodefunc_determineProperSizing ( arg0 ) , concodeclass_LOAD_FACTOR ) ; }"
    },
    {
        "question_id": 1661,
        "intent": "Liefert das Signal , mit dem die letzte ' 1 ' codiert wurde .",
        "snippet": "char function ( ) { return this . concodeclass_last ; }"
    },
    {
        "question_id": 1662,
        "intent": "Returns delegate reflector",
        "snippet": "Reflector function ( ) { return concodeclass__delegate ; }"
    },
    {
        "question_id": 1663,
        "intent": "Creates this element in domain model and also creates other resources if needed e.g. external files",
        "snippet": "void function ( CLIWrapper arg0 ) { throw new IllegalStateException ( \"srini_string\" ) ; }"
    },
    {
        "question_id": 1664,
        "intent": "Gets the task ids allocated for the given component id . The task ids are always returned in ascending order .",
        "snippet": "List < Integer > function ( String arg0 ) { List < Integer > loc0 = concodeclass__componentToTasks . get ( arg0 ) ; if ( loc0 == null ) return new ArrayList < > ( ) ; else return new ArrayList < > ( loc0 ) ; }"
    },
    {
        "question_id": 1665,
        "intent": "Updates the given bean in the database SQL UPDATE",
        "snippet": "int function ( T arg0 ) { JdbcTemplate loc0 = concodefunc_getJdbcTemplate ( ) ; int loc1 = loc0 . update ( concodefunc_getSqlUpdate ( ) , concodefunc_getValuesForUpdate ( arg0 ) ) ; if ( loc1 != 0 && loc1 != 1 ) { throw new RuntimeException ( \"srini_string\" + loc1 + \"srini_string\" ) ; } return loc1 ; }"
    },
    {
        "question_id": 1666,
        "intent": "Test 0-argument commands",
        "snippet": "void function ( ) { final String loc0 = \"srini_string\" ; concodefunc_parseAndAssertCommandType ( loc0 , HelpCommand . class ) ; }"
    },
    {
        "question_id": 1667,
        "intent": "rotates the camera around the yaw axis",
        "snippet": "void function ( double arg0 ) { VectorXYZ loc0 = concodeclass_lookAt . subtract ( concodeclass_pos ) ; VectorXYZ loc1 = loc0 . rotateVec ( arg0 , concodeclass_up ) ; concodeclass_lookAt = concodeclass_pos . add ( loc1 ) ; }"
    },
    {
        "question_id": 1668,
        "intent": "Attempt to retrieve an object from the cache .",
        "snippet": "Object function ( Object arg0 , long arg1 ) { if ( ! concodeclass_region . checkValid ( ) ) { return null ; } final Object loc0 = concodeclass_cache . get ( arg0 ) ; if ( loc0 == null ) { concodeclass_putValidator . registerPendingPut ( arg0 ) ; } return loc0 ; }"
    },
    {
        "question_id": 1669,
        "intent": "Sets the location of the guide",
        "snippet": "void function ( int arg0 ) { if ( concodeclass_position != arg0 ) { int loc0 = concodeclass_position ; concodeclass_position = arg0 ; concodeclass_listeners . firePropertyChange ( concodeclass_PROPERTY_POSITION , new Integer ( loc0 ) , new Integer ( concodeclass_position ) ) ; } }"
    },
    {
        "question_id": 1670,
        "intent": "Intended for AErrorBarPolicyConfigurable only .",
        "snippet": "void function ( final int arg0 ) { this . concodeclass_m_positiveYErrorPixel = arg0 ; }"
    },
    {
        "question_id": 1671,
        "intent": "Converts the collected terms and values to a string . Does not write to the parent writer .",
        "snippet": "String function ( ) { final StringBuilder loc0 = new StringBuilder ( \"srini_string\" ) ; for ( Ord < Pair < String , Object >> loc1 : Ord . zip ( concodeclass_values ) ) { if ( loc1 . i > 0 ) { loc0 . append ( \"srini_string\" ) ; } loc0 . append ( loc1 . e . left ) . append ( \"srini_string\" ) . append ( loc1 . e . right ) . append ( \"srini_string\" ) ; } loc0 . append ( \"srini_string\" ) ; return loc0 . toString ( ) ; }"
    },
    {
        "question_id": 1672,
        "intent": "Get the widget finder that is doing the heavy lifting .",
        "snippet": "WidgetFinderService function ( Display arg0 ) { if ( concodeclass__finderService == null ) concodeclass__finderService = new WidgetFinderService ( arg0 ) ; return concodeclass__finderService ; }"
    },
    {
        "question_id": 1673,
        "intent": "Load default values for the shader . Should be called after every #useShader and before any draw calls .",
        "snippet": "void function ( ) { }"
    },
    {
        "question_id": 1674,
        "intent": "always call super if you override",
        "snippet": "void function ( Config4Impl arg0 ) { }"
    },
    {
        "question_id": 1675,
        "intent": "Return true if the rule is triggered by the given line and name given the structure of the supplied document",
        "snippet": "boolean function ( Document arg0 , ValidationError arg1 ) { int loc0 = arg1 . getLineNumber ( ) ; String loc1 = arg1 . getValidatorName ( ) ; if ( loc1 . equals ( \"srini_string\" ) ) { loc1 = concodefunc_extractJSValidatorName ( arg1 . getMessage ( ) ) ; } return isTriggeredBy ( arg0 , loc0 , loc1 ) ; }"
    },
    {
        "question_id": 1676,
        "intent": "Called when the document is opened .",
        "snippet": "void function ( PdfWriter arg0 , Document arg1 ) { }"
    },
    {
        "question_id": 1677,
        "intent": "Write all rows added to the named output stream .",
        "snippet": "void function ( OutputStream arg0 ) { concodefunc_writeHeader ( arg0 ) ; for ( int loc0 = 0 ; loc0 < concodeclass_columnCount ; loc0 ++ ) concodeclass_columns [ loc0 ] . writeTo ( arg0 ) ; }"
    },
    {
        "question_id": 1678,
        "intent": "Execute the specified command returning a value if any",
        "snippet": "JSObject function ( String arg0 ) { Object loc0 = concodeclass_engine . executeScript ( arg0 ) ; if ( loc0 instanceof JSObject ) { return ( JSObject ) loc0 ; } return null ; }"
    },
    {
        "question_id": 1679,
        "intent": "Verify if the time per execution of a task matches the actual time required to execute the task a given number of times",
        "snippet": "void function ( ) { for ( int loc0 = 0 ; loc0 < 10 ; loc0 ++ ) { assertEquals ( this . concodeclass_expectedExecutionTime * loc0 , this . concodeclass_factory . apply ( loc0 ) . getTimeMs ( ) ) ; } }"
    },
    {
        "question_id": 1680,
        "intent": "set Parser state to UnknownState .",
        "snippet": "XMLParser function ( ) { return concodefunc_setState ( concodeclass_unknown ) ; }"
    },
    {
        "question_id": 1681,
        "intent": "Creates the edge origin , destination . If the edge did not already exists , increments the edge count .",
        "snippet": "void function ( int arg0 , int arg1 ) { if ( concodefunc_validVertex ( arg0 ) && concodefunc_validVertex ( arg1 ) ) { if ( ! concodeclass_adjMatrix [ arg0 ] [ arg1 ] ) { concodeclass_adjMatrix [ arg0 ] [ arg1 ] = true ; concodeclass_edges ++ ; } } }"
    },
    {
        "question_id": 1682,
        "intent": "Get the subject widget 's class .",
        "snippet": "Class function ( ) { return concodeclass__cls ; }"
    },
    {
        "question_id": 1683,
        "intent": "Retrieve a list of all the location information trees for a sub message field .",
        "snippet": "List < TextFormatParseInfoTree > function ( final FieldDescriptor arg0 ) { List < TextFormatParseInfoTree > loc0 = concodeclass_subtreesFromField . get ( arg0 ) ; return loc0 == null ? Collections . < TextFormatParseInfoTree > emptyList ( ) : loc0 ; }"
    },
    {
        "question_id": 1684,
        "intent": "Receive a message from an imported script .",
        "snippet": "void function ( GeckoView arg0 , Bundle arg1 , GeckoView . MessageResult arg2 ) { if ( arg2 != null ) { arg2 . failure ( null ) ; } }"
    },
    {
        "question_id": 1685,
        "intent": "Take a screenshot .",
        "snippet": "void function ( String arg0 ) { String loc0 = TestMonitor . getInstance ( ) . getCurrentTestCaseID ( ) ; TraceHandler . trace ( IRuntimePluginTraceOptions . WIDGET_SELECTION , \"srini_string\" + arg0 + \"srini_string\" + loc0 ) ; ScreenCapture . createScreenCapture ( loc0 ) ; }"
    },
    {
        "question_id": 1686,
        "intent": "Get the SAX InputSource to be used for the Source .",
        "snippet": "InputSource function ( ) { return concodeclass_inputSource ; }"
    },
    {
        "question_id": 1687,
        "intent": "Create an instance of CallContext",
        "snippet": "CallContext function ( ) { return new CallContext ( ) ; }"
    },
    {
        "question_id": 1688,
        "intent": "Compare the resource groups by name null",
        "snippet": "int function ( ResourceGroupEntity arg0 ) { if ( arg0 == null ) { return 1 ; } else { if ( getName ( ) == null ) { return arg0 . getName ( ) == null ? 0 : - 1 ; } else { return arg0 . getName ( ) == null ? 1 : getName ( ) . compareTo ( arg0 . getName ( ) ) ; } } }"
    },
    {
        "question_id": 1689,
        "intent": "Residue absolute value .",
        "snippet": "Residue < C > function ( ) { return new Residue < C > ( concodeclass_ring , concodeclass_val . abs ( ) , concodeclass_isunit ) ; }"
    },
    {
        "question_id": 1690,
        "intent": "Obtain a default Hierarchy . This method is provided only to support the deprecated ComponentTester.assertFrameShowing method .",
        "snippet": "Hierarchy function ( ) { return concodeclass_defaultHierarchy != null ? concodeclass_defaultHierarchy : new AWTHierarchy ( ) ; }"
    },
    {
        "question_id": 1691,
        "intent": "Observes if currently editing resource type",
        "snippet": "void function ( @ Observes ResourceTypeEntity arg0 ) { if ( arg0 != null ) { concodeclass_resourceOrResourceType = arg0 ; } }"
    },
    {
        "question_id": 1692,
        "intent": "Initializes resources . This must be called before #getResources . This allows us to avoid an evil static initializer that would pollute all the getResources call sites .",
        "snippet": "void function ( ) { concodeclass_resources = GWT . create ( Resources . class ) ; StyleInjector . inject ( concodeclass_resources . whitelistTableCss ( ) . getText ( ) + concodeclass_resources . optionsPageCss ( ) . getText ( ) + concodeclass_resources . tableControlsCss ( ) . getText ( ) ) ; }"
    },
    {
        "question_id": 1693,
        "intent": "triangulation of a polygon with holes , based on a conforming delaunay triangulation",
        "snippet": "List < TriangleXZ > function ( SimplePolygonXZ arg0 , Collection < SimplePolygonXZ > arg1 ) { List < VectorXZ > loc0 = emptyList ( ) ; List < LineSegmentXZ > loc1 = emptyList ( ) ; return triangulate ( arg0 , arg1 , loc1 , loc0 ) ; }"
    },
    {
        "question_id": 1694,
        "intent": "Copy Residue element c.",
        "snippet": "Residue < C > function ( Residue < C > arg0 ) { return new Residue < C > ( arg0 . ring , arg0 . val ) ; }"
    },
    {
        "question_id": 1695,
        "intent": "Answers the stored key that is equal to the specified key .",
        "snippet": "Object function ( Object arg0 ) { int loc0 = ( concodefunc_hashCode ( arg0 ) & 0x7FFFFFFF ) % concodeclass_elementData . length ; HashMapEntry loc1 = concodeclass_elementData [ loc0 ] ; while ( loc1 != null ) { if ( concodefunc_keyEquals ( arg0 , loc1 . arg0 ) ) return loc1 . arg0 ; loc1 = loc1 . next ; } return null ; }"
    },
    {
        "question_id": 1696,
        "intent": "Encodes a string into its quoted-printable form using the default string charset . Unsafe characters are escaped . This function implements a subset of quoted-printable encoding specification rule # 1 and rule # 2 as defined in RFC 1521 and is suitable for encoding binary data .",
        "snippet": "String function ( String arg0 ) { if ( arg0 == null ) { return null ; } try { return encode ( arg0 , concodefunc_getDefaultCharset ( ) ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new EncoderException ( loc0 . getMessage ( ) , loc0 ) ; } }"
    },
    {
        "question_id": 1697,
        "intent": "Get base znode .",
        "snippet": "String function ( ) { return concodeclass_baseZNode ; }"
    },
    {
        "question_id": 1698,
        "intent": "Adds the subpath to this path .",
        "snippet": "void function ( Subpath arg0 ) { concodeclass_subpaths . add ( arg0 ) ; concodeclass_currentPoint = arg0 . getLastPoint ( ) ; }"
    },
    {
        "question_id": 1699,
        "intent": "Decrements active tranbsaction count and completes suspension if we are suspending and there are no more active transactions left .",
        "snippet": "void function ( ) { int loc0 = concodeclass_activeTransactionCountUpdater . decrementAndGet ( this ) ; if ( concodeclass_suspended && loc0 == 0 && concodeclass_activeInvocationCountUpdater . get ( this ) == 0 ) { concodefunc_doneSuspended ( ) ; } }"
    },
    {
        "question_id": 1700,
        "intent": "client address",
        "snippet": "void function ( InetAddress arg0 ) { concodeclass__remoteAddr = arg0 ; }"
    },
    {
        "question_id": 1701,
        "intent": "Creates a zip fie from the given source directory and output zip file name",
        "snippet": "void function ( Logger arg0 , File arg1 , File arg2 ) { FileFilter loc0 = null ; createZipFile ( arg0 , arg1 , arg2 , loc0 ) ; }"
    },
    {
        "question_id": 1702,
        "intent": "Sum of getCheckInitialConditionsTicks and getCheckFinalConditionsTicks",
        "snippet": "int function ( ) { return concodeclass_fValues [ concodeclass_CHECK_INITIAL_CONDITIONS ] + concodeclass_fValues [ concodeclass_CHECK_FINAL_CONDITIONS ] ; }"
    },
    {
        "question_id": 1703,
        "intent": "Returns a label for a version name . Example is ' 1.4.1 '",
        "snippet": "String function ( String arg0 ) { return concodefunc_markLTR ( arg0 , \"srini_string\" ) ; }"
    },
    {
        "question_id": 1704,
        "intent": "Local absolute value .",
        "snippet": "Local < C > function ( ) { return new Local < C > ( concodeclass_ring , concodeclass_num . abs ( ) , concodeclass_den , true ) ; }"
    },
    {
        "question_id": 1705,
        "intent": "Generate variable list .",
        "snippet": "String function ( String arg0 , String arg1 ) { StringBuffer loc0 = new StringBuffer ( ) ; loc0 . append ( arg0 ) ; loc0 . append ( \"srini_string\" ) ; for ( int loc1 = 0 ; loc1 <= concodeclass_N ; loc1 ++ ) { loc0 . append ( concodefunc_variable ( loc1 ) ) ; if ( loc1 < concodeclass_N ) { loc0 . append ( \"srini_string\" ) ; } } loc0 . append ( \"srini_string\" ) ; loc0 . append ( arg1 ) ; return loc0 . toString ( ) ; }"
    },
    {
        "question_id": 1706,
        "intent": "Gets the predicate this iterator is using .",
        "snippet": "Predicate function ( ) { return concodeclass_predicate ; }"
    },
    {
        "question_id": 1707,
        "intent": "get ListView height according to every children",
        "snippet": "int function ( ListView arg0 ) { int loc0 = concodefunc_getAbsListViewHeightBasedOnChildren ( arg0 ) ; ListAdapter loc1 ; int loc2 ; if ( arg0 != null && ( loc1 = arg0 . getAdapter ( ) ) != null && ( loc2 = loc1 . getCount ( ) ) > 0 ) { loc0 += arg0 . getDividerHeight ( ) * ( loc2 - 1 ) ; } return loc0 ; }"
    },
    {
        "question_id": 1708,
        "intent": "Creates a new customizable refactoring descriptor initialized with its default values . This method may be reimplemented to return a language-specified refactoring descriptor which can be initialized using language-specific features . Refactoring tool providers may reimplement this method to provide a uniform API to expose refactoring functionality in the form of refactoring descriptors . Callers of this method are supposed to cast the resulting refactoring descriptor to the corresponding language-specific refactoring descriptor provided by the API of the refactoring tooling provider . Note : this method is supposed to be reimplemented by clients wishing to provide customizable refactoring descriptors .",
        "snippet": "RefactoringDescriptor function ( ) { return null ; }"
    },
    {
        "question_id": 1709,
        "intent": "Create an instance of BusinessException",
        "snippet": "BusinessException function ( ) { return new BusinessException ( ) ; }"
    },
    {
        "question_id": 1710,
        "intent": "Create a fingerprint per the following spec",
        "snippet": "String function ( ECPublicKey arg0 ) { byte [ ] loc0 = loc0 ( arg0 ) ; return concodefunc_hexColonDelimited ( Hashing . md5 ( ) . hashBytes ( loc0 ) ) ; }"
    },
    {
        "question_id": 1711,
        "intent": "Append a hashCode for a byte .",
        "snippet": "HashCodeBuilder function ( byte arg0 ) { concodeclass_iTotal = concodeclass_iTotal * concodeclass_iConstant + arg0 ; return this ; }"
    },
    {
        "question_id": 1712,
        "intent": "Returns true iff the method could be a virtual method , i.e. if it is not a constructor , is private , or is static .",
        "snippet": "boolean function ( IMethod arg0 ) { if ( arg0 . isConstructor ( ) ) return false ; if ( JdtFlags . isPrivate ( arg0 ) ) return false ; if ( JdtFlags . isStatic ( arg0 ) ) return false ; return true ; }"
    },
    {
        "question_id": 1713,
        "intent": "Invoke to tell listeners that an atomic test flagged that it assumed something false .",
        "snippet": "void function ( final Failure arg0 ) { new SafeNotifier ( ) { @ Override protected void concodefunc_notifyListener ( RunListener arg1 ) throws Exception { arg1 . testAssumptionFailure ( arg0 ) ; } } . run ( ) ; }"
    },
    {
        "question_id": 1714,
        "intent": "Get a cached formula",
        "snippet": "Image function ( String arg0 , int arg1 , int arg2 , int arg3 , int arg4 , Color arg5 ) { return getCachedTeXFormulaImage ( new CachedTeXFormula ( arg0 , arg1 , arg2 , arg3 , arg4 , arg5 ) ) ; }"
    },
    {
        "question_id": 1715,
        "intent": "A shorthand for readFixed bytes , 0 , bytes.length .",
        "snippet": "void function ( byte [ ] arg0 ) { readFixed ( arg0 , 0 , arg0 . length ) ; }"
    },
    {
        "question_id": 1716,
        "intent": "Set the SQL comment to use .",
        "snippet": "DetachedCriteria function ( String arg0 ) { concodeclass_criteria . setComment ( arg0 ) ; return this ; }"
    },
    {
        "question_id": 1717,
        "intent": "Waits until the StateModel reaches the indicated state . Note : waitForState methods may not be called from multiple threads simoultaneously .",
        "snippet": "void function ( int arg0 ) { int [ ] loc0 = { arg0 } ; waitForState ( loc0 ) ; }"
    },
    {
        "question_id": 1718,
        "intent": "Appends the `` order by '' fragment , prefixed by a comma if the `` order by '' fragment already exists .",
        "snippet": "void function ( String arg0 ) { if ( this . concodeclass_orderByClause == null ) { this . concodeclass_orderByClause = new StringBuilder ( ) ; } else { this . concodeclass_orderByClause . append ( \"srini_string\" ) ; this . concodeclass_guesstimatedBufferSize += 2 ; } this . concodeclass_orderByClause . append ( arg0 ) ; }"
    },
    {
        "question_id": 1719,
        "intent": "Get event listener of this object",
        "snippet": "AngularObjectListener function ( ) { return concodeclass_listener ; }"
    },
    {
        "question_id": 1720,
        "intent": "Factory method that performs validation and copies the parameter array .",
        "snippet": "Closure function ( Closure [ ] arg0 ) { FunctorUtils . validate ( arg0 ) ; if ( arg0 . length == 0 ) { return NOPClosure . INSTANCE ; } arg0 = FunctorUtils . copy ( arg0 ) ; return new ChainedClosure ( arg0 ) ; }"
    },
    {
        "question_id": 1721,
        "intent": "Indicates whether some other object is `` equal to '' this Comparator .",
        "snippet": "boolean function ( final Object arg0 ) { return ( arg0 instanceof TypeComparator ) ; }"
    },
    {
        "question_id": 1722,
        "intent": "Is this menu contained by this control ?",
        "snippet": "boolean function ( Menu arg0 , Control arg1 ) { Collection loc0 = concodeclass__hierarchy . getWidgets ( arg1 ) ; return loc0 == null ? false : loc0 . contains ( arg0 ) ; }"
    },
    {
        "question_id": 1723,
        "intent": "Dispatch a mouseRelease event .",
        "snippet": "void function ( int arg0 ) { Event loc0 = concodefunc_createClickEvent ( arg0 ) ; loc0 . type = SWT . MouseUp ; new SWTPushEventOperation ( loc0 ) . execute ( ) ; }"
    },
    {
        "question_id": 1724,
        "intent": "Adds a notification .",
        "snippet": "void function ( int arg0 , Notification arg1 ) { concodeclass_mNotificationManager . notify ( arg0 , arg1 ) ; concodeclass_mNotifications . put ( arg0 , arg1 ) ; if ( concodeclass_mForegroundNotification == null && concodefunc_isOngoing ( arg1 ) ) { concodefunc_setForegroundNotification ( arg0 , arg1 ) ; } }"
    },
    {
        "question_id": 1725,
        "intent": "Looks at the top of this stack without removing it .",
        "snippet": "short function ( ) { if ( concodeclass_list . isEmpty ( ) ) { throw new EmptyStackException ( ) ; } return concodeclass_list . get ( concodeclass_list . size ( ) - 1 ) ; }"
    },
    {
        "question_id": 1726,
        "intent": "Return the ending location of this move .",
        "snippet": "int function ( ) { return concodeclass_endingLocation ; }"
    },
    {
        "question_id": 1727,
        "intent": "Sets the new vendorID .",
        "snippet": "void function ( int arg0 ) { this . concodeclass_vendorID = arg0 ; }"
    },
    {
        "question_id": 1728,
        "intent": "finds the cross product of two 3d vectors represented to float arrays",
        "snippet": "void function ( float [ ] arg0 , float [ ] arg1 , Point3D arg2 ) { arg2 . x = arg0 [ 1 ] * arg1 [ 2 ] - arg0 [ 2 ] * arg1 [ 1 ] ; arg2 . y = arg0 [ 2 ] * arg1 [ 0 ] - arg0 [ 0 ] * arg1 [ 2 ] ; arg2 . z = arg0 [ 0 ] * arg1 [ 1 ] - arg0 [ 1 ] * arg1 [ 0 ] ; }"
    },
    {
        "question_id": 1729,
        "intent": "Gets the size of the list of keys .",
        "snippet": "int function ( ) { return concodeclass_keys . length ; }"
    },
    {
        "question_id": 1730,
        "intent": "Find a Widget , using the given Matcher to determine whether a given widget in the hierarchy in the given display is the desired one .",
        "snippet": "MatchResult function ( Display arg0 , Matcher arg1 ) { return find ( arg0 , arg1 , concodefunc_getMaxFinderRetries ( ) ) ; }"
    },
    {
        "question_id": 1731,
        "intent": "Assume for test failures when running with Elytron profile enabled . It skips test in case the ' - Delytron ' Mavenargument is used for Elytron profile activation and system property wildfly.tmp.enable.elytron.profile.tests has n't value ` true ' .",
        "snippet": "void function ( ) { concodefunc_assumeCondition ( \"srini_string\" , concodeclass_CONDITION_SKIP_ELYTRON_PROFILE ) ; }"
    },
    {
        "question_id": 1732,
        "intent": "Reads a group of Ppt statements statements following the line `` PPT_NAME ... '' . All the lines between firstLine and the first empty line are placed into a list and then this list is placed in to pptSections .",
        "snippet": "void function ( LineNumberReader arg0 , List < List < String >> arg1 , String arg2 ) { List < String > loc0 = new ArrayList < String > ( ) ; loc0 . add ( arg2 ) ; String loc1 = arg0 . readLine ( ) ; while ( ( loc1 != null ) && ( ! loc1 . trim ( ) . equals ( \"srini_string\" ) ) ) { loc0 . add ( loc1 ) ; loc1 = arg0 . readLine ( ) ; } arg1 . add ( loc0 ) ; }"
    },
    {
        "question_id": 1733,
        "intent": "Return a library that loads the core from code.jquery.com",
        "snippet": "JQueryLibrary function ( String arg0 ) { return new JQueryLibrary ( concodeclass_BASE_RESOURCE_URL + \"srini_string\" + arg0 + \"srini_string\" ) ; }"
    },
    {
        "question_id": 1734,
        "intent": "Build a condition that tests whether the active wizard page has an expected message text .",
        "snippet": "IUICondition function ( String arg0 ) { return new HasTextCondition ( new WizardPageElement ( ) { public String getText ( IUIContext arg1 ) throws WidgetSearchException { return getPage ( ) . getMessage ( ) ; } } , arg0 ) ; }"
    },
    {
        "question_id": 1735,
        "intent": "Returns an unmodifiable Set of enabled filter names .",
        "snippet": "Set < String > function ( ) { return java . util . Collections . unmodifiableSet ( concodeclass_enabledFilters . keySet ( ) ) ; }"
    },
    {
        "question_id": 1736,
        "intent": "Create and cache a new recording debug info structure",
        "snippet": "void function ( ) { concodeclass_mostRecentInfo = new DebugRecordingInfo ( ) ; }"
    },
    {
        "question_id": 1737,
        "intent": "Solves a linear system for x , y with cramer 's rule . ax + by = e cx + dy = f",
        "snippet": "double [ ] function ( double arg0 , double arg1 , double arg2 , double arg3 , double arg4 , double arg5 ) { System . out . println ( \"srini_string\" + arg0 + \"srini_string\" + arg1 + \"srini_string\" + arg2 + \"srini_string\" + arg3 + \"srini_string\" + arg4 + \"srini_string\" + arg5 + \"srini_string\" ) ; double loc0 = ( arg4 * arg3 - arg1 * arg5 ) / ( arg0 * arg3 - arg1 * arg2 ) ; double loc1 = ( arg0 * arg5 - arg4 * arg2 ) / ( arg0 * arg3 - arg1 * arg2 ) ; return new double [ ] { loc0 , loc1 } ; }"
    },
    {
        "question_id": 1738,
        "intent": "Returns the paint surface associated with this paint session .",
        "snippet": "PaintSurface function ( ) { return concodeclass_paintSurface ; }"
    },
    {
        "question_id": 1739,
        "intent": "This method splits a string by hyphens in it and returns the list of strings .",
        "snippet": "List < String > function ( String arg0 ) { return Arrays . asList ( ( arg0 . split ( \"srini_string\" ) ) ) ; }"
    },
    {
        "question_id": 1740,
        "intent": "Stop monitoring the UI for responsiveness .",
        "snippet": "void function ( ) { concodefunc_getUIThreadMonitor ( ) . setListener ( null ) ; }"
    },
    {
        "question_id": 1741,
        "intent": "Launch the application",
        "snippet": "void function ( String [ ] arg0 ) { try { TextTestShell loc0 = new TextTestShell ( ) ; loc0 . open ( ) ; final Display loc1 = Display . getDefault ( ) ; while ( ! loc0 . getShell ( ) . isDisposed ( ) ) { if ( ! loc1 . readAndDispatch ( ) ) loc1 . sleep ( ) ; } } catch ( Exception loc0 ) { loc0 . printStackTrace ( ) ; } }"
    },
    {
        "question_id": 1742,
        "intent": "Transform a given cache into a cache that fails silently if cache reads fail .",
        "snippet": "AdvancedCache function ( AdvancedCache arg0 ) { return arg0 . withFlags ( Flag . FAIL_SILENTLY , Flag . ZERO_LOCK_ACQUISITION_TIMEOUT ) ; }"
    },
    {
        "question_id": 1743,
        "intent": "Return the original line number for this line",
        "snippet": "int function ( ) { return concodeclass_lineNo ; }"
    },
    {
        "question_id": 1744,
        "intent": "Gets the next key from the Map .",
        "snippet": "Object function ( ) { concodeclass_last = ( Map . Entry ) concodeclass_iterator . next ( ) ; concodeclass_canRemove = true ; return concodeclass_last . getKey ( ) ; }"
    },
    {
        "question_id": 1745,
        "intent": "Called by the default implementation of #writeArray to get thesize of an array . The default implementation is for Collection .",
        "snippet": "long function ( Object arg0 ) { return ( ( Collection ) arg0 ) . size ( ) ; }"
    },
    {
        "question_id": 1746,
        "intent": "Called when a Paragraph is written . paragraphPosition will hold the height of the end of the paragraph .",
        "snippet": "void function ( PdfWriter arg0 , Document arg1 , float arg2 ) { }"
    },
    {
        "question_id": 1747,
        "intent": "Adds the given text as a child to this node . The text will be quoted .",
        "snippet": "XMLElement function ( final String arg0 ) { if ( concodeclass_closed ) { throw new IOException ( format ( \"srini_string\" , concodeclass_name ) ) ; } concodefunc_finishOpenTag ( ) ; if ( concodeclass_lastchild != null ) { concodeclass_lastchild . close ( ) ; } concodefunc_quote ( arg0 ) ; return this ; }"
    },
    {
        "question_id": 1748,
        "intent": "Parse an InputStream that optionally detects encoding from the stream",
        "snippet": "void function ( final InputStream arg0 , final boolean arg1 ) { if ( arg1 ) { parse ( arg1 ( new BufferedInputStream ( arg0 ) ) ) ; } else { parse ( arg0 ) ; } }"
    },
    {
        "question_id": 1749,
        "intent": "Getter for property ` entityName ' .",
        "snippet": "String function ( ) { return concodeclass_entityName ; }"
    },
    {
        "question_id": 1750,
        "intent": "Does this word contain upper-case letters only ?",
        "snippet": "boolean function ( final String arg0 ) { for ( int loc0 = arg0 . length ( ) - 1 ; loc0 >= 0 ; loc0 -- ) { if ( Character . isLowerCase ( arg0 . charAt ( loc0 ) ) ) return false ; } return true ; }"
    },
    {
        "question_id": 1751,
        "intent": "Maps a codec name into a CodecFactory . Currently there are five codecs registered by default : null deflate snappy bzip2 xz",
        "snippet": "CodecFactory function ( String arg0 ) { CodecFactory loc0 = concodeclass_REGISTERED . get ( arg0 ) ; if ( loc0 == null ) { throw new AvroRuntimeException ( \"srini_string\" + arg0 ) ; } return loc0 ; }"
    },
    {
        "question_id": 1752,
        "intent": "Invoked when a test method is about to start",
        "snippet": "void function ( FrameworkMethod arg0 ) { }"
    },
    {
        "question_id": 1753,
        "intent": "Create two HazelcastInstance server @Bean s clustered together .",
        "snippet": "HazelcastInstance function ( ) { HazelcastInstance loc0 = InstanceHelper . makeServer ( Constants . HAZELCAST_INSTANCE_NAME , concodeclass_CLUSTER_PORT ) ; concodeclass_LOG . trace ( \"srini_string\" , loc0 ) ; InstanceHelper . makeServer ( \"srini_string\" + Constants . HAZELCAST_INSTANCE_NAME , ( 1 + concodeclass_CLUSTER_PORT ) ) ; return loc0 ; }"
    },
    {
        "question_id": 1754,
        "intent": "Invokes the underlying Map #isEmpty method .",
        "snippet": "boolean function ( ) { return concodeclass_map . isEmpty ( ) ; }"
    },
    {
        "question_id": 1755,
        "intent": "Returns the quirks .",
        "snippet": "boolean function ( ) { return concodeclass_quirks ; }"
    },
    {
        "question_id": 1756,
        "intent": "Sets the value of ours",
        "snippet": "void function ( long arg0 ) { this . concodeclass_ours = arg0 ; }"
    },
    {
        "question_id": 1757,
        "intent": "Getter for the leading",
        "snippet": "float function ( ) { return concodeclass_leading ; }"
    },
    {
        "question_id": 1758,
        "intent": "Always return constant .",
        "snippet": "Object function ( ) { return concodeclass_iConstant ; }"
    },
    {
        "question_id": 1759,
        "intent": "get reference to the scene that has the input focus",
        "snippet": "Scene function ( ) { return concodeclass_focusScene ; }"
    },
    {
        "question_id": 1760,
        "intent": "Builds the commands .",
        "snippet": "List < Command > function ( String ... arg0 ) { List < Command > loc0 = new ArrayList < Command > ( ) ; for ( String loc1 : arg0 ) { Command loc2 = concodefunc_findCommand ( loc1 ) ; if ( loc2 != null ) { loc0 . add ( loc2 ) ; } } return loc0 ; }"
    },
    {
        "question_id": 1761,
        "intent": "Removes from the underlying collection the last element returned by the Iterator . As with next and hasNext , this method calls remove on the underlying Iterator . Therefore , this method may throw an UnsupportedOperationException if the underlying Iterator does not support this method .",
        "snippet": "void function ( ) { concodefunc_lockChain ( ) ; concodefunc_updateCurrentIterator ( ) ; concodeclass_lastUsedIterator . remove ( ) ; }"
    },
    {
        "question_id": 1762,
        "intent": "Inclusive min / max",
        "snippet": "float function ( float arg0 , float arg1 ) { return arg0 + ( concodeclass_rand . nextFloat ( ) * ( ( 1 + arg1 ) - arg0 ) ) ; }"
    },
    {
        "question_id": 1763,
        "intent": "Return the slot id 's of all active JSF versions .",
        "snippet": "List < String > function ( ) { return Collections . unmodifiableList ( concodeclass_activeVersions ) ; }"
    },
    {
        "question_id": 1764,
        "intent": "Sets the current active layout manager",
        "snippet": "void function ( IFigure arg0 , LayoutManager arg1 ) { arg0 . setLayoutManager ( arg1 ) ; this . concodeclass_activeLayoutManager = arg1 ; if ( arg1 == concodeclass_xyLayoutManager ) { concodeclass_diagram . installEditPolicy ( EditPolicy . LAYOUT_ROLE , new SchemaXYLayoutPolicy ( ) ) ; } else { concodeclass_diagram . installEditPolicy ( EditPolicy . LAYOUT_ROLE , null ) ; } }"
    },
    {
        "question_id": 1765,
        "intent": "Transfers money from one account to another .",
        "snippet": "void function ( int arg0 , int arg1 , double arg2 ) { if ( concodeclass_accounts [ arg0 ] < arg2 ) return ; System . out . print ( Thread . currentThread ( ) ) ; concodeclass_accounts [ arg0 ] -= arg2 ; System . out . printf ( \"srini_string\" , arg2 , arg0 , arg1 ) ; concodeclass_accounts [ arg1 ] += arg2 ; System . out . printf ( \"srini_string\" , concodefunc_getTotalBalance ( ) ) ; }"
    },
    {
        "question_id": 1766,
        "intent": "Called to evict data from the entire region",
        "snippet": "void function ( ) { concodefunc_evictAll ( ) ; }"
    },
    {
        "question_id": 1767,
        "intent": "Converts an instance of the object model described in org.apache.avro.JsonProperties to a JSON string .",
        "snippet": "String function ( Object arg0 ) { return JacksonUtils . toJsonNode ( arg0 ) . toString ( ) ; }"
    },
    {
        "question_id": 1768,
        "intent": "Configure a job 's mapper implementation .",
        "snippet": "void function ( JobConf arg0 , Class < ? extends AvroMapper > arg1 ) { arg0 . set ( concodeclass_MAPPER , arg1 . getName ( ) ) ; }"
    },
    {
        "question_id": 1769,
        "intent": "Residue summation .",
        "snippet": "Residue < C > function ( Residue < C > arg0 ) { return new Residue < C > ( concodeclass_ring , concodeclass_val . sum ( arg0 . val ) ) ; }"
    },
    {
        "question_id": 1770,
        "intent": "Invoked when a test fails",
        "snippet": "void function ( Throwable arg0 , Description arg1 ) { }"
    },
    {
        "question_id": 1771,
        "intent": "Is the current token a single letter token surrounded by non-whitespace characters ?",
        "snippet": "boolean function ( final int arg0 ) { if ( ! Character . isLetter ( concodeclass_fContent . charAt ( arg0 ) ) ) return false ; if ( arg0 > 0 && ! Character . isWhitespace ( concodeclass_fContent . charAt ( arg0 - 1 ) ) ) return false ; if ( arg0 < concodeclass_fContent . length ( ) - 1 && ! Character . isWhitespace ( concodeclass_fContent . charAt ( arg0 + 1 ) ) ) return false ; return true ; }"
    },
    {
        "question_id": 1772,
        "intent": "Create and return a new Predicate that checks if the element is displayed .",
        "snippet": "Predicate < WebElement > function ( ) { return new Predicate < WebElement > ( ) { @ Override public boolean apply ( WebElement arg0 ) { return arg0 . isDisplayed ( ) ; } @ Override public String toString ( ) { return \"srini_string\" ; } } ; }"
    },
    {
        "question_id": 1773,
        "intent": "Creates Junit tests for the faults . Output is a set of . java files . the default junit class name is the driver class name + index",
        "snippet": "List < File > function ( List < ExecutableSequence > arg0 ) { return createJunitTestFiles ( arg0 , concodeclass_junitDriverClassName ) ; }"
    },
    {
        "question_id": 1774,
        "intent": "Gets the value of the message property . This accessor method returns a reference to the live list , not a snapshot . Therefore any modification you make to the returned list will be present inside the JAXB object . This is why there is not a set method for the message property . For example , to add a new item , do as follows : getMessage . add newItem ; Objects of the following type s are allowed in the list Message",
        "snippet": "List < Message > function ( ) { if ( concodeclass_message == null ) { concodeclass_message = new ArrayList < Message > ( ) ; } return this . concodeclass_message ; }"
    },
    {
        "question_id": 1775,
        "intent": "Performs actions that follow a disconnect .",
        "snippet": "void function ( ) { concodeclass_peerStatus = PeerStatus . ABSENT ; concodeclass_myNode . getOperationFactory ( ) . abortAllOperations ( ) ; }"
    },
    {
        "question_id": 1776,
        "intent": "Append a hashCode for a float array .",
        "snippet": "HashCodeBuilder function ( float [ ] arg0 ) { if ( arg0 == null ) { concodeclass_iTotal = concodeclass_iTotal * concodeclass_iConstant ; } else { for ( float loc0 : arg0 ) { append ( loc0 ) ; } } return this ; }"
    },
    {
        "question_id": 1777,
        "intent": "Should be called only once , for global",
        "snippet": "void function ( ) { concodefunc_loadPreauthPlugins ( ) ; }"
    },
    {
        "question_id": 1778,
        "intent": "Gets the rectangular position of a Bitmap if it were placed inside a View with scale type set to android.widget.ImageView #ScaleType #CENTER_INSIDE .",
        "snippet": "Rect function ( int arg0 , int arg1 , int arg2 , int arg3 ) { return concodefunc_getBitmapRectCenterInsideHelper ( arg0 , arg1 , arg2 , arg3 ) ; }"
    },
    {
        "question_id": 1779,
        "intent": "Creates the PaletteRoot and adds all Palette elements .",
        "snippet": "PaletteRoot function ( ) { PaletteRoot loc0 = new PaletteRoot ( ) ; loc0 . addAll ( concodefunc_createCategories ( loc0 ) ) ; return loc0 ; }"
    },
    {
        "question_id": 1780,
        "intent": "This loader is used when proxy debugging is enabled . In that case there is no point in fetching the bundle from device as remote executor will have to do it anyway .",
        "snippet": "JSBundleLoader function ( final String arg0 ) { return new JSBundleLoader ( ) { @ Override public void concodefunc_loadScript ( ReactBridge arg1 ) { arg1 . loadScriptFromNetworkCached ( arg0 , null ) ; } @ Override public String concodefunc_getSourceUrl ( ) { return arg0 ; } } ; }"
    },
    {
        "question_id": 1781,
        "intent": "Method to get the average of the colors of this pixel",
        "snippet": "double function ( ) { double loc0 = ( concodefunc_getRed ( ) + concodefunc_getGreen ( ) + concodefunc_getBlue ( ) ) / 3.0 ; return loc0 ; }"
    },
    {
        "question_id": 1782,
        "intent": "Map column names to protocol field names .",
        "snippet": "String function ( final String arg0 ) { switch ( arg0 ) { case \"srini_string\" : return \"srini_string\" ; case \"srini_string\" : return \"srini_string\" ; case \"srini_string\" : return \"srini_string\" ; } return arg0 ; }"
    },
    {
        "question_id": 1783,
        "intent": "When set to true , the XML parser will attempt to validate the Jelly XML before converting it into a Script .",
        "snippet": "void function ( boolean arg0 ) { this . concodeclass_validateXML = arg0 ; }"
    },
    {
        "question_id": 1784,
        "intent": "This method tests , if this SkyNet-ID ranges between the two provided bounds .",
        "snippet": "boolean function ( SkyNetID arg0 , SkyNetID arg1 ) { if ( arg0 . compareTo ( arg1 ) < 0 ) { if ( this . concodefunc_compareTo ( arg0 ) > 0 && this . concodefunc_compareTo ( arg1 ) < 0 ) { return true ; } } else { if ( this . concodefunc_compareTo ( arg0 ) > 0 || this . concodefunc_compareTo ( arg1 ) < 0 ) { return true ; } } return false ; }"
    },
    {
        "question_id": 1785,
        "intent": "Sets the preferred difficulty for this user and overwrites any previous preference .",
        "snippet": "void function ( Difficulty arg0 ) { Preferences loc0 = Preferences . userNodeForPackage ( this . getClass ( ) ) ; loc0 . putInt ( concodeclass_DIFFICULTY , arg0 . toInt ( ) ) ; }"
    },
    {
        "question_id": 1786,
        "intent": "It is safe to call this method concurrently from any random thread .",
        "snippet": "void function ( Resource arg0 ) { if ( PingDestination . isUrl ( arg0 ) ) { synchronized ( concodeclass_lock ) { PingDestination loc0 = PingDestination . from ( arg0 ) ; concodeclass_changes . add ( new UrlChange ( Action . deleted ( ) , loc0 ) ) ; Log . LOG . debugf ( \"srini_string\" , loc0 . getUrl ( ) ) ; } } }"
    },
    {
        "question_id": 1787,
        "intent": "the name of the context where the property is defined",
        "snippet": "ResourceEditPropertyBuilder function ( String arg0 ) { this . concodeclass_typeContName = arg0 ; return this ; }"
    },
    {
        "question_id": 1788,
        "intent": "Default begin for when you do n't need anything but no authentication and default settings for SSL .",
        "snippet": "Sardine function ( ) { return begin ( null , null ) ; }"
    },
    {
        "question_id": 1789,
        "intent": "Decodes the stream and produces animation frames into the specified movie track . This method can only be called once .",
        "snippet": "void function ( SEQMovieTrack arg0 , boolean arg1 ) { this . concodeclass_track = arg0 ; concodefunc_readHeader ( ) ; concodefunc_readOffsets ( ) ; concodefunc_readFrames ( ) ; }"
    },
    {
        "question_id": 1790,
        "intent": "Returns the value as a byte array .",
        "snippet": "byte [ ] function ( ) { ByteArrayOutputStream loc0 = new ByteArrayOutputStream ( ) ; ObjectOutputStream loc1 ; try { loc1 = new ObjectOutputStream ( loc0 ) ; loc1 . writeObject ( concodeclass_value ) ; loc1 . close ( ) ; } catch ( IOException loc2 ) { loc2 . printStackTrace ( ) ; } return loc0 . toByteArray ( ) ; }"
    },
    {
        "question_id": 1791,
        "intent": "logs all objects in the passed ObjectContainer .",
        "snippet": "void function ( ObjectContainer arg0 ) { ObjectSet loc0 = arg0 . queryByExample ( null ) ; while ( loc0 . hasNext ( ) ) { concodefunc_log ( arg0 , loc0 . next ( ) ) ; } }"
    },
    {
        "question_id": 1792,
        "intent": "Return all root components in the current AWT hierarchy .",
        "snippet": "Collection function ( ) { return concodeclass_tracker . getRootWindows ( ) ; }"
    },
    {
        "question_id": 1793,
        "intent": "Setup filters for this finder . Filters are checked before search criteria . Typical filters are defined in the Filter enum .",
        "snippet": "SWTWidgetFinder function ( ISWTWidgetMatcher ... arg0 ) { Invariants . notNull ( arg0 ) ; throw new UnsupportedOperationException ( ) ; }"
    },
    {
        "question_id": 1794,
        "intent": "Fetch records modified since the provided timestamp . The caller is responsible for closing the cursor .",
        "snippet": "Cursor function ( long arg0 ) { return concodeclass_queryHelper . safeQuery ( \"srini_string\" , concodefunc_getAllColumns ( ) , concodefunc_dateModifiedWhere ( arg0 ) , null , null ) ; }"
    },
    {
        "question_id": 1795,
        "intent": "A distinct property value count projection",
        "snippet": "CountProjection function ( String arg0 ) { return new CountProjection ( arg0 ) . setDistinct ( ) ; }"
    },
    {
        "question_id": 1796,
        "intent": "Sets the callback object for the ImageLoader . Once this is set , we may invoke the callback once all images that need to be loaded report in from their onload event handlers .",
        "snippet": "void function ( CallBack arg0 ) { this . concodeclass_callBack = arg0 ; }"
    },
    {
        "question_id": 1797,
        "intent": "Calculates and returns the next element which is either gap or dash .",
        "snippet": "DashArrayElem function ( ) { DashArrayElem loc0 = concodeclass_currentElem ; if ( concodeclass_dashArray . size ( ) > 0 ) { concodeclass_currentIndex = ( concodeclass_currentIndex + 1 ) % concodeclass_dashArray . size ( ) ; concodeclass_currentElem = new DashArrayElem ( concodeclass_dashArray . getAsNumber ( concodeclass_currentIndex ) . floatValue ( ) , concodefunc_isEven ( ++ concodeclass_elemOrdinalNumber ) ) ; } return loc0 ; }"
    },
    {
        "question_id": 1798,
        "intent": "Sets the value of the responsedescription property .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_responsedescription = arg0 ; }"
    },
    {
        "question_id": 1799,
        "intent": "Is AlgebraicNumber one .",
        "snippet": "boolean function ( ) { return concodeclass_val . equals ( concodeclass_ring . ring . getONE ( ) ) ; }"
    },
    {
        "question_id": 1800,
        "intent": "If called with one or more null elements in objects , the test will halt and be ignored .",
        "snippet": "void function ( Object ... arg0 ) { concodefunc_assumeThat ( asList ( arg0 ) , everyItem ( notNullValue ( ) ) ) ; }"
    },
    {
        "question_id": 1801,
        "intent": "Returns always null .",
        "snippet": "Throwable function ( ) { return null ; }"
    },
    {
        "question_id": 1802,
        "intent": "Adds a Gnutella event listener to this dispatcher",
        "snippet": "void function ( IGnutellaEventListener arg0 ) { concodeclass_listeners . add ( arg0 ) ; }"
    },
    {
        "question_id": 1803,
        "intent": "This method returns the derivative for the given function at the current simulation time .",
        "snippet": "double function ( Class < ? extends Function > arg0 ) { return concodefunc_getDerivativeAt ( Simulator . getInstance ( ) . getCurrentTime ( ) , arg0 ) ; }"
    },
    {
        "question_id": 1804,
        "intent": "Test the singleton in a non-concurrent setting",
        "snippet": "void function ( ) { S loc0 = this . concodeclass_singletonInstanceMethod . get ( ) ; S loc1 = this . concodeclass_singletonInstanceMethod . get ( ) ; S loc2 = this . concodeclass_singletonInstanceMethod . get ( ) ; assertSame ( loc0 , loc1 ) ; assertSame ( loc0 , loc2 ) ; assertSame ( loc1 , loc2 ) ; }"
    },
    {
        "question_id": 1805,
        "intent": "Factory method to create a typed set . If there are any elements already in the set being decorated , they are validated .",
        "snippet": "Set function ( Set arg0 , Class arg1 ) { return new PredicatedSet ( arg0 , InstanceofPredicate . getInstance ( arg1 ) ) ; }"
    },
    {
        "question_id": 1806,
        "intent": "Prints the absolute pathname of the class file containing the specified class name , as prescribed by the class path .",
        "snippet": "void function ( String arg0 ) { URL loc0 = concodefunc_findClass ( arg0 ) ; if ( loc0 == null ) { System . out . println ( \"srini_string\" + arg0 + \"srini_string\" ) ; } else { System . out . println ( \"srini_string\" + arg0 + \"srini_string\" + loc0 . getFile ( ) + \"srini_string\" ) ; } concodefunc_validate ( ) ; concodefunc_printClasspath ( ) ; }"
    },
    {
        "question_id": 1807,
        "intent": "Checks if a given string is a valid person phone number .",
        "snippet": "boolean function ( String arg0 ) { return arg0 . matches ( concodeclass_PHONE_VALIDATION_REGEX ) ; }"
    },
    {
        "question_id": 1808,
        "intent": "Returns an about : neterror uri with the unknownProtocolFound text as a parameter .",
        "snippet": "String function ( final String arg0 ) { return concodeclass_UNKNOWN_PROTOCOL_URI_PREFIX + arg0 ; }"
    },
    {
        "question_id": 1809,
        "intent": "Sets the horizontal indent of a dependent control . Assumes that GridData is used .",
        "snippet": "void function ( Control arg0 ) { Object loc0 = arg0 . getLayoutData ( ) ; if ( loc0 instanceof GridData ) { ( ( GridData ) loc0 ) . horizontalIndent = LayoutUtil . getIndent ( ) ; } }"
    },
    {
        "question_id": 1810,
        "intent": "These functions support parsing serialized RDF into an XMP object , and serailizing an XMP object into RDF . The input for parsing may be any valid Unicode encoding . ISO Latin-1 is also recognized , but its use is strongly discouraged . Serialization is always as UTF-8 . parseFromBuffer parses RDF from an InputStream . The encoding is recognized automatically .",
        "snippet": "XMPMeta function ( InputStream arg0 , ParseOptions arg1 ) { return XMPMetaParser . parse ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 1811,
        "intent": "Adds a path from the block before a Subroutine is called to a block after the subroutine is called . If the callerBlock is already associated with a returnBlock , the old returnBlock is replaced .",
        "snippet": "void function ( final Block arg0 , final Block arg1 ) { for ( int loc0 = 0 ; loc0 < concodeclass_paths . size ( ) ; loc0 ++ ) { final Block [ ] loc1 = ( Block [ ] ) concodeclass_paths . get ( loc0 ) ; if ( loc1 [ 0 ] == arg0 ) { loc1 [ 1 ] = arg1 ; return ; } } concodeclass_paths . add ( new Block [ ] { arg0 , arg1 } ) ; }"
    },
    {
        "question_id": 1812,
        "intent": "Prepares the renderer . This method is non-blocking , and hence it may be necessary to call it more than once in order to transition the renderer into the prepared state .",
        "snippet": "int function ( long arg0 ) { Assertions . checkState ( concodeclass_state == concodeclass_STATE_UNPREPARED ) ; concodeclass_state = concodefunc_doPrepare ( arg0 ) ? concodeclass_STATE_PREPARED : concodeclass_STATE_UNPREPARED ; return concodeclass_state ; }"
    },
    {
        "question_id": 1813,
        "intent": "Count the number of columns this projection uses .",
        "snippet": "int function ( Criteria arg0 , CriteriaQuery arg1 ) { final Type [ ] loc0 = concodefunc_getTypes ( arg0 , arg1 ) ; int loc1 = 0 ; for ( Type loc2 : loc0 ) { loc1 += loc2 . getColumnSpan ( arg1 . getFactory ( ) ) ; } return loc1 ; }"
    },
    {
        "question_id": 1814,
        "intent": "Data from this message .",
        "snippet": "byte [ ] function ( ) { return concodeclass_payload ; }"
    },
    {
        "question_id": 1815,
        "intent": "Sets the value of the quotaAvailableBytes property .",
        "snippet": "void function ( QuotaAvailableBytes arg0 ) { this . concodeclass_quotaAvailableBytes = arg0 ; }"
    },
    {
        "question_id": 1816,
        "intent": "Return the context attribute key for the attribute .",
        "snippet": "String function ( ) { return ( this . concodeclass_fromKey ) ; }"
    },
    {
        "question_id": 1817,
        "intent": "Adds ands schedules a new frequency adjuster for this function",
        "snippet": "void function ( FrequencyAdjuster arg0 ) { arg0 . setFunction ( this ) ; this . concodeclass_frequencyAdjusters . add ( arg0 ) ; arg0 . schedule ( ) ; concodeclass_log . debug ( \"srini_string\" + arg0 . toString ( ) ) ; }"
    },
    {
        "question_id": 1818,
        "intent": "Returns the current depth of the stack .",
        "snippet": "int function ( ) { return concodeclass__list . size ( ) ; }"
    },
    {
        "question_id": 1819,
        "intent": "Loads the copy participants for the given element .",
        "snippet": "CopyParticipant [ ] function ( RefactoringStatus arg0 , RefactoringProcessor arg1 , Object arg2 , CopyArguments arg3 , String arg4 [ ] , SharableParticipants arg5 ) { return loadCopyParticipants ( arg0 , arg1 , arg2 , arg3 , null , arg4 , arg5 ) ; }"
    },
    {
        "question_id": 1820,
        "intent": "Returns the global monitor which can be used to delegate information/occured events to a specific analyzer/s .",
        "snippet": "Monitor function ( ) { if ( concodeclass_monitor == null ) concodeclass_monitor = new DefaultMonitor ( ) ; return concodeclass_monitor ; }"
    },
    {
        "question_id": 1821,
        "intent": "Handles an incoming text event .",
        "snippet": "void function ( TextEvent arg0 ) { Change loc0 = concodefunc_computeChange ( arg0 ) ; concodefunc_handleChange ( loc0 ) ; }"
    },
    {
        "question_id": 1822,
        "intent": "Return the map entries as instances of Map.Entry in a collection that is safe from concurrent modification . ie . we may safely add new instances to the underlying Map during iteration of the entries .",
        "snippet": "Map . Entry < K , V > [ ] function ( Map < K , V > arg0 ) { return ( ( IdentityMap < K , V > ) arg0 ) . entryArray ( ) ; }"
    },
    {
        "question_id": 1823,
        "intent": "creates a triangle strip between two outlines with identical number of vectors",
        "snippet": "List < VectorXYZ > function ( List < VectorXYZ > arg0 , List < VectorXYZ > arg1 ) { assert arg0 . size ( ) == arg1 . size ( ) ; VectorXYZ [ ] loc0 = new VectorXYZ [ arg0 . size ( ) * 2 ] ; for ( int loc1 = 0 ; loc1 < arg0 . size ( ) ; loc1 ++ ) { loc0 [ loc1 * 2 ] = arg0 . get ( loc1 ) ; loc0 [ loc1 * 2 + 1 ] = arg1 . get ( loc1 ) ; } return asList ( loc0 ) ; }"
    },
    {
        "question_id": 1824,
        "intent": "returns the PropertyTagEntities a comma separated String",
        "snippet": "String function ( List < PropertyTagEntity > arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; if ( arg0 != null ) { for ( PropertyTagEntity loc1 : arg0 ) { if ( loc1 . getName ( ) != null && ! loc1 . getName ( ) . isEmpty ( ) ) { loc0 . append ( loc1 . getName ( ) ) . append ( \"srini_string\" ) ; } } } return loc0 . toString ( ) ; }"
    },
    {
        "question_id": 1825,
        "intent": "Sets the value of the report property .",
        "snippet": "void function ( Report arg0 ) { this . concodeclass_report = arg0 ; }"
    },
    {
        "question_id": 1826,
        "intent": "This has time complexity of O n and space complexity of O n as well Because recursion would be used n no . of times , which uses stack internally .",
        "snippet": "Node function ( Node arg0 ) { if ( arg0 == null ) { return null ; } Node loc0 = reverseListRescursive ( arg0 . next ) ; if ( loc0 == null ) { concodeclass_head . next = arg0 ; } else { loc0 . next = arg0 ; } return arg0 ; }"
    },
    {
        "question_id": 1827,
        "intent": "Sets the job input value schema .",
        "snippet": "void function ( Job arg0 , Schema arg1 ) { arg0 . getConfiguration ( ) . set ( concodeclass_CONF_INPUT_VALUE_SCHEMA , arg1 . toString ( ) ) ; }"
    },
    {
        "question_id": 1828,
        "intent": "Testing EXT option password as a exact command to execute . The exact command is a string delimited by ' ' .",
        "snippet": "void function ( ) { concodefunc_createVault ( concodefunc_buildCommand ( \"srini_string\" , \"srini_string\" ) ) ; Assert . assertEquals ( concodeclass_VAULT_ATTRIBUTE , concodefunc_getVaultedPassword ( ) ) ; concodefunc_removeVault ( ) ; }"
    },
    {
        "question_id": 1829,
        "intent": "Gets the Person 's name .",
        "snippet": "String function ( ) { return concodeclass_name ; }"
    },
    {
        "question_id": 1830,
        "intent": "Send the POST request to requested url of blocking",
        "snippet": "void function ( ) { concodeclass_stateHTTP = \"srini_string\" ; concodefunc_send ( ) ; }"
    },
    {
        "question_id": 1831,
        "intent": "Extracts the millis from an object of this converter 's type . This implementation returns the current time .",
        "snippet": "long function ( Object arg0 , Chronology arg1 ) { return DateTimeUtils . currentTimeMillis ( ) ; }"
    },
    {
        "question_id": 1832,
        "intent": "The amount of memory this machine has Mb",
        "snippet": "int function ( ) { return concodeclass_memorySizeMb ; }"
    },
    {
        "question_id": 1833,
        "intent": "Returns suspend controller injected value .",
        "snippet": "InjectedValue < SuspendController > function ( ) { return concodeclass_suspendControllerInjectedValue ; }"
    },
    {
        "question_id": 1834,
        "intent": "Verifies that the numbers of paragraphs returned by Div #end .",
        "snippet": "void function ( ) { final List < Element > loc0 = concodeclass_d . end ( concodeclass_workerContextImpl , new Tag ( \"srini_string\" ) , concodeclass_currentContent ) ; Assert . assertEquals ( 1 , loc0 . size ( ) ) ; }"
    },
    {
        "question_id": 1835,
        "intent": "Verify that a given object is non-null .",
        "snippet": "void function ( Object arg0 ) { isNotNull ( arg0 , \"srini_string\" + arg0 + \"srini_string\" ) ; }"
    },
    {
        "question_id": 1836,
        "intent": "set WM",
        "snippet": "void function ( NamedWorkManager arg0 ) { this . concodeclass_workManager = arg0 ; }"
    },
    {
        "question_id": 1837,
        "intent": "Comparison with any other object .",
        "snippet": "boolean function ( Object arg0 ) { if ( ! ( arg0 instanceof LocalRing ) ) { return false ; } LocalRing < C > loc0 = null ; try { loc0 = ( LocalRing < C > ) arg0 ; } catch ( ClassCastException loc1 ) { } if ( loc0 == null ) { return false ; } if ( ! concodeclass_ring . equals ( loc0 . ring ) ) { return false ; } return concodeclass_ideal . equals ( loc0 . ideal ) ; }"
    },
    {
        "question_id": 1838,
        "intent": "Negative of this vector .",
        "snippet": "GenVector < C > function ( ) { ArrayList < C > loc0 = new ArrayList < C > ( concodeclass_modul . cols ) ; for ( C loc1 : concodeclass_val ) { C loc2 = loc1 . negate ( ) ; loc0 . add ( loc2 ) ; } return new GenVector < C > ( concodeclass_modul , loc0 ) ; }"
    },
    {
        "question_id": 1839,
        "intent": "If the child of a structured element is a dictionary , we inspect the child ; we may also draw a tag .",
        "snippet": "void function ( PdfDictionary arg0 ) { inspectChildDictionary ( arg0 , false ) ; }"
    },
    {
        "question_id": 1840,
        "intent": "Return the wrapped datum .",
        "snippet": "T function ( ) { return concodeclass_datum ; }"
    },
    {
        "question_id": 1841,
        "intent": "Get the matcher identifying the target of this match .",
        "snippet": "Matcher function ( ) { return concodeclass__matcher ; }"
    },
    {
        "question_id": 1842,
        "intent": "Apply an `` in '' constraint",
        "snippet": "AuditCriterion concodefunc_function ( Collection arg0 ) { return new InAuditExpression ( concodeclass_propertyNameGetter , arg0 . toArray ( ) ) ; }"
    },
    {
        "question_id": 1843,
        "intent": "Load all resources for the selected type and exclude resource from excludeList",
        "snippet": "List < ResourceGroup > function ( Integer arg0 , List < Integer > arg1 ) { return concodeclass_copyResource . loadResourceGroupsForType ( arg0 , concodeclass_resource . getResource ( ) ) ; }"
    },
    {
        "question_id": 1844,
        "intent": "returns whether this polygon is self-intersecting",
        "snippet": "boolean function ( ) { return isSelfIntersecting ( concodeclass_vertexLoop ) ; }"
    },
    {
        "question_id": 1845,
        "intent": "Returns the name of this method as given by IMethod #getElementName",
        "snippet": "String function ( ) { return concodeclass_fMethodName ; }"
    },
    {
        "question_id": 1846,
        "intent": "Get all functions which are defined on the given resourceType",
        "snippet": "List < AmwFunctionEntity > function ( ResourceTypeEntity arg0 ) { Objects . requireNonNull ( arg0 , \"srini_string\" ) ; ResourceTypeEntity loc0 = concodeclass_resourceTypeRepository . loadWithFunctionsAndMiksForId ( arg0 . getId ( ) ) ; return new ArrayList < > ( loc0 . getFunctions ( ) ) ; }"
    },
    {
        "question_id": 1847,
        "intent": "Verify if NullNode #getInstance actually returns the same object instance",
        "snippet": "void function ( ) { final NullNode loc0 = NullNode . getInstance ( ) ; assertNotNull ( loc0 ) ; assertSame ( loc0 , NullNode . getInstance ( ) ) ; }"
    },
    {
        "question_id": 1848,
        "intent": "Stop the player .",
        "snippet": "void function ( ) { concodeclass_player . stop ( ) ; }"
    },
    {
        "question_id": 1849,
        "intent": "Attempt to resolve the specified property type through reflection .",
        "snippet": "Class function ( String arg0 , String arg1 ) { try { Class loc0 = ReflectHelper . classForName ( arg0 ) ; return concodefunc_getter ( loc0 , arg1 ) . getReturnType ( ) ; } catch ( ClassNotFoundException loc0 ) { throw new MappingException ( \"srini_string\" + arg0 + \"srini_string\" + arg1 , loc0 ) ; } }"
    },
    {
        "question_id": 1850,
        "intent": "Return links the sentence contains .",
        "snippet": "List < String > function ( ) { return concodeclass_links ; }"
    },
    {
        "question_id": 1851,
        "intent": "Sole entry point to application , as always .",
        "snippet": "void function ( String [ ] arg0 ) { String loc0 ; TextIO . putln ( \"srini_string\" ) ; loc0 = TextIO . getln ( ) ; TextIO . putln ( ) ; TextIO . putln ( \"srini_string\" ) ; concodefunc_printCapitalized ( loc0 ) ; }"
    },
    {
        "question_id": 1852,
        "intent": "Collects an event and puts it into the event queue for later processing .",
        "snippet": "void function ( Object arg0 ) { synchronized ( concodeclass_queue ) { if ( ! concodeclass_isCoalesce || ! concodeclass_queue . contains ( arg0 ) ) { concodeclass_queue . addElement ( arg0 ) ; if ( concodeclass_isAlive ) concodefunc_startProcessor ( ) ; } } }"
    },
    {
        "question_id": 1853,
        "intent": "Generates EnumerateIterator.Tuple items with indexes starting at 0 .",
        "snippet": "Iterable4 function ( final Iterable4 arg0 ) { return new Iterable4 ( ) { public Iterator4 concodefunc_iterator ( ) { return new EnumerateIterator ( arg0 . iterator ( ) ) ; } } ; }"
    },
    {
        "question_id": 1854,
        "intent": "Prints a table with x - and y-values for a method",
        "snippet": "void function ( double arg0 , double arg1 , int arg2 , Method arg3 ) { System . out . println ( arg3 ) ; double loc0 = ( arg1 - arg0 ) / ( arg2 - 1 ) ; for ( double loc1 = arg0 ; loc1 <= arg1 ; loc1 += loc0 ) { try { double loc2 = ( Double ) arg3 . invoke ( null , loc1 ) ; System . out . printf ( \"srini_string\" , loc1 , loc2 ) ; } catch ( Exception loc2 ) { loc2 . printStackTrace ( ) ; } } }"
    },
    {
        "question_id": 1855,
        "intent": "Return this file 's metadata .",
        "snippet": "ColumnFileMetaData function ( ) { return concodeclass_metaData ; }"
    },
    {
        "question_id": 1856,
        "intent": "Interrupts the ProcessListener thread and terminates the cluster .",
        "snippet": "void function ( ) { concodeclass_processListener . interrupt ( ) ; try { concodefunc_StopCluster ( true ) ; } catch ( IOException loc0 ) { System . out . println ( \"srini_string\" ) ; System . out . println ( loc0 . toString ( ) ) ; } }"
    },
    {
        "question_id": 1857,
        "intent": "Create a fingerprint per the following spec",
        "snippet": "String function ( BigInteger arg0 , BigInteger arg1 , BigInteger arg2 , BigInteger arg3 ) { byte [ ] loc0 = loc0 ( arg0 , arg1 , arg2 , arg3 ) ; return concodefunc_hexColonDelimited ( Hashing . md5 ( ) . hashBytes ( loc0 ) ) ; }"
    },
    {
        "question_id": 1858,
        "intent": "Get a string that is a comma delimited list of subsystems",
        "snippet": "String function ( Set < SubSystemType > arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; if ( arg0 . size ( ) == 0 ) { return loc0 . toString ( ) ; } for ( SubSystemType loc1 : arg0 ) { loc0 . append ( loc1 . name ( ) ) . append ( \"srini_string\" ) ; } return loc0 . toString ( ) . substring ( 0 , loc0 . length ( ) - 1 ) ; }"
    },
    {
        "question_id": 1859,
        "intent": "Determine if the UI thread is idle",
        "snippet": "boolean function ( ) { return concodeclass_idler . isIdle ( ) ; }"
    },
    {
        "question_id": 1860,
        "intent": "Getter to find out if adding annotations is allowed after signing .",
        "snippet": "boolean function ( ) { return concodeclass_annotationsAllowed ; }"
    },
    {
        "question_id": 1861,
        "intent": "Dispatch the event to the gesture detectors and the pan/zoom controller .",
        "snippet": "void function ( MotionEvent arg0 , boolean arg1 ) { if ( arg1 ) { if ( concodeclass_mGestureDetector . onTouchEvent ( arg0 ) ) { return ; } concodeclass_mScaleGestureDetector . onTouchEvent ( arg0 ) ; if ( concodeclass_mScaleGestureDetector . isInProgress ( ) ) { return ; } } concodeclass_mPanZoomController . handleEvent ( arg0 , ! arg1 ) ; }"
    },
    {
        "question_id": 1862,
        "intent": "Dispatch a keyDown event .",
        "snippet": "void function ( final char arg0 ) { Event loc0 = new Event ( ) ; loc0 . type = SWT . KeyDown ; loc0 . character = arg0 ; new SWTPushEventOperation ( loc0 ) . execute ( ) ; }"
    },
    {
        "question_id": 1863,
        "intent": "Returns the last Block in the subroutine .",
        "snippet": "Block function ( ) { return concodeclass_exit ; }"
    },
    {
        "question_id": 1864,
        "intent": "Run all the tests contained in request . This variant should be used if core has attached listeners that thisrun should notify .",
        "snippet": "Result function ( Request arg0 , JUnitCore arg1 ) { arg1 . addListener ( concodeclass_fHistory . listener ( ) ) ; return arg1 . run ( concodefunc_sortRequest ( arg0 ) . getRunner ( ) ) ; }"
    },
    {
        "question_id": 1865,
        "intent": "Convert character to integer",
        "snippet": "int function ( char arg0 ) { return arg0 - 'A' ; }"
    },
    {
        "question_id": 1866,
        "intent": "Notifie les observers",
        "snippet": "void function ( Figure arg0 ) { concodefunc_setMessageFigure ( arg0 ) ; concodefunc_notifyObservers ( ) ; }"
    },
    {
        "question_id": 1867,
        "intent": "Verifies if the largest of the margin-bottom 's of the ul and it 's last li is selected and added to the padding-bottom of li , because padding-bottom of ul == null .",
        "snippet": "void function ( ) { concodeclass_ul . getCSS ( ) . put ( \"srini_string\" , \"srini_string\" ) ; com . itextpdf . text . List loc0 = ( com . itextpdf . text . List ) concodeclass_orderedUnorderedList . end ( concodeclass_workerContextImpl , concodeclass_ul , concodeclass_listWithTwo ) . get ( 0 ) ; assertEquals ( 100f + 25f , ( ( ListItem ) loc0 . getItems ( ) . get ( 1 ) ) . getSpacingAfter ( ) , 0f ) ; }"
    },
    {
        "question_id": 1868,
        "intent": "The User owning this Subscription .",
        "snippet": "User function ( ) { return ( this . concodeclass_user ) ; }"
    },
    {
        "question_id": 1869,
        "intent": "Visible for testing .",
        "snippet": "void function ( final long arg0 , final TimeUnit arg1 ) { concodeclass_executor . awaitTermination ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 1870,
        "intent": "get this nodes TransInfo",
        "snippet": "TransInfo function ( ) { return concodeclass_transInfo ; }"
    },
    {
        "question_id": 1871,
        "intent": "Method to get the green value from a pixel represented as an int",
        "snippet": "int function ( int arg0 ) { int loc0 = ( arg0 >> 8 ) & 0xff ; return loc0 ; }"
    },
    {
        "question_id": 1872,
        "intent": "Write accessor for SASL token",
        "snippet": "void function ( byte [ ] arg0 ) { this . concodeclass_token = arg0 ; }"
    },
    {
        "question_id": 1873,
        "intent": "Get invalid characters .",
        "snippet": "char [ ] function ( ) { return concodeclass_invalidChars ; }"
    },
    {
        "question_id": 1874,
        "intent": "get a fixed-length random string , its a mixture of uppercase and lowercase letters",
        "snippet": "String function ( int arg0 ) { return concodefunc_getRandom ( concodeclass_LETTERS , arg0 ) ; }"
    },
    {
        "question_id": 1875,
        "intent": "Returns the geometric mean of the available values",
        "snippet": "double function ( ) { return concodefunc_apply ( new GeometricMean ( ) ) ; }"
    },
    {
        "question_id": 1876,
        "intent": "Return the value of a metadata property .",
        "snippet": "byte [ ] function ( String arg0 ) { return concodeclass_header . meta . get ( arg0 ) ; }"
    },
    {
        "question_id": 1877,
        "intent": "Create a ListIterator ListIterator wrappingthe specified CharListIterator CharListIterator . When the given iterator is null , returns null .",
        "snippet": "ListIterator function ( CharListIterator arg0 ) { return null == arg0 ? null : new CharListIteratorListIterator ( arg0 ) ; }"
    },
    {
        "question_id": 1878,
        "intent": "Initialize game . Place 2 instances of 2 anywhere on the board .",
        "snippet": "void function ( int arg0 ) { concodefunc_resetGrid ( arg0 ) ; concodefunc_resetMoved ( arg0 ) ; concodefunc_generateNextCell ( ) ; concodefunc_generateNextCell ( ) ; }"
    },
    {
        "question_id": 1879,
        "intent": "Decrypt with the encryption key and key usage .",
        "snippet": "byte [ ] function ( EncryptedData arg0 , EncryptionKey arg1 , KeyUsage arg2 ) { EncTypeHandler loc0 = concodefunc_getEncHandler ( arg1 . getKeyType ( ) ) ; byte [ ] loc1 = loc0 . decrypt ( arg0 . getCipher ( ) , arg1 . getKeyData ( ) , arg2 . getValue ( ) ) ; return loc1 ; }"
    },
    {
        "question_id": 1880,
        "intent": "Leer una pagina del libro , se actualiza marcador , no se pueeder leer mas del numero de paginas del Libro",
        "snippet": "int function ( ) { int loc0 = this . concodefunc_getMarcador ( ) ; if ( loc0 < this . concodefunc_getNumeroPaginas ( ) ) { loc0 ++ ; this . concodefunc_setMarcador ( loc0 ) ; } return loc0 ; }"
    },
    {
        "question_id": 1881,
        "intent": "If the line is a section header , return the section level , or zero if the line is not a section header",
        "snippet": "int function ( ) { return concodeclass_sectionLevel ; }"
    },
    {
        "question_id": 1882,
        "intent": "Does this LockOptions object define alias-specific lock modes ?",
        "snippet": "boolean function ( ) { return concodeclass_aliasSpecificLockModes != null && ! concodeclass_aliasSpecificLockModes . isEmpty ( ) ; }"
    },
    {
        "question_id": 1883,
        "intent": "There is a global event dispatcher . This method returns it .",
        "snippet": "GnutellaEvents function ( ) { if ( concodeclass_inst == null ) concodeclass_inst = new GnutellaEvents ( ) ; return concodeclass_inst ; }"
    },
    {
        "question_id": 1884,
        "intent": "Get screen width",
        "snippet": "int function ( Context arg0 ) { WindowManager loc0 = ( WindowManager ) arg0 . getSystemService ( Context . WINDOW_SERVICE ) ; DisplayMetrics loc1 = new DisplayMetrics ( ) ; loc0 . getDefaultDisplay ( ) . getMetrics ( loc1 ) ; return loc1 . widthPixels ; }"
    },
    {
        "question_id": 1885,
        "intent": "getTotal : Updated from Project 1 @ 5 DEC 2010 Returns total on top of operands stack . Throws exception that indicates that the input formula was not correct .",
        "snippet": "double function ( ) { if ( concodeclass_operands . size ( ) == 1 && concodeclass_operators . isEmpty ( ) ) return concodeclass_operands . pop ( ) ; if ( concodeclass_operators . size ( ) == 1 ) { if ( concodeclass_operands . size ( ) == 2 ) { return ( ( Operator ) concodeclass_operators . pop ( ) ) . compute ( concodeclass_operands . pop ( ) , concodeclass_operands . pop ( ) ) ; } } throw new ExpressionException ( \"srini_string\" ) ; }"
    },
    {
        "question_id": 1886,
        "intent": "Called once after the initial sorting finished . Note : As of 3.8 a completion proposal computer can request that proposals are resorted . If such a computer is active , then this method will not be called . Clients may override , the default implementation does nothing .",
        "snippet": "void function ( ) { }"
    },
    {
        "question_id": 1887,
        "intent": "Gets the container location",
        "snippet": "Location function ( String arg0 ) { return concodeclass_mockLocation ; }"
    },
    {
        "question_id": 1888,
        "intent": "Gets the field type that represents the upper limit of comparison .",
        "snippet": "DateTimeFieldType function ( ) { return concodeclass_iUpperLimit ; }"
    },
    {
        "question_id": 1889,
        "intent": "Groebner base test .",
        "snippet": "boolean function ( List < GenPolynomial < C >> arg0 ) { return isGB ( 0 , arg0 ) ; }"
    },
    {
        "question_id": 1890,
        "intent": "Copies all bytes in the given source stream to the given destination stream . Neither streams are closed .",
        "snippet": "void function ( InputStream arg0 , OutputStream arg1 ) { int loc0 = 0 ; while ( loc0 != - 1 ) { loc0 = arg0 . read ( concodeclass_fgBuffer , 0 , concodeclass_fgBuffer . length ) ; if ( loc0 != - 1 ) { arg1 . write ( concodeclass_fgBuffer , 0 , loc0 ) ; } } }"
    },
    {
        "question_id": 1891,
        "intent": "Performs a search and groups the resulting SearchMatch es by SearchResultGroup #getCompilationUnit .",
        "snippet": "SearchResultGroup [ ] function ( SearchPattern arg0 , IJavaSearchScope arg1 , IProgressMonitor arg2 , RefactoringStatus arg3 ) { return concodefunc_internalSearch ( new SearchEngine ( ) , arg0 , arg1 , new CollectingSearchRequestor ( ) , arg2 , arg3 ) ; }"
    },
    {
        "question_id": 1892,
        "intent": "Writes String to buffer as c-style string null-terminated",
        "snippet": "int function ( String arg0 ) { int loc0 = concodefunc_getPosition ( ) ; try { this . concodefunc_write ( arg0 . getBytes ( \"srini_string\" ) ) ; } catch ( UnsupportedEncodingException loc1 ) { throw new BSONException ( \"srini_string\" , loc1 ) ; } this . concodefunc_write ( ( byte ) 0x00 ) ; return concodefunc_getPosition ( ) - loc0 ; }"
    },
    {
        "question_id": 1893,
        "intent": "Gets the value of the caller property .",
        "snippet": "String function ( ) { return concodeclass_caller ; }"
    },
    {
        "question_id": 1894,
        "intent": "Create a client Transceiver connecting to the provided URI .",
        "snippet": "Transceiver function ( URI arg0 ) { if ( \"srini_string\" . equals ( arg0 . getScheme ( ) ) ) return new HttpTransceiver ( arg0 . toURL ( ) ) ; else if ( \"srini_string\" . equals ( arg0 . getScheme ( ) ) ) return new SaslSocketTransceiver ( new InetSocketAddress ( arg0 . getHost ( ) , arg0 . getPort ( ) ) ) ; else throw new IOException ( \"srini_string\" + arg0 ) ; }"
    },
    {
        "question_id": 1895,
        "intent": "Serializes the given object into a ByteBuffer backed by the byte array returned by Kryo serialization .",
        "snippet": "ByteBuffer function ( Object arg0 ) { concodeclass_output . clear ( ) ; concodeclass_kryo . writeClassAndObject ( concodeclass_output , arg0 ) ; return ByteBuffer . wrap ( concodeclass_output . getBuffer ( ) , 0 , concodeclass_output . position ( ) ) ; }"
    },
    {
        "question_id": 1896,
        "intent": "Retrieve a default instance of LCM using either the environment variable LCM_DEFAULT_URL or the default . If an exception occurs , System.exit -1 is called .",
        "snippet": "LCM function ( ) { if ( concodeclass_singleton == null ) { try { concodeclass_singleton = new LCM ( ) ; } catch ( Exception loc0 ) { System . err . println ( \"srini_string\" + loc0 ) ; System . exit ( - 1 ) ; return null ; } } return concodeclass_singleton ; }"
    },
    {
        "question_id": 1897,
        "intent": "Truncates a String to the maximum length .",
        "snippet": "String function ( String arg0 ) { if ( concodeclass_fgMaxMessageLength != - 1 && arg0 . length ( ) > concodeclass_fgMaxMessageLength ) { arg0 = arg0 . substring ( 0 , concodeclass_fgMaxMessageLength ) + \"srini_string\" ; } return arg0 ; }"
    },
    {
        "question_id": 1898,
        "intent": "close inputStream",
        "snippet": "void function ( InputStream arg0 ) { if ( arg0 == null ) { return ; } try { arg0 . close ( ) ; } catch ( IOException loc0 ) { throw new RuntimeException ( \"srini_string\" , loc0 ) ; } }"
    },
    {
        "question_id": 1899,
        "intent": "Always throws a SQLException . Not supported .",
        "snippet": "PrintWriter function ( ) { throw new SQLException ( Resources . getMessage ( \"srini_string\" ) ) ; }"
    },
    {
        "question_id": 1900,
        "intent": "Static factory method to create a Criteria using the provided key",
        "snippet": "Criteria function ( String arg0 ) { concodefunc_checkComplete ( ) ; return new Criteria ( this . concodeclass_criteriaChain , ValueNode . toValueNode ( concodefunc_prefixPath ( arg0 ) ) ) ; }"
    },
    {
        "question_id": 1901,
        "intent": "Gets a reader for an IMember 's Javadoc comment content from the source attachment . The content does contain only the text from the comment without the Javadoc leading star characters . Returns null if the member does not contain a Javadoc comment or if no source is available .",
        "snippet": "Reader function ( IMember arg0 , boolean arg1 ) { Reader loc0 = concodefunc_internalGetContentReader ( arg0 ) ; if ( loc0 != null || ! ( arg1 && ( arg0 . getElementType ( ) == IJavaElement . METHOD ) ) ) return loc0 ; return concodefunc_findDocInHierarchy ( ( IMethod ) arg0 , false , false ) ; }"
    },
    {
        "question_id": 1902,
        "intent": "Searches up the parent hierarchy from the given tag for a Tag of the given type",
        "snippet": "Tag function ( Tag arg0 , Class arg1 ) { while ( arg0 != null ) { if ( arg1 . isInstance ( arg0 ) ) { return arg0 ; } arg0 = arg0 . getParent ( ) ; } return null ; }"
    },
    {
        "question_id": 1903,
        "intent": "Replication will be tried numberOfReplicationTimes before target contact is given up .",
        "snippet": "int function ( ) { return concodeclass_numberOfReplicationTries ; }"
    },
    {
        "question_id": 1904,
        "intent": "Returns the lower bound of a type signature . Returns the null type signature if signature is a wildcard or upper bound ? extends T ; returns the signature of the type T of a lower bound ? super T or signature itself if it is not a bound signature .",
        "snippet": "String function ( String arg0 ) { return String . valueOf ( getLowerBound ( arg0 . toCharArray ( ) ) ) ; }"
    },
    {
        "question_id": 1905,
        "intent": "Evaluates the predicate returning true if either predicate returns true .",
        "snippet": "boolean function ( Object arg0 ) { return ( concodeclass_iPredicate1 . evaluate ( arg0 ) || concodeclass_iPredicate2 . evaluate ( arg0 ) ) ; }"
    },
    {
        "question_id": 1906,
        "intent": "Get the matrix for a.",
        "snippet": "GenMatrix < C > function ( BigInteger arg0 ) { C loc0 = concodeclass_coFac . fromInteger ( arg0 ) ; return concodeclass_ONE . scalarMultiply ( loc0 ) ; }"
    },
    {
        "question_id": 1907,
        "intent": "Sets an listener for execution data .",
        "snippet": "void function ( final IExecutionDataVisitor arg0 ) { this . concodeclass_executionDataVisitor = arg0 ; }"
    },
    {
        "question_id": 1908,
        "intent": "Sets the RichMediaActivation dictionary specifying the style of presentation , default script behavior , default view information , and animation style when the annotation is activated . Part of the RichMediaSettings .",
        "snippet": "void function ( RichMediaActivation arg0 ) { concodeclass_richMediaSettings . put ( PdfName . ACTIVATION , arg0 ) ; }"
    },
    {
        "question_id": 1909,
        "intent": "Get a Local element from a long value .",
        "snippet": "Local < C > function ( long arg0 ) { return new Local < C > ( this , concodeclass_ring . fromInteger ( arg0 ) ) ; }"
    },
    {
        "question_id": 1910,
        "intent": "Creates a hash using a specific digest algorithm and a provider .",
        "snippet": "byte [ ] function ( InputStream arg0 , String arg1 , String arg2 ) { MessageDigest loc0 = concodefunc_getMessageDigest ( arg1 , arg2 ) ; return digest ( arg0 , loc0 ) ; }"
    },
    {
        "question_id": 1911,
        "intent": "Removes the last returned element from the collection that spawned the underlying iterator .",
        "snippet": "void function ( ) { concodefunc_getIterator ( ) . remove ( ) ; }"
    },
    {
        "question_id": 1912,
        "intent": "Init the client .",
        "snippet": "void function ( ) { concodeclass_innerClient = new DefaultInternalKrbClient ( concodeclass_krbSetting ) ; concodeclass_innerClient . init ( ) ; }"
    },
    {
        "question_id": 1913,
        "intent": "COMMON",
        "snippet": "Rectangle function ( Object arg0 ) { Rectangle loc0 = new Rectangle ( 0 , 0 , 0 , 0 ) ; try { Method loc1 = arg0 . getClass ( ) . getDeclaredMethod ( \"srini_string\" , null ) ; loc1 . setAccessible ( true ) ; loc0 = ( Rectangle ) loc1 . invoke ( arg0 , null ) ; } catch ( Throwable loc1 ) { } return loc0 ; }"
    },
    {
        "question_id": 1914,
        "intent": "Creates two tables . The second table has 1 header row and it should skip the first header . 1 line of table 2 should be on page 1 , the rest on page 2 .",
        "snippet": "void function ( ) { final String loc0 = \"srini_string\" ; concodefunc_createDocument ( loc0 , 2 , 10 , \"srini_string\" , true , true ) ; }"
    },
    {
        "question_id": 1915,
        "intent": "Put this widget and its current state into the map",
        "snippet": "IWidgetState function ( Widget arg0 ) { return put ( arg0 , WidgetState . create ( arg0 ) ) ; }"
    },
    {
        "question_id": 1916,
        "intent": "Returns the actual string value .",
        "snippet": "String function ( ) { return concodeclass_fValue ; }"
    },
    {
        "question_id": 1917,
        "intent": "Has to be called BEFORE any event is being processed to check if the next interval has begun .",
        "snippet": "void function ( ) { if ( ! concodefunc_isActive ( ) ) return ; concodefunc_progressIntervals ( Simulator . getCurrentTime ( ) ) ; }"
    },
    {
        "question_id": 1918,
        "intent": "Get a Residue element from a BigInteger value .",
        "snippet": "Residue < C > function ( java . math . BigInteger arg0 ) { return new Residue < C > ( this , concodeclass_ring . fromInteger ( arg0 ) ) ; }"
    },
    {
        "question_id": 1919,
        "intent": "Clears the mapping between the raName and the resource adapter identifier , with which the resource adapter is registered with the org.jboss.jca.core.spi.rar.ResourceAdapterRepository Subsequent calls to #getRegisteredResourceAdapterIdentifier String with the passed raName returnnull",
        "snippet": "void function ( final String arg0 ) { synchronized ( concodeclass_resourceAdapterRepositoryIdentifiers ) { concodeclass_resourceAdapterRepositoryIdentifiers . remove ( arg0 ) ; } }"
    },
    {
        "question_id": 1920,
        "intent": "Moves this line by a given amount .",
        "snippet": "void function ( double arg0 , double arg1 ) { concodeclass_x1 += arg0 ; concodeclass_y1 += arg1 ; concodeclass_x2 += arg0 ; concodeclass_y2 += arg1 ; Canvas . getInstance ( ) . repaint ( ) ; }"
    },
    {
        "question_id": 1921,
        "intent": "rolls the camera",
        "snippet": "void function ( double arg0 ) { VectorXYZ loc0 = concodefunc_getViewDirection ( ) ; concodeclass_up = concodeclass_up . rotateVec ( arg0 , loc0 ) ; }"
    },
    {
        "question_id": 1922,
        "intent": "Set the children of the tree",
        "snippet": "void function ( TreeNode arg0 , TreeNode arg1 ) { concodeclass_left = arg0 ; concodeclass_right = arg1 ; }"
    },
    {
        "question_id": 1923,
        "intent": "Returns an unmodifiable version of the given non-null DoubleListIterator .",
        "snippet": "DoubleListIterator function ( DoubleListIterator arg0 ) { if ( null == arg0 ) { throw new NullPointerException ( ) ; } return UnmodifiableDoubleListIterator . wrap ( arg0 ) ; }"
    },
    {
        "question_id": 1924,
        "intent": "Outputs the lines to the document . It is equivalent to go false .",
        "snippet": "int function ( ) { return go ( false ) ; }"
    },
    {
        "question_id": 1925,
        "intent": "Called when the document starts to be parsed .",
        "snippet": "void function ( ) { concodeclass_fileSpec = \"srini_string\" ; }"
    },
    {
        "question_id": 1926,
        "intent": "Copies a slice of the list into a native array . Note that this will NOT pop them out of the stack .",
        "snippet": "void function ( double [ ] arg0 ) { concodeclass__list . toNativeArray ( arg0 , 0 , concodefunc_size ( ) ) ; }"
    },
    {
        "question_id": 1927,
        "intent": "Mark a client as hidden .",
        "snippet": "boolean function ( String arg0 , boolean arg1 ) { return concodefunc_updateClientMembership ( concodeclass_PREF_HIDDEN_CLIENT_GUIDS , concodeclass_hiddenClients , arg0 , arg1 ) ; }"
    },
    {
        "question_id": 1928,
        "intent": "Compares two CanVID and if all value until the n-1 number are common the return value is true . So it is true , if all parents are common",
        "snippet": "boolean function ( CanVID arg0 ) { if ( concodeclass_VID . size ( ) != arg0 . getVIDList ( ) . size ( ) ) return false ; for ( int loc0 = 0 ; loc0 < concodeclass_VID . size ( ) - 1 ; loc0 ++ ) { if ( ! concodeclass_VID . get ( loc0 ) . toString ( ) . equals ( arg0 . getVIDList ( ) . get ( loc0 ) . toString ( ) ) ) return false ; } return true ; }"
    },
    {
        "question_id": 1929,
        "intent": "Runs the tests and collects their result in a TestResult .",
        "snippet": "void function ( TestResult arg0 ) { for ( Enumeration loc0 = concodefunc_tests ( ) ; loc0 . hasMoreElements ( ) ; ) { if ( arg0 . shouldStop ( ) ) break ; Test loc1 = ( Test ) loc0 . nextElement ( ) ; concodefunc_runTest ( loc1 , arg0 ) ; } }"
    },
    {
        "question_id": 1930,
        "intent": "Retrieves the pnpEnabled value .",
        "snippet": "boolean function ( ) { return concodeclass_pnpEnabled ; }"
    },
    {
        "question_id": 1931,
        "intent": "Product of this vector with scalar .",
        "snippet": "GenVector < C > function ( C arg0 ) { ArrayList < C > loc0 = new ArrayList < C > ( concodeclass_modul . cols ) ; for ( C loc1 : concodeclass_val ) { C loc2 = loc1 . multiply ( arg0 ) ; loc0 . add ( loc2 ) ; } return new GenVector < C > ( concodeclass_modul , loc0 ) ; }"
    },
    {
        "question_id": 1932,
        "intent": "Puts the given collection of keys into this map according to the contract of #put Object , Object , Predicate . The values will be set to null . The keys are added in the order of the collection 's iterator . Each key of keys is tested individually with keyPredicate and can be added only if the predicate holds .",
        "snippet": "void function ( final Collection < ? extends K > arg0 , final Predicate < ? super K > arg1 ) { for ( final K loc0 : arg0 ) { concodefunc_put ( loc0 , null , arg1 , null ) ; } }"
    },
    {
        "question_id": 1933,
        "intent": "Topologische Position",
        "snippet": "Coords function ( ) { return this . concodeclass_position . getTopoCoords ( ) ; }"
    },
    {
        "question_id": 1934,
        "intent": "Get the index that numbers this base string .",
        "snippet": "int function ( String arg0 ) { Integer loc0 = ( Integer ) concodeclass__seen . get ( arg0 ) ; if ( loc0 == null ) { loc0 = new Integer ( 0 ) ; } else { loc0 = new Integer ( loc0 . intValue ( ) + 1 ) ; } concodeclass__seen . put ( arg0 , loc0 ) ; return loc0 . intValue ( ) ; }"
    },
    {
        "question_id": 1935,
        "intent": "no-op method - this renderer is n't interested in image events",
        "snippet": "void function ( ImageRenderInfo arg0 ) { }"
    },
    {
        "question_id": 1936,
        "intent": "Gets the exception Class .",
        "snippet": "Class function ( ) { return concodeclass_clz ; }"
    },
    {
        "question_id": 1937,
        "intent": "Create a name-already-bound exception .",
        "snippet": "NameAlreadyBoundException function ( final Name arg0 ) { return new NameAlreadyBoundException ( arg0 . toString ( ) ) ; }"
    },
    {
        "question_id": 1938,
        "intent": "Obtains value of the CoreProtocolPNames #HTTP_MALFORMED_INPUT_ACTION parameter .",
        "snippet": "CodingErrorAction function ( final HttpParams arg0 ) { Args . notNull ( arg0 , \"srini_string\" ) ; final Object loc0 = arg0 . getParameter ( CoreProtocolPNames . HTTP_MALFORMED_INPUT_ACTION ) ; if ( loc0 == null ) { return CodingErrorAction . REPORT ; } return ( CodingErrorAction ) loc0 ; }"
    },
    {
        "question_id": 1939,
        "intent": "Retrieves a message with no arguments .",
        "snippet": "String function ( String arg0 ) { return concodeclass_rb . getString ( arg0 ) ; }"
    },
    {
        "question_id": 1940,
        "intent": "Returns the source index of this type variable maplet .",
        "snippet": "int function ( ) { return concodeclass_fSourceIndex ; }"
    },
    {
        "question_id": 1941,
        "intent": "returns the number of vertices in this polygon . The duplicated first/last vertex is not counted twice , so the result is equivalent to #getVertices . size .",
        "snippet": "int function ( ) { return concodeclass_vertexLoop . size ( ) - 1 ; }"
    },
    {
        "question_id": 1942,
        "intent": "Sets the value of the syncLevel property .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_syncLevel = arg0 ; }"
    },
    {
        "question_id": 1943,
        "intent": "returns this triangle if it is clockwise , or the reversed triangle if it is counterclockwise .",
        "snippet": "TriangleXZ function ( ) { return concodefunc_makeRotationSense ( false ) ; }"
    },
    {
        "question_id": 1944,
        "intent": "Adds or replaces a page label . There is no text prefix and the first logical page has the default of 1 .",
        "snippet": "void function ( int arg0 , int arg1 ) { addPageLabel ( arg0 , arg1 , null , 1 ) ; }"
    },
    {
        "question_id": 1945,
        "intent": "Check that the user is app_developer or config_admin : app_developer : can edit properties of instances of APPLICATION config_admin : can edit all properties .",
        "snippet": "boolean function ( Integer arg0 ) { ResourceTypeEntity loc0 = concodeclass_entityManager . find ( ResourceTypeEntity . class , arg0 ) ; return concodeclass_permissionService . hasPermissionToEditPropertiesOfResource ( loc0 ) ; }"
    },
    {
        "question_id": 1946,
        "intent": "gives the number of all received messages",
        "snippet": "double [ ] function ( LinkedHashMap < CanOverlayID , CanNode > arg0 ) { double loc0 = concodeclass_receivedMsg * Simulator . MINUTE_UNIT / CanConfig . intervallBetweenStatistics ; double loc1 = loc0 / arg0 . size ( ) ; concodeclass_receivedMsg = 0 ; double [ ] loc2 = { loc0 , loc1 } ; return loc2 ; }"
    },
    {
        "question_id": 1947,
        "intent": "Set the context attribute key for the attribute .",
        "snippet": "void function ( String arg0 ) { this . concodeclass_fromKey = arg0 ; }"
    },
    {
        "question_id": 1948,
        "intent": "Get iterator of list elements .",
        "snippet": "ListElement function ( int arg0 ) { return concodeclass_listElements . get ( arg0 ) ; }"
    },
    {
        "question_id": 1949,
        "intent": "Returns the name of the described extension .",
        "snippet": "String function ( ) { return concodeclass_fName ; }"
    },
    {
        "question_id": 1950,
        "intent": "Local multiplication .",
        "snippet": "Local < C > function ( Local < C > arg0 ) { if ( arg0 == null || arg0 . isZERO ( ) ) { return arg0 ; } if ( concodeclass_num . isZERO ( ) ) { return this ; } if ( arg0 . isONE ( ) ) { return this ; } if ( this . concodefunc_isONE ( ) ) { return arg0 ; } C loc0 = concodeclass_num . multiply ( arg0 . num ) ; C loc1 = concodeclass_den . multiply ( arg0 . den ) ; return new Local < C > ( concodeclass_ring , loc0 , loc1 , false ) ; }"
    },
    {
        "question_id": 1951,
        "intent": "Returns an array of SortedMap objects . The SortedMap object key is the ColumnName and the value is the ColumnValue . SortedMap was created using the CASE_INSENSITIVE_ORDER Comparator so the key is the case insensitive representation of the ColumnName .",
        "snippet": "SortedMap [ ] function ( ) { if ( concodeclass_rowMap == null ) { return null ; } return ( SortedMap [ ] ) concodeclass_rowMap . toArray ( new SortedMap [ 0 ] ) ; }"
    },
    {
        "question_id": 1952,
        "intent": "Appends a rectangle to the current path as a complete subpath .",
        "snippet": "void function ( final float arg0 , final float arg1 , final float arg2 , final float arg3 ) { concodefunc_moveTo ( arg0 , arg1 ) ; concodefunc_lineTo ( arg0 + arg2 , arg1 ) ; concodefunc_lineTo ( arg0 + arg2 , arg1 + arg3 ) ; concodefunc_lineTo ( arg0 , arg1 + arg3 ) ; concodefunc_closeSubpath ( ) ; }"
    },
    {
        "question_id": 1953,
        "intent": "Cierra el Libro y retorna numero paginas para finalizar",
        "snippet": "int function ( ) { return this . concodefunc_getNumeroPaginas ( ) - this . concodefunc_getMarcador ( ) ; }"
    },
    {
        "question_id": 1954,
        "intent": "Compare to BigInteger b.",
        "snippet": "int function ( BigInteger arg0 ) { return concodeclass_val . compareTo ( arg0 . val ) ; }"
    },
    {
        "question_id": 1955,
        "intent": "Given a mouse accelerator , extract the button value . For use in synthesizing raw events .",
        "snippet": "int function ( int arg0 ) { arg0 &= concodeclass_BUTTON_MASK ; if ( ( arg0 & SWT . BUTTON1 ) == SWT . BUTTON1 ) return MouseConfig . PRIMARY_BUTTON ; if ( ( arg0 & SWT . BUTTON2 ) == SWT . BUTTON2 ) return 2 ; if ( ( arg0 & SWT . BUTTON3 ) == SWT . BUTTON3 ) return MouseConfig . SECONDARY_BUTTON ; return 0 ; }"
    },
    {
        "question_id": 1956,
        "intent": "adds a string parameter to the request",
        "snippet": "void function ( String arg0 , String arg1 ) { concodeclass_boundary ( ) ; concodefunc_writeName ( arg0 ) ; concodefunc_newline ( ) ; concodefunc_newline ( ) ; concodefunc_writeln ( arg1 ) ; }"
    },
    {
        "question_id": 1957,
        "intent": "Returns a BooleanComparator instance that sorts false values before true values . Clients are encouraged to use the value returned from this method instead of constructing a new instance to reduce allocation and garbage collection overhead when multiple BooleanComparators may be used in the same virtual machine .",
        "snippet": "BooleanComparator function ( ) { return concodeclass_FALSE_FIRST ; }"
    },
    {
        "question_id": 1958,
        "intent": "Trim the collections used in this Ppt .",
        "snippet": "void function ( ) { for ( VarInfo loc0 : concodeclass_var_infos ) { loc0 . trimToSize ( ) ; } }"
    },
    {
        "question_id": 1959,
        "intent": "Adds part .",
        "snippet": "void function ( XMPMeta arg0 , String arg1 ) { arg0 . setProperty ( XMPConst . NS_PDFA_ID , PdfAProperties . PART , arg1 ) ; }"
    },
    {
        "question_id": 1960,
        "intent": "Create a name-not-found exception .",
        "snippet": "NameNotFoundException function ( final String arg0 , final Name arg1 ) { return NamingLogger . ROOT_LOGGER . nameNotFoundInContext ( arg0 , arg1 ) ; }"
    },
    {
        "question_id": 1961,
        "intent": "Set player color .",
        "snippet": "void function ( int arg0 , Color arg1 ) { if ( arg0 == 1 ) { concodeclass_playerOne . setColor ( arg1 ) ; } else { concodeclass_playerTwo . setColor ( arg1 ) ; } }"
    },
    {
        "question_id": 1962,
        "intent": "Asynchronously executes the specified batch statement . Inputs will be passed to the #handler once query succeed or failed .",
        "snippet": "SettableFuture < T > function ( final Statement arg0 , final T arg1 ) { return execAsync ( arg0 , arg1 , concodeclass_handler ) ; }"
    },
    {
        "question_id": 1963,
        "intent": "Debug-Ausgabe",
        "snippet": "void function ( Object arg0 ) { }"
    },
    {
        "question_id": 1964,
        "intent": "Accesses this Card 's suit .",
        "snippet": "String function ( ) { return concodeclass_suit ; }"
    },
    {
        "question_id": 1965,
        "intent": "Creates a box representing the glue type according to the `` glue rules '' based on the atom types between which the glue must be inserted .",
        "snippet": "Box function ( int arg0 , int arg1 , TeXEnvironment arg2 ) { int loc0 = ( arg0 > TeXConstants . TYPE_INNER ? TeXConstants . TYPE_ORDINARY : arg0 ) ; int loc1 = ( arg1 > TeXConstants . TYPE_INNER ? TeXConstants . TYPE_ORDINARY : arg1 ) ; int loc2 = concodeclass_glueTable [ loc0 ] [ loc1 ] [ arg2 . getStyle ( ) / 2 ] ; return concodeclass_glueTypes [ loc2 ] . createBox ( arg2 ) ; }"
    },
    {
        "question_id": 1966,
        "intent": "Send a #VERBOSE log message .",
        "snippet": "int function ( String arg0 , String arg1 , Object ... arg2 ) { if ( concodefunc_isLoggable ( arg0 , concodeclass_VERBOSE ) ) { return Log . v ( arg0 , String . arg1 ( arg1 , arg2 ) ) ; } return 0 ; }"
    },
    {
        "question_id": 1967,
        "intent": "Create an FloatListIterator FloatListIterator wrappingthe specified ListIterator ListIterator . When the given iterator is null , returns null .",
        "snippet": "FloatListIterator function ( ListIterator arg0 ) { return null == arg0 ? null : new ListIteratorFloatListIterator ( arg0 ) ; }"
    },
    {
        "question_id": 1968,
        "intent": "Gets the value of the structure property . This accessor method returns a reference to the live list , not a snapshot . Therefore any modification you make to the returned list will be present inside the JAXB object . This is why there is not a set method for the structure property . For example , to add a new item , do as follows : getStructure . add newItem ; Objects of the following type s are allowed in the list ApplicationReleaseBinding",
        "snippet": "List < ApplicationReleaseBinding > function ( ) { if ( concodeclass_structure == null ) { concodeclass_structure = new ArrayList < ApplicationReleaseBinding > ( ) ; } return this . concodeclass_structure ; }"
    },
    {
        "question_id": 1969,
        "intent": "Test method for com.flatironschool.javacs.MyLinearMap #put java.lang.Object , java.lang.Object .",
        "snippet": "void function ( ) { concodeclass_map . put ( \"srini_string\" , 11 ) ; assertThat ( concodeclass_map . size ( ) , is ( 4 ) ) ; assertThat ( concodeclass_map . get ( \"srini_string\" ) , is ( 11 ) ) ; concodeclass_map . put ( \"srini_string\" , 5 ) ; assertThat ( concodeclass_map . size ( ) , is ( 5 ) ) ; assertThat ( concodeclass_map . get ( \"srini_string\" ) , is ( 5 ) ) ; }"
    },
    {
        "question_id": 1970,
        "intent": "Check whether the Log4j Logger used is enabled for ERROR priority .",
        "snippet": "boolean function ( ) { if ( concodeclass_is12 ) { return concodefunc_getLogger ( ) . isEnabledFor ( ( Priority ) Level . ERROR ) ; } else { return concodefunc_getLogger ( ) . isEnabledFor ( Level . ERROR ) ; } }"
    },
    {
        "question_id": 1971,
        "intent": "Insert entity without transaction .",
        "snippet": "long function ( @ NonNull Class < T > arg0 , @ NonNull T arg1 ) { AbstractModel < T > loc0 = concodefunc_getModelInstanceOrThrow ( arg0 ) ; return loc0 . insert ( arg1 ) ; }"
    },
    {
        "question_id": 1972,
        "intent": "Adds a reference to an embedded file . Part of the RichMediaContent .",
        "snippet": "PdfIndirectReference function ( String arg0 , PdfIndirectReference arg1 ) { if ( concodeclass_views == null ) throw new IllegalPdfSyntaxException ( \"srini_string\" ) ; concodeclass_assetsmap . put ( arg0 , arg1 ) ; return arg1 ; }"
    },
    {
        "question_id": 1973,
        "intent": "Returns current position in output",
        "snippet": "int function ( ) { return concodeclass_position ; }"
    },
    {
        "question_id": 1974,
        "intent": "Access to invoke a method on the class that this fast class handles",
        "snippet": "Object function ( String arg0 , Class [ ] arg1 , Object arg2 , Object [ ] arg3 ) { return this . invoke ( this . concodefunc_getIndex ( arg0 , arg1 ) , arg2 , arg3 ) ; }"
    },
    {
        "question_id": 1975,
        "intent": "Returns whether this save helper did actually save any files .",
        "snippet": "boolean function ( ) { return concodeclass_fFilesSaved ; }"
    },
    {
        "question_id": 1976,
        "intent": "Add an Integrator to be applied to the bootstrap registry .",
        "snippet": "BootstrapServiceRegistryBuilder function ( Integrator arg0 ) { concodeclass_providedIntegrators . add ( arg0 ) ; return this ; }"
    },
    {
        "question_id": 1977,
        "intent": "Send WS_SUBSCRIBE command to WsService to subscribe to topic in websocket .",
        "snippet": "void function ( Context arg0 , String arg1 ) { arg0 . startService ( new Intent ( arg0 , WsService . class ) . putExtra ( Consts . WsConstant . WS_SUBSCRIBE , arg1 ) ) ; }"
    },
    {
        "question_id": 1978,
        "intent": "The nin operator is similar to $ in except that it selects objects for which the specified field does not have any value in the specified array .",
        "snippet": "Criteria function ( Object ... arg0 ) { return nin ( Arrays . asList ( arg0 ) ) ; }"
    },
    {
        "question_id": 1979,
        "intent": "If the given Object is no Array , it 's toString - method is invoked . Primitive type - Arrays and Object - Arrays are introspected using java.lang.reflect.Array . Convention for creation fo String - representation :",
        "snippet": "String function ( final Object arg0 ) { String loc0 = StringUtil . arrayToString ( arg0 , \"srini_string\" ) ; return loc0 ; }"
    },
    {
        "question_id": 1980,
        "intent": "Returns the change used by this operation . This is either the change passed to the constructor or the one create by the CreateChangeOperation . Method returns null if the create operation did not create a corresponding change or has n't been executed yet .",
        "snippet": "Change function ( ) { return concodeclass_fChange ; }"
    },
    {
        "question_id": 1981,
        "intent": "Currently DefaultKeyFactory returns just first element of list .",
        "snippet": "String function ( List < Object > arg0 ) { if ( arg0 . size ( ) != 1 ) throw new RuntimeException ( \"srini_string\" ) ; return ( String ) arg0 . get ( 0 ) ; }"
    },
    {
        "question_id": 1982,
        "intent": "Return a base64-encoded string value as a byte array .",
        "snippet": "byte [ ] function ( String arg0 ) { String loc0 = ( String ) this . concodeclass_object . get ( arg0 ) ; if ( loc0 == null ) { return null ; } return Base64 . decodeBase64 ( loc0 ) ; }"
    },
    {
        "question_id": 1983,
        "intent": "Gets the value of the translation property .",
        "snippet": "String function ( ) { return concodeclass_translation ; }"
    },
    {
        "question_id": 1984,
        "intent": "Provides a string representation of this instance suitable for human consumption .",
        "snippet": "String function ( ) { return \"srini_string\" + this . concodeclass_requestDate + \"srini_string\" + this . concodeclass_responseDate + \"srini_string\" + this . concodeclass_statusLine + \"srini_string\" ; }"
    },
    {
        "question_id": 1985,
        "intent": "Returns how close Randoop is to being done , as a percentage between 0 and 100 .",
        "snippet": "double function ( ) { return concodeclass_percentDone ; }"
    },
    {
        "question_id": 1986,
        "intent": "moves pos and lookAt forward in the map plane",
        "snippet": "void function ( double arg0 ) { VectorXYZ loc0 = concodefunc_getViewDirection ( ) ; VectorXZ loc1 = new VectorXZ ( loc0 . x , loc0 . z ) . normalize ( ) ; concodefunc_move ( loc1 . x * arg0 , 0 , loc1 . z * arg0 ) ; }"
    },
    {
        "question_id": 1987,
        "intent": "Create a graph . This is just another method for creating the graph data structure .",
        "snippet": "void function ( int arg0 ) { concodeclass_nodes = new Vertex [ arg0 ] ; Vertex loc0 = null ; for ( int loc1 = arg0 - 1 ; loc1 >= 0 ; loc1 -- ) { Vertex loc2 = concodeclass_nodes [ loc1 ] = new Vertex ( loc0 , arg0 ) ; loc0 = loc2 ; } concodefunc_addEdges ( arg0 ) ; }"
    },
    {
        "question_id": 1988,
        "intent": "Convert the abstract location into a concrete area , relative to the given Component . If a point has been specified , returns a 1x1 rectangle , otherwise returns the a rectangle at 0 , 0 of the Component 's size .",
        "snippet": "Rectangle function ( Component arg0 ) { if ( concodeclass_where == null ) return new Rectangle ( 0 , 0 , arg0 . getWidth ( ) , arg0 . getHeight ( ) ) ; return new Rectangle ( concodeclass_where . x , concodeclass_where . y , 1 , 1 ) ; }"
    },
    {
        "question_id": 1989,
        "intent": "Returns a boolean indicating if the X ordinate value of the ProjCoordinate provided as an ordinate is equal to the X ordinate value of this ProjCoordinate . Because we are working with floating point numbers the ordinates are considered equal if the difference between them is less than the specified tolerance .",
        "snippet": "boolean function ( ProjCoordinate arg0 , double arg1 ) { double loc0 = arg0 . x - this . concodeclass_x ; if ( loc0 > arg1 ) { return false ; } else { return true ; } }"
    },
    {
        "question_id": 1990,
        "intent": "Determines if a candidate ReflectClass is a collection",
        "snippet": "boolean function ( ReflectClass arg0 ) { Iterator4 loc0 = concodeclass__collectionPredicates . iterator ( ) ; while ( loc0 . moveNext ( ) ) { if ( ( ( ReflectClassPredicate ) loc0 . current ( ) ) . match ( arg0 ) ) { return true ; } } return concodeclass__delegate . isCollection ( arg0 . getDelegate ( ) ) ; }"
    },
    {
        "question_id": 1991,
        "intent": "Decrypt the Encrypted JWT",
        "snippet": "void function ( EncryptedJWT arg0 ) { try { JWEDecrypter loc0 = concodefunc_getDecrypter ( ) ; arg0 . decrypt ( loc0 ) ; } catch ( JOSEException | KrbException loc0 ) { throw new IOException ( \"srini_string\" , loc0 ) ; } }"
    },
    {
        "question_id": 1992,
        "intent": "Is this instant after the millisecond instant passed in comparing solely by millisecond .",
        "snippet": "boolean function ( long arg0 ) { return ( getMillis ( ) > arg0 ) ; }"
    },
    {
        "question_id": 1993,
        "intent": "Set to allow TCP or not .",
        "snippet": "void function ( boolean arg0 ) { concodeclass_startupOptions . add ( KdcServerOption . ALLOW_TCP , arg0 ) ; }"
    },
    {
        "question_id": 1994,
        "intent": "Checking if the value of y is larger than variable ground .",
        "snippet": "boolean function ( ) { if ( concodeclass_y > concodeclass_ground - 5 ) { concodeclass_y = concodeclass_ground + 5 ; return true ; } else { return false ; } }"
    },
    {
        "question_id": 1995,
        "intent": "Initializes resources . This must be called before DashboardResources #getResources . This allows us to avoid an evil static initializer that would pollute all the getResources call sites .",
        "snippet": "void function ( ) { concodeclass_resources = GWT . create ( Resources . class ) ; StyleInjector . inject ( concodeclass_resources . dashboardCss ( ) . getText ( ) + concodeclass_resources . latencyDashboardChartCss ( ) . getText ( ) + concodeclass_resources . rightPieChartCss ( ) . getText ( ) + concodeclass_resources . warningPaneCss ( ) . getText ( ) ) ; }"
    },
    {
        "question_id": 1996,
        "intent": "Returns a ScheduledExecutorService that wraps ables before submission to the passed in ScheduledExecutorService .",
        "snippet": "ScheduledExecutorService function ( final ScheduledExecutorService arg0 ) { return new ContextScheduledExecutorService ( arg0 ) ; }"
    },
    {
        "question_id": 1997,
        "intent": "Attempts to transform the Object against the map of NumberTransformers . Otherwise it returns Double.NaN .",
        "snippet": "double function ( Object arg0 ) { double loc0 = Double . NaN ; if ( arg0 instanceof Number || arg0 instanceof String ) { loc0 = concodeclass_defaultTransformer . transform ( arg0 ) ; } else { NumberTransformer loc1 = concodefunc_getTransformer ( arg0 . getClass ( ) ) ; if ( loc1 != null ) { loc0 = loc1 . transform ( arg0 ) ; } } return loc0 ; }"
    },
    {
        "question_id": 1998,
        "intent": "Returns a transaction id which is based on tid calculated the same all the time . Variables which are part of the calculation are inet local host address . Xid format is static value 4660 .",
        "snippet": "Xid function ( int arg0 ) { int loc0 = 0 ; int loc1 = arg0 ; int loc2 = 42 ; return concodefunc_getXid ( loc0 , loc1 , loc2 ) ; }"
    },
    {
        "question_id": 1999,
        "intent": "Lock the chain so no more iterators can be added . This must be called from all Iterator interface methods .",
        "snippet": "void function ( ) { if ( concodeclass_isLocked == false ) { concodeclass_isLocked = true ; } }"
    },
    {
        "question_id": 2000,
        "intent": "Adds a return .",
        "snippet": "void function ( NativeSQLQueryReturn arg0 ) { concodeclass_queryReturns . add ( arg0 ) ; }"
    }
]